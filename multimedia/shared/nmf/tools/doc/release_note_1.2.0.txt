**********************************************************
* Nomadik Multiprocessing Framework (version 1.2.0)      *
**********************************************************
	"Compilé, c'est gagné" (M. Guene)
	"La doc, c'est le code" (J.-P. Fassino)

This delivery is an engineering release and must be used **carefully** since:
	- it's based on new BINUTILS MMDSP compiler
	- no integration in Nomadik Toolset is planned for this release,
	- no integration in Host OS (Symbian, Linux) is planned for this release,
	- test suite not covered each new features.
	
The release comprises one .tgz file holding the following features:
	- Component manager binary & api
 	- Synchronous & Hybrid execution engine binaries
 	- Nomadik Multiprocessing Environment API 
 	- Component tool chain binary
 	- Example source codes (Hello World's, Training, Mandelbrot's, mp3, User Fifo, Jpeg)
 		Hello world and mp3 Eclipse project file delivered
 	- Documentations (User guide, programming model, CM API, MPC API)
 		User guide not fully in line with delivery
 
Sources are delivered in another .tgz.

Supported target:
	- STn8815 SAA & SVA Cut A0/B0/C0
	- STn8820 SAA & SVA & SIA Cut A0
	
Supported environments:
	- nmf_Bare: 	based on Nomadik HCL/services libraries (only on STn8815 board)
		Based on label HCL/services NOI_BASE_V6.16.1
		This environment is deprecated and will be removed as soon as CSD/Audio 
		team switch to another environment.
	- nmf_Think:	based on Think open source component-based OS


Changes:
--------
[CM]
	- Allow optimized static binding between client and singleton server. For that:
		* Declare server component as singleton (you can also declare provided interface
		  as unambiguous in order to avoid METH() use in your component).
		  	primitive comp singleton
		  	provides boo.bar  as zooserver unambiguous
		* Declare required interface as static in your client component.
			requires boo.bar  as zooclient static 
		* use CM_BindComponent() to create optimized binding.

	- Load ELF binary component named "component.elf4nmf" generated by MMDSP
	  toolchain. This file is a elf file where some information not used by CM 
	  have been removed in order to decrease embedded file system consumption.
	  Note: component.elf must be used by debugger since debug informations have
	        been removed in .elf4nmf file.
	        
	- Component repository path no more handle. This functionality must be handle by 
	  user (by collapsing all paths in one) or by OS integrator in order to read
	  component from different file system directories.

[MPC Executive Engine]
	- Execution engine rearchitect as a pure component which provides and requires
	  interfaces defined through IDL.
	
[OS integration]
	
[Tools] 
	- Add STxp70 (xp70) target for static ".arch" composition and executable 
	  generation.
	  
	- Optimize binding in static component composition by sharing interface
	  descriptor and removing indirection in intra-composite binding.
	  
	- NMF elf header section fully changed (see documentation).
	
[Programming model]
	- Add unambiguous concept in order to avoid METH use for component where 
	  user ensure itself that no name conflict could occur. This future could
	  be very useful for code legacy componentization.
	  
	- Interface handler must be of type "exception.handler".

[MMDSP optimization introduced by BinUtils]
	- Remove init function code; this functionality now ensure by CM which
	  perform remote relocation.
	  
	- PID code generation removed in singleton avoiding indirection when
	  accessing data (no THIS required for these components).
	  
	- 
	  Thus, XROM and YROM no longer need to be defined.

	- Attributes could be declared every where in memory (TCM, ESRAM, SDRAM).
	  Furthermore, attributes can be declared as constant.
		

Bug fixes:
---------
 	

Known Issues:
-------------


Notes:
------
	- Inter-MPC distribution not supported due to hardware limitation on STn8815A0
	- No cross calling between ESRAM and SDRAM Code
		A component code must fit in one memory segment only. Split your component into two
		sub components to achieve that. This limitation will be removed with Gnu Bin Utils.
		
	- MP3 example supported only on nmf_bare environment.
		This example reuse CSD algorithm and must not been distribute outside ST Microelectronics.
		Today, this example only runs on bare machine (due to APD HCL/Services packages issues).
	- Some link issue with GNU toolchain could occur in examples until HCL/Services compiled with 
		correct flags. 

	- Due to unavailability of HCL for STn8820, nmf_Bare runs only on STn8815.

	
Pre-requires:
-------------
	- At least Nomadik Toolset 1.0.0 final release.
		Patched with MMDSP Binutils compiler.
		At least MMDSP Debugger 4.0.0.
	- Java Runtime Environment  (http://java.sun.com/)
		At least JRE 1.5 (on Linux please use at least JRE 1.6 due to JVM bug regarding execution access rights)        


Test environment :
------------------
	- Environments:
		Board: 
			NDK15 Cut B0
			NDK20 Cut A0
		MPC: 
			SAA & SVA on NDK15
			SAA & SVA & SIA on NDK20
		Execution Engine: Synchronous, Hybrid
		Semaphores: local, hardware
		Environment: bare, think, tlm
		Nomadik Toolset 1.0.0 final release
		ARM: RVCT 3.0 SP1 Build 688, RVCT 2.2 Build 593, st-armgcc (gcc version 4.1.1)

	- Tests:
		* 'ADL' class
			check 'Architecture Description Language' features from programming model
			test limit of some ADL features (name length, collection size,...)
			check error codes returned by ADL tool

		* 'Attribute' class
			operations on attributes inside component (mpc side)
			check attribute api on host side
			api error management

		* 'Binding' class
			synchronous/asynchronous intra-MPC communication
			ARM -> MPC
			MPC -> ARM
			inter MPCs (asynchronous)
			MPC -> MPC (on 8815B0)
			Static intra-MPC optimized binding
			interruption
			error management

		* 'Collection' class :
			Behavior with binds between primitives component using collections interfaces
			Primitive collections interface introspection

		* 'Composite' class:
			Behavior with binds between composites component using collections interfaces
			Behavior with binds defined in composites components (conf. files) using collections interfaces
			Composite collections interfaces introspection

		* 'Dynamic loading' class: 
			segment loading (RO, RW, ZI)
				Mono-instance
				Multi-instances on same DSP
				Multi-instances on both DSP
			error management

		* 'Fifo' class
			creation/destruction of network with fifo use
			fifo connectivity (host side and mpc side)
			check flush/status/notify features
			api error management

		* 'IDL' class
			check 'Interface Description Language' features from programming model
			check error codes returned by ADL tool

		* 'Interface' class
			interfaces introspection for primitives and composites components (except collections interfaces)

		* 'Lifecycle' class
			check the behavior using the lifecycle API

		* 'Memory' class
			allocate/free api management for SDRAM and MPC memories
			check address/status features
			api error management

		* 'Misc' class
			'singleton' features (network construction/destruction)
			communication stressing (mandelbrot applications)
			multiple instantiation to fill memory
			component priority inside network

		* 'Network' class
			components (primitives or composites) introspection (without interfaces)

		* 'Panic' class
			Behavior upon each Panic (reason) detection and after the detection.

		* 'Properties' class
			Get property information in component network (primitive/composite)
			api error management

		* 'Stack' class
			check the MPC stack evolution combined with the TCM_X MPC dynamic allocation

