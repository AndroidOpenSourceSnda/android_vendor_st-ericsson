/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 *
 * This code is part of the NMF Toolset.
 *
 * The NMF Toolset is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * The NMF Toolset is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with the NMF Toolset. If not, see <http://www.gnu.org/licenses/>.
 *
 */
/* Generated By:JavaCC: Do not edit this line. IDLParser.java */
package tools.idl.parser;

import tools.common.compilerexception;
import tools.common.util;
import tools.idl.ast.*;
import java.io.File;

public class IDLParser implements IDLParserConstants {
        public File file;

/*****************************************************
 IDL Grammars
 *****************************************************/
  final public Interface InterfaceDeclaration(String _name) throws ParseException, compilerexception {
  Interface itf = new Interface(file, _name);
  Method md;
  definition decl;
  Token token;
  String foundname;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(INCLUDE);
      token = jj_consume_token(PATHABS);
                               itf.includes.add(new include(file, token, token.image.substring(1, token.image.length()-1)));
    }
    label_2:
    while (true) {
      if (jj_2_1(3)) {
        ;
      } else {
        break label_2;
      }
      if (jj_2_2(3)) {
        decl = StructDeclaration();
        jj_consume_token(81);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRUCT:
          decl = StructPredeclaredDeclaration();
          jj_consume_token(81);
          break;
        case TYPEDEF:
          decl = TypedefDeclaration();
          jj_consume_token(81);
          break;
        case ENUM:
          decl = EnumDeclaration();
          jj_consume_token(81);
          break;
        case DEFINE:
          decl = DefineDeclaration();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                  itf.addDefinition(decl);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTERFACE:
      jj_consume_token(INTERFACE);
      foundname = StringName();
                                         itf.setName(foundname);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNMANAGED:
        jj_consume_token(UNMANAGED);
                                itf.unmanaged = true;
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(82);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRUCT:
      case CONST:
      case LONG:
      case ENUM:
      case VOID:
      case IMPORT_SHARED:
      case TUINT64:
      case TUINT56:
      case TUINT48:
      case TUINT40:
      case TUINT32:
      case TADDRESS:
      case TSHAREDREG:
      case TSHAREDFIELD:
      case TUINT24:
      case TUWORD:
      case TUINT16:
      case TUINT8:
      case TSINT64:
      case TSINT56:
      case TSINT48:
      case TSINT40:
      case TSINT32:
      case TSINT24:
      case TSWORD:
      case TSINT16:
      case TSINT8:
      case CHAR:
      case TBOOL:
      case INT:
      case SHORT:
      case DOUBLE:
      case FLOAT:
      case SIGNED:
      case UNSIGNED:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      md = MethodDeclaration();
                                           itf.methods.add(md);
      jj_consume_token(81);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 83:
      jj_consume_token(83);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(0);
                {if (true) return itf;}
    throw new Error("Missing return statement in function");
  }

  final public definedtype idtDeclaration() throws ParseException, compilerexception {
        definedtype df = new definedtype(file);
        definition decl;
        Token name;
    jj_consume_token(IFNDEF);
    name = jj_consume_token(IDENTIFIER);
                  df.GuardedIndentifier = name.image;
    jj_consume_token(DEFINE);
    jj_consume_token(IDENTIFIER);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INCLUDE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      jj_consume_token(INCLUDE);
      token = jj_consume_token(PATHABS);
                          df.includes.add(new include(file, token, token.image.substring(1, token.image.length()-1)));
    }
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TYPEDEF:
      case STRUCT:
      case ENUM:
      case DEFINE:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      if (jj_2_3(3)) {
        decl = StructDeclaration();
        jj_consume_token(81);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRUCT:
          decl = StructPredeclaredDeclaration();
          jj_consume_token(81);
          break;
        case TYPEDEF:
          decl = TypedefDeclaration();
          jj_consume_token(81);
          break;
        case ENUM:
          decl = EnumDeclaration();
          jj_consume_token(81);
          break;
        case DEFINE:
          decl = DefineDeclaration();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                  df.addDefinition(decl);
    }
    jj_consume_token(ENDIF);
    jj_consume_token(0);
                {if (true) return df;}
    throw new Error("Missing return statement in function");
  }

/*
 * Method declaration grammars
 */
  final public Method MethodDeclaration() throws ParseException, compilerexception {
  Token t, qual = null;
  Type type;
  Method md;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IMPORT_SHARED:
      qual = jj_consume_token(IMPORT_SHARED);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    type = ResultType();
    t = jj_consume_token(IDENTIFIER);
                                     md = new Method(file, t, t.image, type, qual == null ? null : qual.image);
    FormalParameters(md);
    {if (true) return md;}
    throw new Error("Missing return statement in function");
  }

  final public void FormalParameters(TypeMethod md) throws ParseException, compilerexception {
  Parameter fp;
  Token t;
    jj_consume_token(84);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
    case CONST:
    case LONG:
    case ENUM:
    case VOID:
    case TUINT64:
    case TUINT56:
    case TUINT48:
    case TUINT40:
    case TUINT32:
    case TADDRESS:
    case TSHAREDREG:
    case TSHAREDFIELD:
    case TUINT24:
    case TUWORD:
    case TUINT16:
    case TUINT8:
    case TSINT64:
    case TSINT56:
    case TSINT48:
    case TSINT40:
    case TSINT32:
    case TSINT24:
    case TSWORD:
    case TSINT16:
    case TSINT8:
    case CHAR:
    case TBOOL:
    case INT:
    case SHORT:
    case DOUBLE:
    case FLOAT:
    case SIGNED:
    case UNSIGNED:
    case IDENTIFIER:
      if (jj_2_5(2)) {
        fp = FormalParameter();
                               md.addParameter(fp);
        label_6:
        while (true) {
          if (jj_2_4(2)) {
            ;
          } else {
            break label_6;
          }
          jj_consume_token(85);
          fp = FormalParameter();
                                                  md.addParameter(fp);
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VOID:
          jj_consume_token(VOID);
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(86);
  }

  final public Parameter FormalParameter() throws ParseException, compilerexception {
  Token t, tc = null;
  Type type;
  TypeMethod md;
  Token nb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      tc = jj_consume_token(CONST);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    type = ParameterType();
            if(tc != null) type = new typeconst(file, tc, type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 87:
      t = jj_consume_token(87);
              type = new typereference(file, t, type);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case 84:
      jj_consume_token(84);
      jj_consume_token(88);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(86);
                   type = md = new TypeMethod(file, t, type);
      FormalParameters(md);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    type = ArrayDeclaration(type);
    {if (true) return new Parameter(t, t.image, type);}
    throw new Error("Missing return statement in function");
  }

  final public Type ResultType() throws ParseException, compilerexception {
  Type type;
  Token t, memqualifier=null, tc = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      tc = jj_consume_token(CONST);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    if (jj_2_6(2)) {
      type = PrimitiveType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case CHAR:
      case INT:
      case SHORT:
      case DOUBLE:
      case FLOAT:
      case SIGNED:
      case UNSIGNED:
        type = UnmanagedPrimitiveType();
        break;
      default:
        jj_la1[16] = jj_gen;
        if (jj_2_7(3)) {
          type = ComplexType();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VOID:
            t = jj_consume_token(VOID);
                   type = new TypeVoid(file, t);
            break;
          default:
            jj_la1[17] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    label_7:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        memqualifier = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      t = jj_consume_token(88);
                  type = new TypePointer(file, t, type, (memqualifier == null) ? null:memqualifier.image); memqualifier = null;
    }
                if(tc != null) type = new typeconst(file, tc, type);
                {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Type ParameterType() throws ParseException, compilerexception {
  Type type;
  Token t, memqualifier=null;
    if (jj_2_9(2)) {
      type = PrimitiveType();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LONG:
      case CHAR:
      case INT:
      case SHORT:
      case DOUBLE:
      case FLOAT:
      case SIGNED:
      case UNSIGNED:
        type = UnmanagedPrimitiveType();
        break;
      case STRUCT:
      case ENUM:
      case VOID:
      case IDENTIFIER:
        type = ComplexType();
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_8:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        memqualifier = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      t = jj_consume_token(88);
          type = new TypePointer(file, t, type, (memqualifier == null) ? null:memqualifier.image); memqualifier = null;
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

/*
 * Type grammars
 */
  final public String StringName() throws ParseException {
        String name;
        Token fn, n;
    fn = jj_consume_token(IDENTIFIER);
                      name = fn.image;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_9;
      }
      jj_consume_token(89);
      n = jj_consume_token(IDENTIFIER);
                            name = name + "." + n.image;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public Type TypeName() throws ParseException {
        String name;
        Token fn, n;
    fn = jj_consume_token(IDENTIFIER);
                      name = fn.image;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 89:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_10;
      }
      jj_consume_token(89);
      n = jj_consume_token(IDENTIFIER);
                            name = name + "." + n.image;
    }
    {if (true) return new TypeTypedef(file, fn, name);}
    throw new Error("Missing return statement in function");
  }

  final public Type ComplexType() throws ParseException, compilerexception {
        Token t, name, memqualifier=null;
        Type type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRUCT:
      t = jj_consume_token(STRUCT);
      name = jj_consume_token(IDENTIFIER);
                                        {if (true) return new typestructure(file, t, name.image);}
      break;
    case ENUM:
      t = jj_consume_token(ENUM);
      name = jj_consume_token(IDENTIFIER);
                                     {if (true) return new typeenum(file, t, name.image);}
      break;
    case IDENTIFIER:
      type = TypeName();
                          {if (true) return type;}
      break;
    case VOID:
      t = jj_consume_token(VOID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        memqualifier = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      jj_consume_token(88);
                                                   {if (true) return new TypePointer(file, t, new TypeVoid(file, t), (memqualifier == null) ? null:memqualifier.image);}
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TypePrimitive PrimitiveType() throws ParseException, compilerexception {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TUINT64:
      t = jj_consume_token(TUINT64);
      break;
    case TUINT56:
      t = jj_consume_token(TUINT56);
      break;
    case TUINT48:
      t = jj_consume_token(TUINT48);
      break;
    case TUINT40:
      t = jj_consume_token(TUINT40);
      break;
    case TUINT32:
      t = jj_consume_token(TUINT32);
      break;
    case TADDRESS:
      t = jj_consume_token(TADDRESS);
      break;
    case TSHAREDREG:
      t = jj_consume_token(TSHAREDREG);
      break;
    case TSHAREDFIELD:
      t = jj_consume_token(TSHAREDFIELD);
      break;
    case TUINT24:
      t = jj_consume_token(TUINT24);
      break;
    case TUWORD:
      t = jj_consume_token(TUWORD);
      break;
    case TUINT16:
      t = jj_consume_token(TUINT16);
      break;
    case TUINT8:
      t = jj_consume_token(TUINT8);
      break;
    case TSINT64:
      t = jj_consume_token(TSINT64);
      break;
    case TSINT56:
      t = jj_consume_token(TSINT56);
      break;
    case TSINT48:
      t = jj_consume_token(TSINT48);
      break;
    case TSINT40:
      t = jj_consume_token(TSINT40);
      break;
    case TSINT32:
      t = jj_consume_token(TSINT32);
      break;
    case TSINT24:
      t = jj_consume_token(TSINT24);
      break;
    case TSWORD:
      t = jj_consume_token(TSWORD);
      break;
    case TSINT16:
      t = jj_consume_token(TSINT16);
      break;
    case TSINT8:
      t = jj_consume_token(TSINT8);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case TBOOL:
      t = jj_consume_token(TBOOL);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return new TypePrimitive(file, t, t.image);}
    throw new Error("Missing return statement in function");
  }

  final public typeprimitiveunmanaged UnmanagedPrimitiveType() throws ParseException, compilerexception {
        Token t1 = null, t2 = null, t3 = null, t4 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SIGNED:
    case UNSIGNED:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UNSIGNED:
        t1 = jj_consume_token(UNSIGNED);
        break;
      case SIGNED:
        t1 = jj_consume_token(SIGNED);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHAR:
      t2 = jj_consume_token(CHAR);
      break;
    case SHORT:
      t2 = jj_consume_token(SHORT);
      break;
    case INT:
      t2 = jj_consume_token(INT);
      break;
    default:
      jj_la1[28] = jj_gen;
      if (jj_2_11(2)) {
        t2 = jj_consume_token(LONG);
        t3 = jj_consume_token(LONG);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LONG:
          t2 = jj_consume_token(LONG);
          break;
        case DOUBLE:
          t2 = jj_consume_token(DOUBLE);
          break;
        case FLOAT:
          t2 = jj_consume_token(FLOAT);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
          {if (true) return new typeprimitiveunmanaged(file, t1, t2, t3, t4);}
    throw new Error("Missing return statement in function");
  }

  final public Type ArrayDeclaration(Type type) throws ParseException {
        Token nb, t = null;
        String arraysize[] = new String[10];
        int arraydim = 0;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 90:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_11;
      }
      t = jj_consume_token(90);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        nb = jj_consume_token(INTEGER_LITERAL);
        break;
      case IDENTIFIER:
        nb = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(91);
                          arraysize[arraydim++] = nb.image;
    }
                for(int i = arraydim -1 ; i >= 0; i--)
                        type = new typearray(file, t, type, arraysize[i]);
                {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

/**********************************************************************************
 * Structure declaratino grammars
 **********************************************************************************/
  final public Type FieldType() throws ParseException, compilerexception {
  Type type;
  Token t, memqualifier=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TUINT64:
    case TUINT56:
    case TUINT48:
    case TUINT40:
    case TUINT32:
    case TADDRESS:
    case TSHAREDREG:
    case TSHAREDFIELD:
    case TUINT24:
    case TUWORD:
    case TUINT16:
    case TUINT8:
    case TSINT64:
    case TSINT56:
    case TSINT48:
    case TSINT40:
    case TSINT32:
    case TSINT24:
    case TSWORD:
    case TSINT16:
    case TSINT8:
    case CHAR:
    case TBOOL:
      type = PrimitiveType();
      break;
    default:
      jj_la1[32] = jj_gen;
      if (jj_2_12(2)) {
        type = ComplexType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRUCT:
          t = jj_consume_token(STRUCT);
          jj_consume_token(82);
                           type = new structure(file, t);
          StructDeclarationList((structure)type);
          jj_consume_token(83);
          break;
        case ENUM:
          t = jj_consume_token(ENUM);
          jj_consume_token(82);
                         type = new enumeration(file, t, null);
          EnumDeclarationList((enumeration)type);
          jj_consume_token(83);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    label_12:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_12;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        memqualifier = jj_consume_token(IDENTIFIER);
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      t = jj_consume_token(88);
                                                       type = new TypePointer(file, t, type, (memqualifier == null) ? null:memqualifier.image);
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public structentry FormalField() throws ParseException, compilerexception {
  Token t, tc = null;
  Type type;
  Token nb;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      tc = jj_consume_token(CONST);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    type = FieldType();
          if(tc != null) type = new typeconst(file, tc, type);
    t = jj_consume_token(IDENTIFIER);
    type = ArrayDeclaration(type);
      {if (true) return new structentry(t, t.image, type);}
    throw new Error("Missing return statement in function");
  }

  final public void StructDeclarationList(structure decl) throws ParseException, compilerexception {
        structentry se;
    label_13:
    while (true) {
      se = FormalField();
      jj_consume_token(81);
                          decl.members.add(se);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRUCT:
      case CONST:
      case ENUM:
      case VOID:
      case TUINT64:
      case TUINT56:
      case TUINT48:
      case TUINT40:
      case TUINT32:
      case TADDRESS:
      case TSHAREDREG:
      case TSHAREDFIELD:
      case TUINT24:
      case TUWORD:
      case TUINT16:
      case TUINT8:
      case TSINT64:
      case TSINT56:
      case TSINT48:
      case TSINT40:
      case TSINT32:
      case TSINT24:
      case TSWORD:
      case TSINT16:
      case TSINT8:
      case CHAR:
      case TBOOL:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[36] = jj_gen;
        break label_13;
      }
    }
  }

  final public structure StructDeclaration() throws ParseException, compilerexception {
        Token t, name;
        structure decl;
        Parameter fp;
    t = jj_consume_token(STRUCT);
    name = jj_consume_token(IDENTIFIER);
                  decl = new structure(file, t);
    jj_consume_token(82);
    StructDeclarationList(decl);
    jj_consume_token(83);
                decl.setName(name.image);
                {if (true) return decl;}
    throw new Error("Missing return statement in function");
  }

  final public structurepredeclared StructPredeclaredDeclaration() throws ParseException, compilerexception {
        Token t, name;
        structurepredeclared decl;
    t = jj_consume_token(STRUCT);
    name = jj_consume_token(IDENTIFIER);
                decl = new structurepredeclared(file, t);
                decl.setName(name.image);
                {if (true) return decl;}
    throw new Error("Missing return statement in function");
  }

/**********************************************************************************
 * Typedef declaration
 **********************************************************************************/
  final public typedef TypedefDeclaration() throws ParseException, compilerexception {
        Token t, name, nb;
        Type type;
    t = jj_consume_token(TYPEDEF);
    type = FieldType();
    name = jj_consume_token(IDENTIFIER);
    type = ArrayDeclaration(type);
          {if (true) return new typedef(file, t, type, name.image);}
    throw new Error("Missing return statement in function");
  }

/**********************************************************************************
 * Enum declaration
 **********************************************************************************/
  final public enumentry FormalEnum() throws ParseException {
        Token name, value = null;
        String sign = "";
        enumentry entry;
    name = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 92:
      jj_consume_token(92);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case 93:
      case 94:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 93:
        case 94:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 93:
            jj_consume_token(93);
                        sign = "-";
            break;
          case 94:
            jj_consume_token(94);
            break;
          default:
            jj_la1[37] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[38] = jj_gen;
          ;
        }
        value = jj_consume_token(INTEGER_LITERAL);
        break;
      case IDENTIFIER:
        value = jj_consume_token(IDENTIFIER);
        break;
      case CHARACTER_LITERAL:
        value = jj_consume_token(CHARACTER_LITERAL);
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
          {if (true) return new enumentry(file, name, name.image, (value == null) ? null : (sign + value.image));}
    throw new Error("Missing return statement in function");
  }

  final public void EnumDeclarationList(enumeration decl) throws ParseException, compilerexception {
        enumentry entry;
    entry = FormalEnum();
                  decl.addEnumerator(entry);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 85:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_14;
      }
      jj_consume_token(85);
      entry = FormalEnum();
                          decl.addEnumerator(entry);
    }
  }

  final public enumeration EnumDeclaration() throws ParseException, compilerexception {
        Token t, name;
        enumeration decl;
    t = jj_consume_token(ENUM);
    name = jj_consume_token(IDENTIFIER);
    jj_consume_token(82);
                  decl = new enumeration(file, t, name.image);
    EnumDeclarationList(decl);
    jj_consume_token(83);
                  {if (true) return decl;}
    throw new Error("Missing return statement in function");
  }

/**********************************************************************************
 * #define declaration
 **********************************************************************************/
  final public String LiteralValue() throws ParseException {
        Token value;
        String sum = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case 93:
    case 94:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 93:
      case 94:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 93:
          jj_consume_token(93);
                        sum = "-";
          break;
        case 94:
          jj_consume_token(94);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      value = jj_consume_token(INTEGER_LITERAL);
                                                                         sum = sum + value.image;
                  {if (true) return sum;}
      break;
    case CHARACTER_LITERAL:
      value = jj_consume_token(CHARACTER_LITERAL);
                                              sum = value.image;
                  {if (true) return sum;}
      break;
    case STRING_LITERAL:
      value = jj_consume_token(STRING_LITERAL);
                                           sum = value.image;
                  {if (true) return sum;}
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public diesedefine DefineDeclaration() throws ParseException, compilerexception {
        Token t, ident, tokenValue;
        String value;
        Type type;
    t = jj_consume_token(DEFINE);
    ident = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case INTEGER_LITERAL:
    case 93:
    case 94:
      value = LiteralValue();
                          {if (true) return new diesedefine(file, t, ident.image, value);}
      break;
    case IDENTIFIER:
      tokenValue = jj_consume_token(IDENTIFIER);
                          {if (true) return new diesedefine(file, t, ident.image, tokenValue.image);}
      break;
    default:
      jj_la1[45] = jj_gen;
      if (jj_2_14(2)) {
        jj_consume_token(84);
        value = LiteralValue();
        jj_consume_token(86);
                          {if (true) return new diesedefine(file, t, ident.image, "(" + value + ")");}
      } else if (jj_2_15(3)) {
        jj_consume_token(84);
        jj_consume_token(84);
        type = ParameterType();
        jj_consume_token(86);
        value = LiteralValue();
        jj_consume_token(86);
                          {if (true) return new diesedefine(file, t, ident.image, "((" + type.printType() + ")" + value + ")");}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(89)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(TYPEDEF)) return true;
    if (jj_3R_40()) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(84)) return true;
    if (jj_scan_token(84)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(84)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_9()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(LONG)) return true;
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(DEFINE)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(93)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(87)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_25()) return true;
    if (jj_scan_token(81)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    xsp = jj_scanpos;
    if (jj_3R_29()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(VOID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(71)) jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(85)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_20()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public IDLParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[46];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x10082000,0x0,0x0,0x59080000,0x0,0x0,0x10082000,0x10082000,0x0,0x40000000,0x59080000,0x1000000,0x0,0x0,0x1000000,0x8000000,0x40000000,0x0,0x58080000,0x0,0x0,0x0,0x0,0x50080000,0x0,0x0,0x0,0x0,0x8000000,0x0,0x0,0x0,0x10080000,0x0,0x1000000,0x51080000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x40,0x100,0x20,0x10,0xfffffc08,0x0,0x40,0x100,0x100,0x8,0x0,0xfffffc00,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0xfffffc00,0x0,0x0,0x80000000,0x0,0x0,0x0,0xfffffc00,0x0,0x0,0x0,0xfffffc00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0xff,0x80000,0x0,0x0,0x0,0x0,0x0,0xff,0x0,0x800000,0x100080,0x0,0x7e,0x0,0x80,0xfe,0x80,0x2000000,0x2000000,0x80,0x80,0x1,0x60,0x60,0x6,0x18,0x4000000,0x2080,0x1,0x0,0x80,0x0,0x81,0x60000000,0x60000000,0x60002880,0x10000000,0x200000,0x60000000,0x60000000,0x60003800,0x60003880,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[15];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public IDLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public IDLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new IDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public IDLParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new IDLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public IDLParser(IDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(IDLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 46; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[95];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 46; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 95; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 15; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
