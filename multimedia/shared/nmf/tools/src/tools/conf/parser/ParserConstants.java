/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 *
 * This code is part of the NMF Toolset.
 *
 * The NMF Toolset is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * The NMF Toolset is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with the NMF Toolset. If not, see <http://www.gnu.org/licenses/>.
 *
 */
/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package tools.conf.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int CONTINUE = 10;
  /** RegularExpression Id. */
  int VOLATILE = 11;
  /** RegularExpression Id. */
  int REGISTER = 12;
  /** RegularExpression Id. */
  int UNSIGNED = 13;
  /** RegularExpression Id. */
  int TYPEDEF = 14;
  /** RegularExpression Id. */
  int DFLT = 15;
  /** RegularExpression Id. */
  int DOUBLE = 16;
  /** RegularExpression Id. */
  int SIZEOF = 17;
  /** RegularExpression Id. */
  int SWITCH = 18;
  /** RegularExpression Id. */
  int RETURN = 19;
  /** RegularExpression Id. */
  int EXTERN = 20;
  /** RegularExpression Id. */
  int STRUCT = 21;
  /** RegularExpression Id. */
  int STATIC = 22;
  /** RegularExpression Id. */
  int SIGNED = 23;
  /** RegularExpression Id. */
  int WHILE = 24;
  /** RegularExpression Id. */
  int BREAK = 25;
  /** RegularExpression Id. */
  int UNION = 26;
  /** RegularExpression Id. */
  int CONST = 27;
  /** RegularExpression Id. */
  int FLOAT = 28;
  /** RegularExpression Id. */
  int SHORT = 29;
  /** RegularExpression Id. */
  int ELSE = 30;
  /** RegularExpression Id. */
  int CASE = 31;
  /** RegularExpression Id. */
  int LONG = 32;
  /** RegularExpression Id. */
  int ENUM = 33;
  /** RegularExpression Id. */
  int AUTO = 34;
  /** RegularExpression Id. */
  int VOID = 35;
  /** RegularExpression Id. */
  int GOTO = 36;
  /** RegularExpression Id. */
  int FOR = 37;
  /** RegularExpression Id. */
  int INT = 38;
  /** RegularExpression Id. */
  int IF = 39;
  /** RegularExpression Id. */
  int DO = 40;
  /** RegularExpression Id. */
  int TUINT64 = 41;
  /** RegularExpression Id. */
  int TUINT56 = 42;
  /** RegularExpression Id. */
  int TUINT48 = 43;
  /** RegularExpression Id. */
  int TUINT40 = 44;
  /** RegularExpression Id. */
  int TUINT32 = 45;
  /** RegularExpression Id. */
  int TADDRESS = 46;
  /** RegularExpression Id. */
  int TSHAREDREG = 47;
  /** RegularExpression Id. */
  int TSHAREDFIELD = 48;
  /** RegularExpression Id. */
  int TUINT24 = 49;
  /** RegularExpression Id. */
  int TUWORD = 50;
  /** RegularExpression Id. */
  int TUINT16 = 51;
  /** RegularExpression Id. */
  int TUINT8 = 52;
  /** RegularExpression Id. */
  int TSINT64 = 53;
  /** RegularExpression Id. */
  int TSINT56 = 54;
  /** RegularExpression Id. */
  int TSINT48 = 55;
  /** RegularExpression Id. */
  int TSINT40 = 56;
  /** RegularExpression Id. */
  int TSINT32 = 57;
  /** RegularExpression Id. */
  int TSINT24 = 58;
  /** RegularExpression Id. */
  int TSWORD = 59;
  /** RegularExpression Id. */
  int TSINT16 = 60;
  /** RegularExpression Id. */
  int TSINT8 = 61;
  /** RegularExpression Id. */
  int CHAR = 62;
  /** RegularExpression Id. */
  int TBOOL = 63;
  /** RegularExpression Id. */
  int AS = 64;
  /** RegularExpression Id. */
  int OPTIONAL = 65;
  /** RegularExpression Id. */
  int MANDATORY = 66;
  /** RegularExpression Id. */
  int PRIMITIVE = 67;
  /** RegularExpression Id. */
  int COMPOSITE = 68;
  /** RegularExpression Id. */
  int TYPE = 69;
  /** RegularExpression Id. */
  int EXTENDS = 70;
  /** RegularExpression Id. */
  int THIS = 71;
  /** RegularExpression Id. */
  int BIND = 72;
  /** RegularExpression Id. */
  int TO = 73;
  /** RegularExpression Id. */
  int PREFIX = 74;
  /** RegularExpression Id. */
  int UNAMBIGUOUS = 75;
  /** RegularExpression Id. */
  int REFERENCED = 76;
  /** RegularExpression Id. */
  int SINGLETON = 77;
  /** RegularExpression Id. */
  int TRACE = 78;
  /** RegularExpression Id. */
  int INTERRUPT = 79;
  /** RegularExpression Id. */
  int ASYNCHRONOUS = 80;
  /** RegularExpression Id. */
  int URGENT = 81;
  /** RegularExpression Id. */
  int NORMAL = 82;
  /** RegularExpression Id. */
  int BACKGROUND = 83;
  /** RegularExpression Id. */
  int FIFO = 84;
  /** RegularExpression Id. */
  int SUBPRIORITY = 85;
  /** RegularExpression Id. */
  int PRIORITY = 86;
  /** RegularExpression Id. */
  int OPTION = 87;
  /** RegularExpression Id. */
  int ORDER = 88;
  /** RegularExpression Id. */
  int ATTRIBUTES = 89;
  /** RegularExpression Id. */
  int CONTAINS = 90;
  /** RegularExpression Id. */
  int REQUIRES = 91;
  /** RegularExpression Id. */
  int SOURCES = 92;
  /** RegularExpression Id. */
  int PROPERTY = 93;
  /** RegularExpression Id. */
  int PROVIDES = 94;
  /** RegularExpression Id. */
  int IDENTIFIER = 95;
  /** RegularExpression Id. */
  int LETTER = 96;
  /** RegularExpression Id. */
  int DIGIT = 97;
  /** RegularExpression Id. */
  int STRING_LITERAL = 98;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 99;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 100;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 101;
  /** RegularExpression Id. */
  int HEX_LITERAL = 102;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 103;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 9>",
    "\"continue\"",
    "\"volatile\"",
    "\"register\"",
    "\"unsigned\"",
    "\"typedef\"",
    "\"default\"",
    "\"double\"",
    "\"sizeof\"",
    "\"switch\"",
    "\"return\"",
    "\"extern\"",
    "\"struct\"",
    "\"static\"",
    "\"signed\"",
    "\"while\"",
    "\"break\"",
    "\"union\"",
    "\"const\"",
    "\"float\"",
    "\"short\"",
    "\"else\"",
    "\"case\"",
    "\"long\"",
    "\"enum\"",
    "\"auto\"",
    "\"void\"",
    "\"goto\"",
    "\"for\"",
    "\"int\"",
    "\"if\"",
    "\"do\"",
    "\"t_uint64\"",
    "\"t_uint56\"",
    "\"t_uint48\"",
    "\"t_uint40\"",
    "\"t_uint32\"",
    "\"t_physical_address\"",
    "\"t_shared_reg\"",
    "\"t_shared_field\"",
    "\"t_uint24\"",
    "\"t_uword\"",
    "\"t_uint16\"",
    "\"t_uint8\"",
    "\"t_sint64\"",
    "\"t_sint56\"",
    "\"t_sint48\"",
    "\"t_sint40\"",
    "\"t_sint32\"",
    "\"t_sint24\"",
    "\"t_sword\"",
    "\"t_sint16\"",
    "\"t_sint8\"",
    "\"char\"",
    "\"t_bool\"",
    "\"as\"",
    "\"optional\"",
    "\"mandatory\"",
    "\"primitive\"",
    "\"composite\"",
    "\"type\"",
    "<EXTENDS>",
    "\"this\"",
    "\"binds\"",
    "\"to\"",
    "\"prefix\"",
    "\"unambiguous\"",
    "\"referenced\"",
    "\"singleton\"",
    "\"trace\"",
    "\"interrupt\"",
    "\"asynchronous\"",
    "\"urgent\"",
    "\"normal\"",
    "\"background\"",
    "\"fifo\"",
    "\"subpriority\"",
    "\"priority\"",
    "\"option\"",
    "\"order\"",
    "\"attributes\"",
    "\"contains\"",
    "\"requires\"",
    "\"sources\"",
    "\"property\"",
    "\"provides\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<STRING_LITERAL>",
    "<CHARACTER_LITERAL>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "\"<\"",
    "\">\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\".\"",
    "\"[\"",
    "\"]\"",
    "\"-\"",
    "\"+\"",
    "\"|\"",
    "\"*\"",
    "\"..\"",
    "\"/\"",
  };

}
