/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 * This code is ST-Ericsson proprietary and confidential.
 * Any use of the code for whatever purpose is subject to
 * specific written permission of ST-Ericsson SA.
 */
 
/* rtos/common/inc/lowscheduler.h - EE.
 *
 * Copyright (c) 2006, 2007, 2008 STMicroelectronics.
 *
 * Reproduction and Communication of this document is strictly prohibited
 * unless specifically authorized in writing by STMicroelectronics.
 * 
 * Written by NMF team.
 */
/*
 *
 */
#ifndef LOW_SCHEDULER_H
#define LOW_SCHEDULER_H

#include <rtos/common/inc/misc.h>
#include <share/inc/nmf.h>
#include <rtos/api/descriptor.idt.h>

typedef void (*t_reaction)(struct TEvent* event);

#define MAX_SCHED_PRIORITY 3
extern struct TEvent *FirstEvent[MAX_SCHED_PRIORITY];
extern struct TEvent *LastEvent[MAX_SCHED_PRIORITY];

#pragma inline
static void LowSchedEvent(struct TEvent *event, int priority) {
    event->next = NULL;
    if (FirstEvent[priority]) {
    	LastEvent[priority]->next = event;
    	LastEvent[priority] = event;
    } else {
    	FirstEvent[priority] = event;
    	LastEvent[priority] = event;
    }
}

/*
 * This method must be called under interrupt.
 */ 
void ScheduleEvent(struct TEvent* event);

/*
 * Initialisation method generated by tools !!
 */ 
void construct(void);
void start(void);

/*
 * Program stack checker
 */
void sched_updateStack(unsigned int currentStackSize);

#endif /* LOW_SCHEDULER_H */

