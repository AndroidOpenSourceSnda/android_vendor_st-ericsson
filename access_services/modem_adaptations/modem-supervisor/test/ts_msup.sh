#!/bin/sh 
#===============================================================================
#
#          FILE:  ts_msup.sh
# 
#         USAGE:  ./ts_msup.sh 
# 
#   DESCRIPTION:  
# 
#        AUTHOR: Philippe Begnic (), philippe.begnic@stericsson.com
#       COMPANY: ST-Ericsson
#       CREATED: 03/11/2010 14:13:15 CET
#===============================================================================

TRACES=/usr/traces

# ##############################################################################
# Tests data
#
#    ts_title : test title
#    ts_desc  : test description
#    ts_occ   : occurency number ( modem-sup input )
#    ts_tslot : time slot  ( modem-sup input )
#    ts_delay : delay after modem_reset 
#    ts_data  : string triggered by script ( string generated by modem-sup)
#
#
# Test 1 
ts_title1="APE reset"
ts_desc1="Send 1 ape reset ( phonet application tool )"
ts_occ1="5"
ts_tslot1="10"
ts_delay1="30"
ts_data1="MODEM_RESTARTED"
#
# Test 2 
ts_title2="Modem_assert_1"
ts_desc2="Send 1 modem assert"
ts_occ2="5" 
ts_tslot2="10" 
ts_delay2="5"
ts_data2="MODEM_RESTARTED" 
#
# Test 3
ts_title3="Modem_assert_2" 
ts_desc3=" Send 2 modem assert => in the time slot "
ts_occ3="2" 
ts_tslot3="10" 
ts_delay3="3"
ts_data3="MODEM_RESTARTED" 
#
# Test 4
ts_title4="Modem_assert_3" 
ts_desc4=" Send 3 modem assert => out of the time slot"
ts_occ4="2" 
ts_tslot4="10" 
ts_delay4="3"
ts_data4="TARGET_RESTARTED" 
#

do_init () {
	echo " ********** init ******** "
	# Remove buffer traces
	logcat -c

	# Check that no modem-supervisor launched
	#  and kill exiting process
	PROC=`ps |busybox grep modem-supervisor |busybox awk '{ print $2 }'`
	echo " PID modem-supervisor "$PROC

	for i in `ps | busybox grep modem-supervisor | busybox cut -d ' ' -f 7`
	do
		echo "kill "$i 
	    busybox kill -9 $i
	done
}

do_trace () {
	if [ ! -d "$TRACES" ]; then
		mkdir $TRACES
	fi

	logcat -d |busybox grep -e MSUP -e FWHDL -e STAMP > $TRACES/trace_$1.txt
	cat $TRACES/trace_$1.txt
}

do_launch_supervisor() {
	K=$1
	eval tdesc=\${ts_desc${K}}
	eval tocc=\${ts_occ${K}}
	eval tslot=\${ts_tslot${K}}
	echo " ### Test : $tdesc ### " 
	echo " Launch modem supervisor : occurency $tocc time slot $tslot"
	do_init
	/system/bin/modem-supervisor -f /dev/mloader_fw -c monitor -o $tocc -w $tslot &
	sleep 1
}

do_modem_assert() {
	K=$1
	eval tdelay=\${ts_delay${N}}
	echo " Modem Reset using test_mte tool with delay = $tdelay"
	/system/bin/test_mte --assert --group_id=l23 &
	sleep $tdelay
}

do_gen_ape_reset() {
	K=$1
	eval tdelay=\${ts_delay${N}}
	echo " APE send Reset using phonetApp tool"
	/system/bin/phonetTestApp -t 46 15 1 5 & 
	/system/bin/shmnetlnktestapp 2 &
	sleep $tdelay
}


do_compare () {

    j=$1
    if [ -e "$TRACES/trace_$1.txt" ]; then
		eval echo " $TRACES/trace_$1.txt found = now search for  \${ts_data${j}} string "
		eval COMP=\$ts_data$j
		res=`cat $TRACES/trace_$1.txt | busybox grep $COMP`
		#echo "res :" $res

		if [ -n "$res" ]; then
			DIAG="TEST $1 : SUCCESS"
		else
			DIAG="TEST $1 : FAILED"
		fi
	else
		DIAG="TEST $1 : Not done"
    fi

	echo $DIAG
	echo $DIAG >> $TRACES/diag.txt
}

do_clean () {
	echo " Clean traces result "
	rm  $TRACES/trace*.txt
	rm  $TRACES/diag*.txt
}

do_all () {
	echo " Run complete test suite "
	# Not available because target has to be restarted after each tests
	do_clean
	do_ts1
	do_ts2
	do_ts3
	do_ts4
	do_diag
}

do_ts1 () {
	N=1
	# Send 1 ape reset ( phonet application tool )
	do_launch_supervisor $N
	do_gen_ape_reset $N 
	do_trace $N
	do_compare $N
}

do_ts2 () {
	# Send 1 modem assert
	N=2
	do_launch_supervisor $N
	do_modem_assert $N
 	do_trace $N
	do_compare $N
}

do_ts3 () {
	# Send 2 modem assert => in the time slot
	N=3
	do_launch_supervisor $N
	do_modem_assert $N
	do_modem_assert $N
	do_trace $N
	do_compare $N
}

do_ts4 () {
	# Send 3 modem assert => out of the time slot
	N=4
	do_launch_supervisor $N
	do_modem_assert $N
	do_modem_assert $N
	do_modem_assert $N
	do_trace $N
	do_compare $N
}
	
do_diag () {
	echo " Display modem-supervisor test result summary "
	rm  $TRACES/diag*.txt

	for n in 1 2 3 4 
	do
		do_compare $n
	done

}

do_usage () {
	echo " ts_msup [all|ts1|ts2|ts3|ts4|diag|clean|help|h] "
}

do_stop () {
	echo " il suffit "
}

case "$1" in
  all)
	do_all
	exit 0
	;;
  ts1)
	do_ts1
	exit 0
	;;
  ts2)
	do_ts2
	exit 0
	;;
  ts3)
	do_ts3
	exit 0
	;;
  ts4)
	do_ts4
	exit 0
	;;
  diag)
	do_diag
	exit 0
	;;
  clean)
	do_clean
	exit 0
	;;
  stop|"")
	do_stop
	;;
  help|h)
	  do_usage
	exit 0
	;;
  *)
	  do_usage
	exit 0
	;;
esac
