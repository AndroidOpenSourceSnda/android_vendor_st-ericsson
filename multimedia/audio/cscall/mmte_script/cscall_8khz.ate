# This script tests the CS-Call in non-tunneled mode:
# cscall ports configured in 8KHZ -> specific test for NB codecs
# only static ports configurations are supported today!
# --> this test is stopped when call is stopped
#
# Audio Network Description:
# 
#   +--------------+
#   |              |
#   |             0| <-- INPUT_FILE
#   |   CS-Call    |
#   |             1| --> OUTPUT_FILE
#   |              |
#   +--------------+
#
# Script's arguments:
#  $1 : ISI|MAI select protocol (ISI if not specified)
#  $2 : trace level             (0 if not specified)

test_start CSCALL_0001
test_property TEST_NAME cscall

# script parameter
if "$($1)" == "MAI"
  alias PROTOCOL AFM_AUDIO_PROTOCOL_MAI
  alias PROTO MAI 
else
  alias PROTOCOL AFM_AUDIO_PROTOCOL_ISI
  alias PROTO ISI
endif

if "$($2)" != ""
  alias TRACE_LEVEL $($2)
else
  alias TRACE_LEVEL 0
endif

#I/Os parameters
alias SAMPLING_RATE             8000
alias NB_CHANNELS            	1

alias INPUT_FILE                $(AUDIO_STREAMS)/cscall/streams/T04.INP

alias OUTPUT_FILE               $(OUTPUT_DIR)/cscall_8khz.$(PROTO).OUT
alias OUTPUT_SIZE               3000000

#Input Buffer parameters
alias INPUT_BUFFERCOUNT         nBufferCountActual=2

#Output Buffer parameters
alias OUTPUT_BUFFERCOUNT        nBufferCountActual=2

alias IN         1
alias OUT        0

#start test
OMX_GetHandle    CSCALL  OMX.ST.AFM.cscall
OMX_SendCommand  CSCALL  OMX_CommandPortDisable 2
MMTE_WaitEvent   CSCALL OMX_EventCmdComplete OMX_CommandPortDisable 2

# activate trace
if $(TRACE_LEVEL) > 0
  OMX_SetConfig CSCALL ENS_IndexConfigTraceSetting nTraceEnable=$(TRACE_LEVEL)
endif

OMX_SetParameter CSCALL  OMX_IndexParamPortDefinition nPortIndex=$(IN) INPUT_BUFFERCOUNT
OMX_SetParameter CSCALL  OMX_IndexParamPortDefinition nPortIndex=$(OUT) OUTPUT_BUFFERCOUNT
OMX_SetParameter CSCALL  OMX_IndexParamAudioPcm nPortIndex=$(IN) nChannels=$(NB_CHANNELS) eEndian=OMX_EndianLittle nSamplingRate=$(SAMPLING_RATE)
OMX_SetParameter CSCALL  OMX_IndexParamAudioPcm nPortIndex=$(OUT) nChannels=$(NB_CHANNELS) eEndian=OMX_EndianLittle nSamplingRate=$(SAMPLING_RATE)
OMX_SetParameter CSCALL  AFM_IndexParamCscall nULRealTimeMode=OMX_FALSE nDLRealTimeMode=OMX_FALSE eProtocol=$(PROTOCOL)

#Setting Config for received callback when speech codec is enabled
OMX_SetConfig    CSCALL  OMX_IndexConfigCallbackRequest nIndex=OMX_Symbian_IndexConfigAudioCodecEnabled bEnable=OMX_TRUE
#Setting Config for received callback when speech codec is disabled
OMX_SetConfig    CSCALL  OMX_IndexConfigCallbackRequest nIndex=OMX_Symbian_IndexConfigAudioCodecDisabled bEnable=OMX_TRUE

OMX_SendCommand	CSCALL OMX_CommandStateSet OMX_StateIdle
MMTE_AllocateAndUseBuffers CSCALL IN
MMTE_AllocateAndUseBuffers CSCALL OUT
MMTE_WaitEvent CSCALL OMX_EventCmdComplete OMX_CommandStateSet OMX_StateIdle



ate_attach_io CSCALL IN MEM INPUT_FILE 0 1 0
ate_attach_io CSCALL OUT MEM OUTPUT_FILE OUTPUT_SIZE 1 0

#Start CS-CALL
OMX_SendCommand CSCALL OMX_CommandStateSet OMX_StateExecuting
MMTE_WaitEvent CSCALL OMX_EventCmdComplete OMX_CommandStateSet OMX_StateExecuting

#Wait for callback when speech codec is enabled : CALL_START!
MMTE_WaitEvent CSCALL OMX_EventIndexSettingChanged OMX_ALL OMX_Symbian_IndexConfigAudioCodecEnabled

#############################
# CALL ONGOING..............#
#############################

#Wait for callback when speech codec is disabled : CALL END!
MMTE_WaitEvent CSCALL OMX_EventIndexSettingChanged OMX_ALL OMX_Symbian_IndexConfigAudioCodecDisabled
MMTE_WaitEvent CSCALL OMX_EventBufferFlag OUT 0

OMX_SendCommand	 CSCALL OMX_CommandStateSet OMX_StateIdle
MMTE_WaitEvent   CSCALL OMX_EventCmdComplete OMX_CommandStateSet OMX_StateIdle

OMX_SendCommand	 CSCALL OMX_CommandStateSet OMX_StateLoaded
MMTE_FreeBuffers CSCALL IN
MMTE_FreeBuffers CSCALL OUT
MMTE_WaitEvent   CSCALL OMX_EventCmdComplete OMX_CommandStateSet OMX_StateLoaded

OMX_FreeHandle   CSCALL

MMTE_CheckMemoryStatus

unalias PROTO
unalias PROTOCOL
unalias TRACE_LEVEL
unalias SAMPLING_RATE
unalias NB_CHANNELS 
unalias INPUT_FILE
unalias OUTPUT_FILE
unalias OUTPUT_SIZE
unalias INPUT_BUFFERCOUNT
unalias OUTPUT_BUFFERCOUNT
unalias IN
unalias OUT
test_end
