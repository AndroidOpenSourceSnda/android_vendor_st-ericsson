/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 * This code is ST-Ericsson proprietary and confidential.
 * Any use of the code for whatever purpose is subject to
 * specific written permission of ST-Ericsson SA.
 */

#ifndef SCALAR_OPINTERFACE_H_
#define SCALAR_OPINTERFACE_H_

/**
 \file 	Scalar_OPInterface.h
 \brief	This file is a part of the scalar module release code.
 		It provides an Interface to access the driver layer of
 		the general purpose scalar.
 \ingroup Scalar
*/


/**
 \struct Scalar_UserParams_ts
 \brief User parameters that can be overidden for the Scalars.
 \ingroup Scalar
*/

#include "Platform.h"
#include "ScalarPlatformSpecific.h"
#include "Scalar.h"

typedef struct
{
  /// Scalar coefficient array length
  uint16_t u16_PhysRegSize;

  /// Scalar coefficient bitwidth
  uint8_t  u8_PhysRegWidth;

  /// Physical buffer level
  uint8_t  u8_BSize;

  /// Crispness level
  uint8_t  u8_Crisp;

  /// Anti zip control
  uint8_t  e_Flag_AntiZipEnable;

} Scalar_UserParams_ts;

/**
 \struct Scalar_Inputs_ts
 \brief Inputs needed by the Scalar module. These inputs define a
 		particular scale up/down operation at a given field of view
 		for a given input and output image size.
 \ingroup Scalar
*/

typedef struct
{
  /// Scalar step size. Defined as input_size/output_size
  float_t	f_Step;

  /// Top level float crop value. It is the distance
  /// between the FFOVX centre and cropper H input center
  /// accounting for the step size
  float_t	f_HCrop;

  /// Top level float crop value. It is the distance
  /// between the FFOVY centre and cropper V input center
  /// accounting for the step size
  float_t	f_VCrop;

  /// Horizontal image size at the input of the crop block
  uint16_t  u16_HCropperInputSize;

  /// Vertical image size at the input of the crop block
  uint16_t  u16_VCropperInputSize;

  /// Horizontal image size required at the scalar output
  uint16_t  u16_HScalarOutputSize;

  /// Vertical image size required at the scalar output
  uint16_t  u16_VScalarOutputSize;

} Scalar_Inputs_ts;

/**
 \struct Scalar_Output_ts
 \brief Output generated by the Scalar module.
 \ingroup Scalar
*/

typedef struct
{
  /// Horizontal filter kick off delay
  float_t  f_HGPSCrop;

  /// Vertical filter kick off delay
  float_t  f_VGPSCrop;

  /// Pointer to the scalar coefficients
  int16_t   * ptrs16_Cof;

  //Border Copies
  uint32_t u32_LBorderCopies;

  //Border Copies
  uint32_t u32_RBorderCopies;

  /// Horizontal Crop Start (gross crop)
  uint16_t	u16_HCropStart;

  /// Horizontal Crop Size
  uint16_t	u16_HCropSize;

  /// Vertical Crop Start (gross crop)
  uint16_t	u16_VCropStart;

  /// Vertical Crop Size
  uint16_t	u16_VCropSize;

  /// Left horizontal border
  uint16_t	u16_LeftBorder;

  /// Right horizontal border
  uint16_t	u16_RightBorder;

  /// Top vertical border
  uint16_t	u16_TopBorder;

  /// Bottom vertical border
  uint16_t	u16_BottomBorder;

  /// Physical filter length
  uint8_t  u8_NSize;

  /// Log of polyphases
  uint8_t  u8_LogMSize;

  /// Count of scalar coefficients
  uint8_t  u8_CofCount;

  /// Flag to indicate if the scalar is enabled
  uint8_t  e_Flag_ScalarEnable;

  /// Flag to indicate if the scalar is downscaling
  uint8_t  e_Flag_DownScaling;



} Scalar_Output_ts;

/**
 \struct Scalar_StripeInputParams_ts
 \brief Inputs needed by Scalar for Striping.
 		These inputs define stripe_count and stripe_index which are needed by Scalar module
 \ingroup Scalar
*/

typedef struct
{
  /// stripe_index
  uint8_t  u8_StripeIndex;

  /// stripe_count
  uint8_t	u8_StripeCount;

} Scalar_Stripe_InputParams_ts;

/**
 \struct Scalar_StripeOutputParams_ts
 \brief Output generated by the Scalar module for Striping.

 \ingroup Scalar
*/

typedef struct
{
	/// stripe_InCropHStart
	int16_t s16_StripeInCropHStart;

	/// stripe_InCropVStart
	int16_t s16_StripeInCropVStart;

	/// stripe_InCropHSize
	int16_t s16_StripeInCropHSize;

	/// stripe_InCropVSize
	int16_t s16_StripeInCropVSize;

	/// stripe_OutCropHStart
	int16_t s16_StripeOutCropHStart;

	/// stripe_OutCropVStart
	int16_t s16_StripeOutCropVStart;

	/// stripe_OutCropHSize
	int16_t s16_StripeOutCropHSize;

	/// stripe_OutCropVSize
	int16_t s16_StripeOutCropVSize;

	/// Minimum Line Length
	int16_t s16_MinLineLength;

	/// stripe_scalar_output_hsize
	int16_t s16_StripeScalarOutputHSize;

	/// stripe_scalar_output_vsize
	int16_t s16_StripeScalarOutputVSize;

	/// stripe_ScalerInputHSize
	int16_t s16_SScalerInputHSize;

	/// stripe_ScalerInputVSize
	int16_t s16_SScalerInputVSize;



} Scalar_Stripe_OutputParams_ts;


extern void Scalar_Compute(Scalar_UserParams_ts *UserParams, Scalar_Inputs_ts *Inputs, Scalar_Output_ts *Output,Scalar_Stripe_InputParams_ts *StripeInputs,Scalar_Stripe_OutputParams_ts *StripeOutputs,uint8_t u8_PipeNo) TO_EXT_DDR_PRGM_MEM;
extern Scalar_StripeInternalParams_ts g_Scalar_StripeInternalParams[PIPE_COUNT];
#endif /*SCALAR_OPINTERFACE_H_*/
