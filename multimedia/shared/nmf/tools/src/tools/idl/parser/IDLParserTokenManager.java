/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 *
 * This code is part of the NMF Toolset.
 *
 * The NMF Toolset is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * The NMF Toolset is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with the NMF Toolset. If not, see <http://www.gnu.org/licenses/>.
 *
 */
/* Generated By:JavaCC: Do not edit this line. IDLParserTokenManager.java */
package tools.idl.parser;
import tools.common.compilerexception;
import tools.common.util;
import tools.idl.ast.*;
import java.io.File;

/** Token Manager. */
public class IDLParserTokenManager implements IDLParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x80L) != 0L)
            return 0;
         if ((active0 & 0xfffffc3ffffffc00L) != 0L || (active1 & 0x7fL) != 0L)
         {
            jjmatchedKind = 71;
            return 7;
         }
         return -1;
      case 1:
         if ((active0 & 0x600000000L) != 0L || (active1 & 0x8L) != 0L)
            return 7;
         if ((active0 & 0xfffffc39fffffc00L) != 0L || (active1 & 0x77L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 1;
            }
            return 7;
         }
         return -1;
      case 2:
         if ((active0 & 0x1100000000L) != 0L || (active1 & 0x2L) != 0L)
            return 7;
         if ((active0 & 0xfffffc28fffffc00L) != 0L || (active1 & 0x7dL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 71;
               jjmatchedPos = 2;
            }
            return 7;
         }
         return -1;
      case 3:
         if ((active0 & 0x7ffffc3801fffc00L) != 0L || (active1 & 0x7dL) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 3;
            return 7;
         }
         if ((active0 & 0x80000000fe000000L) != 0L)
            return 7;
         return -1;
      case 4:
         if ((active0 & 0x7ffffc38001ffc00L) != 0L || (active1 & 0x69L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 4;
            return 7;
         }
         if ((active0 & 0x1e00000L) != 0L || (active1 & 0x14L) != 0L)
            return 7;
         return -1;
      case 5:
         if ((active0 & 0x7ffffc3800007c00L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 5;
            return 7;
         }
         if ((active0 & 0x1f8000L) != 0L || (active1 & 0x29L) != 0L)
            return 7;
         return -1;
      case 6:
         if ((active0 & 0x2fd7fc3800001c00L) != 0L || (active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 6;
            return 7;
         }
         if ((active0 & 0x5028000000006000L) != 0L)
            return 7;
         return -1;
      case 7:
         if ((active0 & 0x3803800000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
            return 7;
         }
         if ((active0 & 0x2fd47c0000001c00L) != 0L || (active1 & 0x40L) != 0L)
            return 7;
         return -1;
      case 8:
         if ((active0 & 0x3800800000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
            return 7;
         }
         if ((active0 & 0x3000000000L) != 0L)
            return 7;
         return -1;
      case 9:
         if ((active0 & 0x3800800000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 9;
            return 7;
         }
         return -1;
      case 10:
         if ((active0 & 0x3800800000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 10;
            return 7;
         }
         return -1;
      case 11:
         if ((active0 & 0x2800800000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 11;
            return 7;
         }
         if ((active0 & 0x1000000000000L) != 0L)
            return 7;
         return -1;
      case 12:
         if ((active0 & 0x2800000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 12;
            return 7;
         }
         if ((active0 & 0x800000000L) != 0L)
            return 7;
         return -1;
      case 13:
         if ((active0 & 0x2000000000000L) != 0L)
            return 7;
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 13;
            return 7;
         }
         return -1;
      case 14:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 14;
            return 7;
         }
         return -1;
      case 15:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 15;
            return 7;
         }
         return -1;
      case 16:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 16;
            return 7;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_0(0x3c000000000L, 0x0L);
      case 38:
         return jjStopAtPos(0, 87);
      case 40:
         return jjStopAtPos(0, 84);
      case 41:
         return jjStopAtPos(0, 86);
      case 42:
         return jjStopAtPos(0, 88);
      case 43:
         return jjStopAtPos(0, 94);
      case 44:
         return jjStopAtPos(0, 85);
      case 45:
         return jjStopAtPos(0, 93);
      case 46:
         return jjStopAtPos(0, 89);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 59:
         return jjStopAtPos(0, 81);
      case 61:
         return jjStopAtPos(0, 92);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 90);
      case 93:
         return jjStopAtPos(0, 91);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x8000000005000400L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400004000L, 0x8L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x12040000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x10L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1200000000L, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x21000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x198000L, 0x24L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x7ffffc0000002000L, 0x1L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x2000800000L, 0x40L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x40000800L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 82);
      case 125:
         return jjStopAtPos(0, 83);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x7ffffc0000000000L, active1, 0x1L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000025000L, active1, 0L);
      case 102:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(1, 33, 7);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000200000L, active1, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000008000L, active1, 0x20L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x3010800000L, active1, 0x42L);
      case 111:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x1c9000c00L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x180000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000100000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000400000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000004000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000L, active1, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40a10000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x24009000400L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x14L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000002000L, active1, 0L);
      case 114:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(2, 32, 7);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x7fc3000006000000L, active1, 0x40L);
      case 116:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10a0060000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x3c7c0010000000L, active1, 0x8L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000404800L, active1, 0x10L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 7);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x100004a000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 7);
         break;
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x3800000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x6ff47c0000001000L, active1, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L, active1, 0L);
      case 109:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 7);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x20L);
      case 111:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 7);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x1L);
      case 114:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 7);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x110400L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x1008000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x3000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x90000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000002000L, active1, 0L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x30000100400L, active1, 0L);
      case 107:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 7);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x8L);
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x6ff47c2000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1008000000008000L, active1, 0x1L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000060000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 7);
         else if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 7);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 7);
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 7);
         break;
      case 100:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 7);
         break;
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 67, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000002000L, active1, 0L);
      case 102:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 15, 7);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(5, 41);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 7);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0L);
      case 108:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 64, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 7);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000400L, active1, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100b000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 7);
         return jjMoveStringLiteralDfa6_0(active0, 0x6ff47c0000001000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa7_0(active0, 0x2010000000000000L, active1, 0L);
      case 50:
         return jjMoveStringLiteralDfa7_0(active0, 0x804000000000000L, active1, 0L);
      case 51:
         return jjMoveStringLiteralDfa7_0(active0, 0x400400000000000L, active1, 0L);
      case 52:
         return jjMoveStringLiteralDfa7_0(active0, 0x300300000000000L, active1, 0L);
      case 53:
         return jjMoveStringLiteralDfa7_0(active0, 0x80080000000000L, active1, 0L);
      case 54:
         return jjMoveStringLiteralDfa7_0(active0, 0x40040000000000L, active1, 0L);
      case 56:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 53, 7);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 7);
         break;
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 100:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 7);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 7);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(6, 40);
         return jjMoveStringLiteralDfa7_0(active0, 0x3000000001000L, active1, 0x40L);
      case 102:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 7);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 39);
         break;
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 7);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 7);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 7);
         break;
      case 50:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 7);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 7);
         break;
      case 52:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 7);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 7);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 7);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 7);
         break;
      case 54:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 7);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 7);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 7);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 61, 7);
         break;
      case 56:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 7);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 7);
         break;
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x801000000000L, active1, 0L);
      case 100:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 7);
         return jjMoveStringLiteralDfa8_0(active0, 0x3000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 7);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 7);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(7, 38);
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000000000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 100:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 37, 7);
         break;
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000000000L);
      case 103:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 48, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(12, 35, 7);
         break;
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 49, 7);
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 47, 7);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 40;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 77)
                        kind = 77;
                     jjCheckNAddStates(3, 6);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 60)
                     jjCheckNAddTwoStates(9, 10);
                  else if (curChar == 36)
                  {
                     if (kind > 71)
                        kind = 71;
                     jjCheckNAdd(7);
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(12, 14);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(12, 14);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar != 36)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if (curChar == 60)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0xbfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if (curChar == 62 && kind > 74)
                     kind = 74;
                  break;
               case 11:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 12:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if (curChar == 39 && kind > 75)
                     kind = 75;
                  break;
               case 15:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 16:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(17, 13);
                  break;
               case 17:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 18:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(17);
                  break;
               case 20:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 21:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 23:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 24:
                  if (curChar == 34 && kind > 76)
                     kind = 76;
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(15, 18);
                  break;
               case 26:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 27:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 29:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddStates(0, 2);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddStates(0, 2);
                  break;
               case 34:
                  if (curChar != 48)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddStates(3, 6);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddStates(19, 21);
                  break;
               case 38:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddStates(22, 24);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 71)
                     kind = 71;
                  jjCheckNAdd(7);
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(12, 14);
                  break;
               case 9:
                  jjAddStates(25, 26);
                  break;
               case 12:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(27, 29);
                  break;
               case 15:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(13);
                  break;
               case 21:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 22:
                  if (curChar == 92)
                     jjAddStates(30, 32);
                  break;
               case 23:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 31:
                  if ((0x20100000201000L & l) != 0L && kind > 77)
                     kind = 77;
                  break;
               case 32:
                  if ((0x100000001000L & l) != 0L && kind > 77)
                     kind = 77;
                  break;
               case 33:
               case 37:
               case 39:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(32);
                  break;
               case 35:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 77)
                     kind = 77;
                  jjCheckNAddStates(19, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(12, 14);
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(25, 26);
                  break;
               case 12:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 21:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 40 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   30, 31, 33, 35, 38, 31, 39, 21, 22, 24, 12, 14, 1, 2, 4, 21, 
   22, 26, 24, 36, 31, 37, 38, 31, 39, 9, 10, 15, 16, 18, 23, 25, 
   27, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, 
"\143\157\156\164\151\156\165\145", "\166\157\154\141\164\151\154\145", "\162\145\147\151\163\164\145\162", 
"\164\171\160\145\144\145\146", "\144\145\146\141\165\154\164", "\163\151\172\145\157\146", 
"\163\167\151\164\143\150", "\162\145\164\165\162\156", "\145\170\164\145\162\156", 
"\163\164\162\165\143\164", "\163\164\141\164\151\143", "\167\150\151\154\145", "\142\162\145\141\153", 
"\165\156\151\157\156", "\143\157\156\163\164", "\145\154\163\145", "\143\141\163\145", 
"\154\157\156\147", "\145\156\165\155", "\141\165\164\157", "\166\157\151\144", 
"\147\157\164\157", "\146\157\162", "\151\146", "\144\157", 
"\111\115\120\117\122\124\137\123\110\101\122\105\104", "\151\156\164\145\162\146\141\143\145", 
"\165\156\155\141\156\141\147\145\144", "\43\151\156\143\154\165\144\145", "\43\151\146\156\144\145\146", 
"\43\144\145\146\151\156\145", "\43\145\156\144\151\146", "\164\137\165\151\156\164\66\64", 
"\164\137\165\151\156\164\65\66", "\164\137\165\151\156\164\64\70", "\164\137\165\151\156\164\64\60", 
"\164\137\165\151\156\164\63\62", "\164\137\160\150\171\163\151\143\141\154\137\141\144\144\162\145\163\163", 
"\164\137\163\150\141\162\145\144\137\162\145\147", "\164\137\163\150\141\162\145\144\137\146\151\145\154\144", 
"\164\137\165\151\156\164\62\64", "\164\137\165\167\157\162\144", "\164\137\165\151\156\164\61\66", 
"\164\137\165\151\156\164\70", "\164\137\163\151\156\164\66\64", "\164\137\163\151\156\164\65\66", 
"\164\137\163\151\156\164\64\70", "\164\137\163\151\156\164\64\60", "\164\137\163\151\156\164\63\62", 
"\164\137\163\151\156\164\62\64", "\164\137\163\167\157\162\144", "\164\137\163\151\156\164\61\66", 
"\164\137\163\151\156\164\70", "\143\150\141\162", "\164\137\142\157\157\154", "\151\156\164", 
"\163\150\157\162\164", "\144\157\165\142\154\145", "\146\154\157\141\164", 
"\163\151\147\156\145\144", "\165\156\163\151\147\156\145\144", null, null, null, null, null, null, null, 
null, null, null, "\73", "\173", "\175", "\50", "\54", "\51", "\46", "\52", "\56", 
"\133", "\135", "\75", "\55", "\53", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffc01L, 0x7ffe3cffL, 
};
static final long[] jjtoSkip = {
   0x17eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x140L, 0x0L, 
};
static final long[] jjtoMore = {
   0x280L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[40];
private final int[] jjstateSet = new int[80];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public IDLParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public IDLParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 40; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
