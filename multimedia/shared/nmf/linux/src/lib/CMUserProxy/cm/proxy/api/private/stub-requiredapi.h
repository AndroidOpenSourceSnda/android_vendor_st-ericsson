/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 * This code is ST-Ericsson proprietary and confidential.
 * Any use of the code for whatever purpose is subject to
 * specific written permission of ST-Ericsson SA.
 */
 
/*!
 * \brief Component Manager Internal API for stubs.
 */
/*!
 * \defgroup CM_INTERNAL_API CM Proxy Internal API (used by generated code)
 * \note This API is not for developers, this API is only an internal API.\n
 *
 * This API is used internally by code generated by NMF. This code will be linked with
 * application and CM proxy.
 *
 * If no concurrent access will be perform, a method call is enough and dependencies
 * will be handle by link. If not, it could be necessary to wrap this API during the
 * system integration.
 *
 * \ingroup CM_PROXY_MODULE
 */
#ifndef COMMON_STUB_REQUIREAPI_H
#define COMMON_STUB_REQUIREAPI_H

#include <cm/proxy/common/component/inc/interface_type.h>
#include <cm/engine/communication/inc/communication_type.h>


typedef t_uint8 t_nmf_bc_coding_style;

#define NMF_BC_IN_C     ((t_nmf_bc_coding_style)0)
#define NMF_BC_IN_CPP   ((t_nmf_bc_coding_style)1)

/*!
 * \internal
 * \brief ARM->DSP communication ARM this description
 *
 * \ingroup COMMUNICATION_INTERNAL
 */
typedef struct {
    t_cm_bf_host2mpc_handle    host2mpcId;                //!< Handle of the host->MPC binding factory
} t_nmf_arm_dsp_this;

/*!
 * \internal
 * \brief Stub init function API (Host->MPC communication)
 * For each interface, the NMF tools generate (nkitfc -[host|user]2mpc <interface name>) the stub functions code and an init function providing needed information
 * regarding the given interface
 * A reference of this init function is added into the dedicated array and this last one is referenced into a t_nmf_stub_register variable
 *
 * \ingroup COMMUNICATION_INTERNAL
 */
typedef t_cm_bf_host2mpc_handle* (*t_nmf_init_stub_fct)(t_nmf_interface_desc* itfref);

/*!
 * \internal
 * \brief Stub init function API description (Host->MPC communication)
 * \see t_nmf_stub_function description
 *
 * \ingroup COMMUNICATION_INTERNAL
 */
typedef struct {
    const char *itfType;
    t_nmf_init_stub_fct initStubFct;
} t_nmf_stub_function;

/*!
 * \internal
 * \brief Stub init function register entry (ARM->DSP communication)
 * \see t_nmf_stub_function description
 *
 * \ingroup COMMUNICATION_INTERNAL
 */
typedef struct {
    t_nmf_bc_coding_style codingStyle;
    t_uint32 numElems;
    const t_nmf_stub_function *pStubFctArray;
} t_nmf_stub_register;


/*!
 * \internal
 * \brief Internal type used to manage jumptable for a given interface (DSP->ARM communication)
 *
 * \ingroup COMMUNICATION_INTERNAL
 */
typedef void (*t_jump_method)(t_nmf_interface_desc * itfref, t_event_params_handle);

/*!
 * \internal
 * \brief MPC->Host communication ARM this description
 *
 * \ingroup COMMUNICATION_INTERNAL
 */
typedef struct {
    t_cm_bf_mpc2host_handle     mpc2hostId;         //!< Handle of the MPC->Host binding factory
    void                        *clientContext;     //!< Pointer to the callback client context provided by the user
    t_jump_method               *jumpMethods;       //!< Jump method of skeleton
} t_nmf_dsp_arm_this;

/*!
 * \internal
 * \brief Skeleton init function API description (MPC->Host communication)
 * For each interface, the NMF tools generate (nkitfc -mpc2[host|user] <interface name>) skeleton jump methods array.
 * regarding the given interface
 * A reference of this array is added into the dedicated array and this last one is referenced into a t_nmf_skel_register variable
 *
 * \ingroup COMMUNICATION_INTERNAL
 */
typedef struct {
    const char                  *itfType;
    t_jump_method               *jumpMethods;
} t_nmf_skel_function;


/*!
 * \internal
 * \brief Skel init function register entry (DSP->ARM communication)
 * \see t_nmf_skel_function description
 *
 * \ingroup COMMUNICATION_INTERNAL
 */
typedef struct {
    t_nmf_bc_coding_style codingStyle;
    t_uint32 numElems;
    const t_nmf_skel_function *pSkelFctArray;
} t_nmf_skel_register;


/*!
 * \brief Allocate Event buffer where parameters will be marshalled.
 *
 * The purpose of this pre-allocation is to avoid copy.
 *
 * \param[in] host2mpcId Host -> MPC param id.
 *
 * \return Event param handle.

 * \ingroup CM_INTERNAL_API
 */
PUBLIC t_event_params_handle CM_INTERNAL_AllocEvent(t_cm_bf_host2mpc_handle host2mpcId);

/*!
 * \brief Push a event in Fifo.
 *
 * \param[in] host2mpcId Host -> MPC param id.
 * \param[in] h Event param handle.
 * \param[in] methodIndex Index in the interface of the method to be called.
 *
 * \exception CM_MPC_NOT_RESPONDING
 *
 * \ingroup CM_INTERNAL_API
 */
PUBLIC t_cm_error CM_INTERNAL_PushEvent(
        t_cm_bf_host2mpc_handle host2mpcId,
        t_event_params_handle h,
        t_uint32 methodIndex);

/*!
 * \brief Push a event in Fifo.
 *
 * \param[in] host2mpcId Host -> MPC param id.
 * \param[in] h Event param handle.
 * \param[in] size Event param size.
 * \param[in] methodIndex Index in the interface of the method to be called.
 *
 * \exception CM_PARAM_FIFO_FULL
 * \exception CM_MPC_NOT_RESPONDING
 *
 * \ingroup CM_INTERNAL_API
 */
PUBLIC IMPORT_SHARED t_cm_error CM_INTERNAL_PushEventWithSize(
        t_cm_bf_host2mpc_handle host2mpcId,
        t_event_params_handle h,
        t_uint32 size,
        t_uint32 methodIndex);

/********************************************************************************/
/*       Configuration Component Manager API internal prototypes                */
/*       Not used directly by user (used only by REGISTER_XX macros)            */
/********************************************************************************/
/*!
 * \brief Host stubs registering facilities.
 *
 * Not used directly by user (used only by CM_REGISTER_XX macros)
 *
 * \param[in] pInterfacesArray Stubs array.
 *
 * \ingroup CM_INTERNAL_API
 */
PUBLIC IMPORT_SHARED void CM_INTERNAL_RegisterHost2MpcInterfaces(t_nmf_stub_register *pInterfacesArray);

/*!
 * \brief Host stubs unregistering facilities.
 *
 * Not used directly by user (used only by CM_REGISTER_XX macros)
 *
 * \param[in] pInterfacesArray Stubs array.
 *
 * \ingroup CM_INTERNAL_API
 */
PUBLIC IMPORT_SHARED void CM_INTERNAL_UnregisterHost2MpcInterfaces(t_nmf_stub_register *pInterfacesArray);

/*!
 * \brief Host skeletons registering facilities.
 *
 * Not used directly by user (used only by CM_REGISTER_XX macros)
 *
 * \param[in] pInterfacesArray Skels array.
 *
 * \ingroup CM_INTERNAL_API
 */
PUBLIC IMPORT_SHARED void CM_INTERNAL_RegisterMpc2HostInterfaces(t_nmf_skel_register *pInterfacesArray);

/*!
 * \brief Host skeletons unregistering facilities.
 *
 * Not used directly by user (used only by CM_REGISTER_XX macros)
 *
 * \param[in] pInterfacesArray Skels array.
 *
 * \ingroup CM_INTERNAL_API
 */
PUBLIC IMPORT_SHARED void CM_INTERNAL_UnregisterMpc2HostInterfaces(t_nmf_skel_register *pInterfacesArray);


#endif /* COMMON_STUB_REQUIREAPI_H */
