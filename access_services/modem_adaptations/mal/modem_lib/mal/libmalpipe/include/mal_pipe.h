/**
 * \file mal_pipe.h
 * \brief This file includes headers for PIPE MAL.
 *
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 * This code is ST-Ericsson proprietary and confidential.
 * Any use of the code for whatever purpose is subject to
 * specific written permission of ST-Ericsson SA.
 *
 * \n MAL PIPE header file for PIPE Library.
 * \n \author ST-Ericsson
 * \n
 * \n Revision History:
 * \n
 * \n v1.0 Initial Version
 * \n
 */

#ifndef __MAL_PIPE_H
#define __MAL_PIPE_H

#include <stdint.h>

#define PN_INVALID_PIPE 0xff

/**
 * \enum  mal_pipe_req_ids_t
 * \brief This provides list of request supported by pipe mal.
 */
enum mal_pipe_req_ids_t {
    MAL_REQ_PIPE_CREATE, /**< create pipe context. Refer \ref mal_pipe_create_req_t*/
    MAL_REQ_PIPE_REMOVE, /**< remove pipe context. Refer \ref mal_pipe_remove_req_t */
    MAL_REQ_PIPE_CONNECT,/**< connect peps on modem and host side. Refer \ref mal_pipe_connect_req_t */
    MAL_REQ_PIPE_ENABLE, /**< enable pipe for data transfer. Refer  \ref mal_pipe_enable_req_t */
    MAL_REQ_PIPE_DISABLE,/**< disable pipe. Refer \ref mal_pipe_disable_req_t */
    MAL_REQ_PIPE_RESET, /**< reset pipe. Refer \ref mal_pipe_reset_req_t*/
    MAL_REQ_PIPE_DISCONNECT, /**< disconnect peps. Refer \ref mal_pipe_disconnect_req_t */
    MAL_REQ_GET_IF_NAME /**< get interface name */
};

/**
 * \enum mal_pipe_event_ids_t
 * \brief This provides list of events generated by pipe mal in
 * response to pipe mal request or unsolicited events in modem.
 */
enum mal_pipe_event_ids_t {
    MAL_PIPE_STATE_CONNECTED, /**< peps are created and connected */
    MAL_PIPE_STATE_ENABLED, /**< pipe is enabled for data transfer */
    MAL_PIPE_STATE_DISABLED, /**< pipe is disabled for data transfer */
    MAL_PIPE_STATE_DISCONNECTED, /**< peps are disconnected */
    MAL_PIPE_STATE_UNKNOWN /**< some pipe operation failed */
};
/**
 * \enum pep_type_t
 * \brief Type of pipe-end-point.
 * \param MAL_PEP_TYPE_NONE Not used
 * \param MAL_PEP_TYPE_MODEM Modem PEP
 * \param MAL_PEP_TYPE_PHONET Host PEP
 */
typedef enum {
    MAL_PEP_TYPE_NONE,
    MAL_PEP_TYPE_MODEM,
    MAL_PEP_TYPE_PHONET,
} pep_type_t;

enum {    /* error codes */
    MAL_PIPE_NO_ERROR = 0,
    MAL_PIPE_ERR_INVALID_PARAM = -1,
    MAL_PIPE_ERR_INVALID_HANDLE = -2,
    MAL_PIPE_ERR_INVALID_CTRL_ID = -3,
    MAL_PIPE_ERR_NOT_ALLOWED = -4,
    MAL_PIPE_ERR_PEP_IN_USE = -5,
    MAL_PIPE_ERR_OVERLOAD = -6,
    MAL_PIPE_ERR_DEV_DISCONNECTED = -7,
    MAL_PIPE_ERR_TIMEOUT = -8,
    MAL_PIPE_ERR_ALL_PIPES_IN_USE = -9,
    MAL_PIPE_ERR_GENERAL = -10,
    MAL_PIPE_ERR_NOT_SUPPORTED = -11
};

enum {
    MAL_PN_PIPE_DISABLE,
    MAL_PN_PIPE_ENABLE
};

/**
 * \struct mal_pipe_create_req_t
 * \brief This structure stores pipe creation parameters.
 * \param cmd Set to MAL_REQ_PIPE_CREATE.
 * \param priority Ignored
 * \param device1 PEP-1 Device ID (Use modem pep only).
 * \param object1 PEP-1 Object ID (Use modem pep only).
 * \param type1 Type of PEP1 (set to MAL_PEP_TYPE_MODEM).
 * \param device2 PEP-2 Device ID (Use modem pep only).
 * \param object2 PEP-2 Object ID (Use modem pep only).
 * \param type2 Type of PEP2 (set to MAL_PEP_TYPE_PHONET).
 */
typedef struct {
    uint8_t cmd;
    uint8_t priority;
    uint8_t device1;
    uint8_t object1;
    uint8_t type1;
    uint8_t device2;
    uint8_t object2;
    uint8_t type2;
} mal_pipe_create_req_t;

/**
 * \struct mal_pipe_remove_req_t
 * \brief This structure stores pipe removal parameters.
 * \param cmd Set to MAL_REQ_PIPE_REMOVE.
 * \param pipe_handle Pipe Handle returned from MAL_REQ_PIPE_CREATE.
 */
typedef struct {
    uint8_t cmd;
    uint8_t pipe_handle;
} mal_pipe_remove_req_t;

/**
 * \struct mal_pipe_connect_req_t
 * \brief This structure stores pipe connect request parameters.
 * \param cmd Set to MAL_REQ_PIPE_CONNECT.
 * \param pipe_handle Pipe Handle returned from MAL_REQ_PIPE_CREATE.
 * \param state_after State of pipe after creation (always use MAL_PN_PIPE_DISABLE).
 */
typedef struct {
    uint8_t cmd;
    uint8_t pipe_handle;
    uint8_t state_after;
} mal_pipe_connect_req_t;

/**
 * \struct mal_pipe_enable_req_t
 * \brief This structure stores pipe enable request parameters.
 * \param cmd set to MAL_REQ_PIPE_ENABLE.
 * \param pipe_handle  Pipe Handle returned from MAL_REQ_PIPE_CREATE.
 */
typedef struct {
    uint8_t cmd;
    uint8_t pipe_handle;
} mal_pipe_enable_req_t;

/**
 * \struct mal_pipe_disable_req_t
 * \brief This structure stores pipe disable request parameters.
 * \param cmd Set to MAL_REQ_PIPE_DISABLE.
 * \param pipe_handle Pipe Handle returned from MAL_REQ_PIPE_CREATE.
 */
typedef struct {
    uint8_t cmd;
    uint8_t pipe_handle;
} mal_pipe_disable_req_t;

/**
 * \struct mal_pipe_disconnect_req_t
 * \brief This structure stores pipe disconnect parameters.
 * \param cmd Set to MAL_REQ_PIPE_DISCONNECT.
 * \param pipe_handle Pipe Handle returned from MAL_REQ_PIPE_CREATE.
 */
typedef struct {
    uint8_t cmd;
    uint8_t pipe_handle;
} mal_pipe_disconnect_req_t;

/**
 * \struct mal_pipe_reset_req_t
 * \brief This structure stores pipe reset parameters.
 * \param cmd Set to MAL_REQ_PIPE_RESET.
 * \param state_after State of pipe after reset.
 */
typedef struct {
    uint8_t cmd;
    uint8_t pipe_handle;
    uint8_t state_after;
} mal_pipe_reset_req_t;

/*-------------------------*/
/* PIPE MAL API definitions*/
/*-------------------------*/

/**
 * \typedef typedef void (*mal_pipe_event_cb_t)(uint8 pipe_id, enum mal_pipe_event_ids_t event_id)
 * \brief callback function for any expected or unexpected event information from modem.
 * \param [in] pipe_id pipe handle to which this event is associated.
 * \param [in] event_id id of unsolicited event: /ref mal_pipe_event_ids_t
 * \return None
 */
typedef void (*mal_pipe_event_cb_t)(uint8_t pipe_id, enum mal_pipe_event_ids_t event_id);

/**
 * \fn int32_t mal_pipe_init(void)
 * \brief Opnes socket using phonet lib.
 * Should be called only once at the time of initialization.
 * \return file descriptor if successful.
 * \return negative on failure.
 */
int32_t mal_pipe_init(void);

/**
 * \fn int32_t mal_pipe_deinit(void)
 * \brief deinit pipe mal.
 * \return SUCCESS(0)
 * \return negative on failure.
 */
int32_t mal_pipe_deinit(void);

/**
 * \fn int32_t mal_pipe_request(uint8_t pipe_id, enum mal_pipe_req_ids_t req_id, void* params)
 * \brief pipe mal request handler function.
 * \param [in] pipe_id pipe id to which request is associated.
 * \param [in] req_id request id: \ref mal_pipe_req_ids_t
 * \param [in] params request parameters
 * \return SUCCESS (0)
 * \return negative on failure.
 */
int32_t mal_pipe_request(uint8_t pipe_id, enum mal_pipe_req_ids_t req_id, void *params);

/**
 * \fn int mal_pipe_register_callback(mal_pipe_event_cb_t event_cb)
 * \brief callback handler
 * \param [in] event_cb callback handler: \ref mal_pipe_event_cb
 * \return None
 */
void mal_pipe_register_callback(mal_pipe_event_cb_t event_cb);

/**
 * \fn void mal_pipe_response_handler(void)
 * \brief This function is called by application to inform that some message is
 * available from modem for processing.
 * \return None
 */
void mal_pipe_response_handler(void);

/**
 *  \fn int32_t mal_pipe_request_set_debug_level(uint8_t level)
 *  \brief  This Api is used to set the debug level for pipe module. This is a synchronous call.
 *  \param [in] level  0 - No Prints; 1 - Entry & Exit Prints; 2 - Value/Info Prints; 3 - ISI MSG Prints
 *                               4 - All Prints
 *  \return SUCCESS (0)
 *  \return negative on failure.
 */
int32_t mal_pipe_request_set_debug_level(uint8_t level);

/**
 *  \fn int32_t mal_pipe_request_get_debug_level(uint8_t *level)
 *  \brief  This Api is used to get the debug level for pipe module. This is a synchronous call.
 *   \param[out] debug level for pipe module. data type: pointer to uint8_t.
 *                       Caller needs to take care of memory allocation
 *  \return SUCCESS (0)
 *  \return negative on failure.
 */
int32_t mal_pipe_request_get_debug_level(uint8_t *level);

#endif //__MAL_PIPE_H

