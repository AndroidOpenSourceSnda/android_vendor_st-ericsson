/* **************************************************************************
 *
 * config_file_reader.h
 *
 * Copyright (C) 2010 ST-Ericsson SA
 *
 * This software is released either under the terms of the BSD-style
 * license accompanying CSPSA or a proprietary license obtained from
 * ST-Ericsson SA.
 *
 * Author: 2010, Martin Lundholm <martin.xa.lundholm@stericsson.com>
 *
 * DESCRIPTION:
 *
 * CFR = Configuration File Reader
 * Helps reading parameters from a configuration file generated by kconfig/menuconfig.
 *
 **************************************************************************** */

// =============================================================================
#ifndef INCLUSION_GUARD_CFR_H
#define INCLUSION_GUARD_CFR_H
// =============================================================================

// =============================================================================
//  Configurations
// =============================================================================

// - CFG_CFR_XXX: Brief.
#ifndef CFG_CFR_XX_YY
#define CFG_CFR_XX_YY                    	(1)
#endif

// =============================================================================
//  Include Header Files
// =============================================================================

#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>

// =============================================================================
//  Defines
// =============================================================================

/**
 * D_CFR_XX_YY.
 */
//#define D_CFR_XX_YY                   			(1)

// =============================================================================
//  Macros
// =============================================================================

/**
 * Wrapper for free().
 */
#define M_CFR_FREE(Pointer) 	\
  do                          		\
  {                           		\
    free(Pointer);          		  \
    Pointer = NULL;         		  \
  } while (0)

// =============================================================================
//  Types
// =============================================================================

/**
 * Structure of Abc.
 *
 * @param a       	Abc.
 * @param b     		Abc.
 * @param c     		Abc.
 */
//typedef struct
//{
//  uint32_t a;
//  uint32_t b;
//  uint32_t c;
//} CFR_Abc_t;

// -----------------------------------------------------------------------------

typedef struct CfrHandleStruct_t *CFR_Handle_t;

// =============================================================================
//  Global Function Declarations
// =============================================================================

/**
 * Opens a configuration file and returns a handle.
 *
 * @param [in]  FileName_p  File name.
 * @param [out] Handle_p  	Returned handle for furter calls to CFR.
 *
 * @return The result of the operation.
 * @retval 0 If success. Any other value means failure.
 */
int CFR_Open(const char* const FileName_p, CFR_Handle_t* const Handle_p);

// -----------------------------------------------------------------------------

/**
 * Closes a configuration file.
 *
 * @param [in]  Handle  Handle retrieved by a call to CFR_Open().
 *
 */
void CFR_Close(CFR_Handle_t* const Handle_p);

// -----------------------------------------------------------------------------

/**
 * Reads a string value.
 *
 * @param [in]  Handle  		Handle retrieved by a call to CFR_Open().
 * @param [in]  Name_p  		Configuration parameter name.
 * @param [out] Value_p 		Returned string.
 * @param [in]  MaxLength 	Maximum length Value_p
 *
 * @return The result of the operation.
 * @retval 0 If success. Any other value means failure. If the found string is
 * longer than MaxLength an error will be returned.
 */
int CFR_ReadString(
	const CFR_Handle_t Handle,
	const char* const Name_p,
	char* Value_p,
	const uint32_t MaxLength
);

// -----------------------------------------------------------------------------

/**
 * Reads an unsigned long value.
 *
 * @param [in]  Handle  		Handle retrieved by a call to CFR_Open().
 * @param [in]  Name_p  		Configuration parameter name.
 * @param [out] Value_p 		Returned value.
 *
 * @return The result of the operation.
 * @retval 0 If success. Any other value means failure. If the found string is
 * longer than MaxLength an error will be returned.
 */
int CFR_ReadUint32(
	const CFR_Handle_t Handle,
	const char* const Name_p,
	uint32_t* const Value_p
);

// -----------------------------------------------------------------------------

/**
 * Reads an unsigned long value.
 *
 * @param [in]  Handle  		Handle retrieved by a call to CFR_Open().
 * @param [in]  Name_p  		Configuration parameter name.
 * @param [out] Value_p 		Returned value.
 *
 * @return The result of the operation.
 * @retval 0 If success. Any other value means failure. If the found string is
 * longer than MaxLength an error will be returned.
 */
int CFR_ReadUint64(
	const CFR_Handle_t Handle,
	const char* const Name_p,
	uint64_t* const Value_p
);

// -----------------------------------------------------------------------------

/**
 * Reads an boolean value.
 *
 * @param [in]  Handle  		Handle retrieved by a call to CFR_Open().
 * @param [in]  Name_p  		Configuration parameter name.
 * @param [out] Value_p 		Returned value.
 *
 * @return The result of the operation.
 * @retval 0 If success. Any other value means failure. If the found string is
 * longer than MaxLength an error will be returned.
 */
int CFR_ReadBool(
	const CFR_Handle_t Handle,
	const char* const Name_p,
	uint32_t* Value_p
);

// =============================================================================
#endif // INCLUSION_GUARD_CFR_H
// =============================================================================
