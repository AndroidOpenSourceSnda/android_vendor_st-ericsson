/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 * This code is ST-Ericsson proprietary and confidential.
 * Any use of the code for whatever purpose is subject to
 * specific written permission of ST-Ericsson SA.
 */


//#include "audio_chipset_api_index.h"
//#include "audio_render_chipset_api.h"
#include "AudioVirtualizer.h"
#include "AudioVirtualizerNmfMpc.h"
#include "audio_chipset_api_index.h"
// UID top dictionnary (generated by trace compiler)
#include "STEREOWIDENER_top.h"

#include "OstTraceDefinitions_ste.h"
#include "OpenSystemTrace_ste.h"

#ifdef OST_TRACE_COMPILER_IN_USE
#include "audio_stereowidener_proxy_AudioVirtualizerTraces.h"
#endif


AudioVirtualizer_RDB::AudioVirtualizer_RDB(OMX_U32 nbOfDomains) : ENS_ResourcesDB(nbOfDomains)
{
    setNbOfMemoryPresets(6);
    setMemoryPreset(0); // ALL_DDR
    for (unsigned int i=0;i<nbOfDomains;i++) {
        setDefaultNMFDomainType(RM_NMFD_PROCSIA,i);
    }
}


OMX_ERRORTYPE AudioVirtualizer::createResourcesDB(void)
{
    mRMP = new AudioVirtualizer_RDB(getPortCount());
    if(mRMP == 0)
    {
        return OMX_ErrorInsufficientResources;
    }
    else
    {
        return OMX_ErrorNone;
    }
}


OMX_ERRORTYPE audiovirtualizerFactoryMethod(ENS_Component_p *ppENSComponent)
{
    OMX_ERRORTYPE error  = OMX_ErrorNone;
    
    AudioVirtualizer *p_audiovirtualizer = new AudioVirtualizer();
    if (p_audiovirtualizer == 0) {
        return OMX_ErrorInsufficientResources;
    }
    error = p_audiovirtualizer->construct();
    if (error != OMX_ErrorNone){
        delete p_audiovirtualizer;
        *ppENSComponent = 0;
    }
    else{
        *ppENSComponent = p_audiovirtualizer;
    }
    
    if(*ppENSComponent) {
        AudioVirtualizerNmfMpc *AudioVirtualizer_NmfProcessingComp = new AudioVirtualizerNmfMpc(*p_audiovirtualizer);
        if (AudioVirtualizer_NmfProcessingComp == 0) {
            delete p_audiovirtualizer;
            return OMX_ErrorInsufficientResources;
        }
        p_audiovirtualizer->setProcessingComponent(AudioVirtualizer_NmfProcessingComp);
    }
    return error;
}

OMX_ERRORTYPE AudioVirtualizer::construct(void)
{
	  OstTraceInt0 (TRACE_API, "virtualizer construct function\n");
    OMX_ERRORTYPE error;
    OMX_AUDIO_PARAM_PCMMODETYPE defaultPcmSettingsIn, defaultPcmSettingsOut;

    //for input port
    defaultPcmSettingsIn.nPortIndex     = 0;
    defaultPcmSettingsIn.eNumData       = OMX_NumericalDataSigned;
    defaultPcmSettingsIn.eEndian        = OMX_EndianLittle;
    defaultPcmSettingsIn.bInterleaved   = OMX_TRUE;
    defaultPcmSettingsIn.ePCMMode       = OMX_AUDIO_PCMModeLinear;
    defaultPcmSettingsIn.nBitPerSample  = 16;
    defaultPcmSettingsIn.nChannels      = 2;
    defaultPcmSettingsIn.nSamplingRate  = 48000;

    defaultPcmSettingsIn.eChannelMapping[0] = OMX_AUDIO_ChannelLF;
    defaultPcmSettingsIn.eChannelMapping[1] = OMX_AUDIO_ChannelRF;

    //for output port
    defaultPcmSettingsOut.nPortIndex     = 1;
    defaultPcmSettingsOut.eNumData       = OMX_NumericalDataSigned;
    defaultPcmSettingsOut.eEndian        = OMX_EndianLittle;
    defaultPcmSettingsOut.bInterleaved   = OMX_TRUE;
    defaultPcmSettingsOut.ePCMMode       = OMX_AUDIO_PCMModeLinear;
    defaultPcmSettingsOut.nBitPerSample  = 16;
    defaultPcmSettingsOut.nChannels      = 2;
    defaultPcmSettingsOut.nSamplingRate  = 48000;

    defaultPcmSettingsOut.eChannelMapping[0] = OMX_AUDIO_ChannelLF;
    defaultPcmSettingsOut.eChannelMapping[1] = OMX_AUDIO_ChannelRF;

    mOMX_Symbian_ConfigAudioVirtualizer.nSize           = sizeof(OMX_SYMBIAN_AUDIO_CONFIG_VIRTUALIZERTYPE);
    getOmxIlSpecVersion(&mOMX_Symbian_ConfigAudioVirtualizer.nVersion);
    mOMX_Symbian_ConfigAudioVirtualizer.nPortIndex = 1;
    // default params
    mOMX_Symbian_ConfigAudioVirtualizer.bEnable                  = (OMX_BOOL)0;
    mOMX_Symbian_ConfigAudioVirtualizer.eVirtualizationType      = OMX_SYMBIAN_AUDIO_VirtualizerHeadphones;
    mOMX_Symbian_ConfigAudioVirtualizer.nVirtualizationStrength  = 75; /*customer requirement to set 75 as default value*/

    error = AFM_PcmProcessing::construct(defaultPcmSettingsIn,defaultPcmSettingsOut,2);
    if (error != OMX_ErrorNone) return error;
    
    ENS_String<60> role = "audio_processor.pcm.virtualizer_headphones.stereo";
    role.put((OMX_STRING)mRoles[0]);
    //setActiveRole(mRoles[0]);

        
    ENS_String<60> role1 = "audio_processor.pcm.virtualizer_loudspeakers.stereo";
    role1.put((OMX_STRING)mRoles[1]);
    setActiveRole(mRoles[0]);
    
    AFM_PcmPort * portIn  = static_cast<AFM_PcmPort*>(getPort(0));
    portIn->setSupportedProprietaryComm(AFM_MPC_PROPRIETARY_COMMUNICATION);
    
    AFM_PcmPort * portOut  = static_cast<AFM_PcmPort*>(getPort(1));
    portOut->setSupportedProprietaryComm(AFM_MPC_PROPRIETARY_COMMUNICATION);
    return OMX_ErrorNone;
}

#if 0
OMX_ERRORTYPE AudioVirtualizer::getExtensionIndex(OMX_STRING cParameterName, OMX_INDEXTYPE *pIndexType) const
{
    if(ENS_String<ENS_COMPONENT_NAME_MAX_LENGTH>(cParameterName) == OMX_SYMBIAN_INDEX_CONFIG_AUDIO_VIRTUALIZER_NAME)
    {
        *pIndexType = (OMX_INDEXTYPE) OMX_Symbian_IndexConfigAudioVirtualizer;
        return OMX_ErrorNone;
    }

    if(ENS_String<ENS_COMPONENT_NAME_MAX_LENGTH>(cParameterName) == OMX_SYMBIAN_INDEX_CONFIG_AUDIO_VIRTUALIZERLOUDSPEAKER_NAME)
    {
        *pIndexType = (OMX_INDEXTYPE) OMX_Symbian_IndexConfigAudioVirtualizerLoudspeaker;
        return OMX_ErrorNone;
    }

    return AFM_PcmProcessing::getExtensionIndex(cParameterName, pIndexType);
}
#endif
OMX_ERRORTYPE AudioVirtualizer::setConfig(OMX_INDEXTYPE nConfigIndex, OMX_PTR pComponentConfigStructure)
{
    switch(nConfigIndex)
    {
        case OMX_IndexConfigAudioVirtualizer:
        {
            CHECK_STRUCT_SIZE_AND_VERSION(pComponentConfigStructure,OMX_SYMBIAN_AUDIO_CONFIG_VIRTUALIZERTYPE);
            OMX_SYMBIAN_AUDIO_CONFIG_VIRTUALIZERTYPE *pAudioVirtualizer = (OMX_SYMBIAN_AUDIO_CONFIG_VIRTUALIZERTYPE *) pComponentConfigStructure;
            
                if (pAudioVirtualizer->nPortIndex != 1) {
                    return OMX_ErrorBadPortIndex;
                }
            mOMX_Symbian_ConfigAudioVirtualizer = *pAudioVirtualizer;
            return OMX_ErrorNone;
        }
        case OMX_IndexConfigAudioStereoWidening:
            {
                CHECK_STRUCT_SIZE_AND_VERSION(pComponentConfigStructure, OMX_AUDIO_CONFIG_STEREOWIDENINGTYPE);
                OMX_AUDIO_CONFIG_STEREOWIDENINGTYPE *pSwConfig = (OMX_AUDIO_CONFIG_STEREOWIDENINGTYPE *) pComponentConfigStructure;

                if (pSwConfig->nPortIndex != 1) {
                    return OMX_ErrorBadPortIndex;
                }

                mOMX_Symbian_ConfigAudioVirtualizer.bEnable                 = pSwConfig->bEnable;

                if (pSwConfig->eWideningType == OMX_AUDIO_StereoWideningLoudspeakers) {
                    mOMX_Symbian_ConfigAudioVirtualizer.eVirtualizationType = OMX_SYMBIAN_AUDIO_VirtualizerLoudspeakers;
                } 
                else if (pSwConfig->eWideningType == OMX_AUDIO_StereoWideningHeadphones) {
                    mOMX_Symbian_ConfigAudioVirtualizer.eVirtualizationType = OMX_SYMBIAN_AUDIO_VirtualizerHeadphones;
                }
                else {
                    return OMX_ErrorBadParameter;
                }

                mOMX_Symbian_ConfigAudioVirtualizer.nVirtualizationStrength = pSwConfig->nStereoWidening;
                return OMX_ErrorNone;
            }
        default:
            return AFM_PcmProcessing::setConfig(nConfigIndex, pComponentConfigStructure);
    }
}

OMX_ERRORTYPE AudioVirtualizer::getConfig(OMX_INDEXTYPE nConfigIndex, OMX_PTR pComponentConfigStructure) const
{
    switch(nConfigIndex)
    {
        case OMX_IndexConfigAudioVirtualizer:
            {
                CHECK_STRUCT_SIZE_AND_VERSION(pComponentConfigStructure,OMX_SYMBIAN_AUDIO_CONFIG_VIRTUALIZERTYPE);
                OMX_SYMBIAN_AUDIO_CONFIG_VIRTUALIZERTYPE *pAudioVirtualizer = (OMX_SYMBIAN_AUDIO_CONFIG_VIRTUALIZERTYPE *) pComponentConfigStructure;

                if (pAudioVirtualizer->nPortIndex != 1) {
                    return OMX_ErrorBadPortIndex;
                }
                
                pAudioVirtualizer->bEnable          =   mOMX_Symbian_ConfigAudioVirtualizer.bEnable;
                pAudioVirtualizer->eVirtualizationType = mOMX_Symbian_ConfigAudioVirtualizer.eVirtualizationType;
                pAudioVirtualizer->nVirtualizationStrength  =   mOMX_Symbian_ConfigAudioVirtualizer.nVirtualizationStrength;
                
                //*pAudioVirtualizer = mOMX_Symbian_ConfigAudioVirtualizer;
                return OMX_ErrorNone;
            }
        case OMX_IndexConfigAudioStereoWidening:
            {
                CHECK_STRUCT_SIZE_AND_VERSION(pComponentConfigStructure, OMX_AUDIO_CONFIG_STEREOWIDENINGTYPE);
                OMX_AUDIO_CONFIG_STEREOWIDENINGTYPE *pSwConfig = (OMX_AUDIO_CONFIG_STEREOWIDENINGTYPE *) pComponentConfigStructure;

                if (pSwConfig->nPortIndex != 1) {
                    return OMX_ErrorBadPortIndex;
                }

                pSwConfig->bEnable          =   mOMX_Symbian_ConfigAudioVirtualizer.bEnable;

                if (mOMX_Symbian_ConfigAudioVirtualizer.eVirtualizationType == OMX_SYMBIAN_AUDIO_VirtualizerLoudspeakers) {
                    pSwConfig->eWideningType = OMX_AUDIO_StereoWideningLoudspeakers;
                } 
                else if (mOMX_Symbian_ConfigAudioVirtualizer.eVirtualizationType == OMX_SYMBIAN_AUDIO_VirtualizerHeadphones) {
                     pSwConfig->eWideningType = OMX_AUDIO_StereoWideningHeadphones;
                }

                pSwConfig->nStereoWidening  =   mOMX_Symbian_ConfigAudioVirtualizer.nVirtualizationStrength;
                return OMX_ErrorNone;
            
            }
        default:
            return AFM_PcmProcessing::getConfig(nConfigIndex, pComponentConfigStructure);
    }
}

OMX_U32 AudioVirtualizer::getUidTopDictionnary(void)
{
    return KOstSTEREOWIDENER_top_ID;
}
