package com.stericsson.sdk.cli;

import java.util.Locale;

import org.junit.Assert;
import org.junit.Test;

import com.stericsson.sdk.brp.AbstractCommand;
import com.stericsson.sdk.brp.CommandFactory;
import com.stericsson.sdk.brp.CommandName;
import com.stericsson.sdk.cli.command.BRPCommandExecutor;

/**
 * test the command parser
 * 
 * @author xdancho
 * 
 */
public class ParserTest {

    /**
     * Test send all commands
     */
    @Test
    public void testSendAllCommands() {
        BRPCommandExecutor outputCLI = null;
        String inputCLI = "";
        CommandParser parser = new CommandParser();
        for (CommandName cName : CommandName.values()) {
            AbstractCommand aCmd = CommandFactory.createCommand(cName);
            String[] pNames = null;
            if (cName == CommandName.BACKEND_SHUTDOWN_BACKEND) {
                // special case for shutdown, since the protocol supports a message, but it's auto
                // generated by the flash tool cli
                pNames = null;
            } else {
                pNames = aCmd.getParameterNames();
            }

            if (pNames != null) {
                StringBuffer buffer = new StringBuffer();
                for (String s : pNames) {
                    buffer.append(" -" + s + " value_of_" + s);
                }
                inputCLI = CommandName.getCLISyntax(cName.name()).toLowerCase(Locale.getDefault()) + buffer.toString();

            } else {
                inputCLI = CommandName.getCLISyntax(cName.name()).toLowerCase(Locale.getDefault());
            }
            outputCLI = parser.parse(inputCLI.split(" "),false);
            Assert.assertNotNull(outputCLI);

        }
    }

    /**
     * 
     */
    @Test
    public void testOptions() {

        // missing value
        BRPCommandExecutor cmd = null;
        CommandParser parser = new CommandParser();
        String inputCLI = "set_active_profile -profile_name";
        // value_of_profile_name

        cmd = parser.parse(inputCLI.split(" "),false);
        Assert.assertNull(cmd);

        // missing required option
        inputCLI = "authenticate_certificate -equipment_id value_of_equipment_id";
        // -sign_package_name
        // value_of_sign_package_name

        cmd = parser.parse(inputCLI.split(" "),false);
        Assert.assertNull(cmd);

        // missing 2 required options
        inputCLI = "dump_area -equipment_id value_of_equipment_id  -offset value_of_offset  -path value_of_path";
        // -area_path
        // value_of_area_path
        // -length
        // value_of_length

        cmd = parser.parse(inputCLI.split(" "),false);
        Assert.assertNull(cmd);

        // an option that is not part of the command
        inputCLI =
            "set_active_profile -profile_name value_of_profile_name -sign_package_name value_of_sign_package_name";
        cmd = parser.parse(inputCLI.split(" "),false);
        Assert.assertNull(cmd);
    }

}
