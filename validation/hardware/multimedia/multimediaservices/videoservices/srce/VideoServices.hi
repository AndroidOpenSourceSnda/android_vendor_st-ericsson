/*****************************************************************************/
/**
*  Copyright (C) ST-Ericsson 2009
*  Reproduction and Communication of this document is strictly prohibited
*  unless specifically authorized in writing by ST-Ericsson
*
* \brief   Propose Video function for tests (Display (Main, Sub, TV-OUT), Camera)
* \author  ST-Ericsson
*/
/*****************************************************************************/

/* Tables/define used to know /dev, Major, Minor associated to display */
#define VIDSERV_FB_MAJOR_NUMBER 29

/* This table should be with same order as enum e_VidServ_DisplayId_t */
char *DisplayToDev[5]=
{"/dev/fb0", /* Main display */
 "/dev/fb1", /* Sub display */
 "/dev/fb2", /* TV-OUT CVBS via AB8500 */
 "/dev/fb3", /* TV-OUT CVBS via AV8100 */
 "/dev/fb3" /* HDMI via AV8100 */
};

/* This table should be with same order as enum e_VidServ_DisplayId_t */
int32_t DisplayToMin[5]=
{0, /* Main display */
 1, /* Sub display */
 2, /* TV-OUT CVBS via AB8500 */
/*+ Workaround for CAP_3484_001 */
 3, /* TV-OUT CVBS via AV8100 */
 3 /* HDMI via AV8100 */
/*- Workaround for CAP_3484_001 */
};


/* AB8500 definition */
#define AB8500_REGISTER_READ 0
#define AB8500_REGISTER_WRITE 1

/* INTERRUPT registers Bank */
#define VIDSERV_INTERRUPT_SOURCE1_BANK              0x0E

/* Register Interrupt Bank offsets */
#define VIDSERV_INTERRUPT_SOURCE1_OFFSET            0x00

/* TvoutCtrl registers Bank*/
#define VIDSERV_DENC_TVOUTCTRL_BANK                 0x06

/*  TvoutCtrl registers offsets */
#define VIDSERV_DENC_TVOUTCTRL_OFFSET               0x80

/* MISC registers Bank */
#define VIDSERV_MISC_BANK							0x10 			/* Bank used to access the PWM and GPIO registers */

/* Revision register */
#define VIDSERV_REVISION_REG_OFFSET					0x80

/* AB8500 definition, AB8500 version dependant (to not use for ED as it is not a ED feature) */

/* Register PWM Bank offsets */
#define VIDSERV_PWM_OUT_1_DUTY_CYCLE_LOW_REG_OFFSET 0x60	/* [7:0] 8 lowest bits for Duty cycle of PWM1 (used for Main display) */
#define VIDSERV_PWM_OUT_1_FREQ_AND_DUTY_CYCLE_HIGH_REG_OFFSET 0x61 /* [7:4] PWM1 freq definition, [1:0] highest bits for Duty cycle of PWM1 (used for Main display) */
#define VIDSERV_PWM_OUT_2_DUTY_CYCLE_LOW_REG_OFFSET 0x62 /* [7:0] 8 lowest bits for Duty cycle of PWM2 (used for secondary display) */
#define VIDSERV_PWM_OUT_2_FREQ_AND_DUTY_CYCLE_HIGH_REG_OFFSET 0x63 /* [7:4] PWM1 freq definition, [1:0] highest bits for Duty cycle of PWM2 (used for secondary display) */
#define VIDSERV_PWM_OUT_ENABLE_REG_OFFSET 0x66 /* [2] bit for PWM3 output enable, [1] bit for PWM2 output enable, [0] bit for PWM1 output enable */

/* Masks and offsets of inside register */
/* [7:4] PWM freq definition mask and offset */
#define VIDSERV_PWM_OUT_FREQ_MASK 0xF0 
#define VIDSERV_PWM_OUT_FREQ_OFFSET 0x4
/* [1:0] highest bits for Duty cycle of PWM mask and offset */
#define VIDSERV_PWM_OUT_DUTY_CYCLE_HIGH_MASK 0x3
#define VIDSERV_PWM_OUT_DUTY_CYCLE_HIGH_OFFSET 0x0
/* [8:0] lowest bits for Duty cycle of PWM mask and offset */
#define VIDSERV_PWM_OUT_DUTY_CYCLE_LOW_MASK 0xFF
#define VIDSERV_PWM_OUT_DUTY_CYCLE_LOW_OFFSET 0x0
#define VIDSERV_PWM_OUT_DUTY_CYCLE_LOW_SIZE 0x8
/* [2] bit for PWM3 output enable, [1] bit for PWM2 output enable, [0] bit for PWM1 output enable masks and offsets */
#define VIDSERV_PWM_OUT_1_ENABLE_OFFSET 0x0
#define VIDSERV_PWM_OUT_1_ENABLE_MASK 0x1
#define VIDSERV_PWM_OUT_2_ENABLE_OFFSET 0x1
#define VIDSERV_PWM_OUT_2_ENABLE_MASK 0x2


/* Register GPIO Bank offsets,VIDEOCTRL GPIO is GPIO 35 */
#define VIDSERV_GPIO_VIDEOCTRL_DIR_REG_OFFSET 0x14 /* GPIO Direction control for GPIO 34 to GPIO 40 */
#define VIDSERV_GPIO_VIDEOCTRL_OUT_REG_OFFSET 0x24 /* GPIO Output control for GPIO 34 to GPIO 40 */
#define VIDSERV_GPIO_VIDEOCTRL_PUD_REG_OFFSET 0x34 /* GPIO Pull Down control for GPIO 34 to GPIO 40 */

/* Masks and offsets of inside register */
#define VIDSERV_GPIO_VIDEOCTRL_OFFSET_IN_REGISTER 0x2

/* ALS I2C definition */
#define VIDSERV_ALS_I2C_SLAVE_ADDRESS 0x29 /* from SFH5712 ALS spec */
#define VIDSERV_ALS_I2C_NAME "/dev/i2c2"
#define VIDSERV_ALS_I2C_MINOR 2

/* HDMI device name */
#define VIDSERV_HDMI_DEVICE_NAME "/dev/hdmi"

/* Register GPIO Bank offsets,VIDEOCTRL GPIO is GPIO 35 */
#define VIDSERV_DENC_TVOUTCTRL_ENABLE 0x5

/* Defines needed as mcde.h can't be included be videoservices !*/
/* to many dependencies from mcde.h ! */
#define VIDSERV_PORTPIXFMT_DSI_16BPP  0x31  /* MCDE_PORTPIXFMT_DSI_16BPP in mcde.h */
#define VIDSERV_PORTPIXFMT_DSI_18BPP  0x32  /* MCDE_PORTPIXFMT_DSI_16BPP in mcde.h */
#define VIDSERV_PORTPIXFMT_DSI_18BPP_PACKED  0x33  /* MCDE_PORTPIXFMT_DSI_16BPP in mcde.h */
#define VIDSERV_PORTPIXFMT_DSI_24BPP  0x34  /* MCDE_PORTPIXFMT_DSI_16BPP in mcde.h */
#define VIDSERV_PORTPIXFMT_DSI_YCBCR422  0x40  /* MCDE_PORTPIXFMT_DSI_16BPP in mcde.h */

struct pix_fmt_info {
	__u32              bpp;
	struct fb_bitfield r;
	struct fb_bitfield g;
	struct fb_bitfield b;
	struct fb_bitfield a;
};


struct video_mode {
	__u32 xres;			/* width */
	__u32 yres;			/* height */
	__u32 pixclock;		/* pixel clock in ps (pico seconds) */
	__u32 hbp;			/* left margin (horizontal back porch): time from sync to picture */
	__u32 hfp;			/* right margin (horizontal front porch): time from picture to sync */
	__u32 vbp;			/* upper margin (vertical back porch): time from sync to picture */
	__u32 vfp;			/* lower margin (vertical front porch): time from picture to sync */
	__u32 framerate;
	__u32 scanmode;		/* Interlaced scan or Progressive scan */
	__u32 hsync_len;	/* hsw (horizontal sync width): length of horizontal sync */
	__u32 vsync_len;	/* vsw (vertical sync width): length of vertical sync */
};

struct timing_info {
	__u32 pixclock;			/* pixel clock in ps (pico seconds) */
	__u32 left_margin;		/* time from sync to picture	*/
	__u32 right_margin;		/* time from picture to sync	*/
	__u32 upper_margin;		/* time from sync to picture	*/
	__u32 lower_margin;
	__u32 hsync_len;		/* length of horizontal sync	*/
	__u32 vsync_len;		/* length of vertical sync	*/
};

struct resolutions_info {
	__u32 width;
	__u32 height;
	__u32 width_virtual;
	__u32 height_virtual;
	__u32 framerate;
	__u32 interlace;
	const struct timing_info *timing;
};

#define PIX_FMT_INFO_ENUM (sizeof(pix_fmt_map)/sizeof(struct pix_fmt_info))

/* structure used for Image loop */
typedef struct {
	uint32_t DisplayId;	/* Display where picture is looped*/
	uint8_t * BufferAddressImage1; /* pointer to buffer where Image1 data are saved */
	uint8_t * BufferAddressImage2; /* pointer to buffer where Image2 data are saved */	
	e_VidServ_LoopMode_t LoopMode; /* loop mode of the image to display */
	uint32_t ImageDuration; /* Duration of Image1 */
	uint32_t Image2Duration; /* Duration of Image2 */
} t_VidServ_LoopProperties;


/* internal used functions declaration */
int32_t VidServ_ExecuteDisplayLoop(t_VidServ_LoopProperties *LoopProperties);
int32_t VidServ_PictureDecodeToBuffer(t_VidServ_ImageProperties *ImageProperties,uint8_t *bufferToWrite, struct fb_var_screeninfo *pl_fb_varinfo);
int32_t read_rgb(uint32_t from_file,uint8_t *in_buffer,uint32_t in_width, uint32_t in_height,uint32_t in_bpp,uint8_t *out_buffer,uint32_t out_width,uint32_t out_height,uint32_t out_bpp);
int32_t VidServ_OpenFb(char *devname, uint32_t* fb_filedesc, struct fb_fix_screeninfo *fb_fixinfo, struct fb_var_screeninfo *fb_varinfo, uint32_t* mmap_buffer);
void VidServ_CloseFb(uint32_t fb_filedesc, uint8_t *mmap_buffer, uint32_t pp_fb_mem_size);
int32_t VidServ_GetSetAB8500Value(uint8_t vp_block, uint8_t vp_addr, uint8_t *pp_pwmRegisterData, int32_t vp_Type);
int32_t VidServ_ConvertToFbVar(t_VidServ_DisplayResolution *DisplayResolution,
			struct fb_var_screeninfo *fb_var,
			const struct pix_fmt_info *pixf);
uint32_t VidServ_GetAB8500Version(uint8_t* p_Version);

void VidServ_Convert(uint8_t *inputBuffer,uint8_t *outputBuffer,uint8_t in_bpp, uint8_t out_bpp,uint32_t input_width, uint32_t input_height);
void VidServ_ConvertRGB888TO8888(uint8_t *inputRGB888Buffer,uint8_t *outputARGB8888Buffer,uint32_t output_width, uint32_t output_height);
void VidServ_ConvertRGB565TO8888(uint8_t *inputRGB565Buffer,uint8_t *outputARGB8888Buffer,uint32_t output_width, uint32_t output_height);
void VidServ_ConvertRGB565TO888(uint8_t *inputRGB565Buffer,uint8_t *outputRGB888Buffer,uint32_t output_width, uint32_t output_height);
void VidServ_ConvertARGB8888TO888(uint8_t *inputARGB8888Buffer,uint8_t *outputRGB888Buffer, uint32_t output_width, uint32_t output_height);
void VidServ_ConvertARGB8888TO565(uint8_t *inputRGB888Buffer,uint8_t *outputRGB565Buffer, uint32_t output_width, uint32_t output_height);
void VidServ_ConvertRGB888TO565(uint8_t *inputRGB888Buffer,uint8_t *outputRGB565Buffer, uint32_t output_width, uint32_t output_height);

int32_t VidServ_ExecuteDisplayLoopFromExec(uint32_t LoopDisplayId, e_VidServ_LoopMode_t LoopMode, uint32_t ImageDuration, uint32_t Image2Duration);


/* functions to simulate smbus access. */
int32_t vidserv_i2c_smbus_read_byte_data(int32_t file, int8_t command);
int32_t vidserv_i2c_smbus_write_byte_data(int32_t file, int8_t command, int8_t value);

int32_t VidServ_OpenB2R2(int32_t *blt_handle);
void VidServ_CloseB2R2(int32_t *blt_handle);
