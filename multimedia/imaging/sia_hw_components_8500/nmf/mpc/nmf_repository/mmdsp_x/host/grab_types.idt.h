/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 * This code is ST-Ericsson proprietary and confidential.
 * Any use of the code for whatever purpose is subject to
 * specific written permission of ST-Ericsson SA.
 */

/*****************************************************************************/
/**
 * This is a Nomadik Multiprocessing Framework generated file, please do not modify it.
 */

/* Generated grab_types.idt defined type */
#if !defined(_grab_types_idt)
#define _grab_types_idt


#define GRB_NUM_CLIENTS 4

#define XP70_ANY_ITM3_ACK 0xFFFFFFFFUL

#define XP70_FLASH_LIT_FRAME 0x1UL

#define XP70_ADAPTIVE_ZOOM_OVERSCAN_EVENT 0x2UL

enum e_grabInfo {
  GRBINF_GRAB_LAUNCHED=0x1,
  GRBINF_GRAB_COMPLETED=0x2,
  GRBINF_GRAB_ABORTED=0x3,
  GRBINF_GRAB_TO_REPROG_BY_MMDSP=0x4,
  GRBINF_GRAB_STOPPED=0x5,
  GRBERR_FRAME_INVALID=0x6,
  GRBINF_DEBUG_MODE_ON=0x777,
  GRBINF_DEBUG_MODE_OFF=0x0FF};

enum e_grabError {
  GRBERR_NONE=0,
  GRBERR_FIFO_OVERFLOW=0x1,
  GRBERR_RAW_BUF_OVERFLOW=0x2,
  GRBERR_FMT_UNSUPPORTED=0x4,
  GRBERR_PIPE_UNSUPPORTED=0x8,
  GRBERR_GRB_IN_PROGRESS=0x10,
  GRBERR_UNKNOWN=0x20,
  GRBERR_STAGINGFULL=0x40,
  GRBERR_FIFO_STA_NOT_EMPTY=0x77,
  IPP_SD_ERROR_HR=0x80,
  IPP_SD_ERROR_LR=0x100,
  IPP_SD_ERROR_BMS=0x200,
  IPP_SD_ERROR_CCP=0x400,
  IPP_CSI2_DPHY_ERROR=0x800,
  IPP_CSI2_PACKET_ERROR=0x1000,
  STBUS_PLUG_ERROR=0x2000};

enum e_IPP_SD_Error {
  IPP_SD_ERROR_CCP_SHIFT_SYNC=0x0001,
  IPP_SD_ERROR_CCP_FALSE_SYNC=0x0002,
  IPP_SD_ERROR_CCP_CRC_ERROR=0x0004,
  IPP_SD_ERROR_PIPE0_CH0_OVERFLOW=0x0008,
  IPP_SD_ERROR_PIPE0_CH1_OVERFLOW=0x0010,
  IPP_SD_ERROR_PIPE0_CH2_OVERFLOW=0x0020,
  IPP_SD_ERROR_PIPE1_OVERFLOW=0x0040,
  IPP_SD_ERROR_PIPE2_OVERFLOW=0x0080,
  IPP_SD_ERROR_OPIPE0_MULT_ERR=0x0100,
  IPP_SD_ERROR_OPIPE1_MULT_ERR=0x0200,
  IPP_SD_CSI2_PACKET_ERROR=0x0400,
  IPP_SD_CSI2_DPHY_ERROR=0x0800};

enum e_IPP_CSI2_DPHY_Error {
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_EOT_SYNC_HS_DL1=0x0001,
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_EOT_SYNC_HS_DL2=0x0002,
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_EOT_SYNC_HS_DL3=0x0004,
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_HS_DL1=0x0008,
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_HS_DL2=0x0010,
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_HS_DL3=0x0020,
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_SYNC_HS_DL1=0x0040,
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_SYNC_HS_DL2=0x0080,
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_SYNC_HS_DL3=0x0100,
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_CONTROL_DL1=0x0200,
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_CONTROL_DL2=0x0400,
  IPP_CSI2_DPHY_ERROR_CSI0_ERR_CONTROL_DL3=0x0800,
  IPP_CSI2_DPHY_ERROR_CSI1_ERR_EOT_SYNC_HS_DL1=0x1000,
  IPP_CSI2_DPHY_ERROR_CSI1_ERR_SOT_HS_DL1=0x2000,
  IPP_CSI2_DPHY_ERROR_CSI1_ERR_SOT_SYNC_HS_DL1=0x4000,
  IPP_CSI2_DPHY_ERROR_CSI1_ERR_CONTROL_DL1=-32768L};

enum e_IPP_CSI2_PACKET_Error {
  IPP_CSI2_PACKET_ERROR_CSI2_PACKET_PAYLOAD_CRC_ERROR=0x0001,
  IPP_CSI2_PACKET_ERROR_CSI2_PACKET_HEADER_ECC_ERROR=0x0002};

enum e_grabDebug {
  GRBDBG_REGVALUE=0x1,
  GRBDBG_EXECUTE_METHOD=0x2,
  GRBDBG_ABORT_METHOD=0x3,
  GRBDBG_SUBSCRIBE_METHOD=0x4,
  GRBDBG_UNSUBSCRIBE_METHOD=0x5,
  GRBDBG_GRAB_HANDLE_DMA_EOT_IT_CALLED=0x6,
  GRBDBG_GRAB_HANDLE_IPP_ERROR_IT_CALLED=0x7,
  GRBDBG_GRAB_BMS_FRAME_IT_CALLED=0x8,
  GRBDBG_STBUS_PLUG_ERROR_IT_CALLED=0x9};

enum e_grabPipeID {
  GRBPID_PIPE_LR=0,
  GRBPID_PIPE_HR,
  GRBPID_PIPE_RAW_OUT,
  GRBPID_PIPE_RAW_IN,
  GRBPID_PIPE_CAM};

enum e_grabFormat {
  GRBFMT_YUV422_RASTER_INTERLEAVED,
  GRBFMT_YUV420_RASTER_PLANAR_I420,
  GRBFMT_YUV420_RASTER_PLANAR_YV12,
  GRBFMT_YUV422_MB_SEMIPLANAR,
  GRBFMT_YUV420_MB_SEMIPLANAR_FILTERED,
  GRBFMT_YUV420_MB_SEMIPLANAR_DECIMATED,
  GRBFMT_YUV420_RASTER_SEMIPLANAR_NV21,
  GRBFMT_YUV420_RASTER_SEMIPLANAR_NV12,
  GRBFMT_YUV420_MB_SWAP_SEMIPLANAR_DECIMATED,
  GRBFMT_RGB30,
  GRBFMT_RAW8,
  GRBFMT_FAST_RAW8,
  GRBFMT_BML2_RAW8,
  GRBFMT_RAW12,
  GRBFMT_FAST_RAW12,
  GRBFMT_BML2_RAW12,
  GRBFMT_A4R4G4B4,
  GRBFMT_A1R5G5B5,
  GRBFMT_R5G6B5,
  GRBFMT_R8G8B8,
  GRBFMT_A8R8G8B8};

enum e_hwrotation {
  HW_ROTATION_NONE=0,
  HW_ROTATION_CW=1,
  HW_ROTATION_CCW=3};

enum e_BMLPixelOrder {
  BML_GREENRED=0,
  BML_REDGREEN=1,
  BML_BLUEGREEN=2,
  BML_GREENBLUE=3};

enum e_BMLLineType {
  BML_LINETYPE_STARTOFFRAME=1,
  BML_LINETYPE_ENDOFFRAME=2,
  BML_LINETYPE_BLANK=3,
  BML_LINETYPE_BLACK=4,
  BML_LINETYPE_DARK=8,
  BML_LINETYPE_ACTIVE=13,
  BML_LINETYPE_ACTIVELAST=14};

struct s_grabBMLParams {
  enum e_BMLPixelOrder pixel_order;
  char nb_linetypes;
  enum e_BMLLineType line_type[8];
  t_uint16 line_type_nb[8];
  t_uint32 interline_size;
  t_uint16 nb_embedded_lines;
};

struct s_grabParams {
  enum e_grabFormat output_format;
  t_uint16 x_window_size;
  t_uint16 y_window_size;
  t_uint16 x_window_offset;
  t_uint16 y_window_offset;
  t_uint16 x_frame_size;
  t_uint16 y_frame_size;
  t_uint32 dest_buf_addr;
  t_uint16 buf_id;
  t_uint16 rotation_cfg;
  t_uint8 disable_grab_cache;
  t_uint32 cache_buf_addr;
  t_uint8 enable_stab;
  t_uint16 x_stab_size_lr;
  t_uint16 y_stab_size_lr;
  t_uint32 proj_h_buf_addr;
  t_uint32 proj_v_buf_addr;
  t_uint8 lr_alpha;
  t_uint8 keepRatio;
  struct s_grabBMLParams bml_params;
};

#endif
