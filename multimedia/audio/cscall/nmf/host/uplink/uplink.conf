primitive cscall.nmf.host.uplink extends fsm.component.armnmf_component


// input port
provides armnmf_emptythisbuffer                           as  emptythisbuffer
requires armnmf_fillthisbuffer                            as  inputport
provides hst.common.pcmsettings                           as  pcmsettings

// output port
provides armnmf_fillthisbuffer                            as  fillthisbuffer
requires armnmf_emptythisbuffer                           as  outputport


// 6 encoders (ARM, EFR, FR, HR, AMR_WB, PCM)
requires hst.encoders.encoder                             as  encoder[6]

// AMR encoder algorithm
requires amr.nmfil.host.encoder.configure                 as  configure_amr

// EFR encoder algorithm
requires amr.nmfil.host.encoder.configure                 as  configure_efr

// AMRWB encoder algorithm
requires amrwb.nmfil.host.encoder.configure               as  configure_amrwb

// GSMFR encoder algorithm
requires gsmfr.nmfil.host.encoder.configure               as  configure_gsmfr

// GSMHR encoder algorithm
requires gsmhr.nmfil.host.encoder.configure               as  configure_gsmhr

// PCM encoder algorithm (Not a real encoder...but mapped as if it was a encoder)
requires cscall.nmf.host.pcm_codec.pcm_enc.configure      as  configure_pcm

// Encoder configuration
provides cscall.nmf.host.protocolhandler.configure_codec  as configEncoder

//To inform protocolhandler that new codec req has been applied
requires cscall.nmf.host.protocolhandler.newCodecApplied  as codecApplied

// src lib
requires hst.pcmprocessings.effect                        as samplerateconv
requires samplerateconv.nmfil.host.effect.configure       as configure_src

// Timer interface
provides timer.api.alarm                                  as alarm

// Inform source to drop data
requires cscall.nmf.host.uplink.dropData                  as dropData


// global configuration of uplink component
provides cscall.nmf.host.uplink.configure                 as configure




