<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
	"http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" []>

<book id="STMPE2401-API-Guide">
 <bookinfo>
  <title>STMPE2401 port Expander Driver API guide</title>

  <authorgroup>
   <author>
    <firstname>Srinidhi</firstname>
    <surname>Kasagar</surname>
    <affiliation>
     <address>
      <email>srinidhi.kasagar@stericsson.com</email>
     </address>
    </affiliation>
   </author>
   </authorgroup>

  <copyright>
   <year>2007-2008</year>
   <holder>ST-Ericsson 2009</holder>
  </copyright>

  <legalnotice>
   <para>
     This documentation is free software; you can redistribute
     it and/or modify it under the terms of the GNU General Public
     License version 2 as published by the Free Software Foundation.
   </para>

   <para>
     This program is distributed in the hope that it will be
     useful, but WITHOUT ANY WARRANTY; without even the implied
     warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
     See the GNU General Public License for more details.
   </para>

   <para>
     You should have received a copy of the GNU General Public
     License along with this program; if not, write to the Free
     Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
     MA 02111-1307 USA
   </para>

   <para>
     For more details see the file COPYING in the source
     distribution of Linux.
   </para>
	
   </legalnotice>
 </bookinfo>

<toc></toc>

  <chapter id="intro">
    <title>Introduction</title>
    <para>
	This documentation describes the API provided by the STw4500 driver for U8500 platform
    </para>
    </chapter>

     <chapter id="structs">
     <title>Structures</title>
     <para>
     This chapter contains the autogenerated documentation of the structures which are
     used in the 4500 driver.
     </para>
<!-- arch/arm/mach-u8500/include/mach/stmpe2401.h -->
<refentry>
 <refnamediv>
  <refname>
   /home/ethopal/fairbanks_0.7/android/kernel//arch/arm/mach-u8500/include/mach/stmpe2401.h
  </refname>
  <refpurpose>
   Document generation inconsistency
  </refpurpose>
 </refnamediv>
 <refsect1>
  <title>
   Oops
  </title>
  <warning>
   <para>
    The template for this document tried to insert
    the structured comment from the file
    <filename>/home/ethopal/fairbanks_0.7/android/kernel//arch/arm/mach-u8500/include/mach/stmpe2401.h</filename> at this point,
    but none was found.
    This dummy section is inserted to allow
    generation to continue.
   </para>
  </warning>
 </refsect1>
</refentry>
  </chapter>

  <chapter id="intfunctions">
     <title>Internal Functions Provided</title>
     <para>
     This chapter contains the autogenerated documentation of the internal functions.
     </para>
<!-- drivers/gpio/stmpe2401.c -->
<refentry id="API-stmpe2401-write-byte">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_write_byte</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_write_byte</refname>
 <refpurpose>
  Write a single byte
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>stmpe2401_write_byte </function></funcdef>
   <paramdef>struct stmpe2401_chip * <parameter>chip</parameter></paramdef>
   <paramdef>unsigned char <parameter>reg</parameter></paramdef>
   <paramdef>unsigned char <parameter>data</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>chip</parameter></term>
   <listitem>
    <para>
     gpio lib chip strcture
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>reg</parameter></term>
   <listitem>
    <para>
     register offset
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>data</parameter></term>
   <listitem>
    <para>
     data byte to be written
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This funtion uses smbus byte write API to write a single byte to stmpe2401
</para>
</refsect1>
</refentry>

<refentry id="API-stmpe2401-read-byte">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_read_byte</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_read_byte</refname>
 <refpurpose>
     Read a single byte
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>stmpe2401_read_byte </function></funcdef>
   <paramdef>struct stmpe2401_chip * <parameter>chip</parameter></paramdef>
   <paramdef>unsigned char <parameter>reg</parameter></paramdef>
   <paramdef>unsigned char * <parameter>val</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>chip</parameter></term>
   <listitem>
    <para>
     gpio lib chip strcture
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>reg</parameter></term>
   <listitem>
    <para>
     register offset
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>val</parameter></term>
   <listitem>
    <para>
     data read
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This funtion uses smbus byte read API to read a byte from the given offset.
</para>
</refsect1>
</refentry>

<refentry id="API-calculate-offset">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>calculate_offset</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>calculate_offset</refname>
 <refpurpose>
     calculate the offset
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>unsigned char <function>calculate_offset </function></funcdef>
   <paramdef>unsigned <parameter>off</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>off</parameter></term>
   <listitem>
    <para>
     input offset number
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   There are some registers in STMPE with 23 bits, each corresponds to
   to one GPIO. Based on the input gpio number, this funtion just returns
   the offset number which can be used for the register base address access
</para>
</refsect1>
</refentry>

<refentry id="API-stmpe2401-gpio-get-value">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_gpio_get_value</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_gpio_get_value</refname>
 <refpurpose>
     Read a GPIO value from the given offset
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>stmpe2401_gpio_get_value </function></funcdef>
   <paramdef>struct gpio_chip * <parameter>gc</parameter></paramdef>
   <paramdef>unsigned <parameter>off</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>gc</parameter></term>
   <listitem>
    <para>
     pointer to the gpio_chip strcture
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>off</parameter></term>
   <listitem>
    <para>
     The offset to read from
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This funtion is called from the gpio library to read a GPIO
   status. This funtion reads from GPMR (Monitor Register) to find
   out the status
</para>
</refsect1>
</refentry>

<refentry id="API-stmpe2401-gpio-set-value">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_gpio_set_value</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_gpio_set_value</refname>
 <refpurpose>
     Set a GPIO value from the given offset
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>void <function>stmpe2401_gpio_set_value </function></funcdef>
   <paramdef>struct gpio_chip * <parameter>gc</parameter></paramdef>
   <paramdef>unsigned <parameter>off</parameter></paramdef>
   <paramdef>int <parameter>val</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>gc</parameter></term>
   <listitem>
    <para>
     pointer to the gpio_chip strcture
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>off</parameter></term>
   <listitem>
    <para>
     The write gpio offset
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>val</parameter></term>
   <listitem>
    <para>
     -- undescribed --
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This funtion is called from the gpio library to set/unset a GPIO
   value. This funtion sets the GPSR (Set Register) to set a bit.
</para>
</refsect1>
</refentry>

<refentry id="API-stmpe2401-gpio-direction-output">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_gpio_direction_output</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_gpio_direction_output</refname>
 <refpurpose>
     Set a GPIO direction as output
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>stmpe2401_gpio_direction_output </function></funcdef>
   <paramdef>struct gpio_chip * <parameter>gc</parameter></paramdef>
   <paramdef>unsigned <parameter>off</parameter></paramdef>
   <paramdef>int <parameter>val</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>gc</parameter></term>
   <listitem>
    <para>
     pointer to the gpio_chip strcture
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>off</parameter></term>
   <listitem>
    <para>
     The gpio offset
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>val</parameter></term>
   <listitem>
    <para>
     value to be written
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This funtion is called from the gpio library to set a GPIO
   direction as output.
</para>
</refsect1>
</refentry>

<refentry id="API-stmpe2401-gpio-direction-input">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_gpio_direction_input</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_gpio_direction_input</refname>
 <refpurpose>
     Set a GPIO direction as input
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>stmpe2401_gpio_direction_input </function></funcdef>
   <paramdef>struct gpio_chip * <parameter>gc</parameter></paramdef>
   <paramdef>unsigned <parameter>off</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>gc</parameter></term>
   <listitem>
    <para>
     pointer to the gpio_chip strcture
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>off</parameter></term>
   <listitem>
    <para>
     The gpio offset
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This funtion is called from the gpio library to set a GPIO
   direction as input.
</para>
</refsect1>
</refentry>

<refentry id="API-stmpe2401-setup-gpio">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_setup_gpio</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_setup_gpio</refname>
 <refpurpose>
     Set up the gpio lib structure
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>void <function>stmpe2401_setup_gpio </function></funcdef>
   <paramdef>struct stmpe2401_chip * <parameter>chip</parameter></paramdef>
   <paramdef>int <parameter>gpios</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>chip</parameter></term>
   <listitem>
    <para>
     pointer to the stmpe2401_chip strcture
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>gpios</parameter></term>
   <listitem>
    <para>
     Number of GPIO's
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This funtion set up the  gpio_chip structure to the corresponding
   callback funtions and other configurations.
</para>
</refsect1>
</refentry>

<refentry id="API-stmpe2401-intr-handler">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_intr_handler</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_intr_handler</refname>
 <refpurpose>
     interrupt handler for the stmpe2401
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>irqreturn_t <function>stmpe2401_intr_handler </function></funcdef>
   <paramdef>int <parameter>irq</parameter></paramdef>
   <paramdef>void * <parameter>_chip</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>irq</parameter></term>
   <listitem>
    <para>
     interrupt number
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>_chip</parameter></term>
   <listitem>
    <para>
     pointer to the stmpe2401_chip structure
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This is the interrupt handler for stmpe2401, since in the interrupt handler
   there is a need to make a i2c access which is not atomic, we need to schedule
   a work queue which schedules in the process context
</para>
</refsect1>
</refentry>

<refentry id="API-stmpe2401-work">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_work</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_work</refname>
 <refpurpose>
     bottom half handler for stmpe2401
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>void <function>stmpe2401_work </function></funcdef>
   <paramdef>struct work_struct * <parameter>_chip</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>_chip</parameter></term>
   <listitem>
    <para>
     pointer to the work_struct
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This is a work queue scheduled from the interrupt handler. This funtion
   reads from the ISR and finds out the source of interrupt. At the moment
   the handler handles only GPIO interrupts. Once it figures out the interrupt
   is from GPIO, a subsequent read is performed on isgpior register to find
   out the gpio number which triggered the interrupt. This funtion also clears
   the interrupt after handling.
</para>
</refsect1>
</refentry>

<refentry id="API-stmpe2401-probe">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_probe</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_probe</refname>
 <refpurpose>
     initialize the stmpe2401
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>stmpe2401_probe </function></funcdef>
   <paramdef>struct i2c_client * <parameter>client</parameter></paramdef>
   <paramdef>const struct i2c_device_id * <parameter>id</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>client</parameter></term>
   <listitem>
    <para>
     pointer to the i2c client structure
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>id</parameter></term>
   <listitem>
    <para>
     pointer to the i2c device id table
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This funtion is called during the kernel boot. This set up the stmpe2401
   in a predictable state and attaches the stmpe to the gpio library structure
   and set up the i2c client information
</para>
</refsect1>
</refentry>

  </chapter>

  <chapter id="pubfunctions">
     <title>Public Functions Provided</title>
     <para>
     This chapter contains the autogenerated documentation of the kernel API functions
      which are exported.
     </para>
<!-- drivers/gpio/stmpe2401.c -->
<refentry id="API-stmpe2401-set-callback">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_set_callback</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_set_callback</refname>
 <refpurpose>
  install a callback handler
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>stmpe2401_set_callback </function></funcdef>
   <paramdef>int <parameter>irq</parameter></paramdef>
   <paramdef>void * <parameter>handler</parameter></paramdef>
   <paramdef>void * <parameter>data</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>irq</parameter></term>
   <listitem>
    <para>
     gpio number
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>handler</parameter></term>
   <listitem>
    <para>
     funtion pointer to the callback handler
    </para>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term><parameter>data</parameter></term>
   <listitem>
    <para>
     -- undescribed --
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This funtion install the callback handler for the client device
</para>
</refsect1>
</refentry>

<refentry id="API-stmpe2401-remove-callback">
<refentryinfo>
 <title>LINUX</title>
 <productname>Kernel Hackers Manual</productname>
 <date>January 2010</date>
</refentryinfo>
<refmeta>
 <refentrytitle><phrase>stmpe2401_remove_callback</phrase></refentrytitle>
 <manvolnum>9</manvolnum>
 <refmiscinfo class="version">2.6.29</refmiscinfo>
</refmeta>
<refnamediv>
 <refname>stmpe2401_remove_callback</refname>
 <refpurpose>
     remove a callback handler
 </refpurpose>
</refnamediv>
<refsynopsisdiv>
 <title>Synopsis</title>
  <funcsynopsis><funcprototype>
   <funcdef>int <function>stmpe2401_remove_callback </function></funcdef>
   <paramdef>int <parameter>irq</parameter></paramdef>
  </funcprototype></funcsynopsis>
</refsynopsisdiv>
<refsect1>
 <title>Arguments</title>
 <variablelist>
  <varlistentry>
   <term><parameter>irq</parameter></term>
   <listitem>
    <para>
     gpio number
    </para>
   </listitem>
  </varlistentry>
 </variablelist>
</refsect1>
<refsect1>
<title>Description</title>
<para>
   This funtion removes the callback handler for the client device
</para>
</refsect1>
</refentry>

  </chapter>


  </book>
