*********************************************************************
* Nomadik Multiprocessing Framework (version 1.4.0) "Adelscott"     *
*********************************************************************
    "Compile, c'est gagne" (M. Guene)
    "La doc, c'est le code" (J.-P. Fassino)

The release comprises one .tgz file holding the following features:
    - Component manager binary & api
    - Synchronous & Hybrid execution engine binaries
    - Component tool chain binary
    - Example source codes (Hello World's, Training, Mandelbrot's, Jpeg)
        Jpeg fully based on Host local execution domain
    - Documentations (User guide, programming model, CM API, MPC API)
        User guide not fully in line with delivery
 
Source codes can be found in Codex SVN site: 
    http://codex.cro.st.com/svn/?group_id=598

Defects must be logged on VI:
	 http://gnb500137.gnb.st.com/VIWebDev/default.asp
	 	/Dev/OS and Platform/NMF/**
	 		_Support if category unknown

Supported target:
    - STn8815 SAA & SVA Cut A0/B0/C0
    - STn8820 SAA & SVA & SIA Cut A0/A2
    
Changes:
--------
[CM]
	- Add CallBack FIFO management API
	  If your application code is not an OMX you have to add such kind of code in your application:
		#include <los/api/los_api.h>
	  	static t_cm_cb_fifo fifo_id;
	  	
	  	static void MessagePuller(void* args) {
    		while(1) {
        		char                        buffer[1024];

        		if(CM_GetMessage(fifo_id, buffer, sizeof(buffer), TRUE) == CM_OK) {
            		CM_ExecuteMessage(buffer);
        		}
    		}
		}
		
		int main(...) {
			CM_UserInit(CB_FIFO_SIZE, &fifo_id);
        	LOS_ThreadCreate(MessagePuller, (void*)0, 4096, LOS_USER_URGENT_PRIORITY, NULL);
		}


[MPC Executive Engine]
  
      
[OS integration guidelines]
    A Component Cache mechanism has been implemented that is intended to provide a common way
    to load the component files in all operating system.
    To support this new Component Cache System, the following changes are required:

    - OSAL changes:
      . For the Operating System that implements a CM User Proxy, OSAL FS is no more used
      by the CM but by the CM User Proxy:
      Both OSAL_ReadFile() and OSAL_CloseFile() API are no more used by the Component Manager
      and can be removed from kernel side.
      They must then be provided in user space in the CM User Proxy. The behaviour in user-space
      remains the same.
      This change should not have any impact for the OS that doesn't provide a User Proxy
      . A new OSAL MEMORY API is added, OSAL_Copy(), and is required for the Component Manager
      For OS that uses a User Proxy, it is intended to provide a way to copy some data
      from user-space to kernel-space (the source pointer is supposed to be a user-space pointer
      and the destination pointer is supposed to be a kernel pointer).
      For the other OS, OSAL_Copy should be a simple memcpy().

    - CM SYSCALL API changes: two new syscall has been added:
      . CM_SYSCALL_GetRequiredComponentFiles(...)
      . CM_SYSCALL_PushComponent(...)
      Both are used by the CM API (without changes for the CM API itself) and must be wrapped as for
      other syscall when using a CM User Proxy
      NOTE: the 'data' parameter must be a user pointer if using a CM User Proxy.
      . CM_SYSCALL_BindComponentFromCMCore() has one less parameter (providetype)
      . CM_SYSCALL_BindComponentToCMCore() and CM_SYSCALL_WRAPPED_BindComponentToCMCore()
      have two less parameters (requiretype and methodNumber)
    - A new CM API is added and must be called when destroying the Component Manager: 
       CM_DestroyRepository()
      
    
[Tools]    
    
[Programming model]
         

Bug fixes:
---------
	- Generate correct code in order to allow interface delegation on MMDSP by  adding
		#pragma interface_type on interface descriptor type.
		

Known Issues:
-------------


Notes:
------
    - Inter-MPC distribution not supported due to hardware limitation on STn8815A0
        
            
Pre-requires:
-------------
    - At least MMDSP Toolset 4.0.0 P5.
    - Recent ARM codesourcery compiler for running examples. 
    	(http://www.codesourcery.com/gnu_toolchains/arm)
    - Java Runtime Environment  (http://java.sun.com/)
        At least JRE 1.5 (on Linux please use at least JRE 1.6 due to JVM bug regarding execution access rights)        

Installation:
-------------
	* Create a NMF directory 
		mkdir <NMF_ROOT>
	* Go in this directory 
		cd <NMF_ROOT>
	* untar tools and Think package
		tar xvfz nmf_tools-Vx.y.z.tgz
		tar xvfz nmf_think-Vx.y.z.tgz

Test environment :
------------------
    - Environments:
        Board: 
            NDK15 Cut B0
            NDK20 Cut A0
        MPC: 
            SAA & SVA on NDK15
            SAA & SVA & SIA on NDK20
        Execution Engine: Synchronous, Hybrid
        Semaphores: local, hardware
        Environment: think, tlm
        ARM: RVCT 3.0 SP1 Build 688, RVCT 2.2 Build 593

    - Tests:
        * 'ADL' class
            check 'Architecture Description Language' features from programming model
            test limit of some ADL features (name length, collection size,...)
            check error codes returned by ADL tool

        * 'Attribute' class
            operations on attributes inside component (mpc side)
            check attribute api on host side
            api error management

        * 'Binding' class
            synchronous/asynchronous intra-MPC communication
            ARM -> MPC
            MPC -> ARM
            inter MPCs (asynchronous)
            MPC -> MPC (on 8815B0)
            Static intra-MPC optimized binding
            interruption
            error management

        * 'Collection' class :
            Behavior with binds between primitives component using collections interfaces
            Primitive collections interface introspection

        * 'Composite' class:
            Behavior with binds between composites component using collections interfaces
            Behavior with binds defined in composites components (conf. files) using collections interfaces
            Composite collections interfaces introspection

        * 'Dynamic loading' class: 
            segment loading (RO, RW, ZI)
                Mono-instance
                Multi-instances on same DSP
                Multi-instances on both DSP
            error management

        * 'IDL' class
            check 'Interface Description Language' features from programming model
            check error codes returned by ADL tool

        * 'Interface' class
            interfaces introspection for primitives and composites components (except collections interfaces)

        * 'Lifecycle' class
            check the behavior using the lifecycle API

        * 'Memory' class
            allocate/free api management for SDRAM and MPC memories
            check address/status features
            api error management

        * 'Misc' class
            'singleton' features (network construction/destruction)
            communication stressing (mandelbrot applications)
            multiple instantiation to fill memory
            component priority inside network

        * 'Network' class
            components (primitives or composites) introspection (without interfaces)

        * 'Panic' class
            Behavior upon each Panic (reason) detection and after the detection.

        * 'Properties' class
            Get property information in component network (primitive/composite)
            api error management

        * 'Stack' class
            check the MPC stack evolution combined with the TCM_X MPC dynamic allocation

