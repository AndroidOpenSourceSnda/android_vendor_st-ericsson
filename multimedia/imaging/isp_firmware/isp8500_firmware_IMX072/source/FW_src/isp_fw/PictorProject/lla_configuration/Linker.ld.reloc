/******************************************************************************
 *                                                                            *
 * This file contains basic link script for SX cores.                         *
 *                                                                            *
 ******************************************************************************
 *                                                                            *
 *      Copyright 2004, STMicroelectronics, Incorporated.                     *
 *      All rights reserved.                                                  *
 *                                                                            *
 *        STMICROELECTRONICS, INCORPORATED PROPRIETARY INFORMATION            *
 * This software is supplied under the terms of a license agreement           *
 * or nondisclosure agreement with STMicroelectronics and may not be          *
 * copied or disclosed except in accordance with the terms of that            *
 * agreement.                                                                 *
 *                                                                            *
 ******************************************************************************/
/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 * This code is ST-Ericsson proprietary and confidential.
 * Any use of the code for whatever purpose is subject to
 * specific written permission of ST-Ericsson SA.
 */

OUTPUT_FORMAT("elf32-stxp70v3","elf32-stxp70v3","elf32-stxp70v3")
OUTPUT_ARCH(stxp70v3)

/*
 * It is very important that one section (and only one) uses the
 * CREATE_SECINFO_TABLE linker's macro. The default startup provided with
 * the compiler relies on the following symbols that are generated by
 * the linker when this macro is used:
 *   - __stm_binfo_clear
 *   - __stm_einfo_clear
 *   - __stm_binfo_copy
 *   - __stm_einfo_copy
 */

SECTIONS
{
  /* Read-only sections, merged into text segment: */
  .startup 		0x0     : {  *(.startup)   }
  .ivtable 		0x0     : { __IVBR_BASE = .; *(.ivtable)   }
  .syscall 		0x0     : { *(.syscall)    }
  .thandlers 	0x0     : { *(.thandlers)  }
  .ithandlers 	0x0     : { *(.ithandlers) }
  .text 		0x0     : { *(.text)       }
  .exttext      0x0     : { *(.exttext)    }
  .extdata		0x0     : { *(.extdata)    }
  .fixedadd_2	0x0		: { *(.fixedadd_2) }
  .exttext2		0x0     : { *(.exttext2)   }

  /* Data with Fixed Address section */
  .fixedadd             : { *(.fixedadd)   } 

  /* Tiny Data Area (tda) starts at 0 and is 32 Kbytes maximum */
  .tda_data 	0x0 	: { *(.tda_data)}
  .tda      	0x0 	: { *(.tda) 	}
  .tda_bss  	0x0 	: { *(.tda_bss) }
  .tbss     	0x0 	: { *(.tbss) 	}
  .tda_ro   	0x0 	: { *(.tda_ro) 	}
  .rotda    	0x0 	: { *(.rotda) 	}

  /* stack1 is stack dedicated to context 1 */

  .sda_data1_p ALIGN(4) 	: {}

  .sda_data1 0x0   			: { *(.sda_data1) }

  .sda_bss1  0x0   NOINIT 	: { *(.sda_bss1)  }

  .sda_ro1_p ALIGN(4) 		: {}
  .sda_ro1   0x0   			: { *(.sda_ro1)   }

  .sda_data2_p ALIGN(4) 	: {}
  .sda_data2 0x0  			: { *(.sda_data2) }

  .sda_bss2  0x0 NOINIT 	: { *(.sda_bss2)  }

  .sda_ro2_p ALIGN(4) 		: {}
  .sda_ro2   0x0 			: { *(.sda_ro2)   }

  .sda_data4_p ALIGN(4) 	: {}
  .sda_data4 0x0 			: { *(.sda_data4) }

  .sda_bss4  0x0 NOINIT 	: { *(.sda_bss4)  }

  .sda_ro4_p ALIGN(4) 		: {}
  .sda_ro4   0x0 			: { *(.sda_ro4)   }

  .sda_data8 0x0 			: { *(.sda_data8) }

  .sda_bss8  0x0 			: { *(.sda_bss8)  }

  .sda_ro8   0x0 			: { *(.sda_ro8)   }


  .data		 0x0            : { *(.data)      }
  
  .rodata  	 0x0            : { *(.rodata)    }
  .bss NOINIT           	: { *(.bss COMMON)}


  /* DWARF debug sections.
   * Symbols in the DWARF debugging sections are relative to the beginning
   * of the section so we begin them at 0.
 */
  /* DWARF 1 */
  .debug 0x0            : { *(.debug)           }
  .line 0x0             : { *(.line)            }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0x0   : { *(.debug_srcinfo)   }
  .debug_sfnames  0x0   : { *(.debug_sfnames)   }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0x0   : { *(.debug_aranges)   }
  .debug_pubnames 0x0   : { *(.debug_pubnames)  }
  /* DWARF 2 */
  .debug_info     0x0   : { *(.debug_info)      }
  .debug_abbrev   0x0   : { *(.debug_abbrev)    }
  .debug_line     0x0   : { *(.debug_line)      }
  .debug_frame    0x0   : { *(.debug_frame)     }
  .debug_str      0x0   : { *(.debug_str)       }
  .debug_loc      0x0   : { *(.debug_loc)       }
  .debug_macinfo  0x0   : { *(.debug_macinfo)   }
  /* SGI/MIPS DWARF 2 extensions */
  .debug_weaknames 0x0  : { *(.debug_weaknames) }
  .debug_funcnames 0x0  : { *(.debug_funcnames) }
  .debug_typenames 0x0  : { *(.debug_typenames) }
  .debug_varnames  0x0  : { *(.debug_varnames)  }
  /* DWARF 3 */
  .debug_ranges    0x0 : { *(.debug_ranges)    }
}
