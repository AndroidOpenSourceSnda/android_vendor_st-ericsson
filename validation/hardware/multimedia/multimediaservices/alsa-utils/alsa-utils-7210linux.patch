diff -rupN alsa-utils-1.0.10.ori/amixer/amixer.c alsa-utils/amixer/amixer.c
--- alsa-utils-1.0.10.ori/amixer/amixer.c	2005-09-22 14:47:02.000000000 +0200
+++ alsa-utils/amixer/amixer.c	2007-11-16 10:38:19.000000000 +0100
@@ -209,7 +209,8 @@ static int convert_prange(int val, int m
 	if (range == 0)
 		return 0;
 	val -= min;
-	tmp = rint((double)val/(double)range * 100);
+//	tmp = rint((double)val/(double)range * 100);
+	tmp = (val * 100)  / range;
 	return tmp;
 }
 
@@ -223,7 +224,8 @@ static int convert_prange1(int val, int 
 	if (range == 0)
 		return 0;
 
-	tmp = rint((double)range * ((double)val*.01)) + min;
+//	tmp = rint((double)range * ((double)val*.01)) + min;
+	tmp = (range * val) / 100 + min;
 	return tmp;
 }
 
diff -rupN alsa-utils-1.0.10.ori/aplay/aplay.c alsa-utils/aplay/aplay.c
--- alsa-utils-1.0.10.ori/aplay/aplay.c	2005-11-08 17:43:36.000000000 +0100
+++ alsa-utils/aplay/aplay.c	2007-11-16 10:44:40.000000000 +0100
@@ -909,12 +909,16 @@ static void set_params(void)
 	rate = hwparams.rate;
 	err = snd_pcm_hw_params_set_rate_near(handle, params, &hwparams.rate, 0);
 	assert(err >= 0);
+#if 0
 	if ((float)rate * 1.05 < hwparams.rate || (float)rate * 0.95 > hwparams.rate) {
 		if (!quiet_mode) {
 			fprintf(stderr, _("Warning: rate is not accurate (requested = %iHz, got = %iHz)\n"), rate, hwparams.rate);
 			fprintf(stderr, _("         please, try the plug plugin (-Dplug:%s)\n"), snd_pcm_name(handle));
 		}
 	}
+#else
+
+#endif
 	rate = hwparams.rate;
 	if (buffer_time == 0 && buffer_frames == 0) {
 		err = snd_pcm_hw_params_get_buffer_time_max(params,
@@ -971,15 +975,18 @@ static void set_params(void)
 	if (avail_min < 0)
 		n = chunk_size;
 	else
-		n = (double) rate * avail_min / 1000000;
+		n = (rate * avail_min) / 1000000;
+//		n = (double) rate * avail_min / 1000000;
 	err = snd_pcm_sw_params_set_avail_min(handle, swparams, n);
 
 	/* round up to closest transfer boundary */
 	n = (buffer_size / xfer_align) * xfer_align;
 	if (start_delay <= 0) {
-		start_threshold = n + (double) rate * start_delay / 1000000;
+		start_threshold = n + (rate * start_delay) / 1000000;
+//		start_threshold = n + (double) rate * start_delay / 1000000;
 	} else
-		start_threshold = (double) rate * start_delay / 1000000;
+		start_threshold = (rate * start_delay) / 1000000;
+//		start_threshold = (double) rate * start_delay / 1000000;
 	if (start_threshold < 1)
 		start_threshold = 1;
 	if (start_threshold > n)
@@ -987,9 +994,11 @@ static void set_params(void)
 	err = snd_pcm_sw_params_set_start_threshold(handle, swparams, start_threshold);
 	assert(err >= 0);
 	if (stop_delay <= 0) 
-		stop_threshold = buffer_size + (double) rate * stop_delay / 1000000;
+		stop_threshold = buffer_size + (rate * stop_delay) / 1000000;
+//		stop_threshold = buffer_size + (double) rate * stop_delay / 1000000;
 	else
-		stop_threshold = (double) rate * stop_delay / 1000000;
+		stop_threshold = (rate * stop_delay) / 1000000;
+//		stop_threshold = (double) rate * stop_delay / 1000000;
 	err = snd_pcm_sw_params_set_stop_threshold(handle, swparams, stop_threshold);
 	assert(err >= 0);
 
