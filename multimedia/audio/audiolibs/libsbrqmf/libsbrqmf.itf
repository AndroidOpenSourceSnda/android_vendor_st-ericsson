#include <audiolibs/common/include/qmf.h>

interface audiolibs.libsbrqmf.libsbrqmf unmanaged {
	void Reset_SbrAnaFilterbank_opt(Float *qmf_state_ptr, int nb_channels);  
	void Reset_SbrSynFilterbank_opt(Float *state_ptr, int nb_channels);
	int InitSbrAnaFilterbank(int nb_subbands); 

	void InitSbrSynFilterbank(int bDownSampleSBR, Float gain); 

	void SbrSynFilterbank(Float ** Sr,
						Float ** Si,
						Float * timeSig,
						int bDownSampledSbr,
						int channel
						);

	CODEC_INIT_T Open_SbrAnaFilterbank_opt(Float **qmf_states_buffer, int nb_subbands, void *add_ptr);

	CODEC_INIT_T Open_SbrSynFilterbank_opt(Float **timeBuffer, int nb_subbands, void *add_ptr);

	int SbrAnaFilterbank_opt(Float *timeIn,
							Float **rAnalysis,
							Float **iAnalysis,
							Float *qmf_states_buffer,
							Float YMEM *scratch_ptr_y,
							int nb_subbands,
							int gain_shift,
						 	int lsb,
						 	int *scale);
 
	int SbrAnaFilterbank_opt_lp(Float *timeIn,
							Float **rAnalysis,
							Float *qmf_states_buffer,
							Float YMEM *scratch_ptr_y,
							int nb_subbands,
							int gain_shift,
							int lsb,
							int *scale);
	void SbrSynFilterbank_opt(Float **sbrReal,
							Float **sbrImag,
							Float *timeOut,
							Float *timeBuffer,
							Float YMEM *scratch_ptr_y,
							int nb_channels,
					 		int lsb,
					 		int usb,
					 		SBR_SCALING *sbr_scaling,
					 		int gain_shift,
					 		void * ps_dec,
					 		int active
					 		);
	void SbrSynFilterbank_opt_lp(Float **sbrReal,
								Float *timeOut,
								Float *timeBuffer,
								Float YMEM *scratch_ptr_y,
								int nb_channels,
								int lsb,
								int usb,
								SBR_SCALING *sbr_scaling,
								int gain_shift,
								void *ps_dec,
								int ps_active);
						 
}