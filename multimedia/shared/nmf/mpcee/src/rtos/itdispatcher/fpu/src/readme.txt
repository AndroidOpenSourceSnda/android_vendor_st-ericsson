Howto generate itDispatcherCode.asm

1) Generate a first version of itDispatcherCode.asm
itDispatcherCode.asm is first generated by compiling using command line 'ac -link -O3 +k main.c'.

/********** from here *********************************/
#define SP_OFFSET_FROM_JSR                          0x2a
#define UNBIND_INTERRUPT                            10

extern void Panic(unsigned int reason, unsigned int info1);
extern volatile int rtos_itdispatcher_fpu_it[];

typedef void (*itHandler)(void);

asm void * get_sp(void) {
    xmv sp0, @{}
}

#pragma interrupt
void itDummy(void)
{
    ;
}

#pragma interrupt
void itDispatcher(void)
{
    void* interruptedTHIS;
    itHandler pMyItHandler;
    int newRts;
    int irqNb;
    
    // read on stack to find where we come from
    newRts = *((int *)((int)get_sp() + SP_OFFSET_FROM_JSR));
    irqNb = ((newRts - 1) & 0x1f);
    // save current this
    interruptedTHIS = *(void**)0x1;
    // set new this
    *(void**)0x1 = *(void**)&rtos_itdispatcher_fpu_it[irqNb * 2];
    // set pointer function handler 
    pMyItHandler = *(void**)&rtos_itdispatcher_fpu_it[irqNb * 2 + 1];
    // call it
    (*pMyItHandler)();
    // restore old pointer 
    *(void**)0x1 = interruptedTHIS;
    //change return address to jump in rti of itDummy
    newRts = newRts & ~0xfffff;
    newRts = newRts + (int)itDummy + 1;
    *((int *)((int)get_sp() + SP_OFFSET_FROM_JSR)) = newRts;
}
/********** to here *********************************/

2) Modify rti to rts one
 Last instruction of itDispatcher is a rti, replace it by a rts
instruction.

3) compile
4) adjust if necessary SP_OFFSET_FROM_JSR value

SP_OFFSET_FROM_JSR must be equal to _itDispatcher_local_size + _itDispatcher_savedreg_size + _itDispatcher_spill_size (define in generated assembly)
5) test

