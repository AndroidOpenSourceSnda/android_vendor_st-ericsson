**********************************************************
* Nomadik Multiprocessing Framework (version 0.9.5)      *
**********************************************************
	"Compilé, c'est gagné" (M. Guene)
	"La doc, c'est le code" (J.-P. Fassino)

The release comprises one .tgz file holding the following features:
	- Component manager binary & api
 	- Synchronous & Hybrid execution engine binaries
 	- Nomadik Multiprocessing Environment API 
 	- Component tool chain binary
 	- Example source codes (Hello World's, Training, Mandelbrot's, mp3, User Fifo, Jpeg)
 		Hello world and mp3 Eclipse project file delivered
 	- Documentations (User guide, programming model, CM API, MPC API)
 		User guide not fully in line with delivery
 
Sources are delivered in another .tgz.

Supported target:
	- STn8815 SAA & SVA Cut A0/B0/C0
	- STn8820 SAA & SVA & SIA Cut A0
	
Supported environments:
	- nmf_Bare: 	based on Nomadik HCL/services libraries (only on STn8815 board)
		Based on label HCL/services NOI_BASE_V6.16.1
	- nmf_Think:	based on Think component-based OS
	- nmf_OS21: 	based on ARM OS21
		Based on library OS21-3.2.4

Changes:
--------
[CM]
	- STM driver implementation for STn8820 (tested by TEMA)
	
[MPC Executive Engine]
	- STM driver implementation for STn8820 (tested by TEMA)
	- Configure MMDSP register in order to memorize interruption when triggering
	  when interrupt masked.
	
[OS integration]
	
[Tools] 
	
[Programming model]


Bug fixes:
---------
 - [ Defect #36221 ] [Example] a mandelbrot application crashes under os21
 - [ Defect #35950 ] [CM] os21 blocking when doing a great deal of NMF_CALL
 - [ Defect #36229 ] [Example] mpc->host communication stressing results in blocking under os21
 - [ Defect #35253 ] [CM] mandelbrot tests never stop under os21
 - Configure MMDSP register in order to memorize interruption when triggering when interrupt masked.
 

Known Issues:
-------------


Notes:
------
	- Inter-MPC distribution not supported due to hardware limitation on STn8815A0
	- No cross calling between ESRAM and SDRAM Code
		A component code must fit in one memory segment only. Split your component into two
		sub components to achieve that.
		
	- MP3 example supported only on nmf_bare environment.
		This example reuse CSD algorithm and must not been distribute outside ST Microelectronics.
		Today, this example only runs on bare machine (due to APD HCL/Services packages issues).
	- Some link issue with GNU toolchain could occur in examples until HCL/Services compiled with 
		correct flags. 

	- Due to unavailability of HCL for STn8820, nmf_Bare runs only on STn8815.
	
	- STM for 8820 implemented but tested by TEMA team and not by NMF one due to unavailability 
	  of Betty firmware for STM.
	

Pre-requires:
-------------
	- At least Nomadik Toolset 1.0.0 Beta SP1.
	- Java Runtime Environment  (http://java.sun.com/)
		At least JRE 1.5 (on Linux please use at least JRE 1.6 due to JVM bug regarding execution access rights)        


Test environment on NDK15:
--------------------------
	- Environments:
		MPC: SAA & SVA
		Execution Engine: Synchronous, Hybrid
		Semaphores: local, hardware
		Environment: bare, think, os21, tlm
		Nomadik Toolset 1.0.0 Beta
		ARM: RVCT 3.0 SP1 Build 688, RVCT 2.2 Build 593, st-armgcc (gcc version 4.1.1)

	- Tests:
		* 'ADL' class
			check 'Architecture Description Language' features from programming model
			test limit of some ADL features (name length, collection size,...)
			check error codes returned by ADL tool

		* 'Attribute' class
			operations on attributes inside component (mpc side)
			check attribute api on host side
			api error management

		* 'Binding' class
			synchronous/asynchronous intra-MPC communication
			ARM -> MPC
			MPC -> ARM
			inter MPCs (asynchronous)
			MPC -> MPC (on 8815B0)
			interruption
			error management

		* 'Collection' class :
			Behavior with binds between primitives component using collections interfaces
			Primitive collections interface introspection

		* 'Composite' class:
			Behavior with binds between composites component using collections interfaces
			Behavior with binds defined in composites components (conf. files) using collections interfaces
			Composite collections interfaces introspection

		* 'Dynamic loading' class: 
			segment loading (RO, RW, ZI)
				Mono-instance
				Multi-instances on same DSP
				Multi-instances on both DSP
			error management

		* 'Fifo' class
			creation/destruction of network with fifo use
			fifo connectivity (host side and mpc side)
			check flush/status/notify features
			api error management

		* 'IDL' class
			check 'Interface Description Language' features from programming model
			check error codes returned by ADL tool

		* 'Interface' class
			interfaces introspection for primitives and composites components (except collections interfaces)

		* 'Lifecycle' class
			check the behavior using the lifecycle API

		* 'Memory' class
			allocate/free api management for SDRAM and MPC memories
			check address/status features
			api error management

		* 'Misc' class
			'singleton' features (network construction/destruction)
			communication stressing (mandelbrot applications)
			multiple instantiation to fill memory
			component priority inside network

		* 'Network' class
			components (primitives or composites) introspection (without interfaces)

		* 'Panic' class
			Behavior upon each Panic (reason) detection and after the detection.

		* 'Properties' class
			Get property information in component network (primitive/composite)
			api error management

		* 'Stack' class
			check the MPC stack evolution combined with the TCM_X MPC dynamic allocation

