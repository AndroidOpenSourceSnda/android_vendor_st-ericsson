# vim:syntax=make:
# -*- Mode: Makefile -*-

# WARNING COMPONENT_PATH is MANDATORY for Make.config and Make.rules
#-------------------------------
# Default Config
#-------------------------------

include $(MM_MAKEFILES_DIR)/SharedConfig.mk

COMPONENT_TOP_DIR := $(PWD)

# MY_MODULE would be set to imaging/isp_firmware/isp8500_firmware_<sensor_name>
MY_MODULE = $(subst $(PRODUCT_TOP_DIR),,$(PWD))

# MY_BUILDGEN_DIR would be set to the top level directory which will contain all files generated by the build system
MY_BUILDGEN_DIR = $(TARGET_OUT_INTERMEDIATES)/$(MY_MODULE)/xp70_buildgen

# MY_SRC_DIR would be set to the directory where the .c and .cpp files are generated by the build system
## MY_SRC_DIR may be set to "$(MY_BUILDGEN_DIR)/source" or "$(PWD)/source"
MY_SRC_DIR = $(PWD)/source

# MY_INC_DIR would be set to the directory where the .h files are generated by the build system
## MY_INC_DIR may be set to "$(TARGET_OUT_INTERMEDIATES)/$(MY_MODULE)/include" or "$(PWD)/include"
MY_INC_DIR = $(PWD)/include

# MY_OBJ_DIR would be set to the directory where all the object files are generated by the build system
MY_OBJ_DIR = $(MY_BUILDGEN_DIR)/obj

# MY_REPORTS_DIR would be to set the directory where Reports and DeviceParams are generated by the build system
## MY_REPORTS_DIR may be set to "$(MY_BUILDGEN_DIR)/source/isp_fw" or "$(PWD)/source/FW_src/isp_fw"
MY_REPORTS_DIR = $(MY_BUILDGEN_DIR)/source/isp_fw

# MY_XTI_DIR would be set to the directory where the .h files are generated by the trace compiler
MY_XTI_DIR = $(OST_INC_AUTOGEN)

# HATS target
MMVALIDROOT = system/usr/share/mm-valid
MAP_DEVICEPARAMS_DIR=$(MY_REPORTS_DIR)

VPATH += $(MY_SRC_DIR) source $(MY_INC_DIR) include

IS_OMX_COMPONENT_LIB:=false
include $(MM_MAKEFILES_DIR)/STEOMXLoaderConfig.mk
INSTALL_SOLIB_DIR_DEFAULT := $(INSTALL_ROOTFS_DIR)/system/usr/share/camera/isp_fw

# My current sensor type would be set to <sensor_name>
# It will be extracted from $(MY_MODULE) which is imaging/isp_firmware/isp8500_firmware_<sensor_name>
MY_GENERIC_STRING_TO_ELIMINATE = imaging/isp_firmware/isp8500_firmware_
MY_CURRENT_SENSOR = $(subst $(MY_GENERIC_STRING_TO_ELIMINATE),,$(MY_MODULE))

# Installation rules:
# Default: install both the solibs for current sensor.
# Case1: Both sensor are RAW Bayer: do not install solib if my_sensor is not used(Applies for both primary and secondary).
# Case2: Primary sensor only RAW Bayer: do not install both solibs if my_sensor is not same as primary.
# Case3: Secondary sensor only RAW Bayer: do not install both solibs if my_sensor is not same as secondary.

# Variables to be used for implementing the solib installation rules(Default values used)
INSTALL_PRY = true
INSTALL_SEC = true

ifeq ($(CAMERA_PRIMARY_TYPE),RAW)
ifeq ($(CAMERA_SECONDARY_TYPE),RAW)
# Case1: Both RAW Bayer
ifneq ($(MY_CURRENT_SENSOR),$(CAMERA_SET_PRIMARY_SENSOR))
INSTALL_PRY = false
endif
ifneq ($(MY_CURRENT_SENSOR),$(CAMERA_SET_SECONDARY_SENSOR))
INSTALL_SEC = false
endif
else
# Else case for 'ifeq ($(CAMERA_SECONDARY_TYPE),RAW)' check
# Case2: Primary only RAW Bayer
ifneq ($(MY_CURRENT_SENSOR),$(CAMERA_SET_PRIMARY_SENSOR))
INSTALL_PRY = false
INSTALL_SEC = false
endif
endif
else
# Else case for 'ifeq ($(CAMERA_PRIMARY_TYPE),RAW)' check
ifeq ($(CAMERA_SECONDARY_TYPE),RAW)
# Case 3: Secondary only RAW Bayer
ifneq ($(MY_CURRENT_SENSOR),$(CAMERA_SET_SECONDARY_SENSOR))
INSTALL_PRY = false
INSTALL_SEC = false
endif
endif
endif

CPPFLAGS += -I$(MY_INC_DIR)
CPPFLAGS += -Iinclude

LIBNAME_PRY = st_isp8500_firmware_$(MY_CURRENT_SENSOR)_primary
LIBNAME_SEC = st_isp8500_firmware_$(MY_CURRENT_SENSOR)_secondary
INSTALL_LIB = $(addprefix lib, $(addsuffix .a, $(LIBNAME_PRY)))
INSTALL_LIB += $(addprefix lib, $(addsuffix .a, $(LIBNAME_SEC)))

LIBNAMES += PRY SEC

LIBOBJ_PRY = Isp8500_primary_fw_data \
         Isp8500_primary_fw_ext \
         Isp8500_primary_fw_ext_ddr \
         Isp8500_primary_fw_split \
         primary_sensor

LIBOBJ_SEC = Isp8500_secondary_fw_data \
         Isp8500_secondary_fw_ext \
         Isp8500_secondary_fw_ext_ddr \
         Isp8500_secondary_fw_split \
         secondary_sensor

INSTALL_HEADER = VhcElementDefs.h primary_sensor.h secondary_sensor.h \
                 primary_PEList.h secondary_PEList.h \
                 isp_firmware_primary.h isp_firmware_secondary.h \
                 baseline.h extension.h cam_drv_nvm_SMIApp.h \
                 Isp8500_primary_fw_ext_ddr.h \
                 Isp8500_primary_fw_data.h \
                 Isp8500_primary_fw_ext.h \
                 Isp8500_primary_fw_split.h \
                 Isp8500_secondary_fw_ext_ddr.h \
                 Isp8500_secondary_fw_data.h \
                 Isp8500_secondary_fw_ext.h \
                 Isp8500_secondary_fw_split.h

SOLIBNAMES_PRY = ste_isp8500_firmware_primary
SOLIBNAMES_SEC = ste_isp8500_firmware_secondary

SOLIBNAMES = $(SOLIBNAMES_PRY) $(SOLIBNAMES_SEC)

EXTRALIBS_$(SOLIBNAMES_PRY) = $(LIBNAME_PRY) st_sensor
EXTRALIBS_$(SOLIBNAMES_SEC) = $(LIBNAME_SEC) st_sensor


FLAGS_$(SOLIBNAMES_PRY) += $(LDFLAGS_STE_ENS_OMX_COMPONENTS)
FLAGS_$(SOLIBNAMES_SEC) += $(LDFLAGS_STE_ENS_OMX_COMPONENTS)

ifeq ($(INSTALL_PRY),true)
INSTALL_SOLIB += $(SOLIBNAMES_PRY)
endif
ifeq ($(INSTALL_SEC),true)
INSTALL_SOLIB += $(SOLIBNAMES_SEC)
endif

# [NON_ISL_SUPPORT] flag definitions to simulate NON-SMIA sensors with/without ISL and SMIA sensors with ISL
ifeq ($(SENSOR_ISL_DISABLE),true)
CPPFLAGS += -DSENSOR_ISL_DISABLE
MY_CC_OPTIONS += -DSENSOR_ISL_DISABLE
else

ifeq ($(SENSOR_ISL_SMIA_COMPLIANT),true)
CPPFLAGS += -DSENSOR_ISL_SMIA_COMPLIANT
MY_CC_OPTIONS += -DSENSOR_ISL_SMIA_COMPLIANT
else
MY_CC_OPTIONS += -DWall
endif

endif
### Makefiles rules start here ###
all:

# WARNING BUILD_XP70_SIA_CODE given by Android build system (linux/build)
# If using other build system, need to be be forced on makefile command line
ifeq ($(BUILD_XP70_SIA_CODE),true)
todo:fw_build
else
todo:lib solib install_default_so
endif

fw_build:
	$(shell mkdir -p $(MY_BUILDGEN_DIR))
	$(shell mkdir -p $(MY_BUILDGEN_DIR)/source)
	## The following should be uncommented when MY_SRC_DIR is set to anything other than $(PWD)/source
	#$(shell mkdir -p $(MY_SRC_DIR))
	## The following should be uncommented when MY_INC_DIR is set to anything other than $(PWD)/inc
	#$(shell mkdir -p $(MY_INC_DIR))

	@echo "*** Trace Headers and Dictionary Generation Start ***"
	(cd ./source/FW_src/isp_fw; make all PARAM_MMBUILDOUT=$(MMBUILDOUT))
	@echo "*** Trace Headers and Dictionary Generation End ***"

	@echo "*** Firmware Build Start ***"
	(cd ./source/FW_src/isp_fw/PictorProject; make pre-build PARAM_OBJ_DIR=$(MY_OBJ_DIR) PARAM_REPORTS_DIR=$(MY_REPORTS_DIR) PARAM_XTI_DIR=$(MY_XTI_DIR) PARAM_CC_OPTIONS=$(MY_CC_OPTIONS))
	@echo "*** Firmware Build End ***"

	mv -f $(MY_REPORTS_DIR)/DeviceParams/baseline.h                  $(MY_INC_DIR)/
	mv -f $(MY_REPORTS_DIR)/DeviceParams/extension.h                 $(MY_INC_DIR)/
	mv -f $(MY_REPORTS_DIR)/DeviceParams/SensorId.h                  $(MY_INC_DIR)/
	cp -f ./source/FW_src/isp_fw/PictorProject/LLA_Headers/cam_drv_nvm_SMIApp.h     $(MY_INC_DIR)/

	@echo "*** Baseline, Extension and NVM Files are copied ***"
	@echo

	(cd ./utils;./genall.sh primary secondary $(MY_BUILDGEN_DIR)/obj $(MY_SRC_DIR) $(MY_INC_DIR))

	# Now invoke make with lib target; this is to ensure that "lib" is executed after
	# genall.sh has generated the needed .h files
	make all BUILD_XP70_SIA_CODE=false

	@echo "*** Source and Header Files generated ***"
	@echo

ifeq ($(ENABLE_FEATURE_BUILD_HATS),true)
	@echo "*** get map file for IQT ***"
	mkdir -p $(INSTALL_ROOTFS_DIR)/$(MMVALIDROOT)/$(MY_MODULE)/device_params
	cp -rf $(MAP_DEVICEPARAMS_DIR)/DeviceParams/*.map $(INSTALL_ROOTFS_DIR)/$(MMVALIDROOT)/$(MY_MODULE)/device_params
endif

# Making our own target like fw_clean is necessary to "extend" the default clean.
clean: fw_clean

# Default clean of isp_fw Makefile called to delete the generated trace xml.
fw_clean:
	(cd $(MY_SRC_DIR); rm -f Isp8500*.c)
	(cd $(MY_INC_DIR); rm -f Isp8500*.h baseline.h extension.h cam_drv_nvm_SMIApp.h SensorId.h primary_PEList.h secondary_PEList.h)
	(cd ./source/FW_src/isp_fw; make clean)

install_default_so:
	$(MMINSTALL) -d $(LIB_DIR)/$(LIB_DIR_NAME)$(SOLIBNAMES_PRY).so $(INSTALL_SOLIB_DIR_DEFAULT)/libste_isp8500_firmware_$(MY_CURRENT_SENSOR)_primary.so
	$(MMINSTALL) -d $(LIB_DIR)/$(LIB_DIR_NAME)$(SOLIBNAMES_SEC).so $(INSTALL_SOLIB_DIR_DEFAULT)/libste_isp8500_firmware_$(MY_CURRENT_SENSOR)_secondary.so

#-------------------------------
# Generic Rules
#-------------------------------
include $(MM_MAKEFILES_DIR)/SharedRules.mk
