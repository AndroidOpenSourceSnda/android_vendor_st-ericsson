/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 *
 * This code is part of the NMF Toolset.
 *
 * The NMF Toolset is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * The NMF Toolset is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with the NMF Toolset. If not, see <http://www.gnu.org/licenses/>.
 *
 */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package tools.conf.parser;
import tools.conf.ast.*;
import tools.common.compilerexception;
import tools.common.util;
import java.io.File;
import tools.conf.graph.component.SchedPriority;

/** Token Manager. */
public class ParserTokenManager implements ParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xfffffffdbfeffc00L) != 0L || (active1 & 0x7fffffbfL) != 0L)
         {
            jjmatchedKind = 95;
            return 15;
         }
         if ((active0 & 0x80L) != 0L || (active1 & 0x100000000000000L) != 0L)
            return 0;
         if ((active0 & 0x240100000L) != 0L)
         {
            jjmatchedKind = 95;
            return 11;
         }
         return -1;
      case 1:
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 10;
         }
         if ((active0 & 0xfffffe7fffeefc00L) != 0L || (active1 & 0x7ffefdbeL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 1;
            }
            return 15;
         }
         if ((active0 & 0x18000010000L) != 0L || (active1 & 0x10201L) != 0L)
            return 15;
         return -1;
      case 2:
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 2;
            }
            return 9;
         }
         if ((active0 & 0xfffffe1fffeffc00L) != 0L || (active1 & 0x7fff7dbeL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 2;
            }
            return 15;
         }
         if ((active0 & 0x6000000000L) != 0L || (active1 & 0x8000L) != 0L)
            return 15;
         return -1;
      case 3:
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 3;
            }
            return 8;
         }
         if ((active0 & 0x4000001fc0004000L) != 0L || (active1 & 0x1000a0L) != 0L)
            return 15;
         if ((active0 & 0xbffffe003fefbc00L) != 0L || (active1 & 0x7feffd1eL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 3;
            }
            return 15;
         }
         return -1;
      case 4:
         if ((active0 & 0xbffffe0000fffc00L) != 0L || (active1 & 0x7eefbc1eL) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 4;
            return 15;
         }
         if ((active0 & 0x3f000000L) != 0L || (active1 & 0x1004100L) != 0L)
            return 15;
         return -1;
      case 5:
         if ((active0 & 0x3ffffe000000fc00L) != 0L || (active1 & 0x7e69b81cL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 95;
               jjmatchedPos = 5;
            }
            return 15;
         }
         if ((active0 & 0x8000000000ff0000L) != 0L || (active1 & 0x860402L) != 0L)
            return 15;
         return -1;
      case 6:
         if ((active0 & 0x281400000000c000L) != 0L || (active1 & 0x10000000L) != 0L)
            return 15;
         if ((active0 & 0x17ebfe0000003c00L) != 0L || (active1 & 0x6e69b81eL) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 6;
            return 15;
         }
         return -1;
      case 7:
         if ((active0 & 0x1c00000000000L) != 0L || (active1 & 0x229b81cL) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 7;
            return 15;
         }
         if ((active0 & 0x17ea3e0000003c00L) != 0L || (active1 & 0x6c400002L) != 0L)
            return 15;
         return -1;
      case 8:
         if ((active0 & 0x1c00000000000L) != 0L || (active1 & 0x2291800L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 8;
            return 15;
         }
         if ((active1 & 0xa01cL) != 0L)
            return 15;
         return -1;
      case 9:
         if ((active0 & 0x1c00000000000L) != 0L || (active1 & 0x210800L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 9;
            return 15;
         }
         if ((active1 & 0x2081000L) != 0L)
            return 15;
         return -1;
      case 10:
         if ((active0 & 0x1c00000000000L) != 0L || (active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 10;
            return 15;
         }
         if ((active1 & 0x200800L) != 0L)
            return 15;
         return -1;
      case 11:
         if ((active0 & 0x1400000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 11;
            return 15;
         }
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x10000L) != 0L)
            return 15;
         return -1;
      case 12:
         if ((active0 & 0x1400000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 12;
            return 15;
         }
         return -1;
      case 13:
         if ((active0 & 0x1000000000000L) != 0L)
            return 15;
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 13;
            return 15;
         }
         return -1;
      case 14:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 14;
            return 15;
         }
         return -1;
      case 15:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 15;
            return 15;
         }
         return -1;
      case 16:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 16;
            return 15;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 106);
      case 41:
         return jjStopAtPos(0, 107);
      case 42:
         return jjStopAtPos(0, 118);
      case 43:
         return jjStopAtPos(0, 116);
      case 44:
         return jjStopAtPos(0, 108);
      case 45:
         return jjStopAtPos(0, 115);
      case 46:
         jjmatchedKind = 112;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L);
      case 47:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 60:
         return jjStopAtPos(0, 104);
      case 61:
         return jjStopAtPos(0, 111);
      case 62:
         return jjStopAtPos(0, 105);
      case 91:
         return jjStopAtPos(0, 113);
      case 93:
         return jjStopAtPos(0, 114);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x2010001L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x80100L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000000088000400L, 0x4000010L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10000018000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x240100000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2010000000L, 0x100000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc000000000L, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1800002L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60400408L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x81000L, 0x8001000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x20e60000L, 0x10202000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xbffffe0000004000L, 0x42a0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4002000L, 0x20800L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x800000800L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 109);
      case 124:
         return jjStopAtPos(0, 117);
      case 125:
         return jjStopAtPos(0, 110);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 46:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0xbffffe0000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0x80004L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x89000L, active1, 0x8001000L);
      case 102:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 15);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000021000000L, active1, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x820000L, active1, 0x102100L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x50000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4204002000L, active1, 0x8800L);
      case 111:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(1, 73, 15);
         return jjMoveStringLiteralDfa2_0(active0, 0x3908010c00L, active1, 0x14040010L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800002L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0x61424408L);
      case 115:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000L, active1, 0x2000000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x200000L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000400000L, active1, 0x4800L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0x400L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L, active1, 0x101000L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x801000L, active1, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x805040000L, active1, 0x400088L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x108000400L, active1, 0x4002104L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000000L, active1, 0x60000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000004000L, active1, 0x20L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000000L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 37, 15);
         return jjMoveStringLiteralDfa3_0(active0, 0x200000L, active1, 0x40000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x3fe18000c0002000L, active1, 0L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x1400180000L, active1, 0x2808002L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1e3e0200010000L, active1, 0x10000000L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x12008800L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x104L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 15);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 15);
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x124000L, active1, 0x1029000L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L);
      case 103:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c00000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x37fa3e0000003000L, active1, 0x800002L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L, active1, 0L);
      case 109:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40808L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x10000L);
      case 111:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 15);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 15);
         else if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000004000000L, active1, 0x400000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20200010L);
      case 114:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0x12000000L);
      case 115:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 15);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x440400L, active1, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x280000L, active1, 0x8000000L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x804000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1800000000000L, active1, 0x4040004L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x240000L, active1, 0x10010000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 15);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L, active1, 0x20000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400400L, active1, 0x4a000408L);
      case 107:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 15);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0x2000L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x37fa3e0000000000L, active1, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8804000000020000L, active1, 0x800012L);
      case 114:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 88, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x180000L, active1, 0x609000L);
      case 115:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(4, 72, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L, active1, 0L);
      case 116:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(4, 27, 15);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 15);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 15);
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L);
      case 99:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 15);
         break;
      case 100:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L, active1, 0x10003000L);
      case 102:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 17, 15);
         break;
      case 104:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L, active1, 0x4600800L);
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 63, 15);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L, active1, 0L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 15);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 20, 15);
         else if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x2400L, active1, 0x2L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x805800000000000L, active1, 0x28088000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0x10L);
      case 116:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 15);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 15);
         return jjMoveStringLiteralDfa6_0(active0, 0x37fa3e0000001000L, active1, 0xcL);
      case 120:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa7_0(active0, 0x1008000000000000L, active1, 0L);
      case 50:
         return jjMoveStringLiteralDfa7_0(active0, 0x402000000000000L, active1, 0L);
      case 51:
         return jjMoveStringLiteralDfa7_0(active0, 0x200200000000000L, active1, 0L);
      case 52:
         return jjMoveStringLiteralDfa7_0(active0, 0x180180000000000L, active1, 0L);
      case 53:
         return jjMoveStringLiteralDfa7_0(active0, 0x40040000000000L, active1, 0L);
      case 54:
         return jjMoveStringLiteralDfa7_0(active0, 0x20020000000000L, active1, 0L);
      case 56:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 15);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 15);
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 15);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 59, 15);
         break;
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800000003000L, active1, 0x48000000L);
      case 102:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(6, 14, 15);
         break;
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0x18L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4001000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x280004L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L);
      case 115:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 92, 15);
         break;
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 15, 15);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20402000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0x2008000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 15);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 15);
         break;
      case 50:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 45, 15);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 57, 15);
         break;
      case 52:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 15);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 15);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 15);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 15);
         break;
      case 54:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 42, 15);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 51, 15);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 54, 15);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 15);
         break;
      case 56:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 43, 15);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 15);
         break;
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000000000L, active1, 0x1000L);
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 15);
         return jjMoveStringLiteralDfa8_0(active0, 0x1800000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 15);
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 11, 15);
         break;
      case 108:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 65, 15);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x12000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 15);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200004L);
      case 115:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 15);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(7, 91, 15);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 94, 15);
         break;
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000010L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80800L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      case 121:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(7, 86, 15);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 93, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x1800000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 15);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 68, 15);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x2001000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000L);
      case 110:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(8, 77, 15);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x90000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x800L);
      case 116:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(8, 79, 15);
         break;
      case 121:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(8, 66, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(9, 76, 15);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 83, 15);
         break;
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(9, 89, 15);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x200000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L, active1, 0L);
      case 115:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(10, 75, 15);
         break;
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000L);
      case 121:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(10, 85, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(11, 47, 15);
         break;
      case 115:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(11, 80, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 48, 15);
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 46, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 35;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(15);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(15);
                  break;
               case 5:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAddTwoStates(29, 30);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 100)
                        kind = 100;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 39)
                     jjAddStates(3, 4);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  else if (curChar == 58)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(15);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(15);
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(5, 7);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddStates(5, 7);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 3:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 13:
                  if (curChar == 58 && kind > 70)
                     kind = 70;
                  break;
               case 16:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 34 && kind > 98)
                     kind = 98;
                  break;
               case 19:
                  if (curChar == 39)
                     jjAddStates(3, 4);
                  break;
               case 20:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 21:
                  if (curChar == 39 && kind > 99)
                     kind = 99;
                  break;
               case 23:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 21);
                  break;
               case 25:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 26:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 28:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 31:
                  if (curChar != 48)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddStates(0, 2);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(33, 30);
                  break;
               case 34:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(34, 30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 95)
                        kind = 95;
                     jjCheckNAdd(15);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 1:
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(5, 7);
                  break;
               case 6:
                  if (curChar == 115 && kind > 70)
                     kind = 70;
                  break;
               case 7:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 12:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 95)
                     kind = 95;
                  jjCheckNAdd(15);
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 22:
                  if (curChar == 92)
                     jjAddStates(10, 12);
                  break;
               case 23:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(21);
                  break;
               case 30:
                  if ((0x100000001000L & l) != 0L && kind > 100)
                     kind = 100;
                  break;
               case 32:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAddTwoStates(33, 30);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjAddStates(5, 7);
                  break;
               case 17:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 35 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   32, 34, 30, 20, 22, 1, 2, 4, 17, 18, 23, 24, 26, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, 
"\143\157\156\164\151\156\165\145", "\166\157\154\141\164\151\154\145", "\162\145\147\151\163\164\145\162", 
"\165\156\163\151\147\156\145\144", "\164\171\160\145\144\145\146", "\144\145\146\141\165\154\164", 
"\144\157\165\142\154\145", "\163\151\172\145\157\146", "\163\167\151\164\143\150", 
"\162\145\164\165\162\156", "\145\170\164\145\162\156", "\163\164\162\165\143\164", 
"\163\164\141\164\151\143", "\163\151\147\156\145\144", "\167\150\151\154\145", "\142\162\145\141\153", 
"\165\156\151\157\156", "\143\157\156\163\164", "\146\154\157\141\164", "\163\150\157\162\164", 
"\145\154\163\145", "\143\141\163\145", "\154\157\156\147", "\145\156\165\155", 
"\141\165\164\157", "\166\157\151\144", "\147\157\164\157", "\146\157\162", "\151\156\164", 
"\151\146", "\144\157", "\164\137\165\151\156\164\66\64", 
"\164\137\165\151\156\164\65\66", "\164\137\165\151\156\164\64\70", "\164\137\165\151\156\164\64\60", 
"\164\137\165\151\156\164\63\62", "\164\137\160\150\171\163\151\143\141\154\137\141\144\144\162\145\163\163", 
"\164\137\163\150\141\162\145\144\137\162\145\147", "\164\137\163\150\141\162\145\144\137\146\151\145\154\144", 
"\164\137\165\151\156\164\62\64", "\164\137\165\167\157\162\144", "\164\137\165\151\156\164\61\66", 
"\164\137\165\151\156\164\70", "\164\137\163\151\156\164\66\64", "\164\137\163\151\156\164\65\66", 
"\164\137\163\151\156\164\64\70", "\164\137\163\151\156\164\64\60", "\164\137\163\151\156\164\63\62", 
"\164\137\163\151\156\164\62\64", "\164\137\163\167\157\162\144", "\164\137\163\151\156\164\61\66", 
"\164\137\163\151\156\164\70", "\143\150\141\162", "\164\137\142\157\157\154", "\141\163", 
"\157\160\164\151\157\156\141\154", "\155\141\156\144\141\164\157\162\171", 
"\160\162\151\155\151\164\151\166\145", "\143\157\155\160\157\163\151\164\145", "\164\171\160\145", null, 
"\164\150\151\163", "\142\151\156\144\163", "\164\157", "\160\162\145\146\151\170", 
"\165\156\141\155\142\151\147\165\157\165\163", "\162\145\146\145\162\145\156\143\145\144", 
"\163\151\156\147\154\145\164\157\156", "\164\162\141\143\145", "\151\156\164\145\162\162\165\160\164", 
"\141\163\171\156\143\150\162\157\156\157\165\163", "\165\162\147\145\156\164", "\156\157\162\155\141\154", 
"\142\141\143\153\147\162\157\165\156\144", "\146\151\146\157", "\163\165\142\160\162\151\157\162\151\164\171", 
"\160\162\151\157\162\151\164\171", "\157\160\164\151\157\156", "\157\162\144\145\162", 
"\141\164\164\162\151\142\165\164\145\163", "\143\157\156\164\141\151\156\163", "\162\145\161\165\151\162\145\163", 
"\163\157\165\162\143\145\163", "\160\162\157\160\145\162\164\171", "\160\162\157\166\151\144\145\163", null, 
null, null, null, null, null, null, null, null, "\74", "\76", "\50", "\51", "\54", 
"\173", "\175", "\75", "\56", "\133", "\135", "\55", "\53", "\174", "\52", "\56\56", 
"\57", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffc01L, 0x1ffff1cffffffffL, 
};
static final long[] jjtoSkip = {
   0x17eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x140L, 0x0L, 
};
static final long[] jjtoMore = {
   0x280L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[35];
private final int[] jjstateSet = new int[70];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public ParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public ParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 35; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 9)
         {
            jjmatchedKind = 9;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
