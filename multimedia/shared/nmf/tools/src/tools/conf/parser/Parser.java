/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 *
 * This code is part of the NMF Toolset.
 *
 * The NMF Toolset is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * The NMF Toolset is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with the NMF Toolset. If not, see <http://www.gnu.org/licenses/>.
 *
 */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package tools.conf.parser;

import tools.conf.ast.*;
import tools.common.compilerexception;
import tools.common.util;
import java.io.File;
import tools.conf.graph.component.SchedPriority;

public class Parser implements ParserConstants {
        public File file;
        public String foundedName;

/*****************************************************
 ADL Grammars
 *****************************************************/
  final public asttype ComponentDeclaration(String _fullyname, File directory) throws ParseException, compilerexception {
  astcomposite composite;
  astprimitive primitive;
  asttype type;
  astdefinition extend;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPOSITE:
      jj_consume_token(COMPOSITE);
      foundedName = Name();
                  composite = new astcomposite(file, _fullyname);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 104:
        jj_consume_token(104);
        TemplateParameterDeclaration(composite);
        jj_consume_token(105);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        AttributeParameterDeclaration(composite);
        jj_consume_token(107);
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        extend = ComponentDefinition();
                  composite.addExtend(extend);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 108:
            ;
            break;
          default:
            jj_la1[2] = jj_gen;
            break label_1;
          }
          jj_consume_token(108);
          extend = ComponentDefinition();
                          composite.addExtend(extend);
        }
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINGLETON:
        jj_consume_token(SINGLETON);
                      composite.singleton = true;
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 109:
        jj_consume_token(109);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BIND:
        case CONTAINS:
        case REQUIRES:
        case PROPERTY:
        case PROVIDES:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REQUIRES:
        case PROVIDES:
          InterfaceDeclaration(composite);
          break;
        case CONTAINS:
          ContentDeclaration(composite);
          break;
        case BIND:
          BindingDeclaration(composite);
          break;
        case PROPERTY:
          PropertyDeclaration(composite);
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPTION:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        OptionDeclaration(composite);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 110:
        jj_consume_token(110);
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(0);
                  {if (true) return composite;}
      break;
    case 0:
    case PRIMITIVE:
    case EXTENDS:
    case SINGLETON:
    case OPTION:
    case ATTRIBUTES:
    case REQUIRES:
    case SOURCES:
    case PROPERTY:
    case PROVIDES:
    case 106:
    case 109:
    case 110:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIMITIVE:
        jj_consume_token(PRIMITIVE);
        foundedName = Name();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
                  primitive = new astprimitive(file, _fullyname);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 106:
        jj_consume_token(106);
        AttributeParameterDeclaration(primitive);
        jj_consume_token(107);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        extend = ComponentDefinition();
                  primitive.addExtend(extend);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 108:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_4;
          }
          jj_consume_token(108);
          extend = ComponentDefinition();
                          primitive.addExtend(extend);
        }
        break;
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINGLETON:
        jj_consume_token(SINGLETON);
                      primitive.singleton = true;
        break;
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 109:
        jj_consume_token(109);
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATTRIBUTES:
        case REQUIRES:
        case PROPERTY:
        case PROVIDES:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REQUIRES:
        case PROVIDES:
          InterfaceDeclaration(primitive);
          break;
        case PROPERTY:
          PropertyDeclaration(primitive);
          break;
        case ATTRIBUTES:
          AttributeDeclaration(primitive);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      SourceDeclaration(primitive, directory);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPTION:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_6;
        }
        OptionDeclaration(primitive);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 110:
        jj_consume_token(110);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      jj_consume_token(0);
                  {if (true) return primitive;}
      break;
    case TYPE:
      jj_consume_token(TYPE);
      foundedName = Name();
                  type = new asttype(file, _fullyname);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        extend = ComponentDefinition();
                  type.addExtend(extend);
        label_7:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 108:
            ;
            break;
          default:
            jj_la1[20] = jj_gen;
            break label_7;
          }
          jj_consume_token(108);
          extend = ComponentDefinition();
                          type.addExtend(extend);
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 109:
        jj_consume_token(109);
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REQUIRES:
        case PROPERTY:
        case PROVIDES:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REQUIRES:
        case PROVIDES:
          InterfaceDeclaration(type);
          break;
        case PROPERTY:
          PropertyDeclaration(type);
          break;
        default:
          jj_la1[24] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 110:
        jj_consume_token(110);
        break;
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      jj_consume_token(0);
                  {if (true) return type;}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public astcomposite CompositeDeclaration(String _fullyname) throws ParseException, compilerexception {
  astcomposite composite;
  astdefinition extend;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMPOSITE:
      jj_consume_token(COMPOSITE);
      foundedName = Name();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
                  composite = new astcomposite(file, _fullyname);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 104:
      jj_consume_token(104);
      TemplateParameterDeclaration(composite);
      jj_consume_token(105);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
      jj_consume_token(106);
      AttributeParameterDeclaration(composite);
      jj_consume_token(107);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EXTENDS:
      jj_consume_token(EXTENDS);
      extend = ComponentDefinition();
                  composite.addExtend(extend);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 108:
          ;
          break;
        default:
          jj_la1[30] = jj_gen;
          break label_9;
        }
        jj_consume_token(108);
        extend = ComponentDefinition();
                          composite.addExtend(extend);
      }
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 109:
      jj_consume_token(109);
      break;
    default:
      jj_la1[32] = jj_gen;
      ;
    }
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIND:
      case CONTAINS:
      case REQUIRES:
      case PROPERTY:
      case PROVIDES:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REQUIRES:
      case PROVIDES:
        InterfaceDeclaration(composite);
        break;
      case CONTAINS:
        ContentDeclaration(composite);
        break;
      case BIND:
        BindingDeclaration(composite);
        break;
      case PROPERTY:
        PropertyDeclaration(composite);
        break;
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPTION:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_11;
      }
      OptionDeclaration(composite);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 110:
      jj_consume_token(110);
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(0);
                  {if (true) return composite;}
    throw new Error("Missing return statement in function");
  }

  final public astdefinition ComponentDefinition() throws ParseException {
        astdefinition extend;
        String type, impl, value;
    type = Name();
                  extend = new astdefinition(file, token.beginLine, token.beginColumn, type);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 104:
      jj_consume_token(104);
      impl = Name();
                                        extend.templates.add(impl);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 108:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_12;
        }
        jj_consume_token(108);
        impl = Name();
                                             extend.templates.add(impl);
      }
      jj_consume_token(105);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 106:
      jj_consume_token(106);
      value = PropertyValue();
                                                extend.attributes.add(value);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 108:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_13;
        }
        jj_consume_token(108);
        value = PropertyValue();
                                                       extend.attributes.add(value);
      }
      jj_consume_token(107);
      break;
    default:
      jj_la1[40] = jj_gen;
      ;
    }
          {if (true) return extend;}
    throw new Error("Missing return statement in function");
  }

  final public void TemplateParameterDeclaration(astcomposite composite) throws ParseException, compilerexception {
        String type;
        Token identifier;
    identifier = jj_consume_token(IDENTIFIER);
    jj_consume_token(EXTENDS);
    type = Name();
                  composite.templateparameters.add(new astparameter(file, identifier.beginLine, identifier.beginColumn,
                        type, identifier.image));
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 108:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_14;
      }
      jj_consume_token(108);
      identifier = jj_consume_token(IDENTIFIER);
      jj_consume_token(EXTENDS);
      type = Name();
                          composite.templateparameters.add(new astparameter(file, identifier.beginLine, identifier.beginColumn,
                                type, identifier.image));
    }
  }

  final public void AttributeParameterDeclaration(astcomponent component) throws ParseException, compilerexception {
        String ctype, value = null;
        Token identifier;
    ctype = PrimitiveType();
    identifier = CIdentifier();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 111:
      jj_consume_token(111);
      value = PropertyValue();
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
                  component.attributeparameters.add(new astparameter(file, identifier.beginLine, identifier.beginColumn,
                        ctype, identifier.image, value));
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 108:
        ;
        break;
      default:
        jj_la1[43] = jj_gen;
        break label_15;
      }
      jj_consume_token(108);
      ctype = PrimitiveType();
      identifier = CIdentifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 111:
        jj_consume_token(111);
        value = PropertyValue();
        break;
      default:
        jj_la1[44] = jj_gen;
        ;
      }
                          component.attributeparameters.add(new astparameter(file, identifier.beginLine, identifier.beginColumn,
                                ctype, identifier.image, value));
    }
  }

  final public void InterfaceDeclaration(asttype component) throws ParseException, compilerexception {
  astrequire r;
  astprovide p;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROVIDES:
      p = ProvideDeclaration();
                                     component.addProvide(p);
      break;
    case REQUIRES:
      r = RequireDeclaration();
                                     component.addRequire(r);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ContentDeclaration(astcomposite composite) throws ParseException {
  Token t;
  astdefinition type;
  Token name, mpc, order;
  SchedPriority priority;
  astcontent content;
    t = jj_consume_token(CONTAINS);
    type = ComponentDefinition();
    jj_consume_token(AS);
    name = CIdentifier();
          content = new astcontent(file, t.beginLine, t.beginColumn, type, name.image);
    if (jj_2_1(3)) {
      mpc = jj_consume_token(IDENTIFIER);
                    content.mpc = mpc.image;
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case URGENT:
    case NORMAL:
    case BACKGROUND:
    case PRIORITY:
    case INTEGER_LITERAL:
      priority = Priority();
                   content.priority = priority;
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ORDER:
      jj_consume_token(ORDER);
      jj_consume_token(111);
      order = jj_consume_token(INTEGER_LITERAL);
                   content.order = (int)util.StringToUnsigned(order.image);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
          composite.addLocalContent(content);
  }

  final public void BindingDeclaration(astcomposite composite) throws ParseException {
        Token t, size, n, subpriority;
        astbind bind;
        Token fromT, toT, ctoitfT, cfromitfT;
        String from, to, ctoitf, cfromitf;
    t = jj_consume_token(BIND);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMITIVE:
    case COMPOSITE:
    case TYPE:
    case PREFIX:
    case SINGLETON:
    case TRACE:
    case INTERRUPT:
    case ASYNCHRONOUS:
    case URGENT:
    case NORMAL:
    case BACKGROUND:
    case FIFO:
    case SUBPRIORITY:
    case PRIORITY:
    case ORDER:
    case IDENTIFIER:
      fromT = CIdentifier();
                                          from = fromT.image;
      break;
    case THIS:
      jj_consume_token(THIS);
                                                                          from = "this";
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(112);
    cfromitfT = CIdentifier();
                                          cfromitf = cfromitfT.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 113:
      jj_consume_token(113);
      n = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(114);
                                                          cfromitf = cfromitf + "[" + n.image + "]";
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    jj_consume_token(TO);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMITIVE:
    case COMPOSITE:
    case TYPE:
    case PREFIX:
    case SINGLETON:
    case TRACE:
    case INTERRUPT:
    case ASYNCHRONOUS:
    case URGENT:
    case NORMAL:
    case BACKGROUND:
    case FIFO:
    case SUBPRIORITY:
    case PRIORITY:
    case ORDER:
    case IDENTIFIER:
      toT = CIdentifier();
                                  to = toT.image;
      break;
    case THIS:
      jj_consume_token(THIS);
                                                               to = "this";
      break;
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(112);
    ctoitfT = CIdentifier();
                                        ctoitf = ctoitfT.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 113:
      jj_consume_token(113);
      n = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(114);
                                                          ctoitf = ctoitf + "[" + n.image + "]";
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
                  bind = new astbind(file, t.beginLine, t.beginColumn, from, cfromitf, to, ctoitf);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRACE:
      jj_consume_token(TRACE);
                 bind.trace = true;
      break;
    default:
      jj_la1[52] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASYNCHRONOUS:
      jj_consume_token(ASYNCHRONOUS);
                         bind.asynchronous = true;
      jj_consume_token(FIFO);
      jj_consume_token(111);
      size = jj_consume_token(INTEGER_LITERAL);
                                              bind.size = (int)util.StringToUnsigned(size.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUBPRIORITY:
        jj_consume_token(SUBPRIORITY);
        jj_consume_token(111);
        subpriority = jj_consume_token(INTEGER_LITERAL);
                                                              bind.subpriority = new Integer((int)util.StringToUnsigned(subpriority.image));
        break;
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[54] = jj_gen;
      ;
    }
          composite.addLocalBind(bind);
  }

  final public SchedPriority Priority() throws ParseException {
        Token priority;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      priority = jj_consume_token(INTEGER_LITERAL);
                                     {if (true) return new SchedPriority(priority.image);}
      break;
    case PRIORITY:
      jj_consume_token(PRIORITY);
      jj_consume_token(111);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIMITIVE:
      case COMPOSITE:
      case TYPE:
      case PREFIX:
      case SINGLETON:
      case TRACE:
      case INTERRUPT:
      case ASYNCHRONOUS:
      case URGENT:
      case NORMAL:
      case BACKGROUND:
      case FIFO:
      case SUBPRIORITY:
      case PRIORITY:
      case ORDER:
      case IDENTIFIER:
        priority = CIdentifier();
                                        {if (true) return new SchedPriority(priority.image);}
        break;
      case INTEGER_LITERAL:
        priority = jj_consume_token(INTEGER_LITERAL);
                                            {if (true) return new SchedPriority(priority.image);}
        break;
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case URGENT:
      jj_consume_token(URGENT);
                     {if (true) return SchedPriority.Urgent;}
      break;
    case NORMAL:
      jj_consume_token(NORMAL);
                     {if (true) return SchedPriority.Normal;}
      break;
    case BACKGROUND:
      jj_consume_token(BACKGROUND);
                         {if (true) return SchedPriority.Background;}
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public astprovide ProvideDeclaration() throws ParseException, compilerexception {
  Token t, line, n;
  String type;
  Token name;
  astprovide provide;
    t = jj_consume_token(PROVIDES);
    type = Name();
    jj_consume_token(AS);
    name = CIdentifier();
          provide = new astprovide(file, t.beginLine, t.beginColumn, type, name.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 113:
      jj_consume_token(113);
      n = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(114);
                                    provide.setCollection(n.image);
      break;
    default:
      jj_la1[57] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNAMBIGUOUS:
      jj_consume_token(UNAMBIGUOUS);
                    provide.unambiguous = true;
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PREFIX:
      jj_consume_token(PREFIX);
      name = CIdentifier();
      provide.setPrefix(name.image);
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case REFERENCED:
    case INTERRUPT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTERRUPT:
        jj_consume_token(INTERRUPT);
        line = jj_consume_token(INTEGER_LITERAL);
        provide.interrupt = true; provide.line = (int)util.StringToUnsigned(line.image);
        break;
      case REFERENCED:
        jj_consume_token(REFERENCED);
        provide.referenced = true;
        break;
      default:
        jj_la1[60] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
   {if (true) return provide;}
    throw new Error("Missing return statement in function");
  }

  final public astrequire RequireDeclaration() throws ParseException {
  Token t, n;
  String type;
  Token name;
  astrequire require;
    t = jj_consume_token(REQUIRES);
    type = Name();
    jj_consume_token(AS);
    name = CIdentifier();
      require = new astrequire(file, t.beginLine, t.beginColumn, type, name.image);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 113:
      jj_consume_token(113);
      n = jj_consume_token(INTEGER_LITERAL);
      jj_consume_token(114);
                                    require.setCollection(n.image);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STATIC:
    case OPTIONAL:
    case MANDATORY:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPTIONAL:
        jj_consume_token(OPTIONAL);
                 require.optional = true;
        break;
      case MANDATORY:
        jj_consume_token(MANDATORY);
        break;
      case STATIC:
        jj_consume_token(STATIC);
               require.isStatic = true;
        break;
      default:
        jj_la1[63] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    {if (true) return require;}
    throw new Error("Missing return statement in function");
  }

  final public void AttributeDeclaration(astprimitive primitive) throws ParseException, compilerexception {
  Token t;
  String value = null, ctype=null;
  Token name;
    t = jj_consume_token(ATTRIBUTES);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TUINT64:
    case TUINT56:
    case TUINT48:
    case TUINT40:
    case TUINT32:
    case TADDRESS:
    case TSHAREDREG:
    case TSHAREDFIELD:
    case TUINT24:
    case TUWORD:
    case TUINT16:
    case TUINT8:
    case TSINT64:
    case TSINT56:
    case TSINT48:
    case TSINT40:
    case TSINT32:
    case TSINT24:
    case TSWORD:
    case TSINT16:
    case TSINT8:
    case CHAR:
    case TBOOL:
      ctype = PrimitiveType();
      name = CIdentifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 111:
        jj_consume_token(111);
        value = PropertyValue();
        break;
      default:
        jj_la1[65] = jj_gen;
        ;
      }
      break;
    case PRIMITIVE:
    case COMPOSITE:
    case TYPE:
    case PREFIX:
    case SINGLETON:
    case TRACE:
    case INTERRUPT:
    case ASYNCHRONOUS:
    case URGENT:
    case NORMAL:
    case BACKGROUND:
    case FIFO:
    case SUBPRIORITY:
    case PRIORITY:
    case ORDER:
    case IDENTIFIER:
      name = CIdentifier();
      break;
    default:
      jj_la1[66] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      primitive.addAttribute(new astattribute(file, t.beginLine, t.beginColumn, name.image, ctype, value));
  }

  final public void PropertyDeclaration(asttype component) throws ParseException, compilerexception {
  Token t;
  String value;
  Token name;
    t = jj_consume_token(PROPERTY);
    name = CIdentifier();
    jj_consume_token(111);
    value = PropertyValue();
          component.addProperty(new astproperty(file, t, name.image, value));
  }

  final public String PropertyValue() throws ParseException {
        Token value;
        String sum = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
    case 115:
    case 116:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 115:
      case 116:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 115:
          jj_consume_token(115);
                        sum = "-";
          break;
        case 116:
          jj_consume_token(116);
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      value = jj_consume_token(INTEGER_LITERAL);
                                                                         sum = sum + value.image;
                  {if (true) return sum;}
      break;
    case CHARACTER_LITERAL:
      value = jj_consume_token(CHARACTER_LITERAL);
                  {if (true) return value.image;}
      break;
    case STRING_LITERAL:
      value = jj_consume_token(STRING_LITERAL);
                  {if (true) return value.image;}
      break;
    case IDENTIFIER:
      value = jj_consume_token(IDENTIFIER);
                  {if (true) return value.image;}
      break;
    default:
      jj_la1[69] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void OptionDeclaration(astcomponent component) throws ParseException, compilerexception {
  Token t1, t2;
  String name = null, targetorname, value;
    jj_consume_token(OPTION);
    t1 = jj_consume_token(IDENTIFIER);
                                   targetorname = t1.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 112:
      jj_consume_token(112);
      t2 = jj_consume_token(IDENTIFIER);
                                                                                     name = t2.image;
      break;
    default:
      jj_la1[70] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 111:
      jj_consume_token(111);
      break;
    default:
      jj_la1[71] = jj_gen;
      ;
    }
    value = OptionValue();
                if(name != null)
                        component.setOption(new astoption(file, t1.beginLine, t1.beginColumn, targetorname, name, value));
                else
                        component.setOption(new astoption(file, t1.beginLine, t1.beginColumn, targetorname, value));
  }

  final public String OptionValue() throws ParseException {
        Token value;
        String sum = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      value = jj_consume_token(IDENTIFIER);
                                       sum = value.image;
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          ;
          break;
        default:
          jj_la1[72] = jj_gen;
          break label_16;
        }
        jj_consume_token(117);
        value = jj_consume_token(IDENTIFIER);
                                              sum = sum + "|" + value.image;
      }
                  {if (true) return sum;}
      break;
    case INTEGER_LITERAL:
    case 115:
    case 116:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 115:
      case 116:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 115:
          jj_consume_token(115);
                        sum = "-";
          break;
        case 116:
          jj_consume_token(116);
          break;
        default:
          jj_la1[73] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[74] = jj_gen;
        ;
      }
      value = jj_consume_token(INTEGER_LITERAL);
                                                                         sum = sum + value.image;
                  {if (true) return sum;}
      break;
    case STRING_LITERAL:
      value = jj_consume_token(STRING_LITERAL);
                                           sum = value.image.substring(1, value.image.length() - 1);
                  {if (true) return sum;}
      break;
    default:
      jj_la1[75] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void SourceDeclaration(astprimitive primitive, File directory) throws ParseException {
  Token t, ext, value;
  String _file;
  astsource source;
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOURCES:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_17;
      }
      t = jj_consume_token(SOURCES);
      _file = Path();
      jj_consume_token(112);
      ext = jj_consume_token(IDENTIFIER);
                          source = new astsource(file, t, new File(directory, _file + "." + ext.image));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_LITERAL:
        value = jj_consume_token(STRING_LITERAL);
                                             source.CFLAGS = value.image.substring(1, value.image.length() - 1);
        break;
      default:
        jj_la1[77] = jj_gen;
        ;
      }
                  primitive.sources.add(source);
    }
  }

  final public String Name() throws ParseException {
        String name;
        Token n;
    n = CIdentifier();
                      name = n.image;
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 112:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_18;
      }
      jj_consume_token(112);
      n = CIdentifier();
                             name = name + "." + n.image;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public Token CIdentifier() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      break;
    case PRIMITIVE:
      t = jj_consume_token(PRIMITIVE);
      break;
    case COMPOSITE:
      t = jj_consume_token(COMPOSITE);
      break;
    case TYPE:
      t = jj_consume_token(TYPE);
      break;
    case SINGLETON:
      t = jj_consume_token(SINGLETON);
      break;
    case TRACE:
      t = jj_consume_token(TRACE);
      break;
    case INTERRUPT:
      t = jj_consume_token(INTERRUPT);
      break;
    case ASYNCHRONOUS:
      t = jj_consume_token(ASYNCHRONOUS);
      break;
    case URGENT:
      t = jj_consume_token(URGENT);
      break;
    case NORMAL:
      t = jj_consume_token(NORMAL);
      break;
    case BACKGROUND:
      t = jj_consume_token(BACKGROUND);
      break;
    case FIFO:
      t = jj_consume_token(FIFO);
      break;
    case PREFIX:
      t = jj_consume_token(PREFIX);
      break;
    case PRIORITY:
      t = jj_consume_token(PRIORITY);
      break;
    case SUBPRIORITY:
      t = jj_consume_token(SUBPRIORITY);
      break;
    case ORDER:
      t = jj_consume_token(ORDER);
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public String PrimitiveType() throws ParseException {
        Token t;
        String type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TUINT64:
      t = jj_consume_token(TUINT64);
      break;
    case TUINT56:
      t = jj_consume_token(TUINT56);
      break;
    case TUINT48:
      t = jj_consume_token(TUINT48);
      break;
    case TUINT40:
      t = jj_consume_token(TUINT40);
      break;
    case TUINT32:
      t = jj_consume_token(TUINT32);
      break;
    case TADDRESS:
      t = jj_consume_token(TADDRESS);
      break;
    case TSHAREDREG:
      t = jj_consume_token(TSHAREDREG);
      break;
    case TSHAREDFIELD:
      t = jj_consume_token(TSHAREDFIELD);
      break;
    case TUINT24:
      t = jj_consume_token(TUINT24);
      break;
    case TUWORD:
      t = jj_consume_token(TUWORD);
      break;
    case TUINT16:
      t = jj_consume_token(TUINT16);
      break;
    case TUINT8:
      t = jj_consume_token(TUINT8);
      break;
    case TSINT64:
      t = jj_consume_token(TSINT64);
      break;
    case TSINT56:
      t = jj_consume_token(TSINT56);
      break;
    case TSINT48:
      t = jj_consume_token(TSINT48);
      break;
    case TSINT40:
      t = jj_consume_token(TSINT40);
      break;
    case TSINT32:
      t = jj_consume_token(TSINT32);
      break;
    case TSINT24:
      t = jj_consume_token(TSINT24);
      break;
    case TSWORD:
      t = jj_consume_token(TSWORD);
      break;
    case TSINT16:
      t = jj_consume_token(TSINT16);
      break;
    case TSINT8:
      t = jj_consume_token(TSINT8);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case TBOOL:
      t = jj_consume_token(TBOOL);
      break;
    default:
      jj_la1[80] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                  type = t.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 118:
      jj_consume_token(118);
                type = type + "*";
      break;
    default:
      jj_la1[81] = jj_gen;
      ;
    }
          {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

  final public String Path() throws ParseException {
        String name = "";
        Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMITIVE:
    case COMPOSITE:
    case TYPE:
    case PREFIX:
    case SINGLETON:
    case TRACE:
    case INTERRUPT:
    case ASYNCHRONOUS:
    case URGENT:
    case NORMAL:
    case BACKGROUND:
    case FIFO:
    case SUBPRIORITY:
    case PRIORITY:
    case ORDER:
    case IDENTIFIER:
      n = CIdentifier();
      break;
    case 119:
      n = jj_consume_token(119);
      break;
    default:
      jj_la1[82] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                                   name = n.image;
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIMITIVE:
      case COMPOSITE:
      case TYPE:
      case PREFIX:
      case SINGLETON:
      case TRACE:
      case INTERRUPT:
      case ASYNCHRONOUS:
      case URGENT:
      case NORMAL:
      case BACKGROUND:
      case FIFO:
      case SUBPRIORITY:
      case PRIORITY:
      case ORDER:
      case IDENTIFIER:
      case 115:
      case 120:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_19;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 120:
        n = jj_consume_token(120);
        break;
      case 115:
        n = jj_consume_token(115);
        break;
      case PRIMITIVE:
      case COMPOSITE:
      case TYPE:
      case PREFIX:
      case SINGLETON:
      case TRACE:
      case INTERRUPT:
      case ASYNCHRONOUS:
      case URGENT:
      case NORMAL:
      case BACKGROUND:
      case FIFO:
      case SUBPRIORITY:
      case PRIORITY:
      case ORDER:
      case IDENTIFIER:
        n = CIdentifier();
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
          name = name + n.image;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[85];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x400000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffe00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfffffe00,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x40,0x2000,0x0,0x6c000100,0x6c000100,0x800000,0x0,0x8,0x0,0x0,0x40,0x2000,0x0,0x6a000000,0x6a000000,0x800000,0x0,0x0,0x40,0x0,0x68000000,0x68000000,0x0,0x7a802078,0x10,0x0,0x0,0x0,0x40,0x0,0x6c000100,0x6c000100,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x48000000,0x4e0000,0x1000000,0x817fe4b8,0x0,0x817fe4b8,0x0,0x4000,0x200000,0x10000,0x817fe438,0x4e0000,0x0,0x800,0x400,0x9000,0x9000,0x0,0x6,0x6,0x0,0x817fe438,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x80000000,0x10000000,0x0,0x0,0x817fe438,0x0,0x0,0x817fe438,0x817fe438,0x817fe438,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x100,0x400,0x1000,0x0,0x0,0x2000,0x0,0x0,0x0,0x4000,0x0,0x400,0x1000,0x0,0x0,0x2000,0x0,0x0,0x0,0x4000,0x1000,0x0,0x2000,0x0,0x0,0x4000,0x6400,0x0,0x100,0x400,0x1000,0x0,0x2000,0x0,0x0,0x0,0x4000,0x1000,0x100,0x1000,0x400,0x1000,0x8000,0x1000,0x8000,0x0,0x10,0x0,0x0,0x20000,0x0,0x20000,0x0,0x0,0x0,0x10,0x10,0x20000,0x0,0x0,0x0,0x0,0x20000,0x0,0x0,0x8000,0x0,0x180000,0x180000,0x18001c,0x10000,0x8000,0x200000,0x180000,0x180000,0x180014,0x0,0x4,0x10000,0x0,0x0,0x400000,0x800000,0x1080000,0x1080000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 85; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[121];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 85; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 121; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
