/*
 * LPP_NetworkTime.h
 *
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 * Author: sunilsatish.rao@stericsson.com for ST-Ericsson.
 * License terms: Redistribution and modifications are permitted subject to BSD license.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of ST-Ericsson nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ST-ERICSSON BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Generated by asn1c-0.9.21 (http://lionet.info/asn1c)
 * From ASN.1 module "LPP_PDU-Definitions"
 * 	found in "LPP_RRLP_Rel_10.asn"
 * 	`asn1c -gen-PER`
 */

#ifndef	_LPP_NetworkTime_H_
#define	_LPP_NetworkTime_H_


#include <asn_application.h>

/* Including external dependencies */
#include <NativeInteger.h>
#include "LPP_ARFCN-ValueEUTRA.h"
#include <constr_SEQUENCE.h>
#include "LPP_ARFCN-ValueUTRA.h"
#include <constr_CHOICE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum LPP_NetworkTime__cellID_PR {
	LPP_NetworkTime__cellID_PR_NOTHING,	/* No components present */
	LPP_NetworkTime__cellID_PR_eUTRA,
	LPP_NetworkTime__cellID_PR_uTRA,
	LPP_NetworkTime__cellID_PR_gSM,
	/* Extensions may appear below */
	
} LPP_NetworkTime__cellID_PR;
typedef enum LPP_NetworkTime__cellID__uTRA__mode_PR {
	LPP_NetworkTime__cellID__uTRA__mode_PR_NOTHING,	/* No components present */
	LPP_NetworkTime__cellID__uTRA__mode_PR_fdd,
	LPP_NetworkTime__cellID__uTRA__mode_PR_tdd
} LPP_NetworkTime__cellID__uTRA__mode_PR;

/* Forward declarations */
struct LPP_CellGlobalIdEUTRA_AndUTRA;
struct LPP_CellGlobalIdGERAN;

/* LPP_NetworkTime */
typedef struct LPP_NetworkTime {
	long	 secondsFromFrameStructureStart;
	long	 fractionalSecondsFromFrameStructureStart;
	long	*frameDrift	/* OPTIONAL */;
	struct LPP_NetworkTime__cellID {
		LPP_NetworkTime__cellID_PR present;
		union LPP_NetworkTime__cellID_u {
			struct LPP_NetworkTime__cellID__eUTRA {
				long	 physCellId;
				struct LPP_CellGlobalIdEUTRA_AndUTRA	*cellGlobalIdEUTRA	/* OPTIONAL */;
				LPP_ARFCN_ValueEUTRA_t	 earfcn;
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} eUTRA;
			struct LPP_NetworkTime__cellID__uTRA {
				struct LPP_NetworkTime__cellID__uTRA__mode {
					LPP_NetworkTime__cellID__uTRA__mode_PR present;
					union LPP_NetworkTime__cellID__uTRA__mode_u {
						struct LPP_NetworkTime__cellID__uTRA__mode__fdd {
							long	 primary_CPICH_Info;
							/*
							 * This type is extensible,
							 * possible extensions are below.
							 */
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} fdd;
						struct LPP_NetworkTime__cellID__uTRA__mode__tdd {
							long	 cellParameters;
							/*
							 * This type is extensible,
							 * possible extensions are below.
							 */
							
							/* Context for parsing across buffer boundaries */
							asn_struct_ctx_t _asn_ctx;
						} tdd;
					} choice;
					
					/* Context for parsing across buffer boundaries */
					asn_struct_ctx_t _asn_ctx;
				} mode;
				struct LPP_CellGlobalIdEUTRA_AndUTRA	*cellGlobalIdUTRA	/* OPTIONAL */;
				LPP_ARFCN_ValueUTRA_t	 uarfcn;
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} uTRA;
			struct LPP_NetworkTime__cellID__gSM {
				long	 bcchCarrier;
				long	 bsic;
				struct LPP_CellGlobalIdGERAN	*cellGlobalIdGERAN	/* OPTIONAL */;
				/*
				 * This type is extensible,
				 * possible extensions are below.
				 */
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} gSM;
			/*
			 * This type is extensible,
			 * possible extensions are below.
			 */
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} cellID;
	/*
	 * This type is extensible,
	 * possible extensions are below.
	 */
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} LPP_NetworkTime_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_LPP_NetworkTime;

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "LPP_CellGlobalIdEUTRA-AndUTRA.h"
#include "LPP_CellGlobalIdGERAN.h"

#endif	/* _LPP_NetworkTime_H_ */
