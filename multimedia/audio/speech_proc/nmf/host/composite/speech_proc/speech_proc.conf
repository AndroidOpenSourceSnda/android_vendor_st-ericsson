composite speech_proc.nmf.host.composite.speech_proc {


///////////////////////////
//       primitive
///////////////////////////
contains speech_proc.nmf.host.dl_wrapper        as dl_wrapper       priority=priority_dl
contains speech_proc.nmf.host.ul_wrapper        as ul_wrapper       priority=priority_ul
contains speech_proc.nmf.host.speechcontroller  as controller       priority=priority_dl
contains speech_proc.nmf.host.time_align        as time_align       priority=priority_ul


///////////////////////////
//      interfaces
///////////////////////////

// proxy
provides sendcommand                                    as sendcommand
requires eventhandler                                   as proxy

// fsminit
provides fsminit                                        as fsminit

// input ports
provides armnmf_emptythisbuffer                         as emptythisbuffer[3]    
requires armnmf_fillthisbuffer                          as inputport[3]                 optional
provides hst.common.pcmsettings                         as pcmsettings[3]    

// output ARM port
requires armnmf_emptythisbuffer                         as outputport[2]                optional
provides armnmf_fillthisbuffer                          as fillthisbuffer[2]    
requires hst.common.pcmsettings                         as outputsettings[2]            optional

// Configuration interface
provides speech_proc.nmf.host.common.configure          as configure_downlink
provides speech_proc.nmf.host.common.configure          as configure_uplink
provides speech_proc.nmf.common.configure_time_align    as configure_time_align

// sidetone
requires speech_proc.nmf.host.common.sidetone           as sidetone

// Library Context
requires speech_proc.nmf.host.common.context            as context


///////////////////////////
//    internal binds
///////////////////////////

// proxy
binds this.sendcommand                  to controller.sendcommand 
binds controller.proxy                  to this.proxy                      

// fsminit
binds this.fsminit                      to controller.fsminit
binds controller.downlinkfsminit        to dl_wrapper.fsminit           asynchronous fifo=1
binds controller.uplinkfsminit          to ul_wrapper.fsminit           asynchronous fifo=1
binds controller.timealignmentfsminit   to time_align.fsminit           asynchronous fifo=1
binds ul_wrapper.me                     to ul_wrapper.postevent         asynchronous fifo=2
binds dl_wrapper.me                     to dl_wrapper.postevent         asynchronous fifo=2
binds time_align.me                     to time_align.postevent         asynchronous fifo=2

// controller
binds controller.downlinkcomponent              to dl_wrapper.sendcommand               asynchronous fifo=3
binds dl_wrapper.proxy                          to controller.downlinkhandler           asynchronous fifo=4

binds controller.uplinkcomponent                to ul_wrapper.sendcommand               asynchronous fifo=3
binds ul_wrapper.proxy                          to controller.uplinkhandler             asynchronous fifo=4

binds controller.timealignmentcomponent         to time_align.sendcommand               asynchronous fifo=3
binds time_align.proxy                          to controller.timealignmenthandler      asynchronous fifo=4

// input ports
binds this.emptythisbuffer[0]           to time_align.emptythisbuffer[0]   
binds time_align.inputport[0]           to this.inputport[0]        
binds this.pcmsettings[0]               to time_align.pcmsettings[0]       

binds this.emptythisbuffer[1]           to dl_wrapper.emptythisbuffer
binds dl_wrapper.inputport              to this.inputport[1]    
binds this.pcmsettings[1]               to dl_wrapper.pcmsettings

binds this.emptythisbuffer[2]           to time_align.emptythisbuffer[1]   
binds time_align.inputport[1]           to this.inputport[2]        
binds this.pcmsettings[2]               to time_align.pcmsettings[1]

// output ports
binds ul_wrapper.outputport             to this.outputport[0]    
binds this.fillthisbuffer[0]            to ul_wrapper.fillthisbuffer
binds ul_wrapper.outputsettings         to this.outputsettings[0]    

binds dl_wrapper.outputport             to this.outputport[1]          
binds this.fillthisbuffer[1]            to dl_wrapper.fillthisbuffer      
binds dl_wrapper.outputsettings         to this.outputsettings[1]      

// uplink + reference data flow
binds time_align.outputport             to ul_wrapper.emptythisbuffer
binds ul_wrapper.inputport              to time_align.fillthisbuffer

// configuration 
binds this.configure_downlink           to dl_wrapper.configure
binds this.configure_uplink             to ul_wrapper.configure
binds this.configure_time_align         to time_align.configure

// info sharing between uplink & downlink (synchronously binded)
binds dl_wrapper.uplink                 to ul_wrapper.processing_info
binds ul_wrapper.downlink               to dl_wrapper.processing_info
// acknowledge 
binds dl_wrapper.ack_uplink             to ul_wrapper.ack_processing_info
binds ul_wrapper.ack_downlink           to dl_wrapper.ack_processing_info

// context
binds ul_wrapper.context                to this.context
binds dl_wrapper.context                to this.context

// sidetone 
binds ul_wrapper.sidetone               to this.sidetone
binds dl_wrapper.sidetone               to this.sidetone

property realtime = "cscall"
}
