/* 
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved. 
 * This code is ST-Ericsson proprietary and confidential. 
 * Any use of the code for whatever purpose is subject to 
 * specific written permission of ST-Ericsson SA. 
 */ 
 
#ifndef _PictorhwReg_
#define _PictorhwReg_

#include "Platform.h"



//MASTER_CCI_ENABLE
/*Description: To enable master_cci
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* 1=>soft reset*/
    }MASTER_CCI_ENABLE_ts;

}MASTER_CCI_ENABLE_tu;



//MASTER_CCI_DEVICE_ID
/*Description: Target device ID
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t device_id_reg;
        /* Device ID description(including R/W bit)
        0=>Write / 1=>Read
        f single_byte_device_id is set in MSTR_CCI_CONTROL register, only bits[7:0] are used(i.e 7-bit addressing),else bits [15:8] are used(10-bit addressing).
        7-bit addressing format: {[7:1],R/W}
        10-bit addressing format: first byte---{1,1,1,1,0,x,x,R/W},second byte----{x,x,x,x,x,x,x,x}
        here 'x' is used bits.
        so in1st byte [2:1] and 2 nd byte all bits are used for 10 bit addressing.*/
    }MASTER_CCI_DEVICE_ID_ts;

}MASTER_CCI_DEVICE_ID_tu;



//MASTER_CCI_INDEX
/*Description: Define data address in the target being accessed
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t index_reg;
        /* Data address.
        If single_byte_index is set in MSTR_CCI_CONTROL register, only bits[7:0] are used(i.e 8 bit index),else bits[15:8] are used(i.e 16 bit index).
        */
    }MASTER_CCI_INDEX_ts;

}MASTER_CCI_INDEX_tu;



//MASTER_CCI_CONTROL
/*Description: Protocol control register
Note: If repeated_start signal is set, bit 0 in device_id_reg does not need to be set
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t write :1;
        /* write command*/
        uint8_t read :1;
        /* read command*/
        uint8_t repeated_start :1;
        /* - used to automatically start Master CCI Read command after writing Index (only valid when bit 1 is active)*/
        uint8_t data_count :5;
        /* number of data bytes to be writ/read to/from the master CCI.*/
        uint8_t single_byte_index :1;
        /* Define the size of the data index*/
        uint8_t single_byte_device_id :1;
        /* Define the size of the device id*/
    }MASTER_CCI_CONTROL_ts;

}MASTER_CCI_CONTROL_tu;



//MASTER_CCI_STATUS
/*Description: CCI Master communication status
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t busy :1;
        /* transfer currently taking place*/
        uint8_t fifo_full :1;
        /* sensor comms fifo full*/
        uint8_t fifo_empty :1;
        /* sensor comms fifo empty*/
        uint8_t error :1;
        /* error occurred during transfer*/
        uint8_t reserved0 :3;
        uint8_t clr_error :1;
        /* Set high to clear error (automatically clears itself)*/
    }MASTER_CCI_STATUS_ts;

}MASTER_CCI_STATUS_tu;



//MASTER_CCI_WRITE_DATA0
/*Description: Temporary datastore
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t fifo_datastore0;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore1;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore2;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore3;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
    }MASTER_CCI_WRITE_DATA0_ts;

}MASTER_CCI_WRITE_DATA0_tu;



//MASTER_CCI_WRITE_DATA1
/*Description: Temporary datastore
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t fifo_datastore0;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore1;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore2;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore3;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
    }MASTER_CCI_WRITE_DATA1_ts;

}MASTER_CCI_WRITE_DATA1_tu;



//MASTER_CCI_WRITE_DATA2
/*Description: Temporary datastore
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t fifo_datastore0;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore1;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore2;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore3;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
    }MASTER_CCI_WRITE_DATA2_ts;

}MASTER_CCI_WRITE_DATA2_tu;



//MASTER_CCI_WRITE_DATA3
/*Description: Temporary datastore
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t fifo_datastore0;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore1;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore2;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore3;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
    }MASTER_CCI_WRITE_DATA3_ts;

}MASTER_CCI_WRITE_DATA3_tu;



//MASTER_CCI_READ_DATA0
/*Description: Temporary datastore
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t fifo_datastore0;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore1;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore2;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore3;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
    }MASTER_CCI_READ_DATA0_ts;

}MASTER_CCI_READ_DATA0_tu;



//MASTER_CCI_READ_DATA1
/*Description: Temporary datastore
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t fifo_datastore0;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore1;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore2;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore3;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
    }MASTER_CCI_READ_DATA1_ts;

}MASTER_CCI_READ_DATA1_tu;



//MASTER_CCI_READ_DATA2
/*Description: Temporary datastore
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t fifo_datastore0;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore1;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore2;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore3;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
    }MASTER_CCI_READ_DATA2_ts;

}MASTER_CCI_READ_DATA2_tu;



//MASTER_CCI_READ_DATA3
/*Description: Temporary datastore
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t fifo_datastore0;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore1;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore2;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
        uint8_t fifo_datastore3;
        /* temporary datastore, holds data prior to being shifted into FIFO*/
    }MASTER_CCI_READ_DATA3_ts;

}MASTER_CCI_READ_DATA3_tu;



//MASTER_CCI_FSM_STATE
/*Description: Internal State Machine Status
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t state :5;
        /* Current State*/
    }MASTER_CCI_FSM_STATE_ts;

}MASTER_CCI_FSM_STATE_tu;



//MASTER_CCI_TIMING1
/*Description: CCI Protocol Timing 1
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t time_fall;
        /* fall time of both SCL and SDA signals*/
        uint8_t time_rise;
        /* rise time of both SCL and SDA signals*/
        uint8_t t_high;
        /* high period of SCL*/
        uint8_t t_buffer;
        /* bus free time between a STOP and a START condition*/
    }MASTER_CCI_TIMING1_ts;

}MASTER_CCI_TIMING1_tu;



//MASTER_CCI_TIMING2
/*Description: CCI Protocol Timing 2
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t t_hd_dat;
        /* data hold time*/
        uint8_t t_su_dat;
        /* data set up time*/
    }MASTER_CCI_TIMING2_ts;

}MASTER_CCI_TIMING2_tu;



//MASTER_CCI_TIMING3
/*Description: CCI Protocol Timing 3
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t t_hd_sta;
        /* hold time (repeated START condition)*/
        uint8_t t_su_sta;
        /* set-up time for a repeated START condition*/
        uint8_t t_su_sto;
        /* set-up time for a STOP condition*/
    }MASTER_CCI_TIMING3_ts;

}MASTER_CCI_TIMING3_tu;



//MASTER_CCI_DFV
/*Description: Design for verification register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* when '1' this is enabled*/
        uint8_t dfv_eop_interrupt :1;
        /* when '1' this indicates busy interrupt*/
        uint8_t dfv_error_interrupt :1;
        /* when '1' this indicates error interrupt*/
    }MASTER_CCI_DFV_ts;

}MASTER_CCI_DFV_tu;



//MASTER_CCI_TRANSFER
/*Description: Transfer command register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t device_id_valid :1;
        /* when this is set it resets the fifo*/
        uint8_t start_transfer :1;
        /* writing a "1" in this field will trigger the transfer start*/
        uint8_t fifo_wr_fill :1;
        /* writing a "1" in this field will cause the internal fifo in the master CCI state machine to be loaded*/
    }MASTER_CCI_TRANSFER_ts;

}MASTER_CCI_TRANSFER_tu;



//MASTER_CCI_ERR_MGMT
/*Description: CCI Master error management
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t error_mgmt_value :3;
        /* when "000" indicates no-error
        when "001" device_id_lo_error(i.e error occured during the device_id_lo transfer)
        when "010" device_id_hi_error(i.e error occured during the device_id_hi transfer)
        when "011" index_hi_error(i.e error occured during the index_hi transfer)
        when "100" index_lo_error(i.e error occured during the index_lo transfer)
        when "101" data_error(i.e error occured during the data transfer)*/
    }MASTER_CCI_ERR_MGMT_ts;

}MASTER_CCI_ERR_MGMT_tu;

typedef struct
{
    MASTER_CCI_ENABLE_tu MASTER_CCI_ENABLE;
    MASTER_CCI_DEVICE_ID_tu MASTER_CCI_DEVICE_ID;
    MASTER_CCI_INDEX_tu MASTER_CCI_INDEX;
    MASTER_CCI_CONTROL_tu MASTER_CCI_CONTROL;
    MASTER_CCI_STATUS_tu MASTER_CCI_STATUS;
    MASTER_CCI_WRITE_DATA0_tu MASTER_CCI_WRITE_DATA0;
    MASTER_CCI_WRITE_DATA1_tu MASTER_CCI_WRITE_DATA1;
    MASTER_CCI_WRITE_DATA2_tu MASTER_CCI_WRITE_DATA2;
    MASTER_CCI_WRITE_DATA3_tu MASTER_CCI_WRITE_DATA3;
    MASTER_CCI_READ_DATA0_tu MASTER_CCI_READ_DATA0;
    MASTER_CCI_READ_DATA1_tu MASTER_CCI_READ_DATA1;
    MASTER_CCI_READ_DATA2_tu MASTER_CCI_READ_DATA2;
    MASTER_CCI_READ_DATA3_tu MASTER_CCI_READ_DATA3;
    MASTER_CCI_FSM_STATE_tu MASTER_CCI_FSM_STATE;
    MASTER_CCI_TIMING1_tu MASTER_CCI_TIMING1;
    MASTER_CCI_TIMING2_tu MASTER_CCI_TIMING2;
    MASTER_CCI_TIMING3_tu MASTER_CCI_TIMING3;
    MASTER_CCI_DFV_tu MASTER_CCI_DFV;
    MASTER_CCI_TRANSFER_tu MASTER_CCI_TRANSFER;
    MASTER_CCI_ERR_MGMT_tu MASTER_CCI_ERR_MGMT;
}MASTER_CCI_IP_ts;




//MASTER_CCI_ENABLE


#define Get_MASTER_CCI_MASTER_CCI_ENABLE_enable() p_MASTER_CCI_IP->MASTER_CCI_ENABLE.MASTER_CCI_ENABLE_ts.enable
#define Is_MASTER_CCI_MASTER_CCI_ENABLE_enable_DISABLE() (p_MASTER_CCI_IP->MASTER_CCI_ENABLE.MASTER_CCI_ENABLE_ts.enable == enable_DISABLE)
#define Set_MASTER_CCI_MASTER_CCI_ENABLE_enable__DISABLE() (p_MASTER_CCI_IP->MASTER_CCI_ENABLE.MASTER_CCI_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable
#define Is_MASTER_CCI_MASTER_CCI_ENABLE_enable_ENABLE() (p_MASTER_CCI_IP->MASTER_CCI_ENABLE.MASTER_CCI_ENABLE_ts.enable == enable_ENABLE)
#define Set_MASTER_CCI_MASTER_CCI_ENABLE_enable__ENABLE() (p_MASTER_CCI_IP->MASTER_CCI_ENABLE.MASTER_CCI_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable


#define Get_MASTER_CCI_MASTER_CCI_ENABLE_soft_reset() p_MASTER_CCI_IP->MASTER_CCI_ENABLE.MASTER_CCI_ENABLE_ts.soft_reset
#define Set_MASTER_CCI_MASTER_CCI_ENABLE_soft_reset(x) (p_MASTER_CCI_IP->MASTER_CCI_ENABLE.MASTER_CCI_ENABLE_ts.soft_reset = x)
#define Set_MASTER_CCI_MASTER_CCI_ENABLE(enable,soft_reset) (p_MASTER_CCI_IP->MASTER_CCI_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_MASTER_CCI_MASTER_CCI_ENABLE() p_MASTER_CCI_IP->MASTER_CCI_ENABLE.word
#define Set_MASTER_CCI_MASTER_CCI_ENABLE_word(x) (p_MASTER_CCI_IP->MASTER_CCI_ENABLE.word = x)


//MASTER_CCI_DEVICE_ID


#define Get_MASTER_CCI_MASTER_CCI_DEVICE_ID_device_id_reg() p_MASTER_CCI_IP->MASTER_CCI_DEVICE_ID.MASTER_CCI_DEVICE_ID_ts.device_id_reg
#define Set_MASTER_CCI_MASTER_CCI_DEVICE_ID_device_id_reg(x) (p_MASTER_CCI_IP->MASTER_CCI_DEVICE_ID.MASTER_CCI_DEVICE_ID_ts.device_id_reg = x)
#define Set_MASTER_CCI_MASTER_CCI_DEVICE_ID(device_id_reg) (p_MASTER_CCI_IP->MASTER_CCI_DEVICE_ID.word = (uint32_t)device_id_reg<<0)
#define Get_MASTER_CCI_MASTER_CCI_DEVICE_ID() p_MASTER_CCI_IP->MASTER_CCI_DEVICE_ID.word
#define Set_MASTER_CCI_MASTER_CCI_DEVICE_ID_word(x) (p_MASTER_CCI_IP->MASTER_CCI_DEVICE_ID.word = x)


//MASTER_CCI_INDEX


#define Get_MASTER_CCI_MASTER_CCI_INDEX_index_reg() p_MASTER_CCI_IP->MASTER_CCI_INDEX.MASTER_CCI_INDEX_ts.index_reg
#define Set_MASTER_CCI_MASTER_CCI_INDEX_index_reg(x) (p_MASTER_CCI_IP->MASTER_CCI_INDEX.MASTER_CCI_INDEX_ts.index_reg = x)
#define Set_MASTER_CCI_MASTER_CCI_INDEX(index_reg) (p_MASTER_CCI_IP->MASTER_CCI_INDEX.word = (uint32_t)index_reg<<0)
#define Get_MASTER_CCI_MASTER_CCI_INDEX() p_MASTER_CCI_IP->MASTER_CCI_INDEX.word
#define Set_MASTER_CCI_MASTER_CCI_INDEX_word(x) (p_MASTER_CCI_IP->MASTER_CCI_INDEX.word = x)


//MASTER_CCI_CONTROL


#define Get_MASTER_CCI_MASTER_CCI_CONTROL_write() p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.write
#define Set_MASTER_CCI_MASTER_CCI_CONTROL_write(x) (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.write = x)


#define Get_MASTER_CCI_MASTER_CCI_CONTROL_read() p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.read
#define Set_MASTER_CCI_MASTER_CCI_CONTROL_read(x) (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.read = x)


#define Get_MASTER_CCI_MASTER_CCI_CONTROL_repeated_start() p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.repeated_start
#define Set_MASTER_CCI_MASTER_CCI_CONTROL_repeated_start(x) (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.repeated_start = x)


#define Get_MASTER_CCI_MASTER_CCI_CONTROL_data_count() p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.data_count
#define Set_MASTER_CCI_MASTER_CCI_CONTROL_data_count(x) (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.data_count = x)


#define Get_MASTER_CCI_MASTER_CCI_CONTROL_single_byte_index() p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.single_byte_index
#define Is_MASTER_CCI_MASTER_CCI_CONTROL_single_byte_index_B_0x0() (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.single_byte_index == single_byte_index_B_0x0)
#define Set_MASTER_CCI_MASTER_CCI_CONTROL_single_byte_index__B_0x0() (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.single_byte_index = single_byte_index_B_0x0)
#define single_byte_index_B_0x0 0x0    //16-bits data index
#define Is_MASTER_CCI_MASTER_CCI_CONTROL_single_byte_index_B_0x1() (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.single_byte_index == single_byte_index_B_0x1)
#define Set_MASTER_CCI_MASTER_CCI_CONTROL_single_byte_index__B_0x1() (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.single_byte_index = single_byte_index_B_0x1)
#define single_byte_index_B_0x1 0x1    //8-bits data index


#define Get_MASTER_CCI_MASTER_CCI_CONTROL_single_byte_device_id() p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.single_byte_device_id
#define Is_MASTER_CCI_MASTER_CCI_CONTROL_single_byte_device_id_B_0x0() (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.single_byte_device_id == single_byte_device_id_B_0x0)
#define Set_MASTER_CCI_MASTER_CCI_CONTROL_single_byte_device_id__B_0x0() (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.single_byte_device_id = single_byte_device_id_B_0x0)
#define single_byte_device_id_B_0x0 0x0    //16-bits device id(10-bit addressing)
#define Is_MASTER_CCI_MASTER_CCI_CONTROL_single_byte_device_id_B_0x1() (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.single_byte_device_id == single_byte_device_id_B_0x1)
#define Set_MASTER_CCI_MASTER_CCI_CONTROL_single_byte_device_id__B_0x1() (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.MASTER_CCI_CONTROL_ts.single_byte_device_id = single_byte_device_id_B_0x1)
#define single_byte_device_id_B_0x1 0x1    //8-bits device id(7-bit addressing)
#define Set_MASTER_CCI_MASTER_CCI_CONTROL(write,read,repeated_start,data_count,single_byte_index,single_byte_device_id) (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.word = (uint32_t)write<<0 | (uint32_t)read<<1 | (uint32_t)repeated_start<<2 | (uint32_t)data_count<<3 | (uint32_t)single_byte_index<<8 | (uint32_t)single_byte_device_id<<9)
#define Get_MASTER_CCI_MASTER_CCI_CONTROL() p_MASTER_CCI_IP->MASTER_CCI_CONTROL.word
#define Set_MASTER_CCI_MASTER_CCI_CONTROL_word(x) (p_MASTER_CCI_IP->MASTER_CCI_CONTROL.word = x)


//MASTER_CCI_STATUS


#define Get_MASTER_CCI_MASTER_CCI_STATUS_busy() p_MASTER_CCI_IP->MASTER_CCI_STATUS.MASTER_CCI_STATUS_ts.busy


#define Get_MASTER_CCI_MASTER_CCI_STATUS_fifo_full() p_MASTER_CCI_IP->MASTER_CCI_STATUS.MASTER_CCI_STATUS_ts.fifo_full


#define Get_MASTER_CCI_MASTER_CCI_STATUS_fifo_empty() p_MASTER_CCI_IP->MASTER_CCI_STATUS.MASTER_CCI_STATUS_ts.fifo_empty


#define Get_MASTER_CCI_MASTER_CCI_STATUS_error() p_MASTER_CCI_IP->MASTER_CCI_STATUS.MASTER_CCI_STATUS_ts.error


#define Get_MASTER_CCI_MASTER_CCI_STATUS_clr_error() p_MASTER_CCI_IP->MASTER_CCI_STATUS.MASTER_CCI_STATUS_ts.clr_error
#define Set_MASTER_CCI_MASTER_CCI_STATUS_clr_error(x) (p_MASTER_CCI_IP->MASTER_CCI_STATUS.MASTER_CCI_STATUS_ts.clr_error = x)
#define Set_MASTER_CCI_MASTER_CCI_STATUS(clr_error) (p_MASTER_CCI_IP->MASTER_CCI_STATUS.word = (uint32_t)clr_error<<7)
#define Get_MASTER_CCI_MASTER_CCI_STATUS() p_MASTER_CCI_IP->MASTER_CCI_STATUS.word
#define Set_MASTER_CCI_MASTER_CCI_STATUS_word(x) (p_MASTER_CCI_IP->MASTER_CCI_STATUS.word = x)


//MASTER_CCI_WRITE_DATA0


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA0_fifo_datastore0(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA0.MASTER_CCI_WRITE_DATA0_ts.fifo_datastore0 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA0_fifo_datastore1(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA0.MASTER_CCI_WRITE_DATA0_ts.fifo_datastore1 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA0_fifo_datastore2(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA0.MASTER_CCI_WRITE_DATA0_ts.fifo_datastore2 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA0_fifo_datastore3(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA0.MASTER_CCI_WRITE_DATA0_ts.fifo_datastore3 = x)
#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA0(fifo_datastore0,fifo_datastore1,fifo_datastore2,fifo_datastore3) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA0.word = (uint32_t)fifo_datastore0<<0 | (uint32_t)fifo_datastore1<<8 | (uint32_t)fifo_datastore2<<16 | (uint32_t)fifo_datastore3<<24)
#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA0_word(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA0.word = x)


//MASTER_CCI_WRITE_DATA1


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA1_fifo_datastore0(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA1.MASTER_CCI_WRITE_DATA1_ts.fifo_datastore0 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA1_fifo_datastore1(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA1.MASTER_CCI_WRITE_DATA1_ts.fifo_datastore1 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA1_fifo_datastore2(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA1.MASTER_CCI_WRITE_DATA1_ts.fifo_datastore2 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA1_fifo_datastore3(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA1.MASTER_CCI_WRITE_DATA1_ts.fifo_datastore3 = x)
#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA1(fifo_datastore0,fifo_datastore1,fifo_datastore2,fifo_datastore3) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA1.word = (uint32_t)fifo_datastore0<<0 | (uint32_t)fifo_datastore1<<8 | (uint32_t)fifo_datastore2<<16 | (uint32_t)fifo_datastore3<<24)
#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA1_word(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA1.word = x)


//MASTER_CCI_WRITE_DATA2


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA2_fifo_datastore0(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA2.MASTER_CCI_WRITE_DATA2_ts.fifo_datastore0 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA2_fifo_datastore1(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA2.MASTER_CCI_WRITE_DATA2_ts.fifo_datastore1 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA2_fifo_datastore2(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA2.MASTER_CCI_WRITE_DATA2_ts.fifo_datastore2 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA2_fifo_datastore3(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA2.MASTER_CCI_WRITE_DATA2_ts.fifo_datastore3 = x)
#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA2(fifo_datastore0,fifo_datastore1,fifo_datastore2,fifo_datastore3) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA2.word = (uint32_t)fifo_datastore0<<0 | (uint32_t)fifo_datastore1<<8 | (uint32_t)fifo_datastore2<<16 | (uint32_t)fifo_datastore3<<24)
#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA2_word(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA2.word = x)


//MASTER_CCI_WRITE_DATA3


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA3_fifo_datastore0(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA3.MASTER_CCI_WRITE_DATA3_ts.fifo_datastore0 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA3_fifo_datastore1(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA3.MASTER_CCI_WRITE_DATA3_ts.fifo_datastore1 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA3_fifo_datastore2(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA3.MASTER_CCI_WRITE_DATA3_ts.fifo_datastore2 = x)


#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA3_fifo_datastore3(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA3.MASTER_CCI_WRITE_DATA3_ts.fifo_datastore3 = x)
#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA3(fifo_datastore0,fifo_datastore1,fifo_datastore2,fifo_datastore3) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA3.word = (uint32_t)fifo_datastore0<<0 | (uint32_t)fifo_datastore1<<8 | (uint32_t)fifo_datastore2<<16 | (uint32_t)fifo_datastore3<<24)
#define Set_MASTER_CCI_MASTER_CCI_WRITE_DATA3_word(x) (p_MASTER_CCI_IP->MASTER_CCI_WRITE_DATA3.word = x)


//MASTER_CCI_READ_DATA0


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA0_fifo_datastore0() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA0.MASTER_CCI_READ_DATA0_ts.fifo_datastore0


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA0_fifo_datastore1() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA0.MASTER_CCI_READ_DATA0_ts.fifo_datastore1


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA0_fifo_datastore2() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA0.MASTER_CCI_READ_DATA0_ts.fifo_datastore2


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA0_fifo_datastore3() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA0.MASTER_CCI_READ_DATA0_ts.fifo_datastore3
#define Get_MASTER_CCI_MASTER_CCI_READ_DATA0() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA0.word


//MASTER_CCI_READ_DATA1


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA1_fifo_datastore0() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA1.MASTER_CCI_READ_DATA1_ts.fifo_datastore0


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA1_fifo_datastore1() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA1.MASTER_CCI_READ_DATA1_ts.fifo_datastore1


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA1_fifo_datastore2() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA1.MASTER_CCI_READ_DATA1_ts.fifo_datastore2


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA1_fifo_datastore3() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA1.MASTER_CCI_READ_DATA1_ts.fifo_datastore3
#define Get_MASTER_CCI_MASTER_CCI_READ_DATA1() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA1.word


//MASTER_CCI_READ_DATA2


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA2_fifo_datastore0() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA2.MASTER_CCI_READ_DATA2_ts.fifo_datastore0


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA2_fifo_datastore1() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA2.MASTER_CCI_READ_DATA2_ts.fifo_datastore1


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA2_fifo_datastore2() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA2.MASTER_CCI_READ_DATA2_ts.fifo_datastore2


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA2_fifo_datastore3() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA2.MASTER_CCI_READ_DATA2_ts.fifo_datastore3
#define Get_MASTER_CCI_MASTER_CCI_READ_DATA2() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA2.word


//MASTER_CCI_READ_DATA3


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA3_fifo_datastore0() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA3.MASTER_CCI_READ_DATA3_ts.fifo_datastore0


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA3_fifo_datastore1() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA3.MASTER_CCI_READ_DATA3_ts.fifo_datastore1


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA3_fifo_datastore2() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA3.MASTER_CCI_READ_DATA3_ts.fifo_datastore2


#define Get_MASTER_CCI_MASTER_CCI_READ_DATA3_fifo_datastore3() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA3.MASTER_CCI_READ_DATA3_ts.fifo_datastore3
#define Get_MASTER_CCI_MASTER_CCI_READ_DATA3() p_MASTER_CCI_IP->MASTER_CCI_READ_DATA3.word


//MASTER_CCI_FSM_STATE


#define Get_MASTER_CCI_MASTER_CCI_FSM_STATE_state() p_MASTER_CCI_IP->MASTER_CCI_FSM_STATE.MASTER_CCI_FSM_STATE_ts.state
#define Get_MASTER_CCI_MASTER_CCI_FSM_STATE() p_MASTER_CCI_IP->MASTER_CCI_FSM_STATE.word


//MASTER_CCI_TIMING1


#define Get_MASTER_CCI_MASTER_CCI_TIMING1_time_fall() p_MASTER_CCI_IP->MASTER_CCI_TIMING1.MASTER_CCI_TIMING1_ts.time_fall
#define Set_MASTER_CCI_MASTER_CCI_TIMING1_time_fall(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING1.MASTER_CCI_TIMING1_ts.time_fall = x)


#define Get_MASTER_CCI_MASTER_CCI_TIMING1_time_rise() p_MASTER_CCI_IP->MASTER_CCI_TIMING1.MASTER_CCI_TIMING1_ts.time_rise
#define Set_MASTER_CCI_MASTER_CCI_TIMING1_time_rise(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING1.MASTER_CCI_TIMING1_ts.time_rise = x)


#define Get_MASTER_CCI_MASTER_CCI_TIMING1_t_high() p_MASTER_CCI_IP->MASTER_CCI_TIMING1.MASTER_CCI_TIMING1_ts.t_high
#define Set_MASTER_CCI_MASTER_CCI_TIMING1_t_high(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING1.MASTER_CCI_TIMING1_ts.t_high = x)


#define Get_MASTER_CCI_MASTER_CCI_TIMING1_t_buffer() p_MASTER_CCI_IP->MASTER_CCI_TIMING1.MASTER_CCI_TIMING1_ts.t_buffer
#define Set_MASTER_CCI_MASTER_CCI_TIMING1_t_buffer(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING1.MASTER_CCI_TIMING1_ts.t_buffer = x)
#define Set_MASTER_CCI_MASTER_CCI_TIMING1(time_fall,time_rise,t_high,t_buffer) (p_MASTER_CCI_IP->MASTER_CCI_TIMING1.word = (uint32_t)time_fall<<0 | (uint32_t)time_rise<<8 | (uint32_t)t_high<<16 | (uint32_t)t_buffer<<24)
#define Get_MASTER_CCI_MASTER_CCI_TIMING1() p_MASTER_CCI_IP->MASTER_CCI_TIMING1.word
#define Set_MASTER_CCI_MASTER_CCI_TIMING1_word(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING1.word = x)


//MASTER_CCI_TIMING2


#define Get_MASTER_CCI_MASTER_CCI_TIMING2_t_hd_dat() p_MASTER_CCI_IP->MASTER_CCI_TIMING2.MASTER_CCI_TIMING2_ts.t_hd_dat
#define Set_MASTER_CCI_MASTER_CCI_TIMING2_t_hd_dat(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING2.MASTER_CCI_TIMING2_ts.t_hd_dat = x)


#define Get_MASTER_CCI_MASTER_CCI_TIMING2_t_su_dat() p_MASTER_CCI_IP->MASTER_CCI_TIMING2.MASTER_CCI_TIMING2_ts.t_su_dat
#define Set_MASTER_CCI_MASTER_CCI_TIMING2_t_su_dat(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING2.MASTER_CCI_TIMING2_ts.t_su_dat = x)
#define Set_MASTER_CCI_MASTER_CCI_TIMING2(t_hd_dat,t_su_dat) (p_MASTER_CCI_IP->MASTER_CCI_TIMING2.word = (uint32_t)t_hd_dat<<0 | (uint32_t)t_su_dat<<8)
#define Get_MASTER_CCI_MASTER_CCI_TIMING2() p_MASTER_CCI_IP->MASTER_CCI_TIMING2.word
#define Set_MASTER_CCI_MASTER_CCI_TIMING2_word(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING2.word = x)


//MASTER_CCI_TIMING3


#define Get_MASTER_CCI_MASTER_CCI_TIMING3_t_hd_sta() p_MASTER_CCI_IP->MASTER_CCI_TIMING3.MASTER_CCI_TIMING3_ts.t_hd_sta
#define Set_MASTER_CCI_MASTER_CCI_TIMING3_t_hd_sta(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING3.MASTER_CCI_TIMING3_ts.t_hd_sta = x)


#define Get_MASTER_CCI_MASTER_CCI_TIMING3_t_su_sta() p_MASTER_CCI_IP->MASTER_CCI_TIMING3.MASTER_CCI_TIMING3_ts.t_su_sta
#define Set_MASTER_CCI_MASTER_CCI_TIMING3_t_su_sta(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING3.MASTER_CCI_TIMING3_ts.t_su_sta = x)


#define Get_MASTER_CCI_MASTER_CCI_TIMING3_t_su_sto() p_MASTER_CCI_IP->MASTER_CCI_TIMING3.MASTER_CCI_TIMING3_ts.t_su_sto
#define Set_MASTER_CCI_MASTER_CCI_TIMING3_t_su_sto(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING3.MASTER_CCI_TIMING3_ts.t_su_sto = x)
#define Set_MASTER_CCI_MASTER_CCI_TIMING3(t_hd_sta,t_su_sta,t_su_sto) (p_MASTER_CCI_IP->MASTER_CCI_TIMING3.word = (uint32_t)t_hd_sta<<0 | (uint32_t)t_su_sta<<8 | (uint32_t)t_su_sto<<16)
#define Get_MASTER_CCI_MASTER_CCI_TIMING3() p_MASTER_CCI_IP->MASTER_CCI_TIMING3.word
#define Set_MASTER_CCI_MASTER_CCI_TIMING3_word(x) (p_MASTER_CCI_IP->MASTER_CCI_TIMING3.word = x)


//MASTER_CCI_DFV


#define Get_MASTER_CCI_MASTER_CCI_DFV_dfv_enable() p_MASTER_CCI_IP->MASTER_CCI_DFV.MASTER_CCI_DFV_ts.dfv_enable
#define Set_MASTER_CCI_MASTER_CCI_DFV_dfv_enable(x) (p_MASTER_CCI_IP->MASTER_CCI_DFV.MASTER_CCI_DFV_ts.dfv_enable = x)


#define Get_MASTER_CCI_MASTER_CCI_DFV_dfv_eop_interrupt() p_MASTER_CCI_IP->MASTER_CCI_DFV.MASTER_CCI_DFV_ts.dfv_eop_interrupt
#define Set_MASTER_CCI_MASTER_CCI_DFV_dfv_eop_interrupt(x) (p_MASTER_CCI_IP->MASTER_CCI_DFV.MASTER_CCI_DFV_ts.dfv_eop_interrupt = x)


#define Get_MASTER_CCI_MASTER_CCI_DFV_dfv_error_interrupt() p_MASTER_CCI_IP->MASTER_CCI_DFV.MASTER_CCI_DFV_ts.dfv_error_interrupt
#define Set_MASTER_CCI_MASTER_CCI_DFV_dfv_error_interrupt(x) (p_MASTER_CCI_IP->MASTER_CCI_DFV.MASTER_CCI_DFV_ts.dfv_error_interrupt = x)
#define Set_MASTER_CCI_MASTER_CCI_DFV(dfv_enable,dfv_eop_interrupt,dfv_error_interrupt) (p_MASTER_CCI_IP->MASTER_CCI_DFV.word = (uint32_t)dfv_enable<<0 | (uint32_t)dfv_eop_interrupt<<1 | (uint32_t)dfv_error_interrupt<<2)
#define Get_MASTER_CCI_MASTER_CCI_DFV() p_MASTER_CCI_IP->MASTER_CCI_DFV.word
#define Set_MASTER_CCI_MASTER_CCI_DFV_word(x) (p_MASTER_CCI_IP->MASTER_CCI_DFV.word = x)


//MASTER_CCI_TRANSFER


#define Get_MASTER_CCI_MASTER_CCI_TRANSFER_device_id_valid() p_MASTER_CCI_IP->MASTER_CCI_TRANSFER.MASTER_CCI_TRANSFER_ts.device_id_valid
#define Set_MASTER_CCI_MASTER_CCI_TRANSFER_device_id_valid(x) (p_MASTER_CCI_IP->MASTER_CCI_TRANSFER.MASTER_CCI_TRANSFER_ts.device_id_valid = x)


#define Get_MASTER_CCI_MASTER_CCI_TRANSFER_start_transfer() p_MASTER_CCI_IP->MASTER_CCI_TRANSFER.MASTER_CCI_TRANSFER_ts.start_transfer
#define Set_MASTER_CCI_MASTER_CCI_TRANSFER_start_transfer(x) (p_MASTER_CCI_IP->MASTER_CCI_TRANSFER.MASTER_CCI_TRANSFER_ts.start_transfer = x)


#define Get_MASTER_CCI_MASTER_CCI_TRANSFER_fifo_wr_fill() p_MASTER_CCI_IP->MASTER_CCI_TRANSFER.MASTER_CCI_TRANSFER_ts.fifo_wr_fill
#define Set_MASTER_CCI_MASTER_CCI_TRANSFER_fifo_wr_fill(x) (p_MASTER_CCI_IP->MASTER_CCI_TRANSFER.MASTER_CCI_TRANSFER_ts.fifo_wr_fill = x)
#define Set_MASTER_CCI_MASTER_CCI_TRANSFER(device_id_valid,start_transfer,fifo_wr_fill) (p_MASTER_CCI_IP->MASTER_CCI_TRANSFER.word = (uint32_t)device_id_valid<<0 | (uint32_t)start_transfer<<1 | (uint32_t)fifo_wr_fill<<2)
#define Get_MASTER_CCI_MASTER_CCI_TRANSFER() p_MASTER_CCI_IP->MASTER_CCI_TRANSFER.word
#define Set_MASTER_CCI_MASTER_CCI_TRANSFER_word(x) (p_MASTER_CCI_IP->MASTER_CCI_TRANSFER.word = x)


//MASTER_CCI_ERR_MGMT


#define Get_MASTER_CCI_MASTER_CCI_ERR_MGMT_error_mgmt_value() p_MASTER_CCI_IP->MASTER_CCI_ERR_MGMT.MASTER_CCI_ERR_MGMT_ts.error_mgmt_value
#define Get_MASTER_CCI_MASTER_CCI_ERR_MGMT() p_MASTER_CCI_IP->MASTER_CCI_ERR_MGMT.word

//USER_IF_ENABLE
/*Description: Enable and soft reset the User Interface block.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable User Interface*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* User Interface is out of reset*/
    }USER_IF_ENABLE_ts;

}USER_IF_ENABLE_tu;



//USER_IF_PAGE_ELEMENT
/*Description: Contains the address of the element and the page to be read or written.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t page_element;
        /* Address of the element and page to be read or written. Should be written from the host and read by the internal MCU*/
    }USER_IF_PAGE_ELEMENT_ts;

}USER_IF_PAGE_ELEMENT_tu;



//USER_IF_OPC
/*Description: Contains the opcode command to be executed by internal MCU
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t opcode;
        /* Operation to complete during the transaction.Must be written by the host.*/
        uint8_t transaction_id;
        /* ID of the transaction initiated by the host. Should be defined by the host*/
    }USER_IF_OPC_ts;

}USER_IF_OPC_tu;



//USER_IF_WR_DATA
/*Description: Data to be written to the address contained in UIF_PAGE_ELEMENT register.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t wr_data;
        /* Data to be written in UIF_PAGE_ELEMENT register. Should be written from the Host and read by the internal MCU*/
    }USER_IF_WR_DATA_ts;

}USER_IF_WR_DATA_tu;



//USER_IF_RD_DATA
/*Description: Data read from the address contained in PAGE_ELEMENT register.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t rd_data;
        /* Data read from UIF_PAGE_ELEMENT address. Should be written by internal MCU and read by the Host*/
    }USER_IF_RD_DATA_ts;

}USER_IF_RD_DATA_tu;



//USER_IF_ACK
/*Description: Response from internal MCU as acknowledgment to the initiated transaction.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t opcode_completed;
        /* Opcode value of the completed transaction. Its meaning Must be written by the internal MCU*/
        uint8_t transaction_id_completed;
        /* ID of the completed transaction. Must be written by the internal MCU*/
    }USER_IF_ACK_ts;

}USER_IF_ACK_tu;



//USER_IF_DFV
/*Description: Control for "Debug For Verification" features.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* DFV mode is disabled*/
        uint8_t dfv_interrupt :1;
        /* Any change of this value (from 0 to 1 OR 1 to 0) generate an interrupt pulse on user_if_interface output. dfv_enable register value must be ENABLE.*/
    }USER_IF_DFV_ts;

}USER_IF_DFV_tu;

typedef struct
{
    USER_IF_ENABLE_tu USER_IF_ENABLE;
    USER_IF_PAGE_ELEMENT_tu USER_IF_PAGE_ELEMENT;
    USER_IF_OPC_tu USER_IF_OPC;
    USER_IF_WR_DATA_tu USER_IF_WR_DATA;
    USER_IF_RD_DATA_tu USER_IF_RD_DATA;
    USER_IF_ACK_tu USER_IF_ACK;
    USER_IF_DFV_tu USER_IF_DFV;
}USER_IF_IP_ts;




//USER_IF_ENABLE


#define Get_USER_IF_USER_IF_ENABLE_enable() p_USER_IF_IP->USER_IF_ENABLE.USER_IF_ENABLE_ts.enable
#define Is_USER_IF_USER_IF_ENABLE_enable_DISABLE() (p_USER_IF_IP->USER_IF_ENABLE.USER_IF_ENABLE_ts.enable == enable_DISABLE)
#define Set_USER_IF_USER_IF_ENABLE_enable__DISABLE() (p_USER_IF_IP->USER_IF_ENABLE.USER_IF_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable User Interface
#define Is_USER_IF_USER_IF_ENABLE_enable_ENABLE() (p_USER_IF_IP->USER_IF_ENABLE.USER_IF_ENABLE_ts.enable == enable_ENABLE)
#define Set_USER_IF_USER_IF_ENABLE_enable__ENABLE() (p_USER_IF_IP->USER_IF_ENABLE.USER_IF_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable User Interface


#define Get_USER_IF_USER_IF_ENABLE_soft_reset() p_USER_IF_IP->USER_IF_ENABLE.USER_IF_ENABLE_ts.soft_reset
#define Is_USER_IF_USER_IF_ENABLE_soft_reset_B_0x0() (p_USER_IF_IP->USER_IF_ENABLE.USER_IF_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_USER_IF_USER_IF_ENABLE_soft_reset__B_0x0() (p_USER_IF_IP->USER_IF_ENABLE.USER_IF_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //User Interface is out of reset
#define Is_USER_IF_USER_IF_ENABLE_soft_reset_B_0x1() (p_USER_IF_IP->USER_IF_ENABLE.USER_IF_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_USER_IF_USER_IF_ENABLE_soft_reset__B_0x1() (p_USER_IF_IP->USER_IF_ENABLE.USER_IF_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //User Interface is in reset
#define Set_USER_IF_USER_IF_ENABLE(enable,soft_reset) (p_USER_IF_IP->USER_IF_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_USER_IF_USER_IF_ENABLE() p_USER_IF_IP->USER_IF_ENABLE.word
#define Set_USER_IF_USER_IF_ENABLE_word(x) (p_USER_IF_IP->USER_IF_ENABLE.word = x)


//USER_IF_PAGE_ELEMENT


#define Get_USER_IF_USER_IF_PAGE_ELEMENT_page_element() p_USER_IF_IP->USER_IF_PAGE_ELEMENT.USER_IF_PAGE_ELEMENT_ts.page_element
#define Set_USER_IF_USER_IF_PAGE_ELEMENT_page_element(x) (p_USER_IF_IP->USER_IF_PAGE_ELEMENT.USER_IF_PAGE_ELEMENT_ts.page_element = x)
#define Set_USER_IF_USER_IF_PAGE_ELEMENT(page_element) (p_USER_IF_IP->USER_IF_PAGE_ELEMENT.word = (uint32_t)page_element<<0)
#define Get_USER_IF_USER_IF_PAGE_ELEMENT() p_USER_IF_IP->USER_IF_PAGE_ELEMENT.word
#define Set_USER_IF_USER_IF_PAGE_ELEMENT_word(x) (p_USER_IF_IP->USER_IF_PAGE_ELEMENT.word = x)


//USER_IF_OPC


#define Get_USER_IF_USER_IF_OPC_opcode() p_USER_IF_IP->USER_IF_OPC.USER_IF_OPC_ts.opcode
#define Set_USER_IF_USER_IF_OPC_opcode(x) (p_USER_IF_IP->USER_IF_OPC.USER_IF_OPC_ts.opcode = x)


#define Get_USER_IF_USER_IF_OPC_transaction_id() p_USER_IF_IP->USER_IF_OPC.USER_IF_OPC_ts.transaction_id
#define Set_USER_IF_USER_IF_OPC_transaction_id(x) (p_USER_IF_IP->USER_IF_OPC.USER_IF_OPC_ts.transaction_id = x)
#define Set_USER_IF_USER_IF_OPC(opcode,transaction_id) (p_USER_IF_IP->USER_IF_OPC.word = (uint32_t)opcode<<0 | (uint32_t)transaction_id<<8)
#define Get_USER_IF_USER_IF_OPC() p_USER_IF_IP->USER_IF_OPC.word
#define Set_USER_IF_USER_IF_OPC_word(x) (p_USER_IF_IP->USER_IF_OPC.word = x)


//USER_IF_WR_DATA


#define Get_USER_IF_USER_IF_WR_DATA_wr_data() p_USER_IF_IP->USER_IF_WR_DATA.USER_IF_WR_DATA_ts.wr_data
#define Set_USER_IF_USER_IF_WR_DATA_wr_data(x) (p_USER_IF_IP->USER_IF_WR_DATA.USER_IF_WR_DATA_ts.wr_data = x)
#define Set_USER_IF_USER_IF_WR_DATA(wr_data) (p_USER_IF_IP->USER_IF_WR_DATA.word = (uint32_t)wr_data<<0)
#define Get_USER_IF_USER_IF_WR_DATA() p_USER_IF_IP->USER_IF_WR_DATA.word
#define Set_USER_IF_USER_IF_WR_DATA_word(x) (p_USER_IF_IP->USER_IF_WR_DATA.word = x)


//USER_IF_RD_DATA


#define Get_USER_IF_USER_IF_RD_DATA_rd_data() p_USER_IF_IP->USER_IF_RD_DATA.USER_IF_RD_DATA_ts.rd_data
#define Set_USER_IF_USER_IF_RD_DATA_rd_data(x) (p_USER_IF_IP->USER_IF_RD_DATA.USER_IF_RD_DATA_ts.rd_data = x)
#define Set_USER_IF_USER_IF_RD_DATA(rd_data) (p_USER_IF_IP->USER_IF_RD_DATA.word = (uint32_t)rd_data<<0)
#define Get_USER_IF_USER_IF_RD_DATA() p_USER_IF_IP->USER_IF_RD_DATA.word
#define Set_USER_IF_USER_IF_RD_DATA_word(x) (p_USER_IF_IP->USER_IF_RD_DATA.word = x)


//USER_IF_ACK


#define Get_USER_IF_USER_IF_ACK_opcode_completed() p_USER_IF_IP->USER_IF_ACK.USER_IF_ACK_ts.opcode_completed
#define Set_USER_IF_USER_IF_ACK_opcode_completed(x) (p_USER_IF_IP->USER_IF_ACK.USER_IF_ACK_ts.opcode_completed = x)


#define Get_USER_IF_USER_IF_ACK_transaction_id_completed() p_USER_IF_IP->USER_IF_ACK.USER_IF_ACK_ts.transaction_id_completed
#define Set_USER_IF_USER_IF_ACK_transaction_id_completed(x) (p_USER_IF_IP->USER_IF_ACK.USER_IF_ACK_ts.transaction_id_completed = x)
#define Set_USER_IF_USER_IF_ACK(opcode_completed,transaction_id_completed) (p_USER_IF_IP->USER_IF_ACK.word = (uint32_t)opcode_completed<<0 | (uint32_t)transaction_id_completed<<8)
#define Get_USER_IF_USER_IF_ACK() p_USER_IF_IP->USER_IF_ACK.word
#define Set_USER_IF_USER_IF_ACK_word(x) (p_USER_IF_IP->USER_IF_ACK.word = x)


//USER_IF_DFV


#define Get_USER_IF_USER_IF_DFV_dfv_enable() p_USER_IF_IP->USER_IF_DFV.USER_IF_DFV_ts.dfv_enable
#define Is_USER_IF_USER_IF_DFV_dfv_enable_DISABLE() (p_USER_IF_IP->USER_IF_DFV.USER_IF_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_USER_IF_USER_IF_DFV_dfv_enable__DISABLE() (p_USER_IF_IP->USER_IF_DFV.USER_IF_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //DFV mode is disabled
#define Is_USER_IF_USER_IF_DFV_dfv_enable_ENABLE() (p_USER_IF_IP->USER_IF_DFV.USER_IF_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_USER_IF_USER_IF_DFV_dfv_enable__ENABLE() (p_USER_IF_IP->USER_IF_DFV.USER_IF_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //DFV mode is enabled and dfv_interrupt register active


#define Get_USER_IF_USER_IF_DFV_dfv_interrupt() p_USER_IF_IP->USER_IF_DFV.USER_IF_DFV_ts.dfv_interrupt
#define Set_USER_IF_USER_IF_DFV_dfv_interrupt(x) (p_USER_IF_IP->USER_IF_DFV.USER_IF_DFV_ts.dfv_interrupt = x)
#define Set_USER_IF_USER_IF_DFV(dfv_enable,dfv_interrupt) (p_USER_IF_IP->USER_IF_DFV.word = (uint8_t)dfv_enable<<0 | (uint8_t)dfv_interrupt<<1)
#define Get_USER_IF_USER_IF_DFV() p_USER_IF_IP->USER_IF_DFV.word
#define Set_USER_IF_USER_IF_DFV_word(x) (p_USER_IF_IP->USER_IF_DFV.word = x)

//GPIO_ENABLE
/*Description: Enable Register enables the GPIO IP
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t gpio_enable :1;
        /* GPIO Enable*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* Soft Reset Signal*/
    }GPIO_ENABLE_ts;

}GPIO_ENABLE_tu;



//GPIO_TIMER_CTRL
/*Description: Timers Control register allows independant control of each timer signal
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t timer0_enable :1;
        /* Control for Timer 3 to 0*/
        uint8_t timer1_enable :1;
        /* Control for Timer 3 to 0*/
        uint8_t timer2_enable :1;
        /* Control for Timer 3 to 0*/
        uint8_t timer3_enable :1;
        /* Control for Timer 3 to 0*/
        uint8_t idptimer_enable :1;
        /* Control for IDP Timer*/
    }GPIO_TIMER_CTRL_ts;

}GPIO_TIMER_CTRL_tu;



//GPIO_CHANNEL_START
/*Description: Start channel sequence
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t channel0_start :1;
        /* Start the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel1_start :1;
        /* Start the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel2_start :1;
        /* Start the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel3_start :1;
        /* Start the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel4_start :1;
        /* Start the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel5_start :1;
        /* Start the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel6_start :1;
        /* Start the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel7_start :1;
        /* Start the channel sequence.
        Reads from these bits will always return 0*/
    }GPIO_CHANNEL_START_ts;

}GPIO_CHANNEL_START_tu;



//GPIO_CHANNEL_STOP
/*Description: Stop channel sequence
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t channel0_stop :1;
        /* Stop the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel1_stop :1;
        /* Stop the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel2_stop :1;
        /* Stop the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel3_stop :1;
        /* Stop the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel4_stop :1;
        /* Stop the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel5_stop :1;
        /* Stop the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel6_stop :1;
        /* Stop the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel7_stop :1;
        /* Stop the channel sequence.
        Reads from these bits will always return 0*/
    }GPIO_CHANNEL_STOP_ts;

}GPIO_CHANNEL_STOP_tu;



//GPIO_CHANNEL_RESET
/*Description: Soft reset channel sequence
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t channel0_reset :1;
        /* Reset the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel1_reset :1;
        /* Reset the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel2_reset :1;
        /* Reset the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel3_reset :1;
        /* Reset the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel4_reset :1;
        /* Reset the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel5_reset :1;
        /* Reset the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel6_reset :1;
        /* Reset the channel sequence.
        Reads from these bits will always return 0*/
        uint8_t channel7_reset :1;
        /* Reset the channel sequence.
        Reads from these bits will always return 0*/
    }GPIO_CHANNEL_RESET_ts;

}GPIO_CHANNEL_RESET_tu;



//GPIO_CHANNEL_POLARITY
/*Description: Define channel polarity
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t channel0_polar :1;
        /* Selection of channel polarity.*/
        uint8_t channel1_polar :1;
        /* Selection of channel polarity.*/
        uint8_t channel2_polar :1;
        /* Selection of channel polarity.*/
        uint8_t channel3_polar :1;
        /* Selection of channel polarity.*/
        uint8_t channel4_polar :1;
        /* Selection of channel polarity.*/
        uint8_t channel5_polar :1;
        /* Selection of channel polarity.*/
        uint8_t channel6_polar :1;
        /* Selection of channel polarity.*/
        uint8_t channel7_polar :1;
        /* Selection of channel polarity.*/
    }GPIO_CHANNEL_POLARITY_ts;

}GPIO_CHANNEL_POLARITY_tu;



//GPIO_OUTPUT_CONFIG
/*Description: Define output configuration
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t gpo0_config :1;
        /* Output selection (gpo register / channel out)
        gpo[7] is a special case in which the interrupt can be routed to gpo[7] (instead of gpo register content / channel output) when intr_debug field of GPIO_INTR_DEBUG register is set (debug mode).*/
        uint8_t gpo1_config :1;
        /* Output selection (gpo register / channel out)
        gpo[7] is a special case in which the interrupt can be routed to gpo[7] (instead of gpo register content / channel output) when intr_debug field of GPIO_INTR_DEBUG register is set (debug mode).*/
        uint8_t gpo2_config :1;
        /* Output selection (gpo register / channel out)
        gpo[7] is a special case in which the interrupt can be routed to gpo[7] (instead of gpo register content / channel output) when intr_debug field of GPIO_INTR_DEBUG register is set (debug mode).*/
        uint8_t gpo3_config :1;
        /* Output selection (gpo register / channel out)
        gpo[7] is a special case in which the interrupt can be routed to gpo[7] (instead of gpo register content / channel output) when intr_debug field of GPIO_INTR_DEBUG register is set (debug mode).*/
        uint8_t gpo4_config :1;
        /* Output selection (gpo register / channel out)
        gpo[7] is a special case in which the interrupt can be routed to gpo[7] (instead of gpo register content / channel output) when intr_debug field of GPIO_INTR_DEBUG register is set (debug mode).*/
        uint8_t gpo5_config :1;
        /* Output selection (gpo register / channel out)
        gpo[7] is a special case in which the interrupt can be routed to gpo[7] (instead of gpo register content / channel output) when intr_debug field of GPIO_INTR_DEBUG register is set (debug mode).*/
        uint8_t gpo6_config :1;
        /* Output selection (gpo register / channel out)
        gpo[7] is a special case in which the interrupt can be routed to gpo[7] (instead of gpo register content / channel output) when intr_debug field of GPIO_INTR_DEBUG register is set (debug mode).*/
        uint8_t gpo7_config :1;
        /* Output selection (gpo register / channel out)
        gpo[7] is a special case in which the interrupt can be routed to gpo[7] (instead of gpo register content / channel output) when intr_debug field of GPIO_INTR_DEBUG register is set (debug mode).*/
    }GPIO_OUTPUT_CONFIG_ts;

}GPIO_OUTPUT_CONFIG_tu;



//GPIO_CHANNEL_CONFIG
/*Description: Define channel configuration
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t channel0_config :1;
        /* Channel configuration - PWM / Sequence shifter.*/
        uint8_t channel1_config :1;
        /* Channel configuration - PWM / Sequence shifter.*/
        uint8_t channel2_config :1;
        /* Channel configuration - PWM / Sequence shifter.*/
        uint8_t channel3_config :1;
        /* Channel configuration - PWM / Sequence shifter.*/
        uint8_t channel4_config :1;
        /* Channel configuration - PWM / Sequence shifter.*/
        uint8_t channel5_config :1;
        /* Channel configuration - PWM / Sequence shifter.*/
        uint8_t channel6_config :1;
        /* Channel configuration - PWM / Sequence shifter.*/
        uint8_t channel7_config :1;
        /* Channel configuration - PWM / Sequence shifter.*/
    }GPIO_CHANNEL_CONFIG_ts;

}GPIO_CHANNEL_CONFIG_tu;



//GPIO_CHANNEL_PAIRING
/*Description: Define channel pairing configuration
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t channel_pairing0 :2;
        /* Pairing control for Channel 2n and Channel 2n+1
        In all the above schemes, the output of Channel 2n is unchanged.*/
        uint8_t channel_pairing1 :2;
        /* Pairing control for Channel 2n and Channel 2n+1
        In all the above schemes, the output of Channel 2n is unchanged.*/
        uint8_t channel_pairing2 :2;
        /* Pairing control for Channel 2n and Channel 2n+1
        In all the above schemes, the output of Channel 2n is unchanged.*/
        uint8_t channel_pairing3 :2;
        /* Pairing control for Channel 2n and Channel 2n+1
        In all the above schemes, the output of Channel 2n is unchanged.*/
    }GPIO_CHANNEL_PAIRING_ts;

}GPIO_CHANNEL_PAIRING_tu;



//GPIO_INTR_DEBUG
/*Description: Debug interrupt output
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t intr_debug :1;
        /* Interrupt output during debug mode. This field is used during debug mode. To test the general purpose timers / IDP timer, the interrupt output can be brought out for debug.*/
    }GPIO_INTR_DEBUG_ts;

}GPIO_INTR_DEBUG_tu;



//GPIO_CHANNEL_SRC
/*Description: Define channel source
Note: IDP Timer option is only valid for channels 0 to 5 if ocnfigured as PWM
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t channel0_src :3;
        /* Selection of channel source.
        The firmware must ensure that same clock source is programmed in the Clock Manager block for the Channel and the associated Timer.
        1xx : IDP Timer - Clock source should be programmed as clk_pix in the Clock Manager block for this option.*/
        uint8_t channel1_src :3;
        /* Selection of channel source.
        The firmware must ensure that same clock source is programmed in the Clock Manager block for the Channel and the associated Timer.
        1xx : IDP Timer - Clock source should be programmed as clk_pix in the Clock Manager block for this option.*/
        uint8_t channel2_src :3;
        /* Selection of channel source.
        The firmware must ensure that same clock source is programmed in the Clock Manager block for the Channel and the associated Timer.
        1xx : IDP Timer - Clock source should be programmed as clk_pix in the Clock Manager block for this option.*/
        uint8_t channel3_src :3;
        /* Selection of channel source.
        The firmware must ensure that same clock source is programmed in the Clock Manager block for the Channel and the associated Timer.
        1xx : IDP Timer - Clock source should be programmed as clk_pix in the Clock Manager block for this option.*/
        uint8_t channel4_src :3;
        /* Selection of channel source.
        The firmware must ensure that same clock source is programmed in the Clock Manager block for the Channel and the associated Timer.
        1xx : IDP Timer - Clock source should be programmed as clk_pix in the Clock Manager block for this option.*/
        uint8_t channel5_src :3;
        /* Selection of channel source.
        The firmware must ensure that same clock source is programmed in the Clock Manager block for the Channel and the associated Timer.
        1xx : IDP Timer - Clock source should be programmed as clk_pix in the Clock Manager block for this option.*/
        uint8_t channel6_src :3;
        /* Selection of channel source.
        The firmware must ensure that same clock source is programmed in the Clock Manager block for the Channel and the associated Timer.
        1xx : IDP Timer - Clock source should be programmed as clk_pix in the Clock Manager block for this option.*/
        uint8_t channel7_src :3;
        /* Selection of channel source.
        The firmware must ensure that same clock source is programmed in the Clock Manager block for the Channel and the associated Timer.
        1xx : IDP Timer - Clock source should be programmed as clk_pix in the Clock Manager block for this option.*/
    }GPIO_CHANNEL_SRC_ts;

}GPIO_CHANNEL_SRC_tu;



//GPIO_INT_SRC
/*Description: Select interrupt source
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t int0_src :3;
        /* Interrupt source selection.
        1xx : (SRC_IDPTIMER) IDP Timer*/
        uint8_t int1_src :3;
        /* Interrupt source selection.
        1xx : (SRC_IDPTIMER) IDP Timer*/
        uint8_t int2_src :3;
        /* Interrupt source selection.
        1xx : (SRC_IDPTIMER) IDP Timer*/
        uint8_t int3_src :3;
        /* Interrupt source selection.
        1xx : (SRC_IDPTIMER) IDP Timer*/
    }GPIO_INT_SRC_ts;

}GPIO_INT_SRC_tu;



//GPIO_INT0_TRIGGER
/*Description: Defines Interrupt trigger condition
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t count_low;
        /* Trigger condition for corresponding interrupt.
        If the corresponding interrupt source programmed in GPIO_INT_SRC is any one of the four timers (Timer 0, 1, 2 or 3), count_low is interpreted in the following manner:
        Timer count : Whenever the count of the relevant timer reaches this value, timer interrupt will be set.
        If the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer, count_low is interpreted in the following manner:
        Pixel count : When the pixel, line and frame counts of the IDP timer reaches the value programmed, timer interrupt 0 will be set. (The frame count should be programmed in "Timer Interrupt Trigger Extension" Register)*/
        uint16_t count_high;
        /* Line Count
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        When the pixel, line and frame counts of the IDP timer reaches the value programmed, timer interrupt 0 will be set*/
    }GPIO_INT0_TRIGGER_ts;

}GPIO_INT0_TRIGGER_tu;



//GPIO_INT0_TRIGGER_EX
/*Description: Defines Interrupt trigger extended condition
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t count_ext;
        /* Frame count.
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        When the pixel, line & frame counts of the IDP timer reach the value programmed, corresponding timer interrupt will be set. (The line & pixel counts should be programmed in GPIO_INTx_TRIGGER register.)*/
        uint8_t repeat :2;
        /* Repeat sequence of the trigger event.
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        1x : Every line. Starting from the frame number and line number programmed, for each line whenever the pixel count of the IDP timer reaches the value programmed, the corresponding timer interrupt will be asserted.*/
    }GPIO_INT0_TRIGGER_EX_ts;

}GPIO_INT0_TRIGGER_EX_tu;



//GPIO_INT1_TRIGGER
/*Description: Defines Interrupt trigger condition
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t count_low;
        /* Trigger condition for corresponding interrupt.
        If the corresponding interrupt source programmed in GPIO_INT_SRC is any one of the four timers (Timer 0, 1, 2 or 3), count_low is interpreted in the following manner:
        Timer count : Whenever the count of the relevant timer reaches this value, timer interrupt will be set.
        If the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer, count_low is interpreted in the following manner:
        Pixel count : When the pixel, line and frame counts of the IDP timer reaches the value programmed, timer interrupt 0 will be set. (The frame count should be programmed in "Timer Interrupt Trigger Extension" Register)*/
        uint16_t count_high;
        /* Line Count
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        When the pixel, line and frame counts of the IDP timer reaches the value programmed, timer interrupt 0 will be set*/
    }GPIO_INT1_TRIGGER_ts;

}GPIO_INT1_TRIGGER_tu;



//GPIO_INT1_TRIGGER_EX
/*Description: Defines Interrupt trigger extended condition
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t count_ext;
        /* Frame count.
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        When the pixel, line & frame counts of the IDP timer reach the value programmed, corresponding timer interrupt will be set. (The line & pixel counts should be programmed in GPIO_INTx_TRIGGER register.)*/
        uint8_t repeat :2;
        /* Repeat sequence of the trigger event.
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        1x : Every line. Starting from the frame number and line number programmed, for each line whenever the pixel count of the IDP timer reaches the value programmed, the corresponding timer interrupt will be asserted.*/
    }GPIO_INT1_TRIGGER_EX_ts;

}GPIO_INT1_TRIGGER_EX_tu;



//GPIO_INT2_TRIGGER
/*Description: Defines Interrupt trigger condition
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t count_low;
        /* Trigger condition for corresponding interrupt.
        If the corresponding interrupt source programmed in GPIO_INT_SRC is any one of the four timers (Timer 0, 1, 2 or 3), count_low is interpreted in the following manner:
        Timer count : Whenever the count of the relevant timer reaches this value, timer interrupt will be set.
        If the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer, count_low is interpreted in the following manner:
        Pixel count : When the pixel, line and frame counts of the IDP timer reaches the value programmed, timer interrupt 0 will be set. (The frame count should be programmed in "Timer Interrupt Trigger Extension" Register)*/
        uint16_t count_high;
        /* Line Count
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        When the pixel, line and frame counts of the IDP timer reaches the value programmed, timer interrupt 0 will be set*/
    }GPIO_INT2_TRIGGER_ts;

}GPIO_INT2_TRIGGER_tu;



//GPIO_INT2_TRIGGER_EX
/*Description: Defines Interrupt trigger extended condition
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t count_ext;
        /* Frame count.
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        When the pixel, line & frame counts of the IDP timer reach the value programmed, corresponding timer interrupt will be set. (The line & pixel counts should be programmed in GPIO_INTx_TRIGGER register.)*/
        uint8_t repeat :2;
        /* Repeat sequence of the trigger event.
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        1x : Every line. Starting from the frame number and line number programmed, for each line whenever the pixel count of the IDP timer reaches the value programmed, the corresponding timer interrupt will be asserted.*/
    }GPIO_INT2_TRIGGER_EX_ts;

}GPIO_INT2_TRIGGER_EX_tu;



//GPIO_INT3_TRIGGER
/*Description: Defines Interrupt trigger condition
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t count_low;
        /* Trigger condition for corresponding interrupt.
        If the corresponding interrupt source programmed in GPIO_INT_SRC is any one of the four timers (Timer 0, 1, 2 or 3), count_low is interpreted in the following manner:
        Timer count : Whenever the count of the relevant timer reaches this value, timer interrupt will be set.
        If the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer, count_low is interpreted in the following manner:
        Pixel count : When the pixel, line and frame counts of the IDP timer reaches the value programmed, timer interrupt 0 will be set. (The frame count should be programmed in "Timer Interrupt Trigger Extension" Register)*/
        uint16_t count_high;
        /* Line Count
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        When the pixel, line and frame counts of the IDP timer reaches the value programmed, timer interrupt 0 will be set*/
    }GPIO_INT3_TRIGGER_ts;

}GPIO_INT3_TRIGGER_tu;



//GPIO_INT3_TRIGGER_EX
/*Description: Defines Interrupt trigger extended condition
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t count_ext;
        /* Frame count.
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        When the pixel, line & frame counts of the IDP timer reach the value programmed, corresponding timer interrupt will be set. (The line & pixel counts should be programmed in GPIO_INTx_TRIGGER register.)*/
        uint8_t repeat :2;
        /* Repeat sequence of the trigger event.
        This field is valid, only if the corresponding interrupt source programmed in GPIO_INT_SRC is IDP timer.
        1x : Every line. Starting from the frame number and line number programmed, for each line whenever the pixel count of the IDP timer reaches the value programmed, the corresponding timer interrupt will be asserted.*/
    }GPIO_INT3_TRIGGER_EX_ts;

}GPIO_INT3_TRIGGER_EX_tu;



//GPIO_EVENT_TRIGGER
/*Description: Defines Evnet trigger condition
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t event_trigger;
        /* 
        When event_src is programmed as EVENT_SRC_ADC, this bit field is interpreted as 8 bit value match of the ADC input. So whenever the ADC input reaches this value, the event trigger interrupt bit in the Interrupt Control 0 register will be set. This event is also used as a stop signal for the "repeat until external event" feature of the channels.
        When event_src is programmed as EVENT_SRC_GPI, this bit field is interpreted in the following manner:
        bit [7:5] : Reserved
        bit 4 : Rise / Fall trigger. 0: The triggering event will be rise edge of the GPI, 1: The triggering event will be fall edge of the GPI
        bit [3:0] : GPI select (0 to 15)
        The event trigger Interrupt bit in the Interrupt Control 0 register will be set whenever the GPI, selected by the GPI select bits, rises / falls (according to the Rise / Fall select bit). This event is also used as a stop signal for the "repeat until external event" feature of the channels.
        */
        uint8_t event_src :1;
        /* Source of the event.*/
    }GPIO_EVENT_TRIGGER_ts;

}GPIO_EVENT_TRIGGER_tu;



//GPIO_TIMER_PRESCALE
/*Description: Defines timer prescale values
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t timer0_prescale :4;
        /* Input clock prescale select for Timer 0. A value of n indicates prescale of 2n*/
        uint8_t timer1_prescale :4;
        /* Input clock prescale select for Timer 0. A value of n indicates prescale of 2n*/
        uint8_t timer2_prescale :4;
        /* Input clock prescale select for Timer 0. A value of n indicates prescale of 2n*/
        uint8_t timer3_prescale :4;
        /* Input clock prescale select for Timer 0. A value of n indicates prescale of 2n*/
    }GPIO_TIMER_PRESCALE_ts;

}GPIO_TIMER_PRESCALE_tu;



//GPIO_DEBOUNCE_CTRL
/*Description: Debounce Control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t debounce_enable :1;
        /* Debouncing of GP inputs enable control bit. Also used to enable / disable debounce counter.*/
        uint8_t reserved0 :3;
        uint8_t debounce_prescale :4;
        /* Input clock prescale select for Timer 0. A value of n indicates prescale of 2n*/
    }GPIO_DEBOUNCE_CTRL_ts;

}GPIO_DEBOUNCE_CTRL_tu;



//GPIO_DEBOUNCE_PERIOD
/*Description: Defines debounce period
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t debounce_period;
        /* Debounce counter limit.
        Whenever the debounce counter reaches this limit, it rolls back to 0 and at this point of time, the GP inputs are sampled. The value in this register, along with the debounce prescale, controls the debounce period of the GP inputs.*/
    }GPIO_DEBOUNCE_PERIOD_ts;

}GPIO_DEBOUNCE_PERIOD_tu;



//GPIO_IDP_FRAME_COUNT
/*Description: IDP Frame Count
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t frame_count;
        /* IDP frame Counter.
        This indicates the current frame number of the internal IDP counter. Rolls back to 0 after every 256 frames.*/
    }GPIO_IDP_FRAME_COUNT_ts;

}GPIO_IDP_FRAME_COUNT_tu;



//GPIO_GPI
/*Description: GP Input Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t gpi;
        /* GP input register.
        If debounce is enabled, the inputs are sampled at discrete time intervals, controlled by the debounce timer.
        When debounce is disabled, the inputs are continuously sampled and registered at STBus T1 clock.*/
    }GPIO_GPI_ts;

}GPIO_GPI_tu;



//GPIO_GPO
/*Description: GP Output Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t gpo;
        /* GP output register. This field is valid only if the source of the corresponding gpo is programmed as gpo register.*/
    }GPIO_GPO_ts;

}GPIO_GPO_tu;



//GPIO_GPD
/*Description: Select IO direction
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t gpd;
        /* Direction control for the 16 GPIOs.*/
    }GPIO_GPD_ts;

}GPIO_GPD_tu;



//GPIO_CHANNEL0_CTRL0
/*Description: Rise trigger condition for corresponding PWM or Shift Period for corresponding sequence shifter
Note: When the pixel, line and frame counts of the IDP timer reaches the value programmed, corresponding PWM output will be set to 1. (The frame count should be programmed in "Channel control0 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration :
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM LOW Period : determines the active LOW period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be set to 1.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Shift Period : period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        Field is ignored*/
    }GPIO_CHANNEL0_CTRL0_ts;

}GPIO_CHANNEL0_CTRL0_tu;



//GPIO_CHANNEL0_CTRL0_EXT
/*Description: Frame Rise trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be set to 1. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl0_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL0_CTRL0_EXT_ts;

}GPIO_CHANNEL0_CTRL0_EXT_tu;



//GPIO_CHANNEL0_CTRL1
/*Description: Fall trigger condition for corresponding PWM or Sequence Control for corresponding Sequence Shifter
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The frame count should be programmed in "Channel control1 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM HIGH Period. It determines the active HIGH period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be cleared.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid).It is 4 bit wide
        Bit 20 decides the direction of shift
        (0:- right shift .1- left shift).*/
    }GPIO_CHANNEL0_CTRL1_ts;

}GPIO_CHANNEL0_CTRL1_tu;



//GPIO_CHANNEL0_CTRL1_EXT
/*Description: Frame Fall trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl1_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL0_CTRL1_EXT_ts;

}GPIO_CHANNEL0_CTRL1_EXT_tu;



//GPIO_CHANNEL0_REPEAT
/*Description: Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t line_mode :1;
        /* Sequence repeat cycle - line based or frame based. Depending upon this field, the next field in this register Channel n repeat count, is interpreted in frames or lines.
        This field is valid only if the channel is configured as a PWM AND the source of the PWM n is programmed as IDP timer AND the value programmed in the next field of this register (PWM n repeat count) is greater than 0 AND repeat until / repeat forever feature is enabled.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL0_REPEAT_ts;

}GPIO_CHANNEL0_REPEAT_tu;



//GPIO_CHANNEL1_CTRL0
/*Description: Rise trigger condition for corresponding PWM or Shift Period for corresponding sequence shifter
Note: When the pixel, line and frame counts of the IDP timer reaches the value programmed, corresponding PWM output will be set to 1. (The frame count should be programmed in "Channel control0 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration :
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM LOW Period : determines the active LOW period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be set to 1.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Shift Period : period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        Field is ignored*/
    }GPIO_CHANNEL1_CTRL0_ts;

}GPIO_CHANNEL1_CTRL0_tu;



//GPIO_CHANNEL1_CTRL0_EXT
/*Description: Frame Rise trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be set to 1. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl0_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL1_CTRL0_EXT_ts;

}GPIO_CHANNEL1_CTRL0_EXT_tu;



//GPIO_CHANNEL1_CTRL1
/*Description: Fall trigger condition for corresponding PWM or Sequence Control for corresponding Sequence Shifter
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The frame count should be programmed in "Channel control1 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM HIGH Period. It determines the active HIGH period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be cleared.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid).It is 4 bit wide
        Bit 20 decides the direction of shift
        (0:- right shift .1- left shift).*/
    }GPIO_CHANNEL1_CTRL1_ts;

}GPIO_CHANNEL1_CTRL1_tu;



//GPIO_CHANNEL1_CTRL1_EXT
/*Description: Frame Fall trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl1_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL1_CTRL1_EXT_ts;

}GPIO_CHANNEL1_CTRL1_EXT_tu;



//GPIO_CHANNEL1_REPEAT
/*Description: Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t line_mode :1;
        /* Sequence repeat cycle - line based or frame based. Depending upon this field, the next field in this register Channel n repeat count, is interpreted in frames or lines.
        This field is valid only if the channel is configured as a PWM AND the source of the PWM n is programmed as IDP timer AND the value programmed in the next field of this register (PWM n repeat count) is greater than 0 AND repeat until / repeat forever feature is enabled.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL1_REPEAT_ts;

}GPIO_CHANNEL1_REPEAT_tu;



//GPIO_CHANNEL2_CTRL0
/*Description: Rise trigger condition for corresponding PWM or Shift Period for corresponding sequence shifter
Note: When the pixel, line and frame counts of the IDP timer reaches the value programmed, corresponding PWM output will be set to 1. (The frame count should be programmed in "Channel control0 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration :
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM LOW Period : determines the active LOW period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be set to 1.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Shift Period : period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        Field is ignored*/
    }GPIO_CHANNEL2_CTRL0_ts;

}GPIO_CHANNEL2_CTRL0_tu;



//GPIO_CHANNEL2_CTRL0_EXT
/*Description: Frame Rise trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be set to 1. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl0_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL2_CTRL0_EXT_ts;

}GPIO_CHANNEL2_CTRL0_EXT_tu;



//GPIO_CHANNEL2_CTRL1
/*Description: Fall trigger condition for corresponding PWM or Sequence Control for corresponding Sequence Shifter
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The frame count should be programmed in "Channel control1 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM HIGH Period. It determines the active HIGH period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be cleared.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid).It is 4 bit wide
        Bit 20 decides the direction of shift
        (0:- right shift .1- left shift).*/
    }GPIO_CHANNEL2_CTRL1_ts;

}GPIO_CHANNEL2_CTRL1_tu;



//GPIO_CHANNEL2_CTRL1_EXT
/*Description: Frame Fall trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl1_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL2_CTRL1_EXT_ts;

}GPIO_CHANNEL2_CTRL1_EXT_tu;



//GPIO_CHANNEL2_REPEAT
/*Description: Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t line_mode :1;
        /* Sequence repeat cycle - line based or frame based. Depending upon this field, the next field in this register Channel n repeat count, is interpreted in frames or lines.
        This field is valid only if the channel is configured as a PWM AND the source of the PWM n is programmed as IDP timer AND the value programmed in the next field of this register (PWM n repeat count) is greater than 0 AND repeat until / repeat forever feature is enabled.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL2_REPEAT_ts;

}GPIO_CHANNEL2_REPEAT_tu;



//GPIO_CHANNEL3_CTRL0
/*Description: Rise trigger condition for corresponding PWM or Shift Period for corresponding sequence shifter
Note: When the pixel, line and frame counts of the IDP timer reaches the value programmed, corresponding PWM output will be set to 1. (The frame count should be programmed in "Channel control0 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration :
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM LOW Period : determines the active LOW period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be set to 1.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Shift Period : period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        Field is ignored*/
    }GPIO_CHANNEL3_CTRL0_ts;

}GPIO_CHANNEL3_CTRL0_tu;



//GPIO_CHANNEL3_CTRL0_EXT
/*Description: Frame Rise trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be set to 1. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl0_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL3_CTRL0_EXT_ts;

}GPIO_CHANNEL3_CTRL0_EXT_tu;



//GPIO_CHANNEL3_CTRL1
/*Description: Fall trigger condition for corresponding PWM or Sequence Control for corresponding Sequence Shifter
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The frame count should be programmed in "Channel control1 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM HIGH Period. It determines the active HIGH period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be cleared.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid).It is 4 bit wide
        Bit 20 decides the direction of shift
        (0:- right shift .1- left shift).*/
    }GPIO_CHANNEL3_CTRL1_ts;

}GPIO_CHANNEL3_CTRL1_tu;



//GPIO_CHANNEL3_CTRL1_EXT
/*Description: Frame Fall trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl1_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL3_CTRL1_EXT_ts;

}GPIO_CHANNEL3_CTRL1_EXT_tu;



//GPIO_CHANNEL3_REPEAT
/*Description: Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t line_mode :1;
        /* Sequence repeat cycle - line based or frame based. Depending upon this field, the next field in this register Channel n repeat count, is interpreted in frames or lines.
        This field is valid only if the channel is configured as a PWM AND the source of the PWM n is programmed as IDP timer AND the value programmed in the next field of this register (PWM n repeat count) is greater than 0 AND repeat until / repeat forever feature is enabled.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL3_REPEAT_ts;

}GPIO_CHANNEL3_REPEAT_tu;



//GPIO_CHANNEL4_CTRL0
/*Description: Rise trigger condition for corresponding PWM or Shift Period for corresponding sequence shifter
Note: When the pixel, line and frame counts of the IDP timer reaches the value programmed, corresponding PWM output will be set to 1. (The frame count should be programmed in "Channel control0 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration :
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM LOW Period : determines the active LOW period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be set to 1.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Shift Period : period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        Field is ignored*/
    }GPIO_CHANNEL4_CTRL0_ts;

}GPIO_CHANNEL4_CTRL0_tu;



//GPIO_CHANNEL4_CTRL0_EXT
/*Description: Frame Rise trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be set to 1. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl0_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL4_CTRL0_EXT_ts;

}GPIO_CHANNEL4_CTRL0_EXT_tu;



//GPIO_CHANNEL4_CTRL1
/*Description: Fall trigger condition for corresponding PWM or Sequence Control for corresponding Sequence Shifter
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The frame count should be programmed in "Channel control1 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM HIGH Period. It determines the active HIGH period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be cleared.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid).It is 4 bit wide
        Bit 20 decides the direction of shift
        (0:- right shift .1- left shift).*/
    }GPIO_CHANNEL4_CTRL1_ts;

}GPIO_CHANNEL4_CTRL1_tu;



//GPIO_CHANNEL4_CTRL1_EXT
/*Description: Frame Fall trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl1_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL4_CTRL1_EXT_ts;

}GPIO_CHANNEL4_CTRL1_EXT_tu;



//GPIO_CHANNEL4_REPEAT
/*Description: Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t line_mode :1;
        /* Sequence repeat cycle - line based or frame based. Depending upon this field, the next field in this register Channel n repeat count, is interpreted in frames or lines.
        This field is valid only if the channel is configured as a PWM AND the source of the PWM n is programmed as IDP timer AND the value programmed in the next field of this register (PWM n repeat count) is greater than 0 AND repeat until / repeat forever feature is enabled.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL4_REPEAT_ts;

}GPIO_CHANNEL4_REPEAT_tu;



//GPIO_CHANNEL5_CTRL0
/*Description: Rise trigger condition for corresponding PWM or Shift Period for corresponding sequence shifter
Note: When the pixel, line and frame counts of the IDP timer reaches the value programmed, corresponding PWM output will be set to 1. (The frame count should be programmed in "Channel control0 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration :
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM LOW Period : determines the active LOW period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be set to 1.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Shift Period : period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        Field is ignored*/
    }GPIO_CHANNEL5_CTRL0_ts;

}GPIO_CHANNEL5_CTRL0_tu;



//GPIO_CHANNEL5_CTRL0_EXT
/*Description: Frame Rise trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be set to 1. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl0_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL5_CTRL0_EXT_ts;

}GPIO_CHANNEL5_CTRL0_EXT_tu;



//GPIO_CHANNEL5_CTRL1
/*Description: Fall trigger condition for corresponding PWM or Sequence Control for corresponding Sequence Shifter
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The frame count should be programmed in "Channel control1 extension" register.)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        PWM HIGH Period. It determines the active HIGH period of the corresponding PWM. Whenever the source timer counts this value, corresponding PWM output will be cleared.
        If configured as PWM and PWM source is IDP timer :
        Pixel count
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM and PWM source is any one of the four timers (Timer 0/1/2/3) :
        Field is ignored
        If configured as PWM and PWM source is IDP timer :
        Line count
        If corresponding channel is configured as Sequence Shifter :
        
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid).It is 4 bit wide
        Bit 20 decides the direction of shift
        (0:- right shift .1- left shift).*/
    }GPIO_CHANNEL5_CTRL1_ts;

}GPIO_CHANNEL5_CTRL1_tu;



//GPIO_CHANNEL5_CTRL1_EXT
/*Description: Frame Fall trigger condition for corresponding PWM
Note: When the pixel, line and frame counts of the IDP timer reach the values programmed, corresponding PWM output will be cleared. (The line & pixel count registers should be programmed in "Channel control0" register.)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ctrl1_ext;
        /* Frame Count
        This field is valid only if the Channel is configured in PWM mode and if the source of the PWM is the IDP timer.*/
    }GPIO_CHANNEL5_CTRL1_EXT_ts;

}GPIO_CHANNEL5_CTRL1_EXT_tu;



//GPIO_CHANNEL5_REPEAT
/*Description: Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t line_mode :1;
        /* Sequence repeat cycle - line based or frame based. Depending upon this field, the next field in this register Channel n repeat count, is interpreted in frames or lines.
        This field is valid only if the channel is configured as a PWM AND the source of the PWM n is programmed as IDP timer AND the value programmed in the next field of this register (PWM n repeat count) is greater than 0 AND repeat until / repeat forever feature is enabled.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL5_REPEAT_ts;

}GPIO_CHANNEL5_REPEAT_tu;



//GPIO_CHANNEL6_STG_ENABLE
/*Description: Channel x Stage Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t stage0_enable :1;
        /* When a particular stage is disabled, the PWM / Seq. shifter skips that stage and proceeds to the next stage.*/
        uint8_t stage1_enable :1;
        /* When a particular stage is disabled, the PWM / Seq. shifter skips that stage and proceeds to the next stage.*/
        uint8_t stage2_enable :1;
        /* When a particular stage is disabled, the PWM / Seq. shifter skips that stage and proceeds to the next stage.*/
    }GPIO_CHANNEL6_STG_ENABLE_ts;

}GPIO_CHANNEL6_STG_ENABLE_tu;



//GPIO_CHANNEL6_STG0_CTRL0
/*Description: Channel n Stage y Control 0
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM LOW period. It determines the active LOW period of the PWM n. Whenever the source timer counts this value, PWM n output will be set to 1.
        If configured as Sequence Shifter :
        Shift Period : Defines the shift period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM HIGH Period. It determines the active HIGH period of the PWM n. Whenever the source timer counts this value, PWM n output will be cleared.
        If corresponding channel is configured as Sequence Shifter :
        Ignored*/
    }GPIO_CHANNEL6_STG0_CTRL0_ts;

}GPIO_CHANNEL6_STG0_CTRL0_tu;



//GPIO_CHANNEL6_STG0_CTRL1
/*Description: Channel x Stage y Control 1
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        Stop count : Pulse width Stop count for corresponding stage of considered PWM. This field determines the maximum PWM HIGH period in case of increasing pulse width and minimum PWM HIGH period count in case of decreasing pulse width. Once the HIGH period of the PWM reaches this value, the duty cycle remains constant for the remaining repeat sequences of this stage.
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        bit [23:16] : Increment / Decrement count for corresponding stage of considered PWM. This field determines the increment HIGH period count in case of increasing pulse width and decrement HIGH period count in case of decreasing pulse width. For each PWM cycle, the HIGH period of the PWM output increases / decreases by this value till the HIGH period count reaches the stop count value. If constant pulse width (duty cycle) is desired, this field should be programmed with "0".
        bit [24] : Increment / Decrement control for corresponding stage of considered PWM. To increment, value '0' has to be set. In case of Decrement, value '1' has to be set. Depending upon this control bit, the duty cycle of the PWM will increase / decrease by the count value programmed in the "Increment/Decrement" field.
        If corresponding channel is configured as Sequence Shifter :
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid)*/
    }GPIO_CHANNEL6_STG0_CTRL1_ts;

}GPIO_CHANNEL6_STG0_CTRL1_tu;



//GPIO_CHANNEL6_STG0_REPEAT
/*Description: Channel x Stage y Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL6_STG0_REPEAT_ts;

}GPIO_CHANNEL6_STG0_REPEAT_tu;



//GPIO_CHANNEL6_STG1_CTRL0
/*Description: Channel n Stage y Control 0
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM LOW period. It determines the active LOW period of the PWM n. Whenever the source timer counts this value, PWM n output will be set to 1.
        If configured as Sequence Shifter :
        Shift Period : Defines the shift period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM HIGH Period. It determines the active HIGH period of the PWM n. Whenever the source timer counts this value, PWM n output will be cleared.
        If corresponding channel is configured as Sequence Shifter :
        Ignored*/
    }GPIO_CHANNEL6_STG1_CTRL0_ts;

}GPIO_CHANNEL6_STG1_CTRL0_tu;



//GPIO_CHANNEL6_STG1_CTRL1
/*Description: Channel x Stage y Control 1
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        Stop count : Pulse width Stop count for corresponding stage of considered PWM. This field determines the maximum PWM HIGH period in case of increasing pulse width and minimum PWM HIGH period count in case of decreasing pulse width. Once the HIGH period of the PWM reaches this value, the duty cycle remains constant for the remaining repeat sequences of this stage.
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        bit [23:16] : Increment / Decrement count for corresponding stage of considered PWM. This field determines the increment HIGH period count in case of increasing pulse width and decrement HIGH period count in case of decreasing pulse width. For each PWM cycle, the HIGH period of the PWM output increases / decreases by this value till the HIGH period count reaches the stop count value. If constant pulse width (duty cycle) is desired, this field should be programmed with "0".
        bit [24] : Increment / Decrement control for corresponding stage of considered PWM. To increment, value '0' has to be set. In case of Decrement, value '1' has to be set. Depending upon this control bit, the duty cycle of the PWM will increase / decrease by the count value programmed in the "Increment/Decrement" field.
        If corresponding channel is configured as Sequence Shifter :
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid)*/
    }GPIO_CHANNEL6_STG1_CTRL1_ts;

}GPIO_CHANNEL6_STG1_CTRL1_tu;



//GPIO_CHANNEL6_STG1_REPEAT
/*Description: Channel x Stage y Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL6_STG1_REPEAT_ts;

}GPIO_CHANNEL6_STG1_REPEAT_tu;



//GPIO_CHANNEL6_STG2_CTRL0
/*Description: Channel n Stage y Control 0
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM LOW period. It determines the active LOW period of the PWM n. Whenever the source timer counts this value, PWM n output will be set to 1.
        If configured as Sequence Shifter :
        Shift Period : Defines the shift period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM HIGH Period. It determines the active HIGH period of the PWM n. Whenever the source timer counts this value, PWM n output will be cleared.
        If corresponding channel is configured as Sequence Shifter :
        Ignored*/
    }GPIO_CHANNEL6_STG2_CTRL0_ts;

}GPIO_CHANNEL6_STG2_CTRL0_tu;



//GPIO_CHANNEL6_STG2_CTRL1
/*Description: Channel x Stage y Control 1
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        Stop count : Pulse width Stop count for corresponding stage of considered PWM. This field determines the maximum PWM HIGH period in case of increasing pulse width and minimum PWM HIGH period count in case of decreasing pulse width. Once the HIGH period of the PWM reaches this value, the duty cycle remains constant for the remaining repeat sequences of this stage.
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        bit [23:16] : Increment / Decrement count for corresponding stage of considered PWM. This field determines the increment HIGH period count in case of increasing pulse width and decrement HIGH period count in case of decreasing pulse width. For each PWM cycle, the HIGH period of the PWM output increases / decreases by this value till the HIGH period count reaches the stop count value. If constant pulse width (duty cycle) is desired, this field should be programmed with "0".
        bit [24] : Increment / Decrement control for corresponding stage of considered PWM. To increment, value '0' has to be set. In case of Decrement, value '1' has to be set. Depending upon this control bit, the duty cycle of the PWM will increase / decrease by the count value programmed in the "Increment/Decrement" field.
        If corresponding channel is configured as Sequence Shifter :
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid)*/
    }GPIO_CHANNEL6_STG2_CTRL1_ts;

}GPIO_CHANNEL6_STG2_CTRL1_tu;



//GPIO_CHANNEL6_STG2_REPEAT
/*Description: Channel x Stage y Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL6_STG2_REPEAT_ts;

}GPIO_CHANNEL6_STG2_REPEAT_tu;



//GPIO_CHANNEL7_STG_ENABLE
/*Description: Channel x Stage Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t stage0_enable :1;
        /* When a particular stage is disabled, the PWM / Seq. shifter skips that stage and proceeds to the next stage.*/
        uint8_t stage1_enable :1;
        /* When a particular stage is disabled, the PWM / Seq. shifter skips that stage and proceeds to the next stage.*/
        uint8_t stage2_enable :1;
        /* When a particular stage is disabled, the PWM / Seq. shifter skips that stage and proceeds to the next stage.*/
    }GPIO_CHANNEL7_STG_ENABLE_ts;

}GPIO_CHANNEL7_STG_ENABLE_tu;



//GPIO_CHANNEL7_STG0_CTRL0
/*Description: Channel n Stage y Control 0
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM LOW period. It determines the active LOW period of the PWM n. Whenever the source timer counts this value, PWM n output will be set to 1.
        If configured as Sequence Shifter :
        Shift Period : Defines the shift period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM HIGH Period. It determines the active HIGH period of the PWM n. Whenever the source timer counts this value, PWM n output will be cleared.
        If corresponding channel is configured as Sequence Shifter :
        Ignored*/
    }GPIO_CHANNEL7_STG0_CTRL0_ts;

}GPIO_CHANNEL7_STG0_CTRL0_tu;



//GPIO_CHANNEL7_STG0_CTRL1
/*Description: Channel x Stage y Control 1
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        Stop count : Pulse width Stop count for corresponding stage of considered PWM. This field determines the maximum PWM HIGH period in case of increasing pulse width and minimum PWM HIGH period count in case of decreasing pulse width. Once the HIGH period of the PWM reaches this value, the duty cycle remains constant for the remaining repeat sequences of this stage.
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        bit [23:16] : Increment / Decrement count for corresponding stage of considered PWM. This field determines the increment HIGH period count in case of increasing pulse width and decrement HIGH period count in case of decreasing pulse width. For each PWM cycle, the HIGH period of the PWM output increases / decreases by this value till the HIGH period count reaches the stop count value. If constant pulse width (duty cycle) is desired, this field should be programmed with "0".
        bit [24] : Increment / Decrement control for corresponding stage of considered PWM. To increment, value '0' has to be set. In case of Decrement, value '1' has to be set. Depending upon this control bit, the duty cycle of the PWM will increase / decrease by the count value programmed in the "Increment/Decrement" field.
        If corresponding channel is configured as Sequence Shifter :
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid)*/
    }GPIO_CHANNEL7_STG0_CTRL1_ts;

}GPIO_CHANNEL7_STG0_CTRL1_tu;



//GPIO_CHANNEL7_STG0_REPEAT
/*Description: Channel x Stage y Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL7_STG0_REPEAT_ts;

}GPIO_CHANNEL7_STG0_REPEAT_tu;



//GPIO_CHANNEL7_STG1_CTRL0
/*Description: Channel n Stage y Control 0
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM LOW period. It determines the active LOW period of the PWM n. Whenever the source timer counts this value, PWM n output will be set to 1.
        If configured as Sequence Shifter :
        Shift Period : Defines the shift period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM HIGH Period. It determines the active HIGH period of the PWM n. Whenever the source timer counts this value, PWM n output will be cleared.
        If corresponding channel is configured as Sequence Shifter :
        Ignored*/
    }GPIO_CHANNEL7_STG1_CTRL0_ts;

}GPIO_CHANNEL7_STG1_CTRL0_tu;



//GPIO_CHANNEL7_STG1_CTRL1
/*Description: Channel x Stage y Control 1
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        Stop count : Pulse width Stop count for corresponding stage of considered PWM. This field determines the maximum PWM HIGH period in case of increasing pulse width and minimum PWM HIGH period count in case of decreasing pulse width. Once the HIGH period of the PWM reaches this value, the duty cycle remains constant for the remaining repeat sequences of this stage.
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        bit [23:16] : Increment / Decrement count for corresponding stage of considered PWM. This field determines the increment HIGH period count in case of increasing pulse width and decrement HIGH period count in case of decreasing pulse width. For each PWM cycle, the HIGH period of the PWM output increases / decreases by this value till the HIGH period count reaches the stop count value. If constant pulse width (duty cycle) is desired, this field should be programmed with "0".
        bit [24] : Increment / Decrement control for corresponding stage of considered PWM. To increment, value '0' has to be set. In case of Decrement, value '1' has to be set. Depending upon this control bit, the duty cycle of the PWM will increase / decrease by the count value programmed in the "Increment/Decrement" field.
        If corresponding channel is configured as Sequence Shifter :
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid)*/
    }GPIO_CHANNEL7_STG1_CTRL1_ts;

}GPIO_CHANNEL7_STG1_CTRL1_tu;



//GPIO_CHANNEL7_STG1_REPEAT
/*Description: Channel x Stage y Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL7_STG1_REPEAT_ts;

}GPIO_CHANNEL7_STG1_REPEAT_tu;



//GPIO_CHANNEL7_STG2_CTRL0
/*Description: Channel n Stage y Control 0
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM LOW period. It determines the active LOW period of the PWM n. Whenever the source timer counts this value, PWM n output will be set to 1.
        If configured as Sequence Shifter :
        Shift Period : Defines the shift period count between two consecutive shifts. Every time the source timer counts the value programmed in this field, the sequence shifter shifts out a new value to the corresponding channel out.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        PWM HIGH Period. It determines the active HIGH period of the PWM n. Whenever the source timer counts this value, PWM n output will be cleared.
        If corresponding channel is configured as Sequence Shifter :
        Ignored*/
    }GPIO_CHANNEL7_STG2_CTRL0_ts;

}GPIO_CHANNEL7_STG2_CTRL0_tu;



//GPIO_CHANNEL7_STG2_CTRL1
/*Description: Channel x Stage y Control 1
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t lo;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        Stop count : Pulse width Stop count for corresponding stage of considered PWM. This field determines the maximum PWM HIGH period in case of increasing pulse width and minimum PWM HIGH period count in case of decreasing pulse width. Once the HIGH period of the PWM reaches this value, the duty cycle remains constant for the remaining repeat sequences of this stage.
        If configured as Sequence Shifter :
        Sequence Pattern to be shifted out. The number of valid bits in this sequence register is defined by the sequence width field.*/
        uint16_t hi;
        /* This field is interpreted differently depending on the corresponding channel configuration.
        If configured as PWM :
        bit [23:16] : Increment / Decrement count for corresponding stage of considered PWM. This field determines the increment HIGH period count in case of increasing pulse width and decrement HIGH period count in case of decreasing pulse width. For each PWM cycle, the HIGH period of the PWM output increases / decreases by this value till the HIGH period count reaches the stop count value. If constant pulse width (duty cycle) is desired, this field should be programmed with "0".
        bit [24] : Increment / Decrement control for corresponding stage of considered PWM. To increment, value '0' has to be set. In case of Decrement, value '1' has to be set. Depending upon this control bit, the duty cycle of the PWM will increase / decrease by the count value programmed in the "Increment/Decrement" field.
        If corresponding channel is configured as Sequence Shifter :
        Sequence Width : Out of the 16 bits of the sequence register, this field defines the number of valid bits in the sequence. A value of n indicates that n+1 bits in the sequence are valid. Maximum value is 15 (=> 16 bits in the sequence are valid)*/
    }GPIO_CHANNEL7_STG2_CTRL1_ts;

}GPIO_CHANNEL7_STG2_CTRL1_tu;



//GPIO_CHANNEL7_STG2_REPEAT
/*Description: Channel x Stage y Repeat Control Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t repeat;
        /* Repeat count for corresponding Channel. This field is valid irrespective of the Channel configuration (PWM / Sequence shifter) and irrespective of the source of the timer (Timer 0/1/2/3 or IDP timer in case the channel is configured as PWM)
        A value of x, indicates repeat count of x+1.
        255 is a special case, in which the sequence repeats forever (till the channel is stopped).
        Whenever the repeat count is reached or if the repeat until condition is met or if the channel is stopped by writing "1" in the appropriate bit of "Channel Stop" field of Channel Control register, the channel stops the operation and interrupts.
        Specific interpretation will be done depending on corresponding channel configuration :
        For PWM mode, repeat count determines the number of transitions (rise/fall events) in the channel output.
        For Half pulse width shift pairing PWM mode, the repeat count determines the total number of transitions (rise/fall events) of both the outputs of the channel pair.
        For IDP PWM mode, the repeat count determines the number of pulses in the Channel output.
        For Sequence shifter mode, repeat count determines the number of shift operations to be performed. When this value is greater than the valid sequence width, the shifter again starts from the LSB of the sequence and continues to repeat the operation until the total number of shifts equals the value programmed in this field.*/
        uint8_t until :1;
        /* Repeat sequence until external event. The external event is defined in the Event Trigger register.*/
    }GPIO_CHANNEL7_STG2_REPEAT_ts;

}GPIO_CHANNEL7_STG2_REPEAT_tu;



//GPIO_DFV
/*Description: Design for verifcation functionalityr
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* -when it is 1 DFV is enabled.*/
        uint8_t dfv_timer0_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_timer1_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_timer2_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_timer3_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_trig_pulse_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl0_comp_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl1_comp_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl2_comp_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl3_comp_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl4_comp_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl5_comp_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl6_comp_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl7_comp_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl0_strt_aborted_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl1_strt_aborted_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl2_strt_aborted_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl3_strt_aborted_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl4_strt_aborted_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl5_strt_aborted_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
        uint8_t dfv_chnl6_strt_aborted_interrupt_ctrl :1;
        /* - when 1 it is enabled*/
        uint8_t dfv_chnl7_strt_aborted_interrupt_ctrl :1;
        /* -when 1 it is enabled*/
    }GPIO_DFV_ts;

}GPIO_DFV_tu;

typedef struct
{
    GPIO_ENABLE_tu GPIO_ENABLE;
    GPIO_TIMER_CTRL_tu GPIO_TIMER_CTRL;
    GPIO_CHANNEL_START_tu GPIO_CHANNEL_START;
    GPIO_CHANNEL_STOP_tu GPIO_CHANNEL_STOP;
    GPIO_CHANNEL_RESET_tu GPIO_CHANNEL_RESET;
    GPIO_CHANNEL_POLARITY_tu GPIO_CHANNEL_POLARITY;
    GPIO_OUTPUT_CONFIG_tu GPIO_OUTPUT_CONFIG;
    GPIO_CHANNEL_CONFIG_tu GPIO_CHANNEL_CONFIG;
    GPIO_CHANNEL_PAIRING_tu GPIO_CHANNEL_PAIRING;
    GPIO_INTR_DEBUG_tu GPIO_INTR_DEBUG;
    GPIO_CHANNEL_SRC_tu GPIO_CHANNEL_SRC;
    GPIO_INT_SRC_tu GPIO_INT_SRC;
    GPIO_INT0_TRIGGER_tu GPIO_INT0_TRIGGER;
    GPIO_INT0_TRIGGER_EX_tu GPIO_INT0_TRIGGER_EX;
    GPIO_INT1_TRIGGER_tu GPIO_INT1_TRIGGER;
    GPIO_INT1_TRIGGER_EX_tu GPIO_INT1_TRIGGER_EX;
    GPIO_INT2_TRIGGER_tu GPIO_INT2_TRIGGER;
    GPIO_INT2_TRIGGER_EX_tu GPIO_INT2_TRIGGER_EX;
    GPIO_INT3_TRIGGER_tu GPIO_INT3_TRIGGER;
    GPIO_INT3_TRIGGER_EX_tu GPIO_INT3_TRIGGER_EX;
    GPIO_EVENT_TRIGGER_tu GPIO_EVENT_TRIGGER;
    GPIO_TIMER_PRESCALE_tu GPIO_TIMER_PRESCALE;
    GPIO_DEBOUNCE_CTRL_tu GPIO_DEBOUNCE_CTRL;
    GPIO_DEBOUNCE_PERIOD_tu GPIO_DEBOUNCE_PERIOD;
    GPIO_IDP_FRAME_COUNT_tu GPIO_IDP_FRAME_COUNT;
    GPIO_GPI_tu GPIO_GPI;
    GPIO_GPO_tu GPIO_GPO;
    GPIO_GPD_tu GPIO_GPD;
    GPIO_CHANNEL0_CTRL0_tu GPIO_CHANNEL0_CTRL0;
    GPIO_CHANNEL0_CTRL0_EXT_tu GPIO_CHANNEL0_CTRL0_EXT;
    GPIO_CHANNEL0_CTRL1_tu GPIO_CHANNEL0_CTRL1;
    GPIO_CHANNEL0_CTRL1_EXT_tu GPIO_CHANNEL0_CTRL1_EXT;
    GPIO_CHANNEL0_REPEAT_tu GPIO_CHANNEL0_REPEAT;
    GPIO_CHANNEL1_CTRL0_tu GPIO_CHANNEL1_CTRL0;
    GPIO_CHANNEL1_CTRL0_EXT_tu GPIO_CHANNEL1_CTRL0_EXT;
    GPIO_CHANNEL1_CTRL1_tu GPIO_CHANNEL1_CTRL1;
    GPIO_CHANNEL1_CTRL1_EXT_tu GPIO_CHANNEL1_CTRL1_EXT;
    GPIO_CHANNEL1_REPEAT_tu GPIO_CHANNEL1_REPEAT;
    GPIO_CHANNEL2_CTRL0_tu GPIO_CHANNEL2_CTRL0;
    GPIO_CHANNEL2_CTRL0_EXT_tu GPIO_CHANNEL2_CTRL0_EXT;
    GPIO_CHANNEL2_CTRL1_tu GPIO_CHANNEL2_CTRL1;
    GPIO_CHANNEL2_CTRL1_EXT_tu GPIO_CHANNEL2_CTRL1_EXT;
    GPIO_CHANNEL2_REPEAT_tu GPIO_CHANNEL2_REPEAT;
    GPIO_CHANNEL3_CTRL0_tu GPIO_CHANNEL3_CTRL0;
    GPIO_CHANNEL3_CTRL0_EXT_tu GPIO_CHANNEL3_CTRL0_EXT;
    GPIO_CHANNEL3_CTRL1_tu GPIO_CHANNEL3_CTRL1;
    GPIO_CHANNEL3_CTRL1_EXT_tu GPIO_CHANNEL3_CTRL1_EXT;
    GPIO_CHANNEL3_REPEAT_tu GPIO_CHANNEL3_REPEAT;
    GPIO_CHANNEL4_CTRL0_tu GPIO_CHANNEL4_CTRL0;
    GPIO_CHANNEL4_CTRL0_EXT_tu GPIO_CHANNEL4_CTRL0_EXT;
    GPIO_CHANNEL4_CTRL1_tu GPIO_CHANNEL4_CTRL1;
    GPIO_CHANNEL4_CTRL1_EXT_tu GPIO_CHANNEL4_CTRL1_EXT;
    GPIO_CHANNEL4_REPEAT_tu GPIO_CHANNEL4_REPEAT;
    GPIO_CHANNEL5_CTRL0_tu GPIO_CHANNEL5_CTRL0;
    GPIO_CHANNEL5_CTRL0_EXT_tu GPIO_CHANNEL5_CTRL0_EXT;
    GPIO_CHANNEL5_CTRL1_tu GPIO_CHANNEL5_CTRL1;
    GPIO_CHANNEL5_CTRL1_EXT_tu GPIO_CHANNEL5_CTRL1_EXT;
    GPIO_CHANNEL5_REPEAT_tu GPIO_CHANNEL5_REPEAT;
    GPIO_CHANNEL6_STG_ENABLE_tu GPIO_CHANNEL6_STG_ENABLE;
    GPIO_CHANNEL6_STG0_CTRL0_tu GPIO_CHANNEL6_STG0_CTRL0;
    GPIO_CHANNEL6_STG0_CTRL1_tu GPIO_CHANNEL6_STG0_CTRL1;
    GPIO_CHANNEL6_STG0_REPEAT_tu GPIO_CHANNEL6_STG0_REPEAT;
    GPIO_CHANNEL6_STG1_CTRL0_tu GPIO_CHANNEL6_STG1_CTRL0;
    GPIO_CHANNEL6_STG1_CTRL1_tu GPIO_CHANNEL6_STG1_CTRL1;
    GPIO_CHANNEL6_STG1_REPEAT_tu GPIO_CHANNEL6_STG1_REPEAT;
    GPIO_CHANNEL6_STG2_CTRL0_tu GPIO_CHANNEL6_STG2_CTRL0;
    GPIO_CHANNEL6_STG2_CTRL1_tu GPIO_CHANNEL6_STG2_CTRL1;
    GPIO_CHANNEL6_STG2_REPEAT_tu GPIO_CHANNEL6_STG2_REPEAT;
    GPIO_CHANNEL7_STG_ENABLE_tu GPIO_CHANNEL7_STG_ENABLE;
    GPIO_CHANNEL7_STG0_CTRL0_tu GPIO_CHANNEL7_STG0_CTRL0;
    GPIO_CHANNEL7_STG0_CTRL1_tu GPIO_CHANNEL7_STG0_CTRL1;
    GPIO_CHANNEL7_STG0_REPEAT_tu GPIO_CHANNEL7_STG0_REPEAT;
    GPIO_CHANNEL7_STG1_CTRL0_tu GPIO_CHANNEL7_STG1_CTRL0;
    GPIO_CHANNEL7_STG1_CTRL1_tu GPIO_CHANNEL7_STG1_CTRL1;
    GPIO_CHANNEL7_STG1_REPEAT_tu GPIO_CHANNEL7_STG1_REPEAT;
    GPIO_CHANNEL7_STG2_CTRL0_tu GPIO_CHANNEL7_STG2_CTRL0;
    GPIO_CHANNEL7_STG2_CTRL1_tu GPIO_CHANNEL7_STG2_CTRL1;
    GPIO_CHANNEL7_STG2_REPEAT_tu GPIO_CHANNEL7_STG2_REPEAT;
    GPIO_DFV_tu GPIO_DFV;
}GPIO_IP_ts;




//GPIO_ENABLE


#define Get_GPIO_GPIO_ENABLE_gpio_enable() p_GPIO_IP->GPIO_ENABLE.GPIO_ENABLE_ts.gpio_enable
#define Is_GPIO_GPIO_ENABLE_gpio_enable_DISABLE() (p_GPIO_IP->GPIO_ENABLE.GPIO_ENABLE_ts.gpio_enable == gpio_enable_DISABLE)
#define Set_GPIO_GPIO_ENABLE_gpio_enable__DISABLE() (p_GPIO_IP->GPIO_ENABLE.GPIO_ENABLE_ts.gpio_enable = gpio_enable_DISABLE)
#define gpio_enable_DISABLE 0x0    //Disable GPIO
#define Is_GPIO_GPIO_ENABLE_gpio_enable_ENABLE() (p_GPIO_IP->GPIO_ENABLE.GPIO_ENABLE_ts.gpio_enable == gpio_enable_ENABLE)
#define Set_GPIO_GPIO_ENABLE_gpio_enable__ENABLE() (p_GPIO_IP->GPIO_ENABLE.GPIO_ENABLE_ts.gpio_enable = gpio_enable_ENABLE)
#define gpio_enable_ENABLE 0x1    //Enable GPIO


#define Get_GPIO_GPIO_ENABLE_soft_reset() p_GPIO_IP->GPIO_ENABLE.GPIO_ENABLE_ts.soft_reset
#define Is_GPIO_GPIO_ENABLE_soft_reset_DISABLE() (p_GPIO_IP->GPIO_ENABLE.GPIO_ENABLE_ts.soft_reset == soft_reset_DISABLE)
#define Set_GPIO_GPIO_ENABLE_soft_reset__DISABLE() (p_GPIO_IP->GPIO_ENABLE.GPIO_ENABLE_ts.soft_reset = soft_reset_DISABLE)
#define soft_reset_DISABLE 0x0    //Soft Reset
#define Is_GPIO_GPIO_ENABLE_soft_reset_ENABLE() (p_GPIO_IP->GPIO_ENABLE.GPIO_ENABLE_ts.soft_reset == soft_reset_ENABLE)
#define Set_GPIO_GPIO_ENABLE_soft_reset__ENABLE() (p_GPIO_IP->GPIO_ENABLE.GPIO_ENABLE_ts.soft_reset = soft_reset_ENABLE)
#define soft_reset_ENABLE 0x1    //Soft Reset
#define Set_GPIO_GPIO_ENABLE(gpio_enable,soft_reset) (p_GPIO_IP->GPIO_ENABLE.word = (uint32_t)gpio_enable<<0 | (uint32_t)soft_reset<<4)
#define Get_GPIO_GPIO_ENABLE() p_GPIO_IP->GPIO_ENABLE.word
#define Set_GPIO_GPIO_ENABLE_word(x) (p_GPIO_IP->GPIO_ENABLE.word = x)


//GPIO_TIMER_CTRL


#define Get_GPIO_GPIO_TIMER_CTRL_timer0_enable() p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer0_enable
#define Is_GPIO_GPIO_TIMER_CTRL_timer0_enable_DISABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer0_enable == timer0_enable_DISABLE)
#define Set_GPIO_GPIO_TIMER_CTRL_timer0_enable__DISABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer0_enable = timer0_enable_DISABLE)
#define timer0_enable_DISABLE 0x0    //Disable corresponding timer
#define Is_GPIO_GPIO_TIMER_CTRL_timer0_enable_ENABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer0_enable == timer0_enable_ENABLE)
#define Set_GPIO_GPIO_TIMER_CTRL_timer0_enable__ENABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer0_enable = timer0_enable_ENABLE)
#define timer0_enable_ENABLE 0x1    //Enable corresponding timer


#define Get_GPIO_GPIO_TIMER_CTRL_timer1_enable() p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer1_enable
#define Is_GPIO_GPIO_TIMER_CTRL_timer1_enable_DISABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer1_enable == timer1_enable_DISABLE)
#define Set_GPIO_GPIO_TIMER_CTRL_timer1_enable__DISABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer1_enable = timer1_enable_DISABLE)
#define timer1_enable_DISABLE 0x0    //Disable corresponding timer
#define Is_GPIO_GPIO_TIMER_CTRL_timer1_enable_ENABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer1_enable == timer1_enable_ENABLE)
#define Set_GPIO_GPIO_TIMER_CTRL_timer1_enable__ENABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer1_enable = timer1_enable_ENABLE)
#define timer1_enable_ENABLE 0x1    //Enable corresponding timer


#define Get_GPIO_GPIO_TIMER_CTRL_timer2_enable() p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer2_enable
#define Is_GPIO_GPIO_TIMER_CTRL_timer2_enable_DISABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer2_enable == timer2_enable_DISABLE)
#define Set_GPIO_GPIO_TIMER_CTRL_timer2_enable__DISABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer2_enable = timer2_enable_DISABLE)
#define timer2_enable_DISABLE 0x0    //Disable corresponding timer
#define Is_GPIO_GPIO_TIMER_CTRL_timer2_enable_ENABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer2_enable == timer2_enable_ENABLE)
#define Set_GPIO_GPIO_TIMER_CTRL_timer2_enable__ENABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer2_enable = timer2_enable_ENABLE)
#define timer2_enable_ENABLE 0x1    //Enable corresponding timer


#define Get_GPIO_GPIO_TIMER_CTRL_timer3_enable() p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer3_enable
#define Is_GPIO_GPIO_TIMER_CTRL_timer3_enable_DISABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer3_enable == timer3_enable_DISABLE)
#define Set_GPIO_GPIO_TIMER_CTRL_timer3_enable__DISABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer3_enable = timer3_enable_DISABLE)
#define timer3_enable_DISABLE 0x0    //Disable corresponding timer
#define Is_GPIO_GPIO_TIMER_CTRL_timer3_enable_ENABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer3_enable == timer3_enable_ENABLE)
#define Set_GPIO_GPIO_TIMER_CTRL_timer3_enable__ENABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.timer3_enable = timer3_enable_ENABLE)
#define timer3_enable_ENABLE 0x1    //Enable corresponding timer


#define Get_GPIO_GPIO_TIMER_CTRL_idptimer_enable() p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.idptimer_enable
#define Is_GPIO_GPIO_TIMER_CTRL_idptimer_enable_DISABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.idptimer_enable == idptimer_enable_DISABLE)
#define Set_GPIO_GPIO_TIMER_CTRL_idptimer_enable__DISABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.idptimer_enable = idptimer_enable_DISABLE)
#define idptimer_enable_DISABLE 0x0    //Disable IDP timer
#define Is_GPIO_GPIO_TIMER_CTRL_idptimer_enable_ENABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.idptimer_enable == idptimer_enable_ENABLE)
#define Set_GPIO_GPIO_TIMER_CTRL_idptimer_enable__ENABLE() (p_GPIO_IP->GPIO_TIMER_CTRL.GPIO_TIMER_CTRL_ts.idptimer_enable = idptimer_enable_ENABLE)
#define idptimer_enable_ENABLE 0x1    //Enable IDP timer
#define Set_GPIO_GPIO_TIMER_CTRL(timer0_enable,timer1_enable,timer2_enable,timer3_enable,idptimer_enable) (p_GPIO_IP->GPIO_TIMER_CTRL.word = (uint32_t)timer0_enable<<0 | (uint32_t)timer1_enable<<1 | (uint32_t)timer2_enable<<2 | (uint32_t)timer3_enable<<3 | (uint32_t)idptimer_enable<<4)
#define Get_GPIO_GPIO_TIMER_CTRL() p_GPIO_IP->GPIO_TIMER_CTRL.word
#define Set_GPIO_GPIO_TIMER_CTRL_word(x) (p_GPIO_IP->GPIO_TIMER_CTRL.word = x)


//GPIO_CHANNEL_START


#define Get_GPIO_GPIO_CHANNEL_START_channel0_start() p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel0_start
#define Is_GPIO_GPIO_CHANNEL_START_channel0_start_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel0_start == channel0_start_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_START_channel0_start__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel0_start = channel0_start_NO_EFFECT)
#define channel0_start_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_START_channel0_start_CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel0_start == channel0_start_CHANNEL_START)
#define Set_GPIO_GPIO_CHANNEL_START_channel0_start__CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel0_start = channel0_start_CHANNEL_START)
#define channel0_start_CHANNEL_START 0x1    //Start the channel sequence. Depending upon the source of the channel, the PWM / Sequence shifter will start operation


#define Get_GPIO_GPIO_CHANNEL_START_channel1_start() p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel1_start
#define Is_GPIO_GPIO_CHANNEL_START_channel1_start_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel1_start == channel1_start_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_START_channel1_start__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel1_start = channel1_start_NO_EFFECT)
#define channel1_start_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_START_channel1_start_CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel1_start == channel1_start_CHANNEL_START)
#define Set_GPIO_GPIO_CHANNEL_START_channel1_start__CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel1_start = channel1_start_CHANNEL_START)
#define channel1_start_CHANNEL_START 0x1    //Start the channel sequence. Depending upon the source of the channel, the PWM / Sequence shifter will start operation


#define Get_GPIO_GPIO_CHANNEL_START_channel2_start() p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel2_start
#define Is_GPIO_GPIO_CHANNEL_START_channel2_start_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel2_start == channel2_start_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_START_channel2_start__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel2_start = channel2_start_NO_EFFECT)
#define channel2_start_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_START_channel2_start_CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel2_start == channel2_start_CHANNEL_START)
#define Set_GPIO_GPIO_CHANNEL_START_channel2_start__CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel2_start = channel2_start_CHANNEL_START)
#define channel2_start_CHANNEL_START 0x1    //Start the channel sequence. Depending upon the source of the channel, the PWM / Sequence shifter will start operation


#define Get_GPIO_GPIO_CHANNEL_START_channel3_start() p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel3_start
#define Is_GPIO_GPIO_CHANNEL_START_channel3_start_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel3_start == channel3_start_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_START_channel3_start__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel3_start = channel3_start_NO_EFFECT)
#define channel3_start_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_START_channel3_start_CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel3_start == channel3_start_CHANNEL_START)
#define Set_GPIO_GPIO_CHANNEL_START_channel3_start__CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel3_start = channel3_start_CHANNEL_START)
#define channel3_start_CHANNEL_START 0x1    //Start the channel sequence. Depending upon the source of the channel, the PWM / Sequence shifter will start operation


#define Get_GPIO_GPIO_CHANNEL_START_channel4_start() p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel4_start
#define Is_GPIO_GPIO_CHANNEL_START_channel4_start_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel4_start == channel4_start_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_START_channel4_start__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel4_start = channel4_start_NO_EFFECT)
#define channel4_start_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_START_channel4_start_CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel4_start == channel4_start_CHANNEL_START)
#define Set_GPIO_GPIO_CHANNEL_START_channel4_start__CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel4_start = channel4_start_CHANNEL_START)
#define channel4_start_CHANNEL_START 0x1    //Start the channel sequence. Depending upon the source of the channel, the PWM / Sequence shifter will start operation


#define Get_GPIO_GPIO_CHANNEL_START_channel5_start() p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel5_start
#define Is_GPIO_GPIO_CHANNEL_START_channel5_start_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel5_start == channel5_start_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_START_channel5_start__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel5_start = channel5_start_NO_EFFECT)
#define channel5_start_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_START_channel5_start_CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel5_start == channel5_start_CHANNEL_START)
#define Set_GPIO_GPIO_CHANNEL_START_channel5_start__CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel5_start = channel5_start_CHANNEL_START)
#define channel5_start_CHANNEL_START 0x1    //Start the channel sequence. Depending upon the source of the channel, the PWM / Sequence shifter will start operation


#define Get_GPIO_GPIO_CHANNEL_START_channel6_start() p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel6_start
#define Is_GPIO_GPIO_CHANNEL_START_channel6_start_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel6_start == channel6_start_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_START_channel6_start__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel6_start = channel6_start_NO_EFFECT)
#define channel6_start_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_START_channel6_start_CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel6_start == channel6_start_CHANNEL_START)
#define Set_GPIO_GPIO_CHANNEL_START_channel6_start__CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel6_start = channel6_start_CHANNEL_START)
#define channel6_start_CHANNEL_START 0x1    //Start the channel sequence. Depending upon the source of the channel, the PWM / Sequence shifter will start operation


#define Get_GPIO_GPIO_CHANNEL_START_channel7_start() p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel7_start
#define Is_GPIO_GPIO_CHANNEL_START_channel7_start_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel7_start == channel7_start_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_START_channel7_start__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel7_start = channel7_start_NO_EFFECT)
#define channel7_start_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_START_channel7_start_CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel7_start == channel7_start_CHANNEL_START)
#define Set_GPIO_GPIO_CHANNEL_START_channel7_start__CHANNEL_START() (p_GPIO_IP->GPIO_CHANNEL_START.GPIO_CHANNEL_START_ts.channel7_start = channel7_start_CHANNEL_START)
#define channel7_start_CHANNEL_START 0x1    //Start the channel sequence. Depending upon the source of the channel, the PWM / Sequence shifter will start operation
#define Set_GPIO_GPIO_CHANNEL_START(channel0_start,channel1_start,channel2_start,channel3_start,channel4_start,channel5_start,channel6_start,channel7_start) (p_GPIO_IP->GPIO_CHANNEL_START.word = (uint32_t)channel0_start<<0 | (uint32_t)channel1_start<<1 | (uint32_t)channel2_start<<2 | (uint32_t)channel3_start<<3 | (uint32_t)channel4_start<<4 | (uint32_t)channel5_start<<5 | (uint32_t)channel6_start<<6 | (uint32_t)channel7_start<<7)
#define Get_GPIO_GPIO_CHANNEL_START() p_GPIO_IP->GPIO_CHANNEL_START.word
#define Set_GPIO_GPIO_CHANNEL_START_word(x) (p_GPIO_IP->GPIO_CHANNEL_START.word = x)


//GPIO_CHANNEL_STOP


#define Get_GPIO_GPIO_CHANNEL_STOP_channel0_stop() p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel0_stop
#define Is_GPIO_GPIO_CHANNEL_STOP_channel0_stop_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel0_stop == channel0_stop_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel0_stop__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel0_stop = channel0_stop_NO_EFFECT)
#define channel0_stop_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_STOP_channel0_stop_CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel0_stop == channel0_stop_CHANNEL_STOP)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel0_stop__CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel0_stop = channel0_stop_CHANNEL_STOP)
#define channel0_stop_CHANNEL_STOP 0x1    //Stop the channel operation. Depending upon the source of the channel, the PWM / Sequence shifter will stop the sequence. The channel output will continue to remain in its output state


#define Get_GPIO_GPIO_CHANNEL_STOP_channel1_stop() p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel1_stop
#define Is_GPIO_GPIO_CHANNEL_STOP_channel1_stop_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel1_stop == channel1_stop_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel1_stop__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel1_stop = channel1_stop_NO_EFFECT)
#define channel1_stop_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_STOP_channel1_stop_CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel1_stop == channel1_stop_CHANNEL_STOP)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel1_stop__CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel1_stop = channel1_stop_CHANNEL_STOP)
#define channel1_stop_CHANNEL_STOP 0x1    //Stop the channel operation. Depending upon the source of the channel, the PWM / Sequence shifter will stop the sequence. The channel output will continue to remain in its output state


#define Get_GPIO_GPIO_CHANNEL_STOP_channel2_stop() p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel2_stop
#define Is_GPIO_GPIO_CHANNEL_STOP_channel2_stop_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel2_stop == channel2_stop_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel2_stop__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel2_stop = channel2_stop_NO_EFFECT)
#define channel2_stop_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_STOP_channel2_stop_CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel2_stop == channel2_stop_CHANNEL_STOP)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel2_stop__CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel2_stop = channel2_stop_CHANNEL_STOP)
#define channel2_stop_CHANNEL_STOP 0x1    //Stop the channel operation. Depending upon the source of the channel, the PWM / Sequence shifter will stop the sequence. The channel output will continue to remain in its output state


#define Get_GPIO_GPIO_CHANNEL_STOP_channel3_stop() p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel3_stop
#define Is_GPIO_GPIO_CHANNEL_STOP_channel3_stop_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel3_stop == channel3_stop_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel3_stop__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel3_stop = channel3_stop_NO_EFFECT)
#define channel3_stop_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_STOP_channel3_stop_CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel3_stop == channel3_stop_CHANNEL_STOP)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel3_stop__CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel3_stop = channel3_stop_CHANNEL_STOP)
#define channel3_stop_CHANNEL_STOP 0x1    //Stop the channel operation. Depending upon the source of the channel, the PWM / Sequence shifter will stop the sequence. The channel output will continue to remain in its output state


#define Get_GPIO_GPIO_CHANNEL_STOP_channel4_stop() p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel4_stop
#define Is_GPIO_GPIO_CHANNEL_STOP_channel4_stop_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel4_stop == channel4_stop_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel4_stop__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel4_stop = channel4_stop_NO_EFFECT)
#define channel4_stop_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_STOP_channel4_stop_CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel4_stop == channel4_stop_CHANNEL_STOP)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel4_stop__CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel4_stop = channel4_stop_CHANNEL_STOP)
#define channel4_stop_CHANNEL_STOP 0x1    //Stop the channel operation. Depending upon the source of the channel, the PWM / Sequence shifter will stop the sequence. The channel output will continue to remain in its output state


#define Get_GPIO_GPIO_CHANNEL_STOP_channel5_stop() p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel5_stop
#define Is_GPIO_GPIO_CHANNEL_STOP_channel5_stop_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel5_stop == channel5_stop_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel5_stop__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel5_stop = channel5_stop_NO_EFFECT)
#define channel5_stop_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_STOP_channel5_stop_CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel5_stop == channel5_stop_CHANNEL_STOP)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel5_stop__CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel5_stop = channel5_stop_CHANNEL_STOP)
#define channel5_stop_CHANNEL_STOP 0x1    //Stop the channel operation. Depending upon the source of the channel, the PWM / Sequence shifter will stop the sequence. The channel output will continue to remain in its output state


#define Get_GPIO_GPIO_CHANNEL_STOP_channel6_stop() p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel6_stop
#define Is_GPIO_GPIO_CHANNEL_STOP_channel6_stop_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel6_stop == channel6_stop_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel6_stop__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel6_stop = channel6_stop_NO_EFFECT)
#define channel6_stop_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_STOP_channel6_stop_CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel6_stop == channel6_stop_CHANNEL_STOP)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel6_stop__CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel6_stop = channel6_stop_CHANNEL_STOP)
#define channel6_stop_CHANNEL_STOP 0x1    //Stop the channel operation. Depending upon the source of the channel, the PWM / Sequence shifter will stop the sequence. The channel output will continue to remain in its output state


#define Get_GPIO_GPIO_CHANNEL_STOP_channel7_stop() p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel7_stop
#define Is_GPIO_GPIO_CHANNEL_STOP_channel7_stop_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel7_stop == channel7_stop_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel7_stop__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel7_stop = channel7_stop_NO_EFFECT)
#define channel7_stop_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_STOP_channel7_stop_CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel7_stop == channel7_stop_CHANNEL_STOP)
#define Set_GPIO_GPIO_CHANNEL_STOP_channel7_stop__CHANNEL_STOP() (p_GPIO_IP->GPIO_CHANNEL_STOP.GPIO_CHANNEL_STOP_ts.channel7_stop = channel7_stop_CHANNEL_STOP)
#define channel7_stop_CHANNEL_STOP 0x1    //Stop the channel operation. Depending upon the source of the channel, the PWM / Sequence shifter will stop the sequence. The channel output will continue to remain in its output state
#define Set_GPIO_GPIO_CHANNEL_STOP(channel0_stop,channel1_stop,channel2_stop,channel3_stop,channel4_stop,channel5_stop,channel6_stop,channel7_stop) (p_GPIO_IP->GPIO_CHANNEL_STOP.word = (uint32_t)channel0_stop<<0 | (uint32_t)channel1_stop<<1 | (uint32_t)channel2_stop<<2 | (uint32_t)channel3_stop<<3 | (uint32_t)channel4_stop<<4 | (uint32_t)channel5_stop<<5 | (uint32_t)channel6_stop<<6 | (uint32_t)channel7_stop<<7)
#define Get_GPIO_GPIO_CHANNEL_STOP() p_GPIO_IP->GPIO_CHANNEL_STOP.word
#define Set_GPIO_GPIO_CHANNEL_STOP_word(x) (p_GPIO_IP->GPIO_CHANNEL_STOP.word = x)


//GPIO_CHANNEL_RESET


#define Get_GPIO_GPIO_CHANNEL_RESET_channel0_reset() p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel0_reset
#define Is_GPIO_GPIO_CHANNEL_RESET_channel0_reset_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel0_reset == channel0_reset_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel0_reset__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel0_reset = channel0_reset_NO_EFFECT)
#define channel0_reset_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_RESET_channel0_reset_CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel0_reset == channel0_reset_CHANNEL_RESET)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel0_reset__CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel0_reset = channel0_reset_CHANNEL_RESET)
#define channel0_reset_CHANNEL_RESET 0x1    //Reset the channel operation. Depending upon the source of the channel, the PWM, Sequence shifter will abort the sequence and the channel output will return to its reset state.


#define Get_GPIO_GPIO_CHANNEL_RESET_channel1_reset() p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel1_reset
#define Is_GPIO_GPIO_CHANNEL_RESET_channel1_reset_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel1_reset == channel1_reset_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel1_reset__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel1_reset = channel1_reset_NO_EFFECT)
#define channel1_reset_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_RESET_channel1_reset_CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel1_reset == channel1_reset_CHANNEL_RESET)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel1_reset__CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel1_reset = channel1_reset_CHANNEL_RESET)
#define channel1_reset_CHANNEL_RESET 0x1    //Reset the channel operation. Depending upon the source of the channel, the PWM, Sequence shifter will abort the sequence and the channel output will return to its reset state.


#define Get_GPIO_GPIO_CHANNEL_RESET_channel2_reset() p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel2_reset
#define Is_GPIO_GPIO_CHANNEL_RESET_channel2_reset_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel2_reset == channel2_reset_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel2_reset__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel2_reset = channel2_reset_NO_EFFECT)
#define channel2_reset_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_RESET_channel2_reset_CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel2_reset == channel2_reset_CHANNEL_RESET)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel2_reset__CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel2_reset = channel2_reset_CHANNEL_RESET)
#define channel2_reset_CHANNEL_RESET 0x1    //Reset the channel operation. Depending upon the source of the channel, the PWM, Sequence shifter will abort the sequence and the channel output will return to its reset state.


#define Get_GPIO_GPIO_CHANNEL_RESET_channel3_reset() p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel3_reset
#define Is_GPIO_GPIO_CHANNEL_RESET_channel3_reset_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel3_reset == channel3_reset_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel3_reset__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel3_reset = channel3_reset_NO_EFFECT)
#define channel3_reset_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_RESET_channel3_reset_CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel3_reset == channel3_reset_CHANNEL_RESET)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel3_reset__CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel3_reset = channel3_reset_CHANNEL_RESET)
#define channel3_reset_CHANNEL_RESET 0x1    //Reset the channel operation. Depending upon the source of the channel, the PWM, Sequence shifter will abort the sequence and the channel output will return to its reset state.


#define Get_GPIO_GPIO_CHANNEL_RESET_channel4_reset() p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel4_reset
#define Is_GPIO_GPIO_CHANNEL_RESET_channel4_reset_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel4_reset == channel4_reset_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel4_reset__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel4_reset = channel4_reset_NO_EFFECT)
#define channel4_reset_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_RESET_channel4_reset_CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel4_reset == channel4_reset_CHANNEL_RESET)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel4_reset__CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel4_reset = channel4_reset_CHANNEL_RESET)
#define channel4_reset_CHANNEL_RESET 0x1    //Reset the channel operation. Depending upon the source of the channel, the PWM, Sequence shifter will abort the sequence and the channel output will return to its reset state.


#define Get_GPIO_GPIO_CHANNEL_RESET_channel5_reset() p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel5_reset
#define Is_GPIO_GPIO_CHANNEL_RESET_channel5_reset_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel5_reset == channel5_reset_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel5_reset__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel5_reset = channel5_reset_NO_EFFECT)
#define channel5_reset_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_RESET_channel5_reset_CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel5_reset == channel5_reset_CHANNEL_RESET)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel5_reset__CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel5_reset = channel5_reset_CHANNEL_RESET)
#define channel5_reset_CHANNEL_RESET 0x1    //Reset the channel operation. Depending upon the source of the channel, the PWM, Sequence shifter will abort the sequence and the channel output will return to its reset state.


#define Get_GPIO_GPIO_CHANNEL_RESET_channel6_reset() p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel6_reset
#define Is_GPIO_GPIO_CHANNEL_RESET_channel6_reset_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel6_reset == channel6_reset_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel6_reset__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel6_reset = channel6_reset_NO_EFFECT)
#define channel6_reset_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_RESET_channel6_reset_CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel6_reset == channel6_reset_CHANNEL_RESET)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel6_reset__CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel6_reset = channel6_reset_CHANNEL_RESET)
#define channel6_reset_CHANNEL_RESET 0x1    //Reset the channel operation. Depending upon the source of the channel, the PWM, Sequence shifter will abort the sequence and the channel output will return to its reset state.


#define Get_GPIO_GPIO_CHANNEL_RESET_channel7_reset() p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel7_reset
#define Is_GPIO_GPIO_CHANNEL_RESET_channel7_reset_NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel7_reset == channel7_reset_NO_EFFECT)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel7_reset__NO_EFFECT() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel7_reset = channel7_reset_NO_EFFECT)
#define channel7_reset_NO_EFFECT 0x0    //Ignored
#define Is_GPIO_GPIO_CHANNEL_RESET_channel7_reset_CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel7_reset == channel7_reset_CHANNEL_RESET)
#define Set_GPIO_GPIO_CHANNEL_RESET_channel7_reset__CHANNEL_RESET() (p_GPIO_IP->GPIO_CHANNEL_RESET.GPIO_CHANNEL_RESET_ts.channel7_reset = channel7_reset_CHANNEL_RESET)
#define channel7_reset_CHANNEL_RESET 0x1    //Reset the channel operation. Depending upon the source of the channel, the PWM, Sequence shifter will abort the sequence and the channel output will return to its reset state.
#define Set_GPIO_GPIO_CHANNEL_RESET(channel0_reset,channel1_reset,channel2_reset,channel3_reset,channel4_reset,channel5_reset,channel6_reset,channel7_reset) (p_GPIO_IP->GPIO_CHANNEL_RESET.word = (uint32_t)channel0_reset<<0 | (uint32_t)channel1_reset<<1 | (uint32_t)channel2_reset<<2 | (uint32_t)channel3_reset<<3 | (uint32_t)channel4_reset<<4 | (uint32_t)channel5_reset<<5 | (uint32_t)channel6_reset<<6 | (uint32_t)channel7_reset<<7)
#define Get_GPIO_GPIO_CHANNEL_RESET() p_GPIO_IP->GPIO_CHANNEL_RESET.word
#define Set_GPIO_GPIO_CHANNEL_RESET_word(x) (p_GPIO_IP->GPIO_CHANNEL_RESET.word = x)


//GPIO_CHANNEL_POLARITY


#define Get_GPIO_GPIO_CHANNEL_POLARITY_channel0_polar() p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel0_polar
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel0_polar_ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel0_polar == channel0_polar_ACTIVE_HIGH)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel0_polar__ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel0_polar = channel0_polar_ACTIVE_HIGH)
#define channel0_polar_ACTIVE_HIGH 0x0    //Active high
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel0_polar_ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel0_polar == channel0_polar_ACTIVE_LOW)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel0_polar__ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel0_polar = channel0_polar_ACTIVE_LOW)
#define channel0_polar_ACTIVE_LOW 0x1    //Channel output will be inverted


#define Get_GPIO_GPIO_CHANNEL_POLARITY_channel1_polar() p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel1_polar
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel1_polar_ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel1_polar == channel1_polar_ACTIVE_HIGH)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel1_polar__ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel1_polar = channel1_polar_ACTIVE_HIGH)
#define channel1_polar_ACTIVE_HIGH 0x0    //Active high
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel1_polar_ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel1_polar == channel1_polar_ACTIVE_LOW)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel1_polar__ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel1_polar = channel1_polar_ACTIVE_LOW)
#define channel1_polar_ACTIVE_LOW 0x1    //Channel output will be inverted


#define Get_GPIO_GPIO_CHANNEL_POLARITY_channel2_polar() p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel2_polar
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel2_polar_ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel2_polar == channel2_polar_ACTIVE_HIGH)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel2_polar__ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel2_polar = channel2_polar_ACTIVE_HIGH)
#define channel2_polar_ACTIVE_HIGH 0x0    //Active high
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel2_polar_ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel2_polar == channel2_polar_ACTIVE_LOW)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel2_polar__ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel2_polar = channel2_polar_ACTIVE_LOW)
#define channel2_polar_ACTIVE_LOW 0x1    //Channel output will be inverted


#define Get_GPIO_GPIO_CHANNEL_POLARITY_channel3_polar() p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel3_polar
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel3_polar_ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel3_polar == channel3_polar_ACTIVE_HIGH)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel3_polar__ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel3_polar = channel3_polar_ACTIVE_HIGH)
#define channel3_polar_ACTIVE_HIGH 0x0    //Active high
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel3_polar_ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel3_polar == channel3_polar_ACTIVE_LOW)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel3_polar__ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel3_polar = channel3_polar_ACTIVE_LOW)
#define channel3_polar_ACTIVE_LOW 0x1    //Channel output will be inverted


#define Get_GPIO_GPIO_CHANNEL_POLARITY_channel4_polar() p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel4_polar
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel4_polar_ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel4_polar == channel4_polar_ACTIVE_HIGH)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel4_polar__ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel4_polar = channel4_polar_ACTIVE_HIGH)
#define channel4_polar_ACTIVE_HIGH 0x0    //Active high
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel4_polar_ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel4_polar == channel4_polar_ACTIVE_LOW)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel4_polar__ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel4_polar = channel4_polar_ACTIVE_LOW)
#define channel4_polar_ACTIVE_LOW 0x1    //Channel output will be inverted


#define Get_GPIO_GPIO_CHANNEL_POLARITY_channel5_polar() p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel5_polar
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel5_polar_ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel5_polar == channel5_polar_ACTIVE_HIGH)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel5_polar__ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel5_polar = channel5_polar_ACTIVE_HIGH)
#define channel5_polar_ACTIVE_HIGH 0x0    //Active high
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel5_polar_ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel5_polar == channel5_polar_ACTIVE_LOW)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel5_polar__ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel5_polar = channel5_polar_ACTIVE_LOW)
#define channel5_polar_ACTIVE_LOW 0x1    //Channel output will be inverted


#define Get_GPIO_GPIO_CHANNEL_POLARITY_channel6_polar() p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel6_polar
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel6_polar_ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel6_polar == channel6_polar_ACTIVE_HIGH)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel6_polar__ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel6_polar = channel6_polar_ACTIVE_HIGH)
#define channel6_polar_ACTIVE_HIGH 0x0    //Active high
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel6_polar_ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel6_polar == channel6_polar_ACTIVE_LOW)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel6_polar__ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel6_polar = channel6_polar_ACTIVE_LOW)
#define channel6_polar_ACTIVE_LOW 0x1    //Channel output will be inverted


#define Get_GPIO_GPIO_CHANNEL_POLARITY_channel7_polar() p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel7_polar
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel7_polar_ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel7_polar == channel7_polar_ACTIVE_HIGH)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel7_polar__ACTIVE_HIGH() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel7_polar = channel7_polar_ACTIVE_HIGH)
#define channel7_polar_ACTIVE_HIGH 0x0    //Active high
#define Is_GPIO_GPIO_CHANNEL_POLARITY_channel7_polar_ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel7_polar == channel7_polar_ACTIVE_LOW)
#define Set_GPIO_GPIO_CHANNEL_POLARITY_channel7_polar__ACTIVE_LOW() (p_GPIO_IP->GPIO_CHANNEL_POLARITY.GPIO_CHANNEL_POLARITY_ts.channel7_polar = channel7_polar_ACTIVE_LOW)
#define channel7_polar_ACTIVE_LOW 0x1    //Channel output will be inverted
#define Set_GPIO_GPIO_CHANNEL_POLARITY(channel0_polar,channel1_polar,channel2_polar,channel3_polar,channel4_polar,channel5_polar,channel6_polar,channel7_polar) (p_GPIO_IP->GPIO_CHANNEL_POLARITY.word = (uint32_t)channel0_polar<<0 | (uint32_t)channel1_polar<<1 | (uint32_t)channel2_polar<<2 | (uint32_t)channel3_polar<<3 | (uint32_t)channel4_polar<<4 | (uint32_t)channel5_polar<<5 | (uint32_t)channel6_polar<<6 | (uint32_t)channel7_polar<<7)
#define Get_GPIO_GPIO_CHANNEL_POLARITY() p_GPIO_IP->GPIO_CHANNEL_POLARITY.word
#define Set_GPIO_GPIO_CHANNEL_POLARITY_word(x) (p_GPIO_IP->GPIO_CHANNEL_POLARITY.word = x)


//GPIO_OUTPUT_CONFIG


#define Get_GPIO_GPIO_OUTPUT_CONFIG_gpo0_config() p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo0_config
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo0_config_GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo0_config == gpo0_config_GPO_CHANNEL)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo0_config__GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo0_config = gpo0_config_GPO_CHANNEL)
#define gpo0_config_GPO_CHANNEL 0x0    //Output will be driven with the corresponding channel (PWM / Sequence shifter) output
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo0_config_GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo0_config == gpo0_config_GPO_REGISTER)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo0_config__GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo0_config = gpo0_config_GPO_REGISTER)
#define gpo0_config_GPO_REGISTER 0x1    //Output will be driven with the value programmed in the corresponding GP output register bit.


#define Get_GPIO_GPIO_OUTPUT_CONFIG_gpo1_config() p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo1_config
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo1_config_GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo1_config == gpo1_config_GPO_CHANNEL)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo1_config__GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo1_config = gpo1_config_GPO_CHANNEL)
#define gpo1_config_GPO_CHANNEL 0x0    //Output will be driven with the corresponding channel (PWM / Sequence shifter) output
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo1_config_GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo1_config == gpo1_config_GPO_REGISTER)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo1_config__GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo1_config = gpo1_config_GPO_REGISTER)
#define gpo1_config_GPO_REGISTER 0x1    //Output will be driven with the value programmed in the corresponding GP output register bit.


#define Get_GPIO_GPIO_OUTPUT_CONFIG_gpo2_config() p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo2_config
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo2_config_GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo2_config == gpo2_config_GPO_CHANNEL)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo2_config__GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo2_config = gpo2_config_GPO_CHANNEL)
#define gpo2_config_GPO_CHANNEL 0x0    //Output will be driven with the corresponding channel (PWM / Sequence shifter) output
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo2_config_GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo2_config == gpo2_config_GPO_REGISTER)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo2_config__GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo2_config = gpo2_config_GPO_REGISTER)
#define gpo2_config_GPO_REGISTER 0x1    //Output will be driven with the value programmed in the corresponding GP output register bit.


#define Get_GPIO_GPIO_OUTPUT_CONFIG_gpo3_config() p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo3_config
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo3_config_GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo3_config == gpo3_config_GPO_CHANNEL)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo3_config__GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo3_config = gpo3_config_GPO_CHANNEL)
#define gpo3_config_GPO_CHANNEL 0x0    //Output will be driven with the corresponding channel (PWM / Sequence shifter) output
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo3_config_GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo3_config == gpo3_config_GPO_REGISTER)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo3_config__GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo3_config = gpo3_config_GPO_REGISTER)
#define gpo3_config_GPO_REGISTER 0x1    //Output will be driven with the value programmed in the corresponding GP output register bit.


#define Get_GPIO_GPIO_OUTPUT_CONFIG_gpo4_config() p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo4_config
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo4_config_GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo4_config == gpo4_config_GPO_CHANNEL)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo4_config__GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo4_config = gpo4_config_GPO_CHANNEL)
#define gpo4_config_GPO_CHANNEL 0x0    //Output will be driven with the corresponding channel (PWM / Sequence shifter) output
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo4_config_GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo4_config == gpo4_config_GPO_REGISTER)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo4_config__GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo4_config = gpo4_config_GPO_REGISTER)
#define gpo4_config_GPO_REGISTER 0x1    //Output will be driven with the value programmed in the corresponding GP output register bit.


#define Get_GPIO_GPIO_OUTPUT_CONFIG_gpo5_config() p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo5_config
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo5_config_GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo5_config == gpo5_config_GPO_CHANNEL)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo5_config__GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo5_config = gpo5_config_GPO_CHANNEL)
#define gpo5_config_GPO_CHANNEL 0x0    //Output will be driven with the corresponding channel (PWM / Sequence shifter) output
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo5_config_GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo5_config == gpo5_config_GPO_REGISTER)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo5_config__GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo5_config = gpo5_config_GPO_REGISTER)
#define gpo5_config_GPO_REGISTER 0x1    //Output will be driven with the value programmed in the corresponding GP output register bit.


#define Get_GPIO_GPIO_OUTPUT_CONFIG_gpo6_config() p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo6_config
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo6_config_GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo6_config == gpo6_config_GPO_CHANNEL)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo6_config__GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo6_config = gpo6_config_GPO_CHANNEL)
#define gpo6_config_GPO_CHANNEL 0x0    //Output will be driven with the corresponding channel (PWM / Sequence shifter) output
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo6_config_GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo6_config == gpo6_config_GPO_REGISTER)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo6_config__GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo6_config = gpo6_config_GPO_REGISTER)
#define gpo6_config_GPO_REGISTER 0x1    //Output will be driven with the value programmed in the corresponding GP output register bit.


#define Get_GPIO_GPIO_OUTPUT_CONFIG_gpo7_config() p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo7_config
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo7_config_GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo7_config == gpo7_config_GPO_CHANNEL)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo7_config__GPO_CHANNEL() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo7_config = gpo7_config_GPO_CHANNEL)
#define gpo7_config_GPO_CHANNEL 0x0    //Output will be driven with the corresponding channel (PWM / Sequence shifter) output
#define Is_GPIO_GPIO_OUTPUT_CONFIG_gpo7_config_GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo7_config == gpo7_config_GPO_REGISTER)
#define Set_GPIO_GPIO_OUTPUT_CONFIG_gpo7_config__GPO_REGISTER() (p_GPIO_IP->GPIO_OUTPUT_CONFIG.GPIO_OUTPUT_CONFIG_ts.gpo7_config = gpo7_config_GPO_REGISTER)
#define gpo7_config_GPO_REGISTER 0x1    //Output will be driven with the value programmed in the corresponding GP output register bit.
#define Set_GPIO_GPIO_OUTPUT_CONFIG(gpo0_config,gpo1_config,gpo2_config,gpo3_config,gpo4_config,gpo5_config,gpo6_config,gpo7_config) (p_GPIO_IP->GPIO_OUTPUT_CONFIG.word = (uint32_t)gpo0_config<<0 | (uint32_t)gpo1_config<<1 | (uint32_t)gpo2_config<<2 | (uint32_t)gpo3_config<<3 | (uint32_t)gpo4_config<<4 | (uint32_t)gpo5_config<<5 | (uint32_t)gpo6_config<<6 | (uint32_t)gpo7_config<<7)
#define Get_GPIO_GPIO_OUTPUT_CONFIG() p_GPIO_IP->GPIO_OUTPUT_CONFIG.word
#define Set_GPIO_GPIO_OUTPUT_CONFIG_word(x) (p_GPIO_IP->GPIO_OUTPUT_CONFIG.word = x)


//GPIO_CHANNEL_CONFIG


#define Get_GPIO_GPIO_CHANNEL_CONFIG_channel0_config() p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel0_config
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel0_config_CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel0_config == channel0_config_CHANNEL_PWM)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel0_config__CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel0_config = channel0_config_CHANNEL_PWM)
#define channel0_config_CHANNEL_PWM 0x0    //Channel is configured as PWM
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel0_config_CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel0_config == channel0_config_CHANNEL_SEQSHIFT)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel0_config__CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel0_config = channel0_config_CHANNEL_SEQSHIFT)
#define channel0_config_CHANNEL_SEQSHIFT 0x1    //Channel is configured as Sequence shifter


#define Get_GPIO_GPIO_CHANNEL_CONFIG_channel1_config() p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel1_config
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel1_config_CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel1_config == channel1_config_CHANNEL_PWM)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel1_config__CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel1_config = channel1_config_CHANNEL_PWM)
#define channel1_config_CHANNEL_PWM 0x0    //Channel is configured as PWM
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel1_config_CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel1_config == channel1_config_CHANNEL_SEQSHIFT)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel1_config__CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel1_config = channel1_config_CHANNEL_SEQSHIFT)
#define channel1_config_CHANNEL_SEQSHIFT 0x1    //Channel is configured as Sequence shifter


#define Get_GPIO_GPIO_CHANNEL_CONFIG_channel2_config() p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel2_config
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel2_config_CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel2_config == channel2_config_CHANNEL_PWM)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel2_config__CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel2_config = channel2_config_CHANNEL_PWM)
#define channel2_config_CHANNEL_PWM 0x0    //Channel is configured as PWM
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel2_config_CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel2_config == channel2_config_CHANNEL_SEQSHIFT)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel2_config__CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel2_config = channel2_config_CHANNEL_SEQSHIFT)
#define channel2_config_CHANNEL_SEQSHIFT 0x1    //Channel is configured as Sequence shifter


#define Get_GPIO_GPIO_CHANNEL_CONFIG_channel3_config() p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel3_config
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel3_config_CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel3_config == channel3_config_CHANNEL_PWM)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel3_config__CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel3_config = channel3_config_CHANNEL_PWM)
#define channel3_config_CHANNEL_PWM 0x0    //Channel is configured as PWM
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel3_config_CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel3_config == channel3_config_CHANNEL_SEQSHIFT)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel3_config__CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel3_config = channel3_config_CHANNEL_SEQSHIFT)
#define channel3_config_CHANNEL_SEQSHIFT 0x1    //Channel is configured as Sequence shifter


#define Get_GPIO_GPIO_CHANNEL_CONFIG_channel4_config() p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel4_config
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel4_config_CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel4_config == channel4_config_CHANNEL_PWM)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel4_config__CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel4_config = channel4_config_CHANNEL_PWM)
#define channel4_config_CHANNEL_PWM 0x0    //Channel is configured as PWM
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel4_config_CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel4_config == channel4_config_CHANNEL_SEQSHIFT)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel4_config__CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel4_config = channel4_config_CHANNEL_SEQSHIFT)
#define channel4_config_CHANNEL_SEQSHIFT 0x1    //Channel is configured as Sequence shifter


#define Get_GPIO_GPIO_CHANNEL_CONFIG_channel5_config() p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel5_config
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel5_config_CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel5_config == channel5_config_CHANNEL_PWM)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel5_config__CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel5_config = channel5_config_CHANNEL_PWM)
#define channel5_config_CHANNEL_PWM 0x0    //Channel is configured as PWM
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel5_config_CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel5_config == channel5_config_CHANNEL_SEQSHIFT)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel5_config__CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel5_config = channel5_config_CHANNEL_SEQSHIFT)
#define channel5_config_CHANNEL_SEQSHIFT 0x1    //Channel is configured as Sequence shifter


#define Get_GPIO_GPIO_CHANNEL_CONFIG_channel6_config() p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel6_config
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel6_config_CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel6_config == channel6_config_CHANNEL_PWM)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel6_config__CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel6_config = channel6_config_CHANNEL_PWM)
#define channel6_config_CHANNEL_PWM 0x0    //Channel is configured as PWM
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel6_config_CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel6_config == channel6_config_CHANNEL_SEQSHIFT)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel6_config__CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel6_config = channel6_config_CHANNEL_SEQSHIFT)
#define channel6_config_CHANNEL_SEQSHIFT 0x1    //Channel is configured as Sequence shifter


#define Get_GPIO_GPIO_CHANNEL_CONFIG_channel7_config() p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel7_config
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel7_config_CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel7_config == channel7_config_CHANNEL_PWM)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel7_config__CHANNEL_PWM() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel7_config = channel7_config_CHANNEL_PWM)
#define channel7_config_CHANNEL_PWM 0x0    //Channel is configured as PWM
#define Is_GPIO_GPIO_CHANNEL_CONFIG_channel7_config_CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel7_config == channel7_config_CHANNEL_SEQSHIFT)
#define Set_GPIO_GPIO_CHANNEL_CONFIG_channel7_config__CHANNEL_SEQSHIFT() (p_GPIO_IP->GPIO_CHANNEL_CONFIG.GPIO_CHANNEL_CONFIG_ts.channel7_config = channel7_config_CHANNEL_SEQSHIFT)
#define channel7_config_CHANNEL_SEQSHIFT 0x1    //Channel is configured as Sequence shifter
#define Set_GPIO_GPIO_CHANNEL_CONFIG(channel0_config,channel1_config,channel2_config,channel3_config,channel4_config,channel5_config,channel6_config,channel7_config) (p_GPIO_IP->GPIO_CHANNEL_CONFIG.word = (uint32_t)channel0_config<<0 | (uint32_t)channel1_config<<1 | (uint32_t)channel2_config<<2 | (uint32_t)channel3_config<<3 | (uint32_t)channel4_config<<4 | (uint32_t)channel5_config<<5 | (uint32_t)channel6_config<<6 | (uint32_t)channel7_config<<7)
#define Get_GPIO_GPIO_CHANNEL_CONFIG() p_GPIO_IP->GPIO_CHANNEL_CONFIG.word
#define Set_GPIO_GPIO_CHANNEL_CONFIG_word(x) (p_GPIO_IP->GPIO_CHANNEL_CONFIG.word = x)


//GPIO_CHANNEL_PAIRING


#define Get_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing0() p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing0
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing0_PAIRING_NONE() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing0 == channel_pairing0_PAIRING_NONE)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing0__PAIRING_NONE() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing0 = channel_pairing0_PAIRING_NONE)
#define channel_pairing0_PAIRING_NONE 0x0    //No pairing, independent sequence for channels
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing0_PAIRING_INVERT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing0 == channel_pairing0_PAIRING_INVERT)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing0__PAIRING_INVERT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing0 = channel_pairing0_PAIRING_INVERT)
#define channel_pairing0_PAIRING_INVERT 0x1    //Inverse pairing, Channel 2n+1 output will be the inverse of Channel 2n output
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing0_PAIRING_HALFSHIFT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing0 == channel_pairing0_PAIRING_HALFSHIFT)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing0__PAIRING_HALFSHIFT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing0 = channel_pairing0_PAIRING_HALFSHIFT)
#define channel_pairing0_PAIRING_HALFSHIFT 0x2    //Half pulse width shift, Channel 2n+1 output will be Channel 2n output shifted by half pulse width. (This option is valid only if both the channels are configured as PWMs and if the source of the PWM is not the IDP timers)
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing0_PAIRING_OR() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing0 == channel_pairing0_PAIRING_OR)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing0__PAIRING_OR() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing0 = channel_pairing0_PAIRING_OR)
#define channel_pairing0_PAIRING_OR 0x3    //OR output, Channel 2n+1 output will be Channel 2n sequence ORed with Channel 2n+1 sequence


#define Get_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing1() p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing1
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing1_PAIRING_NONE() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing1 == channel_pairing1_PAIRING_NONE)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing1__PAIRING_NONE() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing1 = channel_pairing1_PAIRING_NONE)
#define channel_pairing1_PAIRING_NONE 0x0    //No pairing, independent sequence for channels
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing1_PAIRING_INVERT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing1 == channel_pairing1_PAIRING_INVERT)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing1__PAIRING_INVERT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing1 = channel_pairing1_PAIRING_INVERT)
#define channel_pairing1_PAIRING_INVERT 0x1    //Inverse pairing, Channel 2n+1 output will be the inverse of Channel 2n output
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing1_PAIRING_HALFSHIFT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing1 == channel_pairing1_PAIRING_HALFSHIFT)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing1__PAIRING_HALFSHIFT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing1 = channel_pairing1_PAIRING_HALFSHIFT)
#define channel_pairing1_PAIRING_HALFSHIFT 0x2    //Half pulse width shift, Channel 2n+1 output will be Channel 2n output shifted by half pulse width. (This option is valid only if both the channels are configured as PWMs and if the source of the PWM is not the IDP timers)
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing1_PAIRING_OR() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing1 == channel_pairing1_PAIRING_OR)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing1__PAIRING_OR() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing1 = channel_pairing1_PAIRING_OR)
#define channel_pairing1_PAIRING_OR 0x3    //OR output, Channel 2n+1 output will be Channel 2n sequence ORed with Channel 2n+1 sequence


#define Get_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing2() p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing2
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing2_PAIRING_NONE() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing2 == channel_pairing2_PAIRING_NONE)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing2__PAIRING_NONE() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing2 = channel_pairing2_PAIRING_NONE)
#define channel_pairing2_PAIRING_NONE 0x0    //No pairing, independent sequence for channels
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing2_PAIRING_INVERT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing2 == channel_pairing2_PAIRING_INVERT)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing2__PAIRING_INVERT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing2 = channel_pairing2_PAIRING_INVERT)
#define channel_pairing2_PAIRING_INVERT 0x1    //Inverse pairing, Channel 2n+1 output will be the inverse of Channel 2n output
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing2_PAIRING_HALFSHIFT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing2 == channel_pairing2_PAIRING_HALFSHIFT)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing2__PAIRING_HALFSHIFT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing2 = channel_pairing2_PAIRING_HALFSHIFT)
#define channel_pairing2_PAIRING_HALFSHIFT 0x2    //Half pulse width shift, Channel 2n+1 output will be Channel 2n output shifted by half pulse width. (This option is valid only if both the channels are configured as PWMs and if the source of the PWM is not the IDP timers)
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing2_PAIRING_OR() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing2 == channel_pairing2_PAIRING_OR)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing2__PAIRING_OR() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing2 = channel_pairing2_PAIRING_OR)
#define channel_pairing2_PAIRING_OR 0x3    //OR output, Channel 2n+1 output will be Channel 2n sequence ORed with Channel 2n+1 sequence


#define Get_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing3() p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing3
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing3_PAIRING_NONE() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing3 == channel_pairing3_PAIRING_NONE)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing3__PAIRING_NONE() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing3 = channel_pairing3_PAIRING_NONE)
#define channel_pairing3_PAIRING_NONE 0x0    //No pairing, independent sequence for channels
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing3_PAIRING_INVERT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing3 == channel_pairing3_PAIRING_INVERT)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing3__PAIRING_INVERT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing3 = channel_pairing3_PAIRING_INVERT)
#define channel_pairing3_PAIRING_INVERT 0x1    //Inverse pairing, Channel 2n+1 output will be the inverse of Channel 2n output
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing3_PAIRING_HALFSHIFT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing3 == channel_pairing3_PAIRING_HALFSHIFT)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing3__PAIRING_HALFSHIFT() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing3 = channel_pairing3_PAIRING_HALFSHIFT)
#define channel_pairing3_PAIRING_HALFSHIFT 0x2    //Half pulse width shift, Channel 2n+1 output will be Channel 2n output shifted by half pulse width. (This option is valid only if both the channels are configured as PWMs and if the source of the PWM is not the IDP timers)
#define Is_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing3_PAIRING_OR() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing3 == channel_pairing3_PAIRING_OR)
#define Set_GPIO_GPIO_CHANNEL_PAIRING_channel_pairing3__PAIRING_OR() (p_GPIO_IP->GPIO_CHANNEL_PAIRING.GPIO_CHANNEL_PAIRING_ts.channel_pairing3 = channel_pairing3_PAIRING_OR)
#define channel_pairing3_PAIRING_OR 0x3    //OR output, Channel 2n+1 output will be Channel 2n sequence ORed with Channel 2n+1 sequence
#define Set_GPIO_GPIO_CHANNEL_PAIRING(channel_pairing0,channel_pairing1,channel_pairing2,channel_pairing3) (p_GPIO_IP->GPIO_CHANNEL_PAIRING.word = (uint32_t)channel_pairing0<<0 | (uint32_t)channel_pairing1<<2 | (uint32_t)channel_pairing2<<4 | (uint32_t)channel_pairing3<<6)
#define Get_GPIO_GPIO_CHANNEL_PAIRING() p_GPIO_IP->GPIO_CHANNEL_PAIRING.word
#define Set_GPIO_GPIO_CHANNEL_PAIRING_word(x) (p_GPIO_IP->GPIO_CHANNEL_PAIRING.word = x)


//GPIO_INTR_DEBUG


#define Get_GPIO_GPIO_INTR_DEBUG_intr_debug() p_GPIO_IP->GPIO_INTR_DEBUG.GPIO_INTR_DEBUG_ts.intr_debug
#define Is_GPIO_GPIO_INTR_DEBUG_intr_debug_B_0x0() (p_GPIO_IP->GPIO_INTR_DEBUG.GPIO_INTR_DEBUG_ts.intr_debug == intr_debug_B_0x0)
#define Set_GPIO_GPIO_INTR_DEBUG_intr_debug__B_0x0() (p_GPIO_IP->GPIO_INTR_DEBUG.GPIO_INTR_DEBUG_ts.intr_debug = intr_debug_B_0x0)
#define intr_debug_B_0x0 0x0    //functional output driven to gpo[7]
#define Is_GPIO_GPIO_INTR_DEBUG_intr_debug_B_0x1() (p_GPIO_IP->GPIO_INTR_DEBUG.GPIO_INTR_DEBUG_ts.intr_debug == intr_debug_B_0x1)
#define Set_GPIO_GPIO_INTR_DEBUG_intr_debug__B_0x1() (p_GPIO_IP->GPIO_INTR_DEBUG.GPIO_INTR_DEBUG_ts.intr_debug = intr_debug_B_0x1)
#define intr_debug_B_0x1 0x1    //Interrupt is routed to gpo[7]
#define Set_GPIO_GPIO_INTR_DEBUG(intr_debug) (p_GPIO_IP->GPIO_INTR_DEBUG.word = (uint32_t)intr_debug<<0)
#define Get_GPIO_GPIO_INTR_DEBUG() p_GPIO_IP->GPIO_INTR_DEBUG.word
#define Set_GPIO_GPIO_INTR_DEBUG_word(x) (p_GPIO_IP->GPIO_INTR_DEBUG.word = x)


//GPIO_CHANNEL_SRC


#define Get_GPIO_GPIO_CHANNEL_SRC_channel0_src() p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel0_src
#define Is_GPIO_GPIO_CHANNEL_SRC_channel0_src_B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel0_src == channel0_src_B_0x0)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel0_src__B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel0_src = channel0_src_B_0x0)
#define channel0_src_B_0x0 0x0    //Timer 0
#define Is_GPIO_GPIO_CHANNEL_SRC_channel0_src_B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel0_src == channel0_src_B_0x1)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel0_src__B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel0_src = channel0_src_B_0x1)
#define channel0_src_B_0x1 0x1    //Timer 1
#define Is_GPIO_GPIO_CHANNEL_SRC_channel0_src_B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel0_src == channel0_src_B_0x2)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel0_src__B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel0_src = channel0_src_B_0x2)
#define channel0_src_B_0x2 0x2    //Timer 2
#define Is_GPIO_GPIO_CHANNEL_SRC_channel0_src_B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel0_src == channel0_src_B_0x3)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel0_src__B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel0_src = channel0_src_B_0x3)
#define channel0_src_B_0x3 0x3    //Timer 3


#define Get_GPIO_GPIO_CHANNEL_SRC_channel1_src() p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel1_src
#define Is_GPIO_GPIO_CHANNEL_SRC_channel1_src_B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel1_src == channel1_src_B_0x0)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel1_src__B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel1_src = channel1_src_B_0x0)
#define channel1_src_B_0x0 0x0    //Timer 0
#define Is_GPIO_GPIO_CHANNEL_SRC_channel1_src_B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel1_src == channel1_src_B_0x1)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel1_src__B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel1_src = channel1_src_B_0x1)
#define channel1_src_B_0x1 0x1    //Timer 1
#define Is_GPIO_GPIO_CHANNEL_SRC_channel1_src_B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel1_src == channel1_src_B_0x2)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel1_src__B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel1_src = channel1_src_B_0x2)
#define channel1_src_B_0x2 0x2    //Timer 2
#define Is_GPIO_GPIO_CHANNEL_SRC_channel1_src_B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel1_src == channel1_src_B_0x3)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel1_src__B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel1_src = channel1_src_B_0x3)
#define channel1_src_B_0x3 0x3    //Timer 3


#define Get_GPIO_GPIO_CHANNEL_SRC_channel2_src() p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel2_src
#define Is_GPIO_GPIO_CHANNEL_SRC_channel2_src_B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel2_src == channel2_src_B_0x0)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel2_src__B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel2_src = channel2_src_B_0x0)
#define channel2_src_B_0x0 0x0    //Timer 0
#define Is_GPIO_GPIO_CHANNEL_SRC_channel2_src_B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel2_src == channel2_src_B_0x1)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel2_src__B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel2_src = channel2_src_B_0x1)
#define channel2_src_B_0x1 0x1    //Timer 1
#define Is_GPIO_GPIO_CHANNEL_SRC_channel2_src_B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel2_src == channel2_src_B_0x2)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel2_src__B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel2_src = channel2_src_B_0x2)
#define channel2_src_B_0x2 0x2    //Timer 2
#define Is_GPIO_GPIO_CHANNEL_SRC_channel2_src_B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel2_src == channel2_src_B_0x3)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel2_src__B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel2_src = channel2_src_B_0x3)
#define channel2_src_B_0x3 0x3    //Timer 3


#define Get_GPIO_GPIO_CHANNEL_SRC_channel3_src() p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel3_src
#define Is_GPIO_GPIO_CHANNEL_SRC_channel3_src_B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel3_src == channel3_src_B_0x0)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel3_src__B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel3_src = channel3_src_B_0x0)
#define channel3_src_B_0x0 0x0    //Timer 0
#define Is_GPIO_GPIO_CHANNEL_SRC_channel3_src_B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel3_src == channel3_src_B_0x1)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel3_src__B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel3_src = channel3_src_B_0x1)
#define channel3_src_B_0x1 0x1    //Timer 1
#define Is_GPIO_GPIO_CHANNEL_SRC_channel3_src_B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel3_src == channel3_src_B_0x2)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel3_src__B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel3_src = channel3_src_B_0x2)
#define channel3_src_B_0x2 0x2    //Timer 2
#define Is_GPIO_GPIO_CHANNEL_SRC_channel3_src_B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel3_src == channel3_src_B_0x3)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel3_src__B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel3_src = channel3_src_B_0x3)
#define channel3_src_B_0x3 0x3    //Timer 3


#define Get_GPIO_GPIO_CHANNEL_SRC_channel4_src() p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel4_src
#define Is_GPIO_GPIO_CHANNEL_SRC_channel4_src_B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel4_src == channel4_src_B_0x0)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel4_src__B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel4_src = channel4_src_B_0x0)
#define channel4_src_B_0x0 0x0    //Timer 0
#define Is_GPIO_GPIO_CHANNEL_SRC_channel4_src_B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel4_src == channel4_src_B_0x1)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel4_src__B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel4_src = channel4_src_B_0x1)
#define channel4_src_B_0x1 0x1    //Timer 1
#define Is_GPIO_GPIO_CHANNEL_SRC_channel4_src_B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel4_src == channel4_src_B_0x2)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel4_src__B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel4_src = channel4_src_B_0x2)
#define channel4_src_B_0x2 0x2    //Timer 2
#define Is_GPIO_GPIO_CHANNEL_SRC_channel4_src_B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel4_src == channel4_src_B_0x3)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel4_src__B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel4_src = channel4_src_B_0x3)
#define channel4_src_B_0x3 0x3    //Timer 3


#define Get_GPIO_GPIO_CHANNEL_SRC_channel5_src() p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel5_src
#define Is_GPIO_GPIO_CHANNEL_SRC_channel5_src_B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel5_src == channel5_src_B_0x0)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel5_src__B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel5_src = channel5_src_B_0x0)
#define channel5_src_B_0x0 0x0    //Timer 0
#define Is_GPIO_GPIO_CHANNEL_SRC_channel5_src_B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel5_src == channel5_src_B_0x1)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel5_src__B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel5_src = channel5_src_B_0x1)
#define channel5_src_B_0x1 0x1    //Timer 1
#define Is_GPIO_GPIO_CHANNEL_SRC_channel5_src_B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel5_src == channel5_src_B_0x2)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel5_src__B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel5_src = channel5_src_B_0x2)
#define channel5_src_B_0x2 0x2    //Timer 2
#define Is_GPIO_GPIO_CHANNEL_SRC_channel5_src_B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel5_src == channel5_src_B_0x3)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel5_src__B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel5_src = channel5_src_B_0x3)
#define channel5_src_B_0x3 0x3    //Timer 3


#define Get_GPIO_GPIO_CHANNEL_SRC_channel6_src() p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel6_src
#define Is_GPIO_GPIO_CHANNEL_SRC_channel6_src_B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel6_src == channel6_src_B_0x0)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel6_src__B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel6_src = channel6_src_B_0x0)
#define channel6_src_B_0x0 0x0    //Timer 0
#define Is_GPIO_GPIO_CHANNEL_SRC_channel6_src_B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel6_src == channel6_src_B_0x1)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel6_src__B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel6_src = channel6_src_B_0x1)
#define channel6_src_B_0x1 0x1    //Timer 1
#define Is_GPIO_GPIO_CHANNEL_SRC_channel6_src_B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel6_src == channel6_src_B_0x2)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel6_src__B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel6_src = channel6_src_B_0x2)
#define channel6_src_B_0x2 0x2    //Timer 2
#define Is_GPIO_GPIO_CHANNEL_SRC_channel6_src_B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel6_src == channel6_src_B_0x3)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel6_src__B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel6_src = channel6_src_B_0x3)
#define channel6_src_B_0x3 0x3    //Timer 3


#define Get_GPIO_GPIO_CHANNEL_SRC_channel7_src() p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel7_src
#define Is_GPIO_GPIO_CHANNEL_SRC_channel7_src_B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel7_src == channel7_src_B_0x0)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel7_src__B_0x0() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel7_src = channel7_src_B_0x0)
#define channel7_src_B_0x0 0x0    //Timer 0
#define Is_GPIO_GPIO_CHANNEL_SRC_channel7_src_B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel7_src == channel7_src_B_0x1)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel7_src__B_0x1() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel7_src = channel7_src_B_0x1)
#define channel7_src_B_0x1 0x1    //Timer 1
#define Is_GPIO_GPIO_CHANNEL_SRC_channel7_src_B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel7_src == channel7_src_B_0x2)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel7_src__B_0x2() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel7_src = channel7_src_B_0x2)
#define channel7_src_B_0x2 0x2    //Timer 2
#define Is_GPIO_GPIO_CHANNEL_SRC_channel7_src_B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel7_src == channel7_src_B_0x3)
#define Set_GPIO_GPIO_CHANNEL_SRC_channel7_src__B_0x3() (p_GPIO_IP->GPIO_CHANNEL_SRC.GPIO_CHANNEL_SRC_ts.channel7_src = channel7_src_B_0x3)
#define channel7_src_B_0x3 0x3    //Timer 3
#define Set_GPIO_GPIO_CHANNEL_SRC(channel0_src,channel1_src,channel2_src,channel3_src,channel4_src,channel5_src,channel6_src,channel7_src) (p_GPIO_IP->GPIO_CHANNEL_SRC.word = (uint32_t)channel0_src<<0 | (uint32_t)channel1_src<<3 | (uint32_t)channel2_src<<6 | (uint32_t)channel3_src<<9 | (uint32_t)channel4_src<<12 | (uint32_t)channel5_src<<15 | (uint32_t)channel6_src<<18 | (uint32_t)channel7_src<<21)
#define Get_GPIO_GPIO_CHANNEL_SRC() p_GPIO_IP->GPIO_CHANNEL_SRC.word
#define Set_GPIO_GPIO_CHANNEL_SRC_word(x) (p_GPIO_IP->GPIO_CHANNEL_SRC.word = x)


//GPIO_INT_SRC


#define Get_GPIO_GPIO_INT_SRC_int0_src() p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int0_src
#define Is_GPIO_GPIO_INT_SRC_int0_src_SRC_TIMER0() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int0_src == int0_src_SRC_TIMER0)
#define Set_GPIO_GPIO_INT_SRC_int0_src__SRC_TIMER0() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int0_src = int0_src_SRC_TIMER0)
#define int0_src_SRC_TIMER0 0x0    //Timer 0
#define Is_GPIO_GPIO_INT_SRC_int0_src_SRC_TIMER1() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int0_src == int0_src_SRC_TIMER1)
#define Set_GPIO_GPIO_INT_SRC_int0_src__SRC_TIMER1() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int0_src = int0_src_SRC_TIMER1)
#define int0_src_SRC_TIMER1 0x1    //Timer 1
#define Is_GPIO_GPIO_INT_SRC_int0_src_SRC_TIMER2() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int0_src == int0_src_SRC_TIMER2)
#define Set_GPIO_GPIO_INT_SRC_int0_src__SRC_TIMER2() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int0_src = int0_src_SRC_TIMER2)
#define int0_src_SRC_TIMER2 0x2    //Timer 2
#define Is_GPIO_GPIO_INT_SRC_int0_src_SRC_TIMER3() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int0_src == int0_src_SRC_TIMER3)
#define Set_GPIO_GPIO_INT_SRC_int0_src__SRC_TIMER3() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int0_src = int0_src_SRC_TIMER3)
#define int0_src_SRC_TIMER3 0x3    //Timer 3


#define Get_GPIO_GPIO_INT_SRC_int1_src() p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int1_src
#define Is_GPIO_GPIO_INT_SRC_int1_src_SRC_TIMER0() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int1_src == int1_src_SRC_TIMER0)
#define Set_GPIO_GPIO_INT_SRC_int1_src__SRC_TIMER0() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int1_src = int1_src_SRC_TIMER0)
#define int1_src_SRC_TIMER0 0x0    //Timer 0
#define Is_GPIO_GPIO_INT_SRC_int1_src_SRC_TIMER1() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int1_src == int1_src_SRC_TIMER1)
#define Set_GPIO_GPIO_INT_SRC_int1_src__SRC_TIMER1() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int1_src = int1_src_SRC_TIMER1)
#define int1_src_SRC_TIMER1 0x1    //Timer 1
#define Is_GPIO_GPIO_INT_SRC_int1_src_SRC_TIMER2() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int1_src == int1_src_SRC_TIMER2)
#define Set_GPIO_GPIO_INT_SRC_int1_src__SRC_TIMER2() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int1_src = int1_src_SRC_TIMER2)
#define int1_src_SRC_TIMER2 0x2    //Timer 2
#define Is_GPIO_GPIO_INT_SRC_int1_src_SRC_TIMER3() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int1_src == int1_src_SRC_TIMER3)
#define Set_GPIO_GPIO_INT_SRC_int1_src__SRC_TIMER3() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int1_src = int1_src_SRC_TIMER3)
#define int1_src_SRC_TIMER3 0x3    //Timer 3


#define Get_GPIO_GPIO_INT_SRC_int2_src() p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int2_src
#define Is_GPIO_GPIO_INT_SRC_int2_src_SRC_TIMER0() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int2_src == int2_src_SRC_TIMER0)
#define Set_GPIO_GPIO_INT_SRC_int2_src__SRC_TIMER0() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int2_src = int2_src_SRC_TIMER0)
#define int2_src_SRC_TIMER0 0x0    //Timer 0
#define Is_GPIO_GPIO_INT_SRC_int2_src_SRC_TIMER1() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int2_src == int2_src_SRC_TIMER1)
#define Set_GPIO_GPIO_INT_SRC_int2_src__SRC_TIMER1() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int2_src = int2_src_SRC_TIMER1)
#define int2_src_SRC_TIMER1 0x1    //Timer 1
#define Is_GPIO_GPIO_INT_SRC_int2_src_SRC_TIMER2() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int2_src == int2_src_SRC_TIMER2)
#define Set_GPIO_GPIO_INT_SRC_int2_src__SRC_TIMER2() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int2_src = int2_src_SRC_TIMER2)
#define int2_src_SRC_TIMER2 0x2    //Timer 2
#define Is_GPIO_GPIO_INT_SRC_int2_src_SRC_TIMER3() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int2_src == int2_src_SRC_TIMER3)
#define Set_GPIO_GPIO_INT_SRC_int2_src__SRC_TIMER3() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int2_src = int2_src_SRC_TIMER3)
#define int2_src_SRC_TIMER3 0x3    //Timer 3


#define Get_GPIO_GPIO_INT_SRC_int3_src() p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int3_src
#define Is_GPIO_GPIO_INT_SRC_int3_src_SRC_TIMER0() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int3_src == int3_src_SRC_TIMER0)
#define Set_GPIO_GPIO_INT_SRC_int3_src__SRC_TIMER0() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int3_src = int3_src_SRC_TIMER0)
#define int3_src_SRC_TIMER0 0x0    //Timer 0
#define Is_GPIO_GPIO_INT_SRC_int3_src_SRC_TIMER1() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int3_src == int3_src_SRC_TIMER1)
#define Set_GPIO_GPIO_INT_SRC_int3_src__SRC_TIMER1() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int3_src = int3_src_SRC_TIMER1)
#define int3_src_SRC_TIMER1 0x1    //Timer 1
#define Is_GPIO_GPIO_INT_SRC_int3_src_SRC_TIMER2() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int3_src == int3_src_SRC_TIMER2)
#define Set_GPIO_GPIO_INT_SRC_int3_src__SRC_TIMER2() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int3_src = int3_src_SRC_TIMER2)
#define int3_src_SRC_TIMER2 0x2    //Timer 2
#define Is_GPIO_GPIO_INT_SRC_int3_src_SRC_TIMER3() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int3_src == int3_src_SRC_TIMER3)
#define Set_GPIO_GPIO_INT_SRC_int3_src__SRC_TIMER3() (p_GPIO_IP->GPIO_INT_SRC.GPIO_INT_SRC_ts.int3_src = int3_src_SRC_TIMER3)
#define int3_src_SRC_TIMER3 0x3    //Timer 3
#define Set_GPIO_GPIO_INT_SRC(int0_src,int1_src,int2_src,int3_src) (p_GPIO_IP->GPIO_INT_SRC.word = (uint32_t)int0_src<<0 | (uint32_t)int1_src<<3 | (uint32_t)int2_src<<6 | (uint32_t)int3_src<<9)
#define Get_GPIO_GPIO_INT_SRC() p_GPIO_IP->GPIO_INT_SRC.word
#define Set_GPIO_GPIO_INT_SRC_word(x) (p_GPIO_IP->GPIO_INT_SRC.word = x)


//GPIO_INT0_TRIGGER


#define Get_GPIO_GPIO_INT0_TRIGGER_count_low() p_GPIO_IP->GPIO_INT0_TRIGGER.GPIO_INT0_TRIGGER_ts.count_low
#define Set_GPIO_GPIO_INT0_TRIGGER_count_low(x) (p_GPIO_IP->GPIO_INT0_TRIGGER.GPIO_INT0_TRIGGER_ts.count_low = x)


#define Get_GPIO_GPIO_INT0_TRIGGER_count_high() p_GPIO_IP->GPIO_INT0_TRIGGER.GPIO_INT0_TRIGGER_ts.count_high
#define Set_GPIO_GPIO_INT0_TRIGGER_count_high(x) (p_GPIO_IP->GPIO_INT0_TRIGGER.GPIO_INT0_TRIGGER_ts.count_high = x)
#define Set_GPIO_GPIO_INT0_TRIGGER(count_low,count_high) (p_GPIO_IP->GPIO_INT0_TRIGGER.word = (uint32_t)count_low<<0 | (uint32_t)count_high<<16)
#define Get_GPIO_GPIO_INT0_TRIGGER() p_GPIO_IP->GPIO_INT0_TRIGGER.word
#define Set_GPIO_GPIO_INT0_TRIGGER_word(x) (p_GPIO_IP->GPIO_INT0_TRIGGER.word = x)


//GPIO_INT0_TRIGGER_EX


#define Get_GPIO_GPIO_INT0_TRIGGER_EX_count_ext() p_GPIO_IP->GPIO_INT0_TRIGGER_EX.GPIO_INT0_TRIGGER_EX_ts.count_ext
#define Set_GPIO_GPIO_INT0_TRIGGER_EX_count_ext(x) (p_GPIO_IP->GPIO_INT0_TRIGGER_EX.GPIO_INT0_TRIGGER_EX_ts.count_ext = x)


#define Get_GPIO_GPIO_INT0_TRIGGER_EX_repeat() p_GPIO_IP->GPIO_INT0_TRIGGER_EX.GPIO_INT0_TRIGGER_EX_ts.repeat
#define Is_GPIO_GPIO_INT0_TRIGGER_EX_repeat_B_0x0() (p_GPIO_IP->GPIO_INT0_TRIGGER_EX.GPIO_INT0_TRIGGER_EX_ts.repeat == repeat_B_0x0)
#define Set_GPIO_GPIO_INT0_TRIGGER_EX_repeat__B_0x0() (p_GPIO_IP->GPIO_INT0_TRIGGER_EX.GPIO_INT0_TRIGGER_EX_ts.repeat = repeat_B_0x0)
#define repeat_B_0x0 0x0    //Once. When the frame, line and pixel count of the IDP timer reach the values programmed in the next field of this register, the corresponding timer interrupt is asserted once.
#define Is_GPIO_GPIO_INT0_TRIGGER_EX_repeat_B_0x1() (p_GPIO_IP->GPIO_INT0_TRIGGER_EX.GPIO_INT0_TRIGGER_EX_ts.repeat == repeat_B_0x1)
#define Set_GPIO_GPIO_INT0_TRIGGER_EX_repeat__B_0x1() (p_GPIO_IP->GPIO_INT0_TRIGGER_EX.GPIO_INT0_TRIGGER_EX_ts.repeat = repeat_B_0x1)
#define repeat_B_0x1 0x1    //Every frame. Starting from the frame number programmed, for each frame whenever the line and pixel counts of the IDP timer reach the values programmed, the corresponding timer interrupt will be asserted.
#define Set_GPIO_GPIO_INT0_TRIGGER_EX(count_ext,repeat) (p_GPIO_IP->GPIO_INT0_TRIGGER_EX.word = (uint32_t)count_ext<<0 | (uint32_t)repeat<<8)
#define Get_GPIO_GPIO_INT0_TRIGGER_EX() p_GPIO_IP->GPIO_INT0_TRIGGER_EX.word
#define Set_GPIO_GPIO_INT0_TRIGGER_EX_word(x) (p_GPIO_IP->GPIO_INT0_TRIGGER_EX.word = x)


//GPIO_INT1_TRIGGER


#define Get_GPIO_GPIO_INT1_TRIGGER_count_low() p_GPIO_IP->GPIO_INT1_TRIGGER.GPIO_INT1_TRIGGER_ts.count_low
#define Set_GPIO_GPIO_INT1_TRIGGER_count_low(x) (p_GPIO_IP->GPIO_INT1_TRIGGER.GPIO_INT1_TRIGGER_ts.count_low = x)


#define Get_GPIO_GPIO_INT1_TRIGGER_count_high() p_GPIO_IP->GPIO_INT1_TRIGGER.GPIO_INT1_TRIGGER_ts.count_high
#define Set_GPIO_GPIO_INT1_TRIGGER_count_high(x) (p_GPIO_IP->GPIO_INT1_TRIGGER.GPIO_INT1_TRIGGER_ts.count_high = x)
#define Set_GPIO_GPIO_INT1_TRIGGER(count_low,count_high) (p_GPIO_IP->GPIO_INT1_TRIGGER.word = (uint32_t)count_low<<0 | (uint32_t)count_high<<16)
#define Get_GPIO_GPIO_INT1_TRIGGER() p_GPIO_IP->GPIO_INT1_TRIGGER.word
#define Set_GPIO_GPIO_INT1_TRIGGER_word(x) (p_GPIO_IP->GPIO_INT1_TRIGGER.word = x)


//GPIO_INT1_TRIGGER_EX


#define Get_GPIO_GPIO_INT1_TRIGGER_EX_count_ext() p_GPIO_IP->GPIO_INT1_TRIGGER_EX.GPIO_INT1_TRIGGER_EX_ts.count_ext
#define Set_GPIO_GPIO_INT1_TRIGGER_EX_count_ext(x) (p_GPIO_IP->GPIO_INT1_TRIGGER_EX.GPIO_INT1_TRIGGER_EX_ts.count_ext = x)


#define Get_GPIO_GPIO_INT1_TRIGGER_EX_repeat() p_GPIO_IP->GPIO_INT1_TRIGGER_EX.GPIO_INT1_TRIGGER_EX_ts.repeat
#define Is_GPIO_GPIO_INT1_TRIGGER_EX_repeat_B_0x0() (p_GPIO_IP->GPIO_INT1_TRIGGER_EX.GPIO_INT1_TRIGGER_EX_ts.repeat == repeat_B_0x0)
#define Set_GPIO_GPIO_INT1_TRIGGER_EX_repeat__B_0x0() (p_GPIO_IP->GPIO_INT1_TRIGGER_EX.GPIO_INT1_TRIGGER_EX_ts.repeat = repeat_B_0x0)
#define repeat_B_0x0 0x0    //Once. When the frame, line and pixel count of the IDP timer reach the values programmed in the next field of this register, the corresponding timer interrupt is asserted once.
#define Is_GPIO_GPIO_INT1_TRIGGER_EX_repeat_B_0x1() (p_GPIO_IP->GPIO_INT1_TRIGGER_EX.GPIO_INT1_TRIGGER_EX_ts.repeat == repeat_B_0x1)
#define Set_GPIO_GPIO_INT1_TRIGGER_EX_repeat__B_0x1() (p_GPIO_IP->GPIO_INT1_TRIGGER_EX.GPIO_INT1_TRIGGER_EX_ts.repeat = repeat_B_0x1)
#define repeat_B_0x1 0x1    //Every frame. Starting from the frame number programmed, for each frame whenever the line and pixel counts of the IDP timer reach the values programmed, the corresponding timer interrupt will be asserted.
#define Set_GPIO_GPIO_INT1_TRIGGER_EX(count_ext,repeat) (p_GPIO_IP->GPIO_INT1_TRIGGER_EX.word = (uint32_t)count_ext<<0 | (uint32_t)repeat<<8)
#define Get_GPIO_GPIO_INT1_TRIGGER_EX() p_GPIO_IP->GPIO_INT1_TRIGGER_EX.word
#define Set_GPIO_GPIO_INT1_TRIGGER_EX_word(x) (p_GPIO_IP->GPIO_INT1_TRIGGER_EX.word = x)


//GPIO_INT2_TRIGGER


#define Get_GPIO_GPIO_INT2_TRIGGER_count_low() p_GPIO_IP->GPIO_INT2_TRIGGER.GPIO_INT2_TRIGGER_ts.count_low
#define Set_GPIO_GPIO_INT2_TRIGGER_count_low(x) (p_GPIO_IP->GPIO_INT2_TRIGGER.GPIO_INT2_TRIGGER_ts.count_low = x)


#define Get_GPIO_GPIO_INT2_TRIGGER_count_high() p_GPIO_IP->GPIO_INT2_TRIGGER.GPIO_INT2_TRIGGER_ts.count_high
#define Set_GPIO_GPIO_INT2_TRIGGER_count_high(x) (p_GPIO_IP->GPIO_INT2_TRIGGER.GPIO_INT2_TRIGGER_ts.count_high = x)
#define Set_GPIO_GPIO_INT2_TRIGGER(count_low,count_high) (p_GPIO_IP->GPIO_INT2_TRIGGER.word = (uint32_t)count_low<<0 | (uint32_t)count_high<<16)
#define Get_GPIO_GPIO_INT2_TRIGGER() p_GPIO_IP->GPIO_INT2_TRIGGER.word
#define Set_GPIO_GPIO_INT2_TRIGGER_word(x) (p_GPIO_IP->GPIO_INT2_TRIGGER.word = x)


//GPIO_INT2_TRIGGER_EX


#define Get_GPIO_GPIO_INT2_TRIGGER_EX_count_ext() p_GPIO_IP->GPIO_INT2_TRIGGER_EX.GPIO_INT2_TRIGGER_EX_ts.count_ext
#define Set_GPIO_GPIO_INT2_TRIGGER_EX_count_ext(x) (p_GPIO_IP->GPIO_INT2_TRIGGER_EX.GPIO_INT2_TRIGGER_EX_ts.count_ext = x)


#define Get_GPIO_GPIO_INT2_TRIGGER_EX_repeat() p_GPIO_IP->GPIO_INT2_TRIGGER_EX.GPIO_INT2_TRIGGER_EX_ts.repeat
#define Is_GPIO_GPIO_INT2_TRIGGER_EX_repeat_B_0x0() (p_GPIO_IP->GPIO_INT2_TRIGGER_EX.GPIO_INT2_TRIGGER_EX_ts.repeat == repeat_B_0x0)
#define Set_GPIO_GPIO_INT2_TRIGGER_EX_repeat__B_0x0() (p_GPIO_IP->GPIO_INT2_TRIGGER_EX.GPIO_INT2_TRIGGER_EX_ts.repeat = repeat_B_0x0)
#define repeat_B_0x0 0x0    //Once. When the frame, line and pixel count of the IDP timer reach the values programmed in the next field of this register, the corresponding timer interrupt is asserted once.
#define Is_GPIO_GPIO_INT2_TRIGGER_EX_repeat_B_0x1() (p_GPIO_IP->GPIO_INT2_TRIGGER_EX.GPIO_INT2_TRIGGER_EX_ts.repeat == repeat_B_0x1)
#define Set_GPIO_GPIO_INT2_TRIGGER_EX_repeat__B_0x1() (p_GPIO_IP->GPIO_INT2_TRIGGER_EX.GPIO_INT2_TRIGGER_EX_ts.repeat = repeat_B_0x1)
#define repeat_B_0x1 0x1    //Every frame. Starting from the frame number programmed, for each frame whenever the line and pixel counts of the IDP timer reach the values programmed, the corresponding timer interrupt will be asserted.
#define Set_GPIO_GPIO_INT2_TRIGGER_EX(count_ext,repeat) (p_GPIO_IP->GPIO_INT2_TRIGGER_EX.word = (uint32_t)count_ext<<0 | (uint32_t)repeat<<8)
#define Get_GPIO_GPIO_INT2_TRIGGER_EX() p_GPIO_IP->GPIO_INT2_TRIGGER_EX.word
#define Set_GPIO_GPIO_INT2_TRIGGER_EX_word(x) (p_GPIO_IP->GPIO_INT2_TRIGGER_EX.word = x)


//GPIO_INT3_TRIGGER


#define Get_GPIO_GPIO_INT3_TRIGGER_count_low() p_GPIO_IP->GPIO_INT3_TRIGGER.GPIO_INT3_TRIGGER_ts.count_low
#define Set_GPIO_GPIO_INT3_TRIGGER_count_low(x) (p_GPIO_IP->GPIO_INT3_TRIGGER.GPIO_INT3_TRIGGER_ts.count_low = x)


#define Get_GPIO_GPIO_INT3_TRIGGER_count_high() p_GPIO_IP->GPIO_INT3_TRIGGER.GPIO_INT3_TRIGGER_ts.count_high
#define Set_GPIO_GPIO_INT3_TRIGGER_count_high(x) (p_GPIO_IP->GPIO_INT3_TRIGGER.GPIO_INT3_TRIGGER_ts.count_high = x)
#define Set_GPIO_GPIO_INT3_TRIGGER(count_low,count_high) (p_GPIO_IP->GPIO_INT3_TRIGGER.word = (uint32_t)count_low<<0 | (uint32_t)count_high<<16)
#define Get_GPIO_GPIO_INT3_TRIGGER() p_GPIO_IP->GPIO_INT3_TRIGGER.word
#define Set_GPIO_GPIO_INT3_TRIGGER_word(x) (p_GPIO_IP->GPIO_INT3_TRIGGER.word = x)


//GPIO_INT3_TRIGGER_EX


#define Get_GPIO_GPIO_INT3_TRIGGER_EX_count_ext() p_GPIO_IP->GPIO_INT3_TRIGGER_EX.GPIO_INT3_TRIGGER_EX_ts.count_ext
#define Set_GPIO_GPIO_INT3_TRIGGER_EX_count_ext(x) (p_GPIO_IP->GPIO_INT3_TRIGGER_EX.GPIO_INT3_TRIGGER_EX_ts.count_ext = x)


#define Get_GPIO_GPIO_INT3_TRIGGER_EX_repeat() p_GPIO_IP->GPIO_INT3_TRIGGER_EX.GPIO_INT3_TRIGGER_EX_ts.repeat
#define Is_GPIO_GPIO_INT3_TRIGGER_EX_repeat_B_0x0() (p_GPIO_IP->GPIO_INT3_TRIGGER_EX.GPIO_INT3_TRIGGER_EX_ts.repeat == repeat_B_0x0)
#define Set_GPIO_GPIO_INT3_TRIGGER_EX_repeat__B_0x0() (p_GPIO_IP->GPIO_INT3_TRIGGER_EX.GPIO_INT3_TRIGGER_EX_ts.repeat = repeat_B_0x0)
#define repeat_B_0x0 0x0    //Once. When the frame, line and pixel count of the IDP timer reach the values programmed in the next field of this register, the corresponding timer interrupt is asserted once.
#define Is_GPIO_GPIO_INT3_TRIGGER_EX_repeat_B_0x1() (p_GPIO_IP->GPIO_INT3_TRIGGER_EX.GPIO_INT3_TRIGGER_EX_ts.repeat == repeat_B_0x1)
#define Set_GPIO_GPIO_INT3_TRIGGER_EX_repeat__B_0x1() (p_GPIO_IP->GPIO_INT3_TRIGGER_EX.GPIO_INT3_TRIGGER_EX_ts.repeat = repeat_B_0x1)
#define repeat_B_0x1 0x1    //Every frame. Starting from the frame number programmed, for each frame whenever the line and pixel counts of the IDP timer reach the values programmed, the corresponding timer interrupt will be asserted.
#define Set_GPIO_GPIO_INT3_TRIGGER_EX(count_ext,repeat) (p_GPIO_IP->GPIO_INT3_TRIGGER_EX.word = (uint32_t)count_ext<<0 | (uint32_t)repeat<<8)
#define Get_GPIO_GPIO_INT3_TRIGGER_EX() p_GPIO_IP->GPIO_INT3_TRIGGER_EX.word
#define Set_GPIO_GPIO_INT3_TRIGGER_EX_word(x) (p_GPIO_IP->GPIO_INT3_TRIGGER_EX.word = x)


//GPIO_EVENT_TRIGGER


#define Get_GPIO_GPIO_EVENT_TRIGGER_event_trigger() p_GPIO_IP->GPIO_EVENT_TRIGGER.GPIO_EVENT_TRIGGER_ts.event_trigger
#define Set_GPIO_GPIO_EVENT_TRIGGER_event_trigger(x) (p_GPIO_IP->GPIO_EVENT_TRIGGER.GPIO_EVENT_TRIGGER_ts.event_trigger = x)


#define Get_GPIO_GPIO_EVENT_TRIGGER_event_src() p_GPIO_IP->GPIO_EVENT_TRIGGER.GPIO_EVENT_TRIGGER_ts.event_src
#define Is_GPIO_GPIO_EVENT_TRIGGER_event_src_EVENT_SRC_ADC() (p_GPIO_IP->GPIO_EVENT_TRIGGER.GPIO_EVENT_TRIGGER_ts.event_src == event_src_EVENT_SRC_ADC)
#define Set_GPIO_GPIO_EVENT_TRIGGER_event_src__EVENT_SRC_ADC() (p_GPIO_IP->GPIO_EVENT_TRIGGER.GPIO_EVENT_TRIGGER_ts.event_src = event_src_EVENT_SRC_ADC)
#define event_src_EVENT_SRC_ADC 0x0    //ADC source
#define Is_GPIO_GPIO_EVENT_TRIGGER_event_src_EVENT_SRC_GPI() (p_GPIO_IP->GPIO_EVENT_TRIGGER.GPIO_EVENT_TRIGGER_ts.event_src == event_src_EVENT_SRC_GPI)
#define Set_GPIO_GPIO_EVENT_TRIGGER_event_src__EVENT_SRC_GPI() (p_GPIO_IP->GPIO_EVENT_TRIGGER.GPIO_EVENT_TRIGGER_ts.event_src = event_src_EVENT_SRC_GPI)
#define event_src_EVENT_SRC_GPI 0x1    //GPI source
#define Set_GPIO_GPIO_EVENT_TRIGGER(event_trigger,event_src) (p_GPIO_IP->GPIO_EVENT_TRIGGER.word = (uint32_t)event_trigger<<0 | (uint32_t)event_src<<8)
#define Get_GPIO_GPIO_EVENT_TRIGGER() p_GPIO_IP->GPIO_EVENT_TRIGGER.word
#define Set_GPIO_GPIO_EVENT_TRIGGER_word(x) (p_GPIO_IP->GPIO_EVENT_TRIGGER.word = x)


//GPIO_TIMER_PRESCALE


#define Get_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale() p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0x0() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0x0)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0x0() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0x0)
#define timer0_prescale_B_0x0 0x0    //1/1 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0x1() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0x1)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0x1() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0x1)
#define timer0_prescale_B_0x1 0x1    //1/2 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0x2() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0x2)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0x2() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0x2)
#define timer0_prescale_B_0x2 0x2    //1/4 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0x3() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0x3)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0x3() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0x3)
#define timer0_prescale_B_0x3 0x3    //1/8 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0x4() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0x4)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0x4() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0x4)
#define timer0_prescale_B_0x4 0x4    //1/16 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0x5() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0x5)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0x5() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0x5)
#define timer0_prescale_B_0x5 0x5    //1/32 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0x6() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0x6)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0x6() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0x6)
#define timer0_prescale_B_0x6 0x6    //1/64 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0x7() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0x7)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0x7() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0x7)
#define timer0_prescale_B_0x7 0x7    //1/128 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0x8() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0x8)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0x8() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0x8)
#define timer0_prescale_B_0x8 0x8    //1/256 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0x9() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0x9)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0x9() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0x9)
#define timer0_prescale_B_0x9 0x9    //1/512 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0xA() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0xA)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0xA() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0xA)
#define timer0_prescale_B_0xA 0xA    //1/1024 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0xB() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0xB)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0xB() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0xB)
#define timer0_prescale_B_0xB 0xB    //1/2048 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0xC() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0xC)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0xC() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0xC)
#define timer0_prescale_B_0xC 0xC    //1/4096 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0xD() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0xD)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0xD() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0xD)
#define timer0_prescale_B_0xD 0xD    //1/8192 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0xE() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0xE)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0xE() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0xE)
#define timer0_prescale_B_0xE 0xE    //1/16384 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale_B_0xF() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale == timer0_prescale_B_0xF)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer0_prescale__B_0xF() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer0_prescale = timer0_prescale_B_0xF)
#define timer0_prescale_B_0xF 0xF    //1/32768 prescale


#define Get_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale() p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0x0() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0x0)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0x0() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0x0)
#define timer1_prescale_B_0x0 0x0    //1/1 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0x1() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0x1)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0x1() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0x1)
#define timer1_prescale_B_0x1 0x1    //1/2 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0x2() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0x2)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0x2() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0x2)
#define timer1_prescale_B_0x2 0x2    //1/4 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0x3() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0x3)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0x3() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0x3)
#define timer1_prescale_B_0x3 0x3    //1/8 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0x4() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0x4)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0x4() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0x4)
#define timer1_prescale_B_0x4 0x4    //1/16 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0x5() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0x5)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0x5() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0x5)
#define timer1_prescale_B_0x5 0x5    //1/32 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0x6() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0x6)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0x6() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0x6)
#define timer1_prescale_B_0x6 0x6    //1/64 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0x7() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0x7)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0x7() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0x7)
#define timer1_prescale_B_0x7 0x7    //1/128 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0x8() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0x8)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0x8() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0x8)
#define timer1_prescale_B_0x8 0x8    //1/256 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0x9() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0x9)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0x9() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0x9)
#define timer1_prescale_B_0x9 0x9    //1/512 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0xA() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0xA)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0xA() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0xA)
#define timer1_prescale_B_0xA 0xA    //1/1024 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0xB() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0xB)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0xB() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0xB)
#define timer1_prescale_B_0xB 0xB    //1/2048 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0xC() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0xC)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0xC() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0xC)
#define timer1_prescale_B_0xC 0xC    //1/4096 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0xD() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0xD)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0xD() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0xD)
#define timer1_prescale_B_0xD 0xD    //1/8192 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0xE() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0xE)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0xE() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0xE)
#define timer1_prescale_B_0xE 0xE    //1/16384 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale_B_0xF() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale == timer1_prescale_B_0xF)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer1_prescale__B_0xF() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer1_prescale = timer1_prescale_B_0xF)
#define timer1_prescale_B_0xF 0xF    //1/32768 prescale


#define Get_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale() p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0x0() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0x0)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0x0() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0x0)
#define timer2_prescale_B_0x0 0x0    //1/1 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0x1() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0x1)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0x1() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0x1)
#define timer2_prescale_B_0x1 0x1    //1/2 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0x2() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0x2)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0x2() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0x2)
#define timer2_prescale_B_0x2 0x2    //1/4 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0x3() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0x3)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0x3() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0x3)
#define timer2_prescale_B_0x3 0x3    //1/8 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0x4() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0x4)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0x4() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0x4)
#define timer2_prescale_B_0x4 0x4    //1/16 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0x5() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0x5)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0x5() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0x5)
#define timer2_prescale_B_0x5 0x5    //1/32 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0x6() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0x6)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0x6() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0x6)
#define timer2_prescale_B_0x6 0x6    //1/64 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0x7() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0x7)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0x7() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0x7)
#define timer2_prescale_B_0x7 0x7    //1/128 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0x8() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0x8)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0x8() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0x8)
#define timer2_prescale_B_0x8 0x8    //1/256 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0x9() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0x9)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0x9() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0x9)
#define timer2_prescale_B_0x9 0x9    //1/512 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0xA() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0xA)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0xA() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0xA)
#define timer2_prescale_B_0xA 0xA    //1/1024 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0xB() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0xB)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0xB() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0xB)
#define timer2_prescale_B_0xB 0xB    //1/2048 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0xC() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0xC)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0xC() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0xC)
#define timer2_prescale_B_0xC 0xC    //1/4096 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0xD() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0xD)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0xD() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0xD)
#define timer2_prescale_B_0xD 0xD    //1/8192 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0xE() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0xE)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0xE() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0xE)
#define timer2_prescale_B_0xE 0xE    //1/16384 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale_B_0xF() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale == timer2_prescale_B_0xF)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer2_prescale__B_0xF() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer2_prescale = timer2_prescale_B_0xF)
#define timer2_prescale_B_0xF 0xF    //1/32768 prescale


#define Get_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale() p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0x0() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0x0)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0x0() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0x0)
#define timer3_prescale_B_0x0 0x0    //1/1 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0x1() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0x1)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0x1() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0x1)
#define timer3_prescale_B_0x1 0x1    //1/2 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0x2() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0x2)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0x2() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0x2)
#define timer3_prescale_B_0x2 0x2    //1/4 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0x3() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0x3)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0x3() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0x3)
#define timer3_prescale_B_0x3 0x3    //1/8 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0x4() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0x4)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0x4() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0x4)
#define timer3_prescale_B_0x4 0x4    //1/16 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0x5() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0x5)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0x5() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0x5)
#define timer3_prescale_B_0x5 0x5    //1/32 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0x6() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0x6)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0x6() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0x6)
#define timer3_prescale_B_0x6 0x6    //1/64 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0x7() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0x7)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0x7() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0x7)
#define timer3_prescale_B_0x7 0x7    //1/128 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0x8() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0x8)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0x8() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0x8)
#define timer3_prescale_B_0x8 0x8    //1/256 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0x9() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0x9)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0x9() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0x9)
#define timer3_prescale_B_0x9 0x9    //1/512 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0xA() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0xA)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0xA() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0xA)
#define timer3_prescale_B_0xA 0xA    //1/1024 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0xB() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0xB)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0xB() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0xB)
#define timer3_prescale_B_0xB 0xB    //1/2048 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0xC() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0xC)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0xC() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0xC)
#define timer3_prescale_B_0xC 0xC    //1/4096 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0xD() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0xD)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0xD() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0xD)
#define timer3_prescale_B_0xD 0xD    //1/8192 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0xE() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0xE)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0xE() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0xE)
#define timer3_prescale_B_0xE 0xE    //1/16384 prescale
#define Is_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale_B_0xF() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale == timer3_prescale_B_0xF)
#define Set_GPIO_GPIO_TIMER_PRESCALE_timer3_prescale__B_0xF() (p_GPIO_IP->GPIO_TIMER_PRESCALE.GPIO_TIMER_PRESCALE_ts.timer3_prescale = timer3_prescale_B_0xF)
#define timer3_prescale_B_0xF 0xF    //1/32768 prescale
#define Set_GPIO_GPIO_TIMER_PRESCALE(timer0_prescale,timer1_prescale,timer2_prescale,timer3_prescale) (p_GPIO_IP->GPIO_TIMER_PRESCALE.word = (uint32_t)timer0_prescale<<0 | (uint32_t)timer1_prescale<<4 | (uint32_t)timer2_prescale<<8 | (uint32_t)timer3_prescale<<12)
#define Get_GPIO_GPIO_TIMER_PRESCALE() p_GPIO_IP->GPIO_TIMER_PRESCALE.word
#define Set_GPIO_GPIO_TIMER_PRESCALE_word(x) (p_GPIO_IP->GPIO_TIMER_PRESCALE.word = x)


//GPIO_DEBOUNCE_CTRL


#define Get_GPIO_GPIO_DEBOUNCE_CTRL_debounce_enable() p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_enable
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_enable_DISABLE() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_enable == debounce_enable_DISABLE)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_enable__DISABLE() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_enable = debounce_enable_DISABLE)
#define debounce_enable_DISABLE 0x0    //Debounce disabled
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_enable_ENABLE() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_enable == debounce_enable_ENABLE)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_enable__ENABLE() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_enable = debounce_enable_ENABLE)
#define debounce_enable_ENABLE 0x1    //Debounce enabled


#define Get_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale() p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0x0() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0x0)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0x0() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0x0)
#define debounce_prescale_B_0x0 0x0    //1/1 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0x1() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0x1)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0x1() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0x1)
#define debounce_prescale_B_0x1 0x1    //1/2 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0x2() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0x2)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0x2() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0x2)
#define debounce_prescale_B_0x2 0x2    //1/4 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0x3() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0x3)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0x3() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0x3)
#define debounce_prescale_B_0x3 0x3    //1/8 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0x4() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0x4)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0x4() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0x4)
#define debounce_prescale_B_0x4 0x4    //1/16 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0x5() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0x5)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0x5() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0x5)
#define debounce_prescale_B_0x5 0x5    //1/32 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0x6() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0x6)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0x6() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0x6)
#define debounce_prescale_B_0x6 0x6    //1/64 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0x7() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0x7)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0x7() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0x7)
#define debounce_prescale_B_0x7 0x7    //1/128 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0x8() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0x8)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0x8() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0x8)
#define debounce_prescale_B_0x8 0x8    //1/256 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0x9() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0x9)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0x9() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0x9)
#define debounce_prescale_B_0x9 0x9    //1/512 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0xA() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0xA)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0xA() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0xA)
#define debounce_prescale_B_0xA 0xA    //1/1024 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0xB() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0xB)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0xB() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0xB)
#define debounce_prescale_B_0xB 0xB    //1/2048 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0xC() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0xC)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0xC() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0xC)
#define debounce_prescale_B_0xC 0xC    //1/4096 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0xD() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0xD)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0xD() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0xD)
#define debounce_prescale_B_0xD 0xD    //1/8192 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0xE() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0xE)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0xE() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0xE)
#define debounce_prescale_B_0xE 0xE    //1/16384 prescale
#define Is_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale_B_0xF() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale == debounce_prescale_B_0xF)
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_debounce_prescale__B_0xF() (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.GPIO_DEBOUNCE_CTRL_ts.debounce_prescale = debounce_prescale_B_0xF)
#define debounce_prescale_B_0xF 0xF    //1/32768 prescale
#define Set_GPIO_GPIO_DEBOUNCE_CTRL(debounce_enable,debounce_prescale) (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.word = (uint32_t)debounce_enable<<0 | (uint32_t)debounce_prescale<<4)
#define Get_GPIO_GPIO_DEBOUNCE_CTRL() p_GPIO_IP->GPIO_DEBOUNCE_CTRL.word
#define Set_GPIO_GPIO_DEBOUNCE_CTRL_word(x) (p_GPIO_IP->GPIO_DEBOUNCE_CTRL.word = x)


//GPIO_DEBOUNCE_PERIOD


#define Get_GPIO_GPIO_DEBOUNCE_PERIOD_debounce_period() p_GPIO_IP->GPIO_DEBOUNCE_PERIOD.GPIO_DEBOUNCE_PERIOD_ts.debounce_period
#define Set_GPIO_GPIO_DEBOUNCE_PERIOD_debounce_period(x) (p_GPIO_IP->GPIO_DEBOUNCE_PERIOD.GPIO_DEBOUNCE_PERIOD_ts.debounce_period = x)
#define Set_GPIO_GPIO_DEBOUNCE_PERIOD(debounce_period) (p_GPIO_IP->GPIO_DEBOUNCE_PERIOD.word = (uint32_t)debounce_period<<0)
#define Get_GPIO_GPIO_DEBOUNCE_PERIOD() p_GPIO_IP->GPIO_DEBOUNCE_PERIOD.word
#define Set_GPIO_GPIO_DEBOUNCE_PERIOD_word(x) (p_GPIO_IP->GPIO_DEBOUNCE_PERIOD.word = x)


//GPIO_IDP_FRAME_COUNT


#define Get_GPIO_GPIO_IDP_FRAME_COUNT_frame_count() p_GPIO_IP->GPIO_IDP_FRAME_COUNT.GPIO_IDP_FRAME_COUNT_ts.frame_count
#define Get_GPIO_GPIO_IDP_FRAME_COUNT() p_GPIO_IP->GPIO_IDP_FRAME_COUNT.word


//GPIO_GPI


#define Get_GPIO_GPIO_GPI_gpi() p_GPIO_IP->GPIO_GPI.GPIO_GPI_ts.gpi
#define Get_GPIO_GPIO_GPI() p_GPIO_IP->GPIO_GPI.word


//GPIO_GPO


#define Get_GPIO_GPIO_GPO_gpo() p_GPIO_IP->GPIO_GPO.GPIO_GPO_ts.gpo
#define Is_GPIO_GPIO_GPO_gpo_B_0x0() (p_GPIO_IP->GPIO_GPO.GPIO_GPO_ts.gpo == gpo_B_0x0)
#define Set_GPIO_GPIO_GPO_gpo__B_0x0() (p_GPIO_IP->GPIO_GPO.GPIO_GPO_ts.gpo = gpo_B_0x0)
#define gpo_B_0x0 0x0    //Corresponding gpo pin is driven low
#define Is_GPIO_GPIO_GPO_gpo_B_0x1() (p_GPIO_IP->GPIO_GPO.GPIO_GPO_ts.gpo == gpo_B_0x1)
#define Set_GPIO_GPIO_GPO_gpo__B_0x1() (p_GPIO_IP->GPIO_GPO.GPIO_GPO_ts.gpo = gpo_B_0x1)
#define gpo_B_0x1 0x1    //Corresponding gpo pin is driven high
#define Set_GPIO_GPIO_GPO(gpo) (p_GPIO_IP->GPIO_GPO.word = (uint32_t)gpo<<0)
#define Get_GPIO_GPIO_GPO() p_GPIO_IP->GPIO_GPO.word
#define Set_GPIO_GPIO_GPO_word(x) (p_GPIO_IP->GPIO_GPO.word = x)


//GPIO_GPD


#define Get_GPIO_GPIO_GPD_gpd() p_GPIO_IP->GPIO_GPD.GPIO_GPD_ts.gpd
#define Is_GPIO_GPIO_GPD_gpd_DIR_INPUT() (p_GPIO_IP->GPIO_GPD.GPIO_GPD_ts.gpd == gpd_DIR_INPUT)
#define Set_GPIO_GPIO_GPD_gpd__DIR_INPUT() (p_GPIO_IP->GPIO_GPD.GPIO_GPD_ts.gpd = gpd_DIR_INPUT)
#define gpd_DIR_INPUT 0x0    //input
#define Is_GPIO_GPIO_GPD_gpd_DIR_OUTPUT() (p_GPIO_IP->GPIO_GPD.GPIO_GPD_ts.gpd == gpd_DIR_OUTPUT)
#define Set_GPIO_GPIO_GPD_gpd__DIR_OUTPUT() (p_GPIO_IP->GPIO_GPD.GPIO_GPD_ts.gpd = gpd_DIR_OUTPUT)
#define gpd_DIR_OUTPUT 0x1    //output
#define Set_GPIO_GPIO_GPD(gpd) (p_GPIO_IP->GPIO_GPD.word = (uint32_t)gpd<<0)
#define Get_GPIO_GPIO_GPD() p_GPIO_IP->GPIO_GPD.word
#define Set_GPIO_GPIO_GPD_word(x) (p_GPIO_IP->GPIO_GPD.word = x)


//GPIO_CHANNEL0_CTRL0


#define Get_GPIO_GPIO_CHANNEL0_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL0_CTRL0.GPIO_CHANNEL0_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL0_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL0_CTRL0.GPIO_CHANNEL0_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL0_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL0_CTRL0.GPIO_CHANNEL0_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL0_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL0_CTRL0.GPIO_CHANNEL0_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL0_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL0_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL0_CTRL0() p_GPIO_IP->GPIO_CHANNEL0_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL0_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL0_CTRL0.word = x)


//GPIO_CHANNEL0_CTRL0_EXT


#define Get_GPIO_GPIO_CHANNEL0_CTRL0_EXT_ctrl0_ext() p_GPIO_IP->GPIO_CHANNEL0_CTRL0_EXT.GPIO_CHANNEL0_CTRL0_EXT_ts.ctrl0_ext
#define Set_GPIO_GPIO_CHANNEL0_CTRL0_EXT_ctrl0_ext(x) (p_GPIO_IP->GPIO_CHANNEL0_CTRL0_EXT.GPIO_CHANNEL0_CTRL0_EXT_ts.ctrl0_ext = x)
#define Set_GPIO_GPIO_CHANNEL0_CTRL0_EXT(ctrl0_ext) (p_GPIO_IP->GPIO_CHANNEL0_CTRL0_EXT.word = (uint32_t)ctrl0_ext<<0)
#define Get_GPIO_GPIO_CHANNEL0_CTRL0_EXT() p_GPIO_IP->GPIO_CHANNEL0_CTRL0_EXT.word
#define Set_GPIO_GPIO_CHANNEL0_CTRL0_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL0_CTRL0_EXT.word = x)


//GPIO_CHANNEL0_CTRL1


#define Get_GPIO_GPIO_CHANNEL0_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL0_CTRL1.GPIO_CHANNEL0_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL0_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL0_CTRL1.GPIO_CHANNEL0_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL0_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL0_CTRL1.GPIO_CHANNEL0_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL0_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL0_CTRL1.GPIO_CHANNEL0_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL0_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL0_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL0_CTRL1() p_GPIO_IP->GPIO_CHANNEL0_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL0_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL0_CTRL1.word = x)


//GPIO_CHANNEL0_CTRL1_EXT


#define Get_GPIO_GPIO_CHANNEL0_CTRL1_EXT_ctrl1_ext() p_GPIO_IP->GPIO_CHANNEL0_CTRL1_EXT.GPIO_CHANNEL0_CTRL1_EXT_ts.ctrl1_ext
#define Set_GPIO_GPIO_CHANNEL0_CTRL1_EXT_ctrl1_ext(x) (p_GPIO_IP->GPIO_CHANNEL0_CTRL1_EXT.GPIO_CHANNEL0_CTRL1_EXT_ts.ctrl1_ext = x)
#define Set_GPIO_GPIO_CHANNEL0_CTRL1_EXT(ctrl1_ext) (p_GPIO_IP->GPIO_CHANNEL0_CTRL1_EXT.word = (uint32_t)ctrl1_ext<<0)
#define Get_GPIO_GPIO_CHANNEL0_CTRL1_EXT() p_GPIO_IP->GPIO_CHANNEL0_CTRL1_EXT.word
#define Set_GPIO_GPIO_CHANNEL0_CTRL1_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL0_CTRL1_EXT.word = x)


//GPIO_CHANNEL0_REPEAT


#define Get_GPIO_GPIO_CHANNEL0_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL0_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL0_REPEAT_line_mode() p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.line_mode
#define Is_GPIO_GPIO_CHANNEL0_REPEAT_line_mode_LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.line_mode == line_mode_LINE_REPEAT)
#define Set_GPIO_GPIO_CHANNEL0_REPEAT_line_mode__LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.line_mode = line_mode_LINE_REPEAT)
#define line_mode_LINE_REPEAT 0x0    //Repeat done once in a frame. In this case, the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count programmed in PWM n rise trigger, the sequence will be repeated once in a frame. The repeat count is determined by the repeat until / repeat count fields of this register.
#define Is_GPIO_GPIO_CHANNEL0_REPEAT_line_mode_FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.line_mode == line_mode_FRAME_REPEAT)
#define Set_GPIO_GPIO_CHANNEL0_REPEAT_line_mode__FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.line_mode = line_mode_FRAME_REPEAT)
#define line_mode_FRAME_REPEAT 0x1    //Repeat done once in a line. In this case, the line count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Similarly the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count and line count programmed in the PWM n rise trigger, the sequence will be repeated once in a line. The repeat count is determined by the repeat until / repeat count fields of this register.


#define Get_GPIO_GPIO_CHANNEL0_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL0_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL0_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL0_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL0_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL0_REPEAT.GPIO_CHANNEL0_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL0_REPEAT(repeat,line_mode,until) (p_GPIO_IP->GPIO_CHANNEL0_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)line_mode<<8 | (uint32_t)until<<9)
#define Get_GPIO_GPIO_CHANNEL0_REPEAT() p_GPIO_IP->GPIO_CHANNEL0_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL0_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL0_REPEAT.word = x)


//GPIO_CHANNEL1_CTRL0


#define Get_GPIO_GPIO_CHANNEL1_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL1_CTRL0.GPIO_CHANNEL1_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL1_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL1_CTRL0.GPIO_CHANNEL1_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL1_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL1_CTRL0.GPIO_CHANNEL1_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL1_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL1_CTRL0.GPIO_CHANNEL1_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL1_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL1_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL1_CTRL0() p_GPIO_IP->GPIO_CHANNEL1_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL1_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL1_CTRL0.word = x)


//GPIO_CHANNEL1_CTRL0_EXT


#define Get_GPIO_GPIO_CHANNEL1_CTRL0_EXT_ctrl0_ext() p_GPIO_IP->GPIO_CHANNEL1_CTRL0_EXT.GPIO_CHANNEL1_CTRL0_EXT_ts.ctrl0_ext
#define Set_GPIO_GPIO_CHANNEL1_CTRL0_EXT_ctrl0_ext(x) (p_GPIO_IP->GPIO_CHANNEL1_CTRL0_EXT.GPIO_CHANNEL1_CTRL0_EXT_ts.ctrl0_ext = x)
#define Set_GPIO_GPIO_CHANNEL1_CTRL0_EXT(ctrl0_ext) (p_GPIO_IP->GPIO_CHANNEL1_CTRL0_EXT.word = (uint32_t)ctrl0_ext<<0)
#define Get_GPIO_GPIO_CHANNEL1_CTRL0_EXT() p_GPIO_IP->GPIO_CHANNEL1_CTRL0_EXT.word
#define Set_GPIO_GPIO_CHANNEL1_CTRL0_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL1_CTRL0_EXT.word = x)


//GPIO_CHANNEL1_CTRL1


#define Get_GPIO_GPIO_CHANNEL1_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL1_CTRL1.GPIO_CHANNEL1_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL1_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL1_CTRL1.GPIO_CHANNEL1_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL1_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL1_CTRL1.GPIO_CHANNEL1_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL1_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL1_CTRL1.GPIO_CHANNEL1_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL1_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL1_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL1_CTRL1() p_GPIO_IP->GPIO_CHANNEL1_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL1_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL1_CTRL1.word = x)


//GPIO_CHANNEL1_CTRL1_EXT


#define Get_GPIO_GPIO_CHANNEL1_CTRL1_EXT_ctrl1_ext() p_GPIO_IP->GPIO_CHANNEL1_CTRL1_EXT.GPIO_CHANNEL1_CTRL1_EXT_ts.ctrl1_ext
#define Set_GPIO_GPIO_CHANNEL1_CTRL1_EXT_ctrl1_ext(x) (p_GPIO_IP->GPIO_CHANNEL1_CTRL1_EXT.GPIO_CHANNEL1_CTRL1_EXT_ts.ctrl1_ext = x)
#define Set_GPIO_GPIO_CHANNEL1_CTRL1_EXT(ctrl1_ext) (p_GPIO_IP->GPIO_CHANNEL1_CTRL1_EXT.word = (uint32_t)ctrl1_ext<<0)
#define Get_GPIO_GPIO_CHANNEL1_CTRL1_EXT() p_GPIO_IP->GPIO_CHANNEL1_CTRL1_EXT.word
#define Set_GPIO_GPIO_CHANNEL1_CTRL1_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL1_CTRL1_EXT.word = x)


//GPIO_CHANNEL1_REPEAT


#define Get_GPIO_GPIO_CHANNEL1_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL1_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL1_REPEAT_line_mode() p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.line_mode
#define Is_GPIO_GPIO_CHANNEL1_REPEAT_line_mode_LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.line_mode == line_mode_LINE_REPEAT)
#define Set_GPIO_GPIO_CHANNEL1_REPEAT_line_mode__LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.line_mode = line_mode_LINE_REPEAT)
#define line_mode_LINE_REPEAT 0x0    //Repeat done once in a frame. In this case, the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count programmed in PWM n rise trigger, the sequence will be repeated once in a frame. The repeat count is determined by the repeat until / repeat count fields of this register.
#define Is_GPIO_GPIO_CHANNEL1_REPEAT_line_mode_FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.line_mode == line_mode_FRAME_REPEAT)
#define Set_GPIO_GPIO_CHANNEL1_REPEAT_line_mode__FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.line_mode = line_mode_FRAME_REPEAT)
#define line_mode_FRAME_REPEAT 0x1    //Repeat done once in a line. In this case, the line count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Similarly the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count and line count programmed in the PWM n rise trigger, the sequence will be repeated once in a line. The repeat count is determined by the repeat until / repeat count fields of this register.


#define Get_GPIO_GPIO_CHANNEL1_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL1_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL1_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL1_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL1_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL1_REPEAT.GPIO_CHANNEL1_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL1_REPEAT(repeat,line_mode,until) (p_GPIO_IP->GPIO_CHANNEL1_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)line_mode<<8 | (uint32_t)until<<9)
#define Get_GPIO_GPIO_CHANNEL1_REPEAT() p_GPIO_IP->GPIO_CHANNEL1_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL1_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL1_REPEAT.word = x)


//GPIO_CHANNEL2_CTRL0


#define Get_GPIO_GPIO_CHANNEL2_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL2_CTRL0.GPIO_CHANNEL2_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL2_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL2_CTRL0.GPIO_CHANNEL2_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL2_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL2_CTRL0.GPIO_CHANNEL2_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL2_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL2_CTRL0.GPIO_CHANNEL2_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL2_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL2_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL2_CTRL0() p_GPIO_IP->GPIO_CHANNEL2_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL2_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL2_CTRL0.word = x)


//GPIO_CHANNEL2_CTRL0_EXT


#define Get_GPIO_GPIO_CHANNEL2_CTRL0_EXT_ctrl0_ext() p_GPIO_IP->GPIO_CHANNEL2_CTRL0_EXT.GPIO_CHANNEL2_CTRL0_EXT_ts.ctrl0_ext
#define Set_GPIO_GPIO_CHANNEL2_CTRL0_EXT_ctrl0_ext(x) (p_GPIO_IP->GPIO_CHANNEL2_CTRL0_EXT.GPIO_CHANNEL2_CTRL0_EXT_ts.ctrl0_ext = x)
#define Set_GPIO_GPIO_CHANNEL2_CTRL0_EXT(ctrl0_ext) (p_GPIO_IP->GPIO_CHANNEL2_CTRL0_EXT.word = (uint32_t)ctrl0_ext<<0)
#define Get_GPIO_GPIO_CHANNEL2_CTRL0_EXT() p_GPIO_IP->GPIO_CHANNEL2_CTRL0_EXT.word
#define Set_GPIO_GPIO_CHANNEL2_CTRL0_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL2_CTRL0_EXT.word = x)


//GPIO_CHANNEL2_CTRL1


#define Get_GPIO_GPIO_CHANNEL2_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL2_CTRL1.GPIO_CHANNEL2_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL2_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL2_CTRL1.GPIO_CHANNEL2_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL2_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL2_CTRL1.GPIO_CHANNEL2_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL2_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL2_CTRL1.GPIO_CHANNEL2_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL2_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL2_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL2_CTRL1() p_GPIO_IP->GPIO_CHANNEL2_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL2_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL2_CTRL1.word = x)


//GPIO_CHANNEL2_CTRL1_EXT


#define Get_GPIO_GPIO_CHANNEL2_CTRL1_EXT_ctrl1_ext() p_GPIO_IP->GPIO_CHANNEL2_CTRL1_EXT.GPIO_CHANNEL2_CTRL1_EXT_ts.ctrl1_ext
#define Set_GPIO_GPIO_CHANNEL2_CTRL1_EXT_ctrl1_ext(x) (p_GPIO_IP->GPIO_CHANNEL2_CTRL1_EXT.GPIO_CHANNEL2_CTRL1_EXT_ts.ctrl1_ext = x)
#define Set_GPIO_GPIO_CHANNEL2_CTRL1_EXT(ctrl1_ext) (p_GPIO_IP->GPIO_CHANNEL2_CTRL1_EXT.word = (uint32_t)ctrl1_ext<<0)
#define Get_GPIO_GPIO_CHANNEL2_CTRL1_EXT() p_GPIO_IP->GPIO_CHANNEL2_CTRL1_EXT.word
#define Set_GPIO_GPIO_CHANNEL2_CTRL1_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL2_CTRL1_EXT.word = x)


//GPIO_CHANNEL2_REPEAT


#define Get_GPIO_GPIO_CHANNEL2_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL2_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL2_REPEAT_line_mode() p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.line_mode
#define Is_GPIO_GPIO_CHANNEL2_REPEAT_line_mode_LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.line_mode == line_mode_LINE_REPEAT)
#define Set_GPIO_GPIO_CHANNEL2_REPEAT_line_mode__LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.line_mode = line_mode_LINE_REPEAT)
#define line_mode_LINE_REPEAT 0x0    //Repeat done once in a frame. In this case, the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count programmed in PWM n rise trigger, the sequence will be repeated once in a frame. The repeat count is determined by the repeat until / repeat count fields of this register.
#define Is_GPIO_GPIO_CHANNEL2_REPEAT_line_mode_FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.line_mode == line_mode_FRAME_REPEAT)
#define Set_GPIO_GPIO_CHANNEL2_REPEAT_line_mode__FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.line_mode = line_mode_FRAME_REPEAT)
#define line_mode_FRAME_REPEAT 0x1    //Repeat done once in a line. In this case, the line count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Similarly the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count and line count programmed in the PWM n rise trigger, the sequence will be repeated once in a line. The repeat count is determined by the repeat until / repeat count fields of this register.


#define Get_GPIO_GPIO_CHANNEL2_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL2_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL2_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL2_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL2_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL2_REPEAT.GPIO_CHANNEL2_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL2_REPEAT(repeat,line_mode,until) (p_GPIO_IP->GPIO_CHANNEL2_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)line_mode<<8 | (uint32_t)until<<9)
#define Get_GPIO_GPIO_CHANNEL2_REPEAT() p_GPIO_IP->GPIO_CHANNEL2_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL2_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL2_REPEAT.word = x)


//GPIO_CHANNEL3_CTRL0


#define Get_GPIO_GPIO_CHANNEL3_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL3_CTRL0.GPIO_CHANNEL3_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL3_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL3_CTRL0.GPIO_CHANNEL3_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL3_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL3_CTRL0.GPIO_CHANNEL3_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL3_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL3_CTRL0.GPIO_CHANNEL3_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL3_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL3_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL3_CTRL0() p_GPIO_IP->GPIO_CHANNEL3_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL3_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL3_CTRL0.word = x)


//GPIO_CHANNEL3_CTRL0_EXT


#define Get_GPIO_GPIO_CHANNEL3_CTRL0_EXT_ctrl0_ext() p_GPIO_IP->GPIO_CHANNEL3_CTRL0_EXT.GPIO_CHANNEL3_CTRL0_EXT_ts.ctrl0_ext
#define Set_GPIO_GPIO_CHANNEL3_CTRL0_EXT_ctrl0_ext(x) (p_GPIO_IP->GPIO_CHANNEL3_CTRL0_EXT.GPIO_CHANNEL3_CTRL0_EXT_ts.ctrl0_ext = x)
#define Set_GPIO_GPIO_CHANNEL3_CTRL0_EXT(ctrl0_ext) (p_GPIO_IP->GPIO_CHANNEL3_CTRL0_EXT.word = (uint32_t)ctrl0_ext<<0)
#define Get_GPIO_GPIO_CHANNEL3_CTRL0_EXT() p_GPIO_IP->GPIO_CHANNEL3_CTRL0_EXT.word
#define Set_GPIO_GPIO_CHANNEL3_CTRL0_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL3_CTRL0_EXT.word = x)


//GPIO_CHANNEL3_CTRL1


#define Get_GPIO_GPIO_CHANNEL3_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL3_CTRL1.GPIO_CHANNEL3_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL3_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL3_CTRL1.GPIO_CHANNEL3_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL3_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL3_CTRL1.GPIO_CHANNEL3_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL3_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL3_CTRL1.GPIO_CHANNEL3_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL3_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL3_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL3_CTRL1() p_GPIO_IP->GPIO_CHANNEL3_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL3_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL3_CTRL1.word = x)


//GPIO_CHANNEL3_CTRL1_EXT


#define Get_GPIO_GPIO_CHANNEL3_CTRL1_EXT_ctrl1_ext() p_GPIO_IP->GPIO_CHANNEL3_CTRL1_EXT.GPIO_CHANNEL3_CTRL1_EXT_ts.ctrl1_ext
#define Set_GPIO_GPIO_CHANNEL3_CTRL1_EXT_ctrl1_ext(x) (p_GPIO_IP->GPIO_CHANNEL3_CTRL1_EXT.GPIO_CHANNEL3_CTRL1_EXT_ts.ctrl1_ext = x)
#define Set_GPIO_GPIO_CHANNEL3_CTRL1_EXT(ctrl1_ext) (p_GPIO_IP->GPIO_CHANNEL3_CTRL1_EXT.word = (uint32_t)ctrl1_ext<<0)
#define Get_GPIO_GPIO_CHANNEL3_CTRL1_EXT() p_GPIO_IP->GPIO_CHANNEL3_CTRL1_EXT.word
#define Set_GPIO_GPIO_CHANNEL3_CTRL1_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL3_CTRL1_EXT.word = x)


//GPIO_CHANNEL3_REPEAT


#define Get_GPIO_GPIO_CHANNEL3_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL3_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL3_REPEAT_line_mode() p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.line_mode
#define Is_GPIO_GPIO_CHANNEL3_REPEAT_line_mode_LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.line_mode == line_mode_LINE_REPEAT)
#define Set_GPIO_GPIO_CHANNEL3_REPEAT_line_mode__LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.line_mode = line_mode_LINE_REPEAT)
#define line_mode_LINE_REPEAT 0x0    //Repeat done once in a frame. In this case, the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count programmed in PWM n rise trigger, the sequence will be repeated once in a frame. The repeat count is determined by the repeat until / repeat count fields of this register.
#define Is_GPIO_GPIO_CHANNEL3_REPEAT_line_mode_FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.line_mode == line_mode_FRAME_REPEAT)
#define Set_GPIO_GPIO_CHANNEL3_REPEAT_line_mode__FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.line_mode = line_mode_FRAME_REPEAT)
#define line_mode_FRAME_REPEAT 0x1    //Repeat done once in a line. In this case, the line count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Similarly the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count and line count programmed in the PWM n rise trigger, the sequence will be repeated once in a line. The repeat count is determined by the repeat until / repeat count fields of this register.


#define Get_GPIO_GPIO_CHANNEL3_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL3_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL3_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL3_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL3_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL3_REPEAT.GPIO_CHANNEL3_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL3_REPEAT(repeat,line_mode,until) (p_GPIO_IP->GPIO_CHANNEL3_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)line_mode<<8 | (uint32_t)until<<9)
#define Get_GPIO_GPIO_CHANNEL3_REPEAT() p_GPIO_IP->GPIO_CHANNEL3_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL3_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL3_REPEAT.word = x)


//GPIO_CHANNEL4_CTRL0


#define Get_GPIO_GPIO_CHANNEL4_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL4_CTRL0.GPIO_CHANNEL4_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL4_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL4_CTRL0.GPIO_CHANNEL4_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL4_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL4_CTRL0.GPIO_CHANNEL4_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL4_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL4_CTRL0.GPIO_CHANNEL4_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL4_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL4_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL4_CTRL0() p_GPIO_IP->GPIO_CHANNEL4_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL4_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL4_CTRL0.word = x)


//GPIO_CHANNEL4_CTRL0_EXT


#define Get_GPIO_GPIO_CHANNEL4_CTRL0_EXT_ctrl0_ext() p_GPIO_IP->GPIO_CHANNEL4_CTRL0_EXT.GPIO_CHANNEL4_CTRL0_EXT_ts.ctrl0_ext
#define Set_GPIO_GPIO_CHANNEL4_CTRL0_EXT_ctrl0_ext(x) (p_GPIO_IP->GPIO_CHANNEL4_CTRL0_EXT.GPIO_CHANNEL4_CTRL0_EXT_ts.ctrl0_ext = x)
#define Set_GPIO_GPIO_CHANNEL4_CTRL0_EXT(ctrl0_ext) (p_GPIO_IP->GPIO_CHANNEL4_CTRL0_EXT.word = (uint32_t)ctrl0_ext<<0)
#define Get_GPIO_GPIO_CHANNEL4_CTRL0_EXT() p_GPIO_IP->GPIO_CHANNEL4_CTRL0_EXT.word
#define Set_GPIO_GPIO_CHANNEL4_CTRL0_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL4_CTRL0_EXT.word = x)


//GPIO_CHANNEL4_CTRL1


#define Get_GPIO_GPIO_CHANNEL4_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL4_CTRL1.GPIO_CHANNEL4_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL4_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL4_CTRL1.GPIO_CHANNEL4_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL4_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL4_CTRL1.GPIO_CHANNEL4_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL4_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL4_CTRL1.GPIO_CHANNEL4_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL4_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL4_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL4_CTRL1() p_GPIO_IP->GPIO_CHANNEL4_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL4_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL4_CTRL1.word = x)


//GPIO_CHANNEL4_CTRL1_EXT


#define Get_GPIO_GPIO_CHANNEL4_CTRL1_EXT_ctrl1_ext() p_GPIO_IP->GPIO_CHANNEL4_CTRL1_EXT.GPIO_CHANNEL4_CTRL1_EXT_ts.ctrl1_ext
#define Set_GPIO_GPIO_CHANNEL4_CTRL1_EXT_ctrl1_ext(x) (p_GPIO_IP->GPIO_CHANNEL4_CTRL1_EXT.GPIO_CHANNEL4_CTRL1_EXT_ts.ctrl1_ext = x)
#define Set_GPIO_GPIO_CHANNEL4_CTRL1_EXT(ctrl1_ext) (p_GPIO_IP->GPIO_CHANNEL4_CTRL1_EXT.word = (uint32_t)ctrl1_ext<<0)
#define Get_GPIO_GPIO_CHANNEL4_CTRL1_EXT() p_GPIO_IP->GPIO_CHANNEL4_CTRL1_EXT.word
#define Set_GPIO_GPIO_CHANNEL4_CTRL1_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL4_CTRL1_EXT.word = x)


//GPIO_CHANNEL4_REPEAT


#define Get_GPIO_GPIO_CHANNEL4_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL4_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL4_REPEAT_line_mode() p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.line_mode
#define Is_GPIO_GPIO_CHANNEL4_REPEAT_line_mode_LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.line_mode == line_mode_LINE_REPEAT)
#define Set_GPIO_GPIO_CHANNEL4_REPEAT_line_mode__LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.line_mode = line_mode_LINE_REPEAT)
#define line_mode_LINE_REPEAT 0x0    //Repeat done once in a frame. In this case, the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count programmed in PWM n rise trigger, the sequence will be repeated once in a frame. The repeat count is determined by the repeat until / repeat count fields of this register.
#define Is_GPIO_GPIO_CHANNEL4_REPEAT_line_mode_FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.line_mode == line_mode_FRAME_REPEAT)
#define Set_GPIO_GPIO_CHANNEL4_REPEAT_line_mode__FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.line_mode = line_mode_FRAME_REPEAT)
#define line_mode_FRAME_REPEAT 0x1    //Repeat done once in a line. In this case, the line count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Similarly the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count and line count programmed in the PWM n rise trigger, the sequence will be repeated once in a line. The repeat count is determined by the repeat until / repeat count fields of this register.


#define Get_GPIO_GPIO_CHANNEL4_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL4_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL4_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL4_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL4_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL4_REPEAT.GPIO_CHANNEL4_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL4_REPEAT(repeat,line_mode,until) (p_GPIO_IP->GPIO_CHANNEL4_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)line_mode<<8 | (uint32_t)until<<9)
#define Get_GPIO_GPIO_CHANNEL4_REPEAT() p_GPIO_IP->GPIO_CHANNEL4_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL4_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL4_REPEAT.word = x)


//GPIO_CHANNEL5_CTRL0


#define Get_GPIO_GPIO_CHANNEL5_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL5_CTRL0.GPIO_CHANNEL5_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL5_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL5_CTRL0.GPIO_CHANNEL5_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL5_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL5_CTRL0.GPIO_CHANNEL5_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL5_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL5_CTRL0.GPIO_CHANNEL5_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL5_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL5_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL5_CTRL0() p_GPIO_IP->GPIO_CHANNEL5_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL5_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL5_CTRL0.word = x)


//GPIO_CHANNEL5_CTRL0_EXT


#define Get_GPIO_GPIO_CHANNEL5_CTRL0_EXT_ctrl0_ext() p_GPIO_IP->GPIO_CHANNEL5_CTRL0_EXT.GPIO_CHANNEL5_CTRL0_EXT_ts.ctrl0_ext
#define Set_GPIO_GPIO_CHANNEL5_CTRL0_EXT_ctrl0_ext(x) (p_GPIO_IP->GPIO_CHANNEL5_CTRL0_EXT.GPIO_CHANNEL5_CTRL0_EXT_ts.ctrl0_ext = x)
#define Set_GPIO_GPIO_CHANNEL5_CTRL0_EXT(ctrl0_ext) (p_GPIO_IP->GPIO_CHANNEL5_CTRL0_EXT.word = (uint32_t)ctrl0_ext<<0)
#define Get_GPIO_GPIO_CHANNEL5_CTRL0_EXT() p_GPIO_IP->GPIO_CHANNEL5_CTRL0_EXT.word
#define Set_GPIO_GPIO_CHANNEL5_CTRL0_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL5_CTRL0_EXT.word = x)


//GPIO_CHANNEL5_CTRL1


#define Get_GPIO_GPIO_CHANNEL5_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL5_CTRL1.GPIO_CHANNEL5_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL5_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL5_CTRL1.GPIO_CHANNEL5_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL5_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL5_CTRL1.GPIO_CHANNEL5_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL5_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL5_CTRL1.GPIO_CHANNEL5_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL5_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL5_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL5_CTRL1() p_GPIO_IP->GPIO_CHANNEL5_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL5_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL5_CTRL1.word = x)


//GPIO_CHANNEL5_CTRL1_EXT


#define Get_GPIO_GPIO_CHANNEL5_CTRL1_EXT_ctrl1_ext() p_GPIO_IP->GPIO_CHANNEL5_CTRL1_EXT.GPIO_CHANNEL5_CTRL1_EXT_ts.ctrl1_ext
#define Set_GPIO_GPIO_CHANNEL5_CTRL1_EXT_ctrl1_ext(x) (p_GPIO_IP->GPIO_CHANNEL5_CTRL1_EXT.GPIO_CHANNEL5_CTRL1_EXT_ts.ctrl1_ext = x)
#define Set_GPIO_GPIO_CHANNEL5_CTRL1_EXT(ctrl1_ext) (p_GPIO_IP->GPIO_CHANNEL5_CTRL1_EXT.word = (uint32_t)ctrl1_ext<<0)
#define Get_GPIO_GPIO_CHANNEL5_CTRL1_EXT() p_GPIO_IP->GPIO_CHANNEL5_CTRL1_EXT.word
#define Set_GPIO_GPIO_CHANNEL5_CTRL1_EXT_word(x) (p_GPIO_IP->GPIO_CHANNEL5_CTRL1_EXT.word = x)


//GPIO_CHANNEL5_REPEAT


#define Get_GPIO_GPIO_CHANNEL5_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL5_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL5_REPEAT_line_mode() p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.line_mode
#define Is_GPIO_GPIO_CHANNEL5_REPEAT_line_mode_LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.line_mode == line_mode_LINE_REPEAT)
#define Set_GPIO_GPIO_CHANNEL5_REPEAT_line_mode__LINE_REPEAT() (p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.line_mode = line_mode_LINE_REPEAT)
#define line_mode_LINE_REPEAT 0x0    //Repeat done once in a frame. In this case, the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count programmed in PWM n rise trigger, the sequence will be repeated once in a frame. The repeat count is determined by the repeat until / repeat count fields of this register.
#define Is_GPIO_GPIO_CHANNEL5_REPEAT_line_mode_FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.line_mode == line_mode_FRAME_REPEAT)
#define Set_GPIO_GPIO_CHANNEL5_REPEAT_line_mode__FRAME_REPEAT() (p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.line_mode = line_mode_FRAME_REPEAT)
#define line_mode_FRAME_REPEAT 0x1    //Repeat done once in a line. In this case, the line count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Similarly the frame count in PWM n rise trigger and PWM n fall trigger should be programmed the same value. Starting from the frame count and line count programmed in the PWM n rise trigger, the sequence will be repeated once in a line. The repeat count is determined by the repeat until / repeat count fields of this register.


#define Get_GPIO_GPIO_CHANNEL5_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL5_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL5_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL5_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL5_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL5_REPEAT.GPIO_CHANNEL5_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL5_REPEAT(repeat,line_mode,until) (p_GPIO_IP->GPIO_CHANNEL5_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)line_mode<<8 | (uint32_t)until<<9)
#define Get_GPIO_GPIO_CHANNEL5_REPEAT() p_GPIO_IP->GPIO_CHANNEL5_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL5_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL5_REPEAT.word = x)


//GPIO_CHANNEL6_STG_ENABLE


#define Get_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage0_enable() p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage0_enable
#define Is_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage0_enable_DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage0_enable == stage0_enable_DISABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage0_enable__DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage0_enable = stage0_enable_DISABLE)
#define stage0_enable_DISABLE 0x0    //Stage disabled.
#define Is_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage0_enable_ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage0_enable == stage0_enable_ENABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage0_enable__ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage0_enable = stage0_enable_ENABLE)
#define stage0_enable_ENABLE 0x1    //Stage enabled


#define Get_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage1_enable() p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage1_enable
#define Is_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage1_enable_DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage1_enable == stage1_enable_DISABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage1_enable__DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage1_enable = stage1_enable_DISABLE)
#define stage1_enable_DISABLE 0x0    //Stage disabled.
#define Is_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage1_enable_ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage1_enable == stage1_enable_ENABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage1_enable__ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage1_enable = stage1_enable_ENABLE)
#define stage1_enable_ENABLE 0x1    //Stage enabled


#define Get_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage2_enable() p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage2_enable
#define Is_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage2_enable_DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage2_enable == stage2_enable_DISABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage2_enable__DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage2_enable = stage2_enable_DISABLE)
#define stage2_enable_DISABLE 0x0    //Stage disabled.
#define Is_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage2_enable_ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage2_enable == stage2_enable_ENABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG_ENABLE_stage2_enable__ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.GPIO_CHANNEL6_STG_ENABLE_ts.stage2_enable = stage2_enable_ENABLE)
#define stage2_enable_ENABLE 0x1    //Stage enabled
#define Set_GPIO_GPIO_CHANNEL6_STG_ENABLE(stage0_enable,stage1_enable,stage2_enable) (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.word = (uint32_t)stage0_enable<<0 | (uint32_t)stage1_enable<<1 | (uint32_t)stage2_enable<<2)
#define Get_GPIO_GPIO_CHANNEL6_STG_ENABLE() p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.word
#define Set_GPIO_GPIO_CHANNEL6_STG_ENABLE_word(x) (p_GPIO_IP->GPIO_CHANNEL6_STG_ENABLE.word = x)


//GPIO_CHANNEL6_STG0_CTRL0


#define Get_GPIO_GPIO_CHANNEL6_STG0_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL0.GPIO_CHANNEL6_STG0_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL6_STG0_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL0.GPIO_CHANNEL6_STG0_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL6_STG0_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL0.GPIO_CHANNEL6_STG0_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL6_STG0_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL0.GPIO_CHANNEL6_STG0_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL6_STG0_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL6_STG0_CTRL0() p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL6_STG0_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL0.word = x)


//GPIO_CHANNEL6_STG0_CTRL1


#define Get_GPIO_GPIO_CHANNEL6_STG0_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL1.GPIO_CHANNEL6_STG0_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL6_STG0_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL1.GPIO_CHANNEL6_STG0_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL6_STG0_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL1.GPIO_CHANNEL6_STG0_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL6_STG0_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL1.GPIO_CHANNEL6_STG0_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL6_STG0_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL6_STG0_CTRL1() p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL6_STG0_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL6_STG0_CTRL1.word = x)


//GPIO_CHANNEL6_STG0_REPEAT


#define Get_GPIO_GPIO_CHANNEL6_STG0_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL6_STG0_REPEAT.GPIO_CHANNEL6_STG0_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL6_STG0_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL6_STG0_REPEAT.GPIO_CHANNEL6_STG0_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL6_STG0_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL6_STG0_REPEAT.GPIO_CHANNEL6_STG0_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL6_STG0_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG0_REPEAT.GPIO_CHANNEL6_STG0_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG0_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG0_REPEAT.GPIO_CHANNEL6_STG0_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL6_STG0_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG0_REPEAT.GPIO_CHANNEL6_STG0_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG0_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG0_REPEAT.GPIO_CHANNEL6_STG0_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL6_STG0_REPEAT(repeat,until) (p_GPIO_IP->GPIO_CHANNEL6_STG0_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)until<<8)
#define Get_GPIO_GPIO_CHANNEL6_STG0_REPEAT() p_GPIO_IP->GPIO_CHANNEL6_STG0_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL6_STG0_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL6_STG0_REPEAT.word = x)


//GPIO_CHANNEL6_STG1_CTRL0


#define Get_GPIO_GPIO_CHANNEL6_STG1_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL0.GPIO_CHANNEL6_STG1_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL6_STG1_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL0.GPIO_CHANNEL6_STG1_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL6_STG1_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL0.GPIO_CHANNEL6_STG1_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL6_STG1_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL0.GPIO_CHANNEL6_STG1_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL6_STG1_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL6_STG1_CTRL0() p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL6_STG1_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL0.word = x)


//GPIO_CHANNEL6_STG1_CTRL1


#define Get_GPIO_GPIO_CHANNEL6_STG1_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL1.GPIO_CHANNEL6_STG1_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL6_STG1_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL1.GPIO_CHANNEL6_STG1_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL6_STG1_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL1.GPIO_CHANNEL6_STG1_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL6_STG1_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL1.GPIO_CHANNEL6_STG1_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL6_STG1_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL6_STG1_CTRL1() p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL6_STG1_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL6_STG1_CTRL1.word = x)


//GPIO_CHANNEL6_STG1_REPEAT


#define Get_GPIO_GPIO_CHANNEL6_STG1_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL6_STG1_REPEAT.GPIO_CHANNEL6_STG1_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL6_STG1_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL6_STG1_REPEAT.GPIO_CHANNEL6_STG1_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL6_STG1_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL6_STG1_REPEAT.GPIO_CHANNEL6_STG1_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL6_STG1_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG1_REPEAT.GPIO_CHANNEL6_STG1_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG1_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG1_REPEAT.GPIO_CHANNEL6_STG1_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL6_STG1_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG1_REPEAT.GPIO_CHANNEL6_STG1_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG1_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG1_REPEAT.GPIO_CHANNEL6_STG1_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL6_STG1_REPEAT(repeat,until) (p_GPIO_IP->GPIO_CHANNEL6_STG1_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)until<<8)
#define Get_GPIO_GPIO_CHANNEL6_STG1_REPEAT() p_GPIO_IP->GPIO_CHANNEL6_STG1_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL6_STG1_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL6_STG1_REPEAT.word = x)


//GPIO_CHANNEL6_STG2_CTRL0


#define Get_GPIO_GPIO_CHANNEL6_STG2_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL0.GPIO_CHANNEL6_STG2_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL6_STG2_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL0.GPIO_CHANNEL6_STG2_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL6_STG2_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL0.GPIO_CHANNEL6_STG2_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL6_STG2_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL0.GPIO_CHANNEL6_STG2_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL6_STG2_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL6_STG2_CTRL0() p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL6_STG2_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL0.word = x)


//GPIO_CHANNEL6_STG2_CTRL1


#define Get_GPIO_GPIO_CHANNEL6_STG2_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL1.GPIO_CHANNEL6_STG2_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL6_STG2_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL1.GPIO_CHANNEL6_STG2_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL6_STG2_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL1.GPIO_CHANNEL6_STG2_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL6_STG2_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL1.GPIO_CHANNEL6_STG2_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL6_STG2_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL6_STG2_CTRL1() p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL6_STG2_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL6_STG2_CTRL1.word = x)


//GPIO_CHANNEL6_STG2_REPEAT


#define Get_GPIO_GPIO_CHANNEL6_STG2_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL6_STG2_REPEAT.GPIO_CHANNEL6_STG2_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL6_STG2_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL6_STG2_REPEAT.GPIO_CHANNEL6_STG2_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL6_STG2_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL6_STG2_REPEAT.GPIO_CHANNEL6_STG2_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL6_STG2_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG2_REPEAT.GPIO_CHANNEL6_STG2_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG2_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG2_REPEAT.GPIO_CHANNEL6_STG2_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL6_STG2_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG2_REPEAT.GPIO_CHANNEL6_STG2_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL6_STG2_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL6_STG2_REPEAT.GPIO_CHANNEL6_STG2_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL6_STG2_REPEAT(repeat,until) (p_GPIO_IP->GPIO_CHANNEL6_STG2_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)until<<8)
#define Get_GPIO_GPIO_CHANNEL6_STG2_REPEAT() p_GPIO_IP->GPIO_CHANNEL6_STG2_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL6_STG2_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL6_STG2_REPEAT.word = x)


//GPIO_CHANNEL7_STG_ENABLE


#define Get_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage0_enable() p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage0_enable
#define Is_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage0_enable_DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage0_enable == stage0_enable_DISABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage0_enable__DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage0_enable = stage0_enable_DISABLE)
#define stage0_enable_DISABLE 0x0    //Stage disabled.
#define Is_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage0_enable_ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage0_enable == stage0_enable_ENABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage0_enable__ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage0_enable = stage0_enable_ENABLE)
#define stage0_enable_ENABLE 0x1    //Stage enabled


#define Get_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage1_enable() p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage1_enable
#define Is_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage1_enable_DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage1_enable == stage1_enable_DISABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage1_enable__DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage1_enable = stage1_enable_DISABLE)
#define stage1_enable_DISABLE 0x0    //Stage disabled.
#define Is_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage1_enable_ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage1_enable == stage1_enable_ENABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage1_enable__ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage1_enable = stage1_enable_ENABLE)
#define stage1_enable_ENABLE 0x1    //Stage enabled


#define Get_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage2_enable() p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage2_enable
#define Is_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage2_enable_DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage2_enable == stage2_enable_DISABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage2_enable__DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage2_enable = stage2_enable_DISABLE)
#define stage2_enable_DISABLE 0x0    //Stage disabled.
#define Is_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage2_enable_ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage2_enable == stage2_enable_ENABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG_ENABLE_stage2_enable__ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.GPIO_CHANNEL7_STG_ENABLE_ts.stage2_enable = stage2_enable_ENABLE)
#define stage2_enable_ENABLE 0x1    //Stage enabled
#define Set_GPIO_GPIO_CHANNEL7_STG_ENABLE(stage0_enable,stage1_enable,stage2_enable) (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.word = (uint32_t)stage0_enable<<0 | (uint32_t)stage1_enable<<1 | (uint32_t)stage2_enable<<2)
#define Get_GPIO_GPIO_CHANNEL7_STG_ENABLE() p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.word
#define Set_GPIO_GPIO_CHANNEL7_STG_ENABLE_word(x) (p_GPIO_IP->GPIO_CHANNEL7_STG_ENABLE.word = x)


//GPIO_CHANNEL7_STG0_CTRL0


#define Get_GPIO_GPIO_CHANNEL7_STG0_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL0.GPIO_CHANNEL7_STG0_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL7_STG0_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL0.GPIO_CHANNEL7_STG0_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL7_STG0_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL0.GPIO_CHANNEL7_STG0_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL7_STG0_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL0.GPIO_CHANNEL7_STG0_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL7_STG0_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL7_STG0_CTRL0() p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL7_STG0_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL0.word = x)


//GPIO_CHANNEL7_STG0_CTRL1


#define Get_GPIO_GPIO_CHANNEL7_STG0_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL1.GPIO_CHANNEL7_STG0_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL7_STG0_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL1.GPIO_CHANNEL7_STG0_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL7_STG0_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL1.GPIO_CHANNEL7_STG0_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL7_STG0_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL1.GPIO_CHANNEL7_STG0_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL7_STG0_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL7_STG0_CTRL1() p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL7_STG0_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL7_STG0_CTRL1.word = x)


//GPIO_CHANNEL7_STG0_REPEAT


#define Get_GPIO_GPIO_CHANNEL7_STG0_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL7_STG0_REPEAT.GPIO_CHANNEL7_STG0_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL7_STG0_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL7_STG0_REPEAT.GPIO_CHANNEL7_STG0_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL7_STG0_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL7_STG0_REPEAT.GPIO_CHANNEL7_STG0_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL7_STG0_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG0_REPEAT.GPIO_CHANNEL7_STG0_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG0_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG0_REPEAT.GPIO_CHANNEL7_STG0_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL7_STG0_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG0_REPEAT.GPIO_CHANNEL7_STG0_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG0_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG0_REPEAT.GPIO_CHANNEL7_STG0_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL7_STG0_REPEAT(repeat,until) (p_GPIO_IP->GPIO_CHANNEL7_STG0_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)until<<8)
#define Get_GPIO_GPIO_CHANNEL7_STG0_REPEAT() p_GPIO_IP->GPIO_CHANNEL7_STG0_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL7_STG0_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL7_STG0_REPEAT.word = x)


//GPIO_CHANNEL7_STG1_CTRL0


#define Get_GPIO_GPIO_CHANNEL7_STG1_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL0.GPIO_CHANNEL7_STG1_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL7_STG1_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL0.GPIO_CHANNEL7_STG1_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL7_STG1_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL0.GPIO_CHANNEL7_STG1_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL7_STG1_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL0.GPIO_CHANNEL7_STG1_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL7_STG1_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL7_STG1_CTRL0() p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL7_STG1_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL0.word = x)


//GPIO_CHANNEL7_STG1_CTRL1


#define Get_GPIO_GPIO_CHANNEL7_STG1_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL1.GPIO_CHANNEL7_STG1_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL7_STG1_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL1.GPIO_CHANNEL7_STG1_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL7_STG1_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL1.GPIO_CHANNEL7_STG1_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL7_STG1_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL1.GPIO_CHANNEL7_STG1_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL7_STG1_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL7_STG1_CTRL1() p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL7_STG1_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL7_STG1_CTRL1.word = x)


//GPIO_CHANNEL7_STG1_REPEAT


#define Get_GPIO_GPIO_CHANNEL7_STG1_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL7_STG1_REPEAT.GPIO_CHANNEL7_STG1_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL7_STG1_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL7_STG1_REPEAT.GPIO_CHANNEL7_STG1_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL7_STG1_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL7_STG1_REPEAT.GPIO_CHANNEL7_STG1_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL7_STG1_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG1_REPEAT.GPIO_CHANNEL7_STG1_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG1_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG1_REPEAT.GPIO_CHANNEL7_STG1_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL7_STG1_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG1_REPEAT.GPIO_CHANNEL7_STG1_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG1_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG1_REPEAT.GPIO_CHANNEL7_STG1_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL7_STG1_REPEAT(repeat,until) (p_GPIO_IP->GPIO_CHANNEL7_STG1_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)until<<8)
#define Get_GPIO_GPIO_CHANNEL7_STG1_REPEAT() p_GPIO_IP->GPIO_CHANNEL7_STG1_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL7_STG1_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL7_STG1_REPEAT.word = x)


//GPIO_CHANNEL7_STG2_CTRL0


#define Get_GPIO_GPIO_CHANNEL7_STG2_CTRL0_lo() p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL0.GPIO_CHANNEL7_STG2_CTRL0_ts.lo
#define Set_GPIO_GPIO_CHANNEL7_STG2_CTRL0_lo(x) (p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL0.GPIO_CHANNEL7_STG2_CTRL0_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL7_STG2_CTRL0_hi() p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL0.GPIO_CHANNEL7_STG2_CTRL0_ts.hi
#define Set_GPIO_GPIO_CHANNEL7_STG2_CTRL0_hi(x) (p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL0.GPIO_CHANNEL7_STG2_CTRL0_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL7_STG2_CTRL0(lo,hi) (p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL0.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL7_STG2_CTRL0() p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL0.word
#define Set_GPIO_GPIO_CHANNEL7_STG2_CTRL0_word(x) (p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL0.word = x)


//GPIO_CHANNEL7_STG2_CTRL1


#define Get_GPIO_GPIO_CHANNEL7_STG2_CTRL1_lo() p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL1.GPIO_CHANNEL7_STG2_CTRL1_ts.lo
#define Set_GPIO_GPIO_CHANNEL7_STG2_CTRL1_lo(x) (p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL1.GPIO_CHANNEL7_STG2_CTRL1_ts.lo = x)


#define Get_GPIO_GPIO_CHANNEL7_STG2_CTRL1_hi() p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL1.GPIO_CHANNEL7_STG2_CTRL1_ts.hi
#define Set_GPIO_GPIO_CHANNEL7_STG2_CTRL1_hi(x) (p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL1.GPIO_CHANNEL7_STG2_CTRL1_ts.hi = x)
#define Set_GPIO_GPIO_CHANNEL7_STG2_CTRL1(lo,hi) (p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL1.word = (uint32_t)lo<<0 | (uint32_t)hi<<16)
#define Get_GPIO_GPIO_CHANNEL7_STG2_CTRL1() p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL1.word
#define Set_GPIO_GPIO_CHANNEL7_STG2_CTRL1_word(x) (p_GPIO_IP->GPIO_CHANNEL7_STG2_CTRL1.word = x)


//GPIO_CHANNEL7_STG2_REPEAT


#define Get_GPIO_GPIO_CHANNEL7_STG2_REPEAT_repeat() p_GPIO_IP->GPIO_CHANNEL7_STG2_REPEAT.GPIO_CHANNEL7_STG2_REPEAT_ts.repeat
#define Set_GPIO_GPIO_CHANNEL7_STG2_REPEAT_repeat(x) (p_GPIO_IP->GPIO_CHANNEL7_STG2_REPEAT.GPIO_CHANNEL7_STG2_REPEAT_ts.repeat = x)


#define Get_GPIO_GPIO_CHANNEL7_STG2_REPEAT_until() p_GPIO_IP->GPIO_CHANNEL7_STG2_REPEAT.GPIO_CHANNEL7_STG2_REPEAT_ts.until
#define Is_GPIO_GPIO_CHANNEL7_STG2_REPEAT_until_DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG2_REPEAT.GPIO_CHANNEL7_STG2_REPEAT_ts.until == until_DISABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG2_REPEAT_until__DISABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG2_REPEAT.GPIO_CHANNEL7_STG2_REPEAT_ts.until = until_DISABLE)
#define until_DISABLE 0x0    //repeat until feature disabled
#define Is_GPIO_GPIO_CHANNEL7_STG2_REPEAT_until_ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG2_REPEAT.GPIO_CHANNEL7_STG2_REPEAT_ts.until == until_ENABLE)
#define Set_GPIO_GPIO_CHANNEL7_STG2_REPEAT_until__ENABLE() (p_GPIO_IP->GPIO_CHANNEL7_STG2_REPEAT.GPIO_CHANNEL7_STG2_REPEAT_ts.until = until_ENABLE)
#define until_ENABLE 0x1    //repeat until feature enabled
#define Set_GPIO_GPIO_CHANNEL7_STG2_REPEAT(repeat,until) (p_GPIO_IP->GPIO_CHANNEL7_STG2_REPEAT.word = (uint32_t)repeat<<0 | (uint32_t)until<<8)
#define Get_GPIO_GPIO_CHANNEL7_STG2_REPEAT() p_GPIO_IP->GPIO_CHANNEL7_STG2_REPEAT.word
#define Set_GPIO_GPIO_CHANNEL7_STG2_REPEAT_word(x) (p_GPIO_IP->GPIO_CHANNEL7_STG2_REPEAT.word = x)


//GPIO_DFV


#define Get_GPIO_GPIO_DFV_dfv_enable() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_enable
#define Set_GPIO_GPIO_DFV_dfv_enable(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_enable = x)


#define Get_GPIO_GPIO_DFV_dfv_timer0_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_timer0_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_timer0_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_timer0_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_timer1_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_timer1_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_timer1_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_timer1_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_timer2_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_timer2_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_timer2_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_timer2_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_timer3_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_timer3_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_timer3_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_timer3_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_trig_pulse_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_trig_pulse_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_trig_pulse_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_trig_pulse_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl0_comp_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl0_comp_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl0_comp_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl0_comp_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl1_comp_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl1_comp_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl1_comp_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl1_comp_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl2_comp_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl2_comp_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl2_comp_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl2_comp_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl3_comp_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl3_comp_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl3_comp_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl3_comp_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl4_comp_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl4_comp_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl4_comp_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl4_comp_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl5_comp_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl5_comp_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl5_comp_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl5_comp_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl6_comp_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl6_comp_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl6_comp_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl6_comp_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl7_comp_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl7_comp_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl7_comp_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl7_comp_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl0_strt_aborted_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl0_strt_aborted_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl0_strt_aborted_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl0_strt_aborted_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl1_strt_aborted_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl1_strt_aborted_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl1_strt_aborted_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl1_strt_aborted_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl2_strt_aborted_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl2_strt_aborted_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl2_strt_aborted_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl2_strt_aborted_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl3_strt_aborted_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl3_strt_aborted_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl3_strt_aborted_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl3_strt_aborted_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl4_strt_aborted_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl4_strt_aborted_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl4_strt_aborted_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl4_strt_aborted_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl5_strt_aborted_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl5_strt_aborted_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl5_strt_aborted_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl5_strt_aborted_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl6_strt_aborted_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl6_strt_aborted_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl6_strt_aborted_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl6_strt_aborted_interrupt_ctrl = x)


#define Get_GPIO_GPIO_DFV_dfv_chnl7_strt_aborted_interrupt_ctrl() p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl7_strt_aborted_interrupt_ctrl
#define Set_GPIO_GPIO_DFV_dfv_chnl7_strt_aborted_interrupt_ctrl(x) (p_GPIO_IP->GPIO_DFV.GPIO_DFV_ts.dfv_chnl7_strt_aborted_interrupt_ctrl = x)
#define Set_GPIO_GPIO_DFV(dfv_enable,dfv_timer0_interrupt_ctrl,dfv_timer1_interrupt_ctrl,dfv_timer2_interrupt_ctrl,dfv_timer3_interrupt_ctrl,dfv_trig_pulse_interrupt_ctrl,dfv_chnl0_comp_interrupt_ctrl,dfv_chnl1_comp_interrupt_ctrl,dfv_chnl2_comp_interrupt_ctrl,dfv_chnl3_comp_interrupt_ctrl,dfv_chnl4_comp_interrupt_ctrl,dfv_chnl5_comp_interrupt_ctrl,dfv_chnl6_comp_interrupt_ctrl,dfv_chnl7_comp_interrupt_ctrl,dfv_chnl0_strt_aborted_interrupt_ctrl,dfv_chnl1_strt_aborted_interrupt_ctrl,dfv_chnl2_strt_aborted_interrupt_ctrl,dfv_chnl3_strt_aborted_interrupt_ctrl,dfv_chnl4_strt_aborted_interrupt_ctrl,dfv_chnl5_strt_aborted_interrupt_ctrl,dfv_chnl6_strt_aborted_interrupt_ctrl,dfv_chnl7_strt_aborted_interrupt_ctrl) (p_GPIO_IP->GPIO_DFV.word = (uint32_t)dfv_enable<<0 | (uint32_t)dfv_timer0_interrupt_ctrl<<1 | (uint32_t)dfv_timer1_interrupt_ctrl<<2 | (uint32_t)dfv_timer2_interrupt_ctrl<<3 | (uint32_t)dfv_timer3_interrupt_ctrl<<4 | (uint32_t)dfv_trig_pulse_interrupt_ctrl<<5 | (uint32_t)dfv_chnl0_comp_interrupt_ctrl<<6 | (uint32_t)dfv_chnl1_comp_interrupt_ctrl<<7 | (uint32_t)dfv_chnl2_comp_interrupt_ctrl<<8 | (uint32_t)dfv_chnl3_comp_interrupt_ctrl<<9 | (uint32_t)dfv_chnl4_comp_interrupt_ctrl<<10 | (uint32_t)dfv_chnl5_comp_interrupt_ctrl<<11 | (uint32_t)dfv_chnl6_comp_interrupt_ctrl<<12 | (uint32_t)dfv_chnl7_comp_interrupt_ctrl<<13 | (uint32_t)dfv_chnl0_strt_aborted_interrupt_ctrl<<14 | (uint32_t)dfv_chnl1_strt_aborted_interrupt_ctrl<<15 | (uint32_t)dfv_chnl2_strt_aborted_interrupt_ctrl<<16 | (uint32_t)dfv_chnl3_strt_aborted_interrupt_ctrl<<17 | (uint32_t)dfv_chnl4_strt_aborted_interrupt_ctrl<<18 | (uint32_t)dfv_chnl5_strt_aborted_interrupt_ctrl<<19 | (uint32_t)dfv_chnl6_strt_aborted_interrupt_ctrl<<20 | (uint32_t)dfv_chnl7_strt_aborted_interrupt_ctrl<<21)
#define Get_GPIO_GPIO_DFV() p_GPIO_IP->GPIO_DFV.word
#define Set_GPIO_GPIO_DFV_word(x) (p_GPIO_IP->GPIO_DFV.word = x)

//PERIPH_CTRL_CTRL
/*Description: Controls wake-up and fetch_enable for xp70
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t p_fetch_en_i :1;
        /* allows the xp70 to fetch instructions (active high)*/
        uint8_t wake_up :1;
        /* wakes up xp70 whe in IDLE mode (active high)*/
    }PERIPH_CTRL_CTRL_ts;

}PERIPH_CTRL_CTRL_tu;



//PERIPH_CTRL_CONFIG
/*Description: Cpu configuration
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t en_idle_state :1;
        /* Interrupt mode:*/
        uint8_t mfu_core_pri_i :1;
        /* DMA request level to access the TCDM:*/
        uint8_t it_disabling_mode_i :1;
        /* System allows STxP70 to enter IDLE mode when requested*/
    }PERIPH_CTRL_CONFIG_ts;

}PERIPH_CTRL_CONFIG_tu;



//PERIPH_CTRL_STATUS
/*Description: Periph Ctrl status
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t idle_state :1;
        /* Indicates the STxP70 is currently IDLE
        idle_state = idle0_o | idle1_o | idle2_o | idle3_o*/
        uint8_t idle_level :2;
        /* IDLE level (meaningless when STxP70 is not IDLE)
        4 to 2 bits coder of idle[0|1|2|3]_o vector*/
        uint8_t oce_debug_o :1;
        /* Replicate the state of the oce_debug_o pin from STxP70*/
    }PERIPH_CTRL_STATUS_ts;

}PERIPH_CTRL_STATUS_tu;

typedef struct
{
    PERIPH_CTRL_CTRL_tu PERIPH_CTRL_CTRL;
    PERIPH_CTRL_CONFIG_tu PERIPH_CTRL_CONFIG;
    PERIPH_CTRL_STATUS_tu PERIPH_CTRL_STATUS;
}PERIPH_CTRL_IP_ts;




//PERIPH_CTRL_CTRL


#define Get_PERIPH_CTRL_PERIPH_CTRL_CTRL_p_fetch_en_i() p_PERIPH_CTRL_IP->PERIPH_CTRL_CTRL.PERIPH_CTRL_CTRL_ts.p_fetch_en_i
#define Set_PERIPH_CTRL_PERIPH_CTRL_CTRL_p_fetch_en_i(x) (p_PERIPH_CTRL_IP->PERIPH_CTRL_CTRL.PERIPH_CTRL_CTRL_ts.p_fetch_en_i = x)


#define Get_PERIPH_CTRL_PERIPH_CTRL_CTRL_wake_up() p_PERIPH_CTRL_IP->PERIPH_CTRL_CTRL.PERIPH_CTRL_CTRL_ts.wake_up
#define Set_PERIPH_CTRL_PERIPH_CTRL_CTRL_wake_up(x) (p_PERIPH_CTRL_IP->PERIPH_CTRL_CTRL.PERIPH_CTRL_CTRL_ts.wake_up = x)
#define Set_PERIPH_CTRL_PERIPH_CTRL_CTRL(p_fetch_en_i,wake_up) (p_PERIPH_CTRL_IP->PERIPH_CTRL_CTRL.word = (uint32_t)p_fetch_en_i<<0 | (uint32_t)wake_up<<1)
#define Get_PERIPH_CTRL_PERIPH_CTRL_CTRL() p_PERIPH_CTRL_IP->PERIPH_CTRL_CTRL.word
#define Set_PERIPH_CTRL_PERIPH_CTRL_CTRL_word(x) (p_PERIPH_CTRL_IP->PERIPH_CTRL_CTRL.word = x)


//PERIPH_CTRL_CONFIG


#define Get_PERIPH_CTRL_PERIPH_CTRL_CONFIG_en_idle_state() p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.en_idle_state
#define Is_PERIPH_CTRL_PERIPH_CTRL_CONFIG_en_idle_state_B_0x0() (p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.en_idle_state == en_idle_state_B_0x0)
#define Set_PERIPH_CTRL_PERIPH_CTRL_CONFIG_en_idle_state__B_0x0() (p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.en_idle_state = en_idle_state_B_0x0)
#define en_idle_state_B_0x0 0x0    //higher priority interrupts are accepted
#define Is_PERIPH_CTRL_PERIPH_CTRL_CONFIG_en_idle_state_B_0x1() (p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.en_idle_state == en_idle_state_B_0x1)
#define Set_PERIPH_CTRL_PERIPH_CTRL_CONFIG_en_idle_state__B_0x1() (p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.en_idle_state = en_idle_state_B_0x1)
#define en_idle_state_B_0x1 0x1    //software must allow new interrupts


#define Get_PERIPH_CTRL_PERIPH_CTRL_CONFIG_mfu_core_pri_i() p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.mfu_core_pri_i
#define Is_PERIPH_CTRL_PERIPH_CTRL_CONFIG_mfu_core_pri_i_B_0x0() (p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.mfu_core_pri_i == mfu_core_pri_i_B_0x0)
#define Set_PERIPH_CTRL_PERIPH_CTRL_CONFIG_mfu_core_pri_i__B_0x0() (p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.mfu_core_pri_i = mfu_core_pri_i_B_0x0)
#define mfu_core_pri_i_B_0x0 0x0    //gentle TCDM DMA access
#define Is_PERIPH_CTRL_PERIPH_CTRL_CONFIG_mfu_core_pri_i_B_0x1() (p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.mfu_core_pri_i == mfu_core_pri_i_B_0x1)
#define Set_PERIPH_CTRL_PERIPH_CTRL_CONFIG_mfu_core_pri_i__B_0x1() (p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.mfu_core_pri_i = mfu_core_pri_i_B_0x1)
#define mfu_core_pri_i_B_0x1 0x1    //autocratic TCDM DMA access


#define Get_PERIPH_CTRL_PERIPH_CTRL_CONFIG_it_disabling_mode_i() p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.it_disabling_mode_i
#define Set_PERIPH_CTRL_PERIPH_CTRL_CONFIG_it_disabling_mode_i(x) (p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.PERIPH_CTRL_CONFIG_ts.it_disabling_mode_i = x)
#define Set_PERIPH_CTRL_PERIPH_CTRL_CONFIG(en_idle_state,mfu_core_pri_i,it_disabling_mode_i) (p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.word = (uint32_t)en_idle_state<<0 | (uint32_t)mfu_core_pri_i<<1 | (uint32_t)it_disabling_mode_i<<2)
#define Get_PERIPH_CTRL_PERIPH_CTRL_CONFIG() p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.word
#define Set_PERIPH_CTRL_PERIPH_CTRL_CONFIG_word(x) (p_PERIPH_CTRL_IP->PERIPH_CTRL_CONFIG.word = x)


//PERIPH_CTRL_STATUS


#define Get_PERIPH_CTRL_PERIPH_CTRL_STATUS_idle_state() p_PERIPH_CTRL_IP->PERIPH_CTRL_STATUS.PERIPH_CTRL_STATUS_ts.idle_state


#define Get_PERIPH_CTRL_PERIPH_CTRL_STATUS_idle_level() p_PERIPH_CTRL_IP->PERIPH_CTRL_STATUS.PERIPH_CTRL_STATUS_ts.idle_level


#define Get_PERIPH_CTRL_PERIPH_CTRL_STATUS_oce_debug_o() p_PERIPH_CTRL_IP->PERIPH_CTRL_STATUS.PERIPH_CTRL_STATUS_ts.oce_debug_o
#define Get_PERIPH_CTRL_PERIPH_CTRL_STATUS() p_PERIPH_CTRL_IP->PERIPH_CTRL_STATUS.word

//ITM_FW_EVENT0_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding event source.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC1_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC2_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC3_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC4_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC5_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC6_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC7_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC8_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC9_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC10_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC11_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC12_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC13_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC14_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC15_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC16_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC17_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC18_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC19_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC20_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC21_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC22_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC23_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC24_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC25_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC26_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC27_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC28_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC29_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC30_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC31_STATUS :1;
        /* Status of the corresponding interrupt source.*/
    }ITM_FW_EVENT0_STATUS_ts;

}ITM_FW_EVENT0_STATUS_tu;



//ITM_FW_EVENT0_EN_STATUS
/*Description: Enable corresponding interrupt source.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC1_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC2_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC3_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC4_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC5_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC6_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC7_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC8_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC9_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC10_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC11_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC12_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC13_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC14_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC15_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC16_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC17_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC18_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC19_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC20_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC21_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC22_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC23_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC24_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC25_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC26_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC27_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC28_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC29_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC30_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC31_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
    }ITM_FW_EVENT0_EN_STATUS_ts;

}ITM_FW_EVENT0_EN_STATUS_tu;



//ITM_FW_EVENT0_STATUS_BCLR
/*Description: Bit-level clear of corresponding interrupt event.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC1_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC2_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC3_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC4_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC5_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC6_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC7_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC8_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC9_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC10_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC11_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC12_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC13_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC14_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC15_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC16_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC17_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC18_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC19_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC20_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC21_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC22_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC23_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC24_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC25_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC26_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC27_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC28_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC29_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC30_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC31_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_FW_EVENT0_STATUS_BCLR_ts;

}ITM_FW_EVENT0_STATUS_BCLR_tu;



//ITM_FW_EVENT0_STATUS_BSET
/*Description: Bit-level set of corresponding interrupt event.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC1_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC2_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC3_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC4_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC5_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC6_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC7_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC8_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC9_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC10_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC11_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC12_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC13_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC14_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC15_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC16_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC17_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC18_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC19_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC20_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC21_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC22_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC23_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC24_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC25_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC26_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC27_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC28_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC29_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC30_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC31_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
    }ITM_FW_EVENT0_STATUS_BSET_ts;

}ITM_FW_EVENT0_STATUS_BSET_tu;



//ITM_FW_EVENT0_EN_BCLR
/*Description: Bit-level clear of corresponding enable control.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC1_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC2_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC3_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC4_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC5_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC6_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC7_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC8_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC9_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC10_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC11_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC12_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC13_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC14_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC15_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC16_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC17_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC18_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC19_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC20_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC21_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC22_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC23_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC24_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC25_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC26_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC27_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC28_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC29_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC30_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC31_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
    }ITM_FW_EVENT0_EN_BCLR_ts;

}ITM_FW_EVENT0_EN_BCLR_tu;



//ITM_FW_EVENT0_EN_BSET
/*Description: Bit level set of corresponding enable control.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC1_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC2_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC3_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC4_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC5_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC6_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC7_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC8_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC9_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC10_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC11_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC12_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC13_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC14_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC15_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC16_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC17_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC18_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC19_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC20_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC21_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC22_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC23_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC24_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC25_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC26_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC27_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC28_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC29_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC30_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC31_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
    }ITM_FW_EVENT0_EN_BSET_ts;

}ITM_FW_EVENT0_EN_BSET_tu;



//ITM_FW_EVENT1_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding event source.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC1_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC2_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC3_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC4_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC5_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC6_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC7_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC8_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC9_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC10_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC11_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC12_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC13_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC14_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC15_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC16_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC17_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC18_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC19_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC20_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC21_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC22_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC23_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC24_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC25_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC26_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC27_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC28_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC29_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC30_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC31_STATUS :1;
        /* Status of the corresponding interrupt source.*/
    }ITM_FW_EVENT1_STATUS_ts;

}ITM_FW_EVENT1_STATUS_tu;



//ITM_FW_EVENT1_EN_STATUS
/*Description: Enable corresponding interrupt source.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC1_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC2_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC3_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC4_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC5_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC6_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC7_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC8_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC9_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC10_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC11_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC12_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC13_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC14_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC15_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC16_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC17_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC18_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC19_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC20_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC21_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC22_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC23_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC24_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC25_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC26_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC27_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC28_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC29_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC30_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC31_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
    }ITM_FW_EVENT1_EN_STATUS_ts;

}ITM_FW_EVENT1_EN_STATUS_tu;



//ITM_FW_EVENT1_STATUS_BCLR
/*Description: Bit-level clear of corresponding interrupt event.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC1_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC2_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC3_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC4_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC5_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC6_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC7_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC8_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC9_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC10_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC11_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC12_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC13_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC14_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC15_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC16_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC17_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC18_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC19_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC20_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC21_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC22_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC23_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC24_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC25_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC26_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC27_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC28_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC29_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC30_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC31_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_FW_EVENT1_STATUS_BCLR_ts;

}ITM_FW_EVENT1_STATUS_BCLR_tu;



//ITM_FW_EVENT1_STATUS_BSET
/*Description: Bit-level set of corresponding interrupt event.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC1_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC2_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC3_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC4_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC5_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC6_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC7_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC8_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC9_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC10_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC11_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC12_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC13_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC14_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC15_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC16_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC17_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC18_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC19_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC20_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC21_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC22_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC23_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC24_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC25_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC26_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC27_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC28_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC29_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC30_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC31_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
    }ITM_FW_EVENT1_STATUS_BSET_ts;

}ITM_FW_EVENT1_STATUS_BSET_tu;



//ITM_FW_EVENT1_EN_BCLR
/*Description: Bit-level clear of corresponding enable control.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC1_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC2_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC3_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC4_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC5_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC6_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC7_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC8_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC9_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC10_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC11_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC12_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC13_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC14_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC15_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC16_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC17_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC18_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC19_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC20_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC21_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC22_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC23_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC24_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC25_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC26_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC27_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC28_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC29_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC30_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC31_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
    }ITM_FW_EVENT1_EN_BCLR_ts;

}ITM_FW_EVENT1_EN_BCLR_tu;



//ITM_FW_EVENT1_EN_BSET
/*Description: Bit level set of corresponding enable control.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC1_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC2_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC3_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC4_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC5_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC6_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC7_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC8_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC9_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC10_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC11_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC12_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC13_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC14_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC15_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC16_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC17_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC18_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC19_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC20_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC21_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC22_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC23_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC24_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC25_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC26_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC27_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC28_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC29_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC30_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC31_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
    }ITM_FW_EVENT1_EN_BSET_ts;

}ITM_FW_EVENT1_EN_BSET_tu;



//ITM_FW_EVENT2_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding event source.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC1_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC2_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC3_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC4_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC5_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC6_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC7_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC8_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC9_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC10_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC11_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC12_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC13_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC14_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC15_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC16_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC17_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC18_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC19_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC20_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC21_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC22_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC23_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC24_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC25_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC26_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC27_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC28_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC29_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC30_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC31_STATUS :1;
        /* Status of the corresponding interrupt source.*/
    }ITM_FW_EVENT2_STATUS_ts;

}ITM_FW_EVENT2_STATUS_tu;



//ITM_FW_EVENT2_EN_STATUS
/*Description: Enable corresponding interrupt source.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC1_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC2_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC3_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC4_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC5_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC6_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC7_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC8_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC9_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC10_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC11_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC12_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC13_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC14_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC15_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC16_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC17_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC18_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC19_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC20_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC21_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC22_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC23_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC24_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC25_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC26_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC27_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC28_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC29_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC30_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC31_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
    }ITM_FW_EVENT2_EN_STATUS_ts;

}ITM_FW_EVENT2_EN_STATUS_tu;



//ITM_FW_EVENT2_STATUS_BCLR
/*Description: Bit-level clear of corresponding interrupt event.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC1_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC2_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC3_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC4_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC5_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC6_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC7_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC8_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC9_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC10_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC11_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC12_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC13_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC14_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC15_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC16_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC17_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC18_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC19_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC20_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC21_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC22_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC23_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC24_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC25_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC26_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC27_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC28_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC29_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC30_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC31_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_FW_EVENT2_STATUS_BCLR_ts;

}ITM_FW_EVENT2_STATUS_BCLR_tu;



//ITM_FW_EVENT2_STATUS_BSET
/*Description: Bit-level set of corresponding interrupt event.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC1_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC2_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC3_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC4_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC5_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC6_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC7_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC8_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC9_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC10_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC11_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC12_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC13_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC14_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC15_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC16_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC17_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC18_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC19_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC20_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC21_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC22_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC23_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC24_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC25_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC26_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC27_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC28_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC29_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC30_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC31_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
    }ITM_FW_EVENT2_STATUS_BSET_ts;

}ITM_FW_EVENT2_STATUS_BSET_tu;



//ITM_FW_EVENT2_EN_BCLR
/*Description: Bit-level clear of corresponding enable control.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC1_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC2_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC3_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC4_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC5_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC6_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC7_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC8_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC9_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC10_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC11_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC12_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC13_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC14_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC15_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC16_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC17_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC18_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC19_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC20_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC21_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC22_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC23_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC24_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC25_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC26_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC27_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC28_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC29_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC30_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC31_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
    }ITM_FW_EVENT2_EN_BCLR_ts;

}ITM_FW_EVENT2_EN_BCLR_tu;



//ITM_FW_EVENT2_EN_BSET
/*Description: Bit level set of corresponding enable control.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC1_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC2_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC3_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC4_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC5_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC6_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC7_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC8_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC9_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC10_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC11_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC12_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC13_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC14_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC15_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC16_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC17_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC18_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC19_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC20_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC21_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC22_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC23_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC24_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC25_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC26_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC27_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC28_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC29_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC30_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC31_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
    }ITM_FW_EVENT2_EN_BSET_ts;

}ITM_FW_EVENT2_EN_BSET_tu;



//ITM_FW_EVENT3_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding event source.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC1_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC2_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC3_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC4_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC5_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC6_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC7_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC8_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC9_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC10_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC11_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC12_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC13_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC14_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC15_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC16_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC17_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC18_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC19_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC20_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC21_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC22_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC23_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC24_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC25_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC26_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC27_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC28_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC29_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC30_STATUS :1;
        /* Status of the corresponding interrupt source.*/
        uint8_t SRC31_STATUS :1;
        /* Status of the corresponding interrupt source.*/
    }ITM_FW_EVENT3_STATUS_ts;

}ITM_FW_EVENT3_STATUS_tu;



//ITM_FW_EVENT3_EN_STATUS
/*Description: Enable corresponding interrupt source.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC1_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC2_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC3_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC4_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC5_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC6_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC7_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC8_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC9_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC10_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC11_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC12_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC13_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC14_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC15_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC16_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC17_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC18_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC19_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC20_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC21_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC22_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC23_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC24_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC25_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC26_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC27_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC28_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC29_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC30_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
        uint8_t SRC31_EN_STATUS :1;
        /* Corresponding interrupt source active state*/
    }ITM_FW_EVENT3_EN_STATUS_ts;

}ITM_FW_EVENT3_EN_STATUS_tu;



//ITM_FW_EVENT3_STATUS_BCLR
/*Description: Bit-level clear of corresponding interrupt event.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC1_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC2_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC3_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC4_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC5_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC6_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC7_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC8_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC9_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC10_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC11_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC12_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC13_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC14_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC15_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC16_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC17_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC18_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC19_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC20_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC21_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC22_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC23_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC24_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC25_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC26_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC27_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC28_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC29_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC30_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t SRC31_STATUS_BCLR :1;
        /* Corresponding SRCx_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_FW_EVENT3_STATUS_BCLR_ts;

}ITM_FW_EVENT3_STATUS_BCLR_tu;



//ITM_FW_EVENT3_STATUS_BSET
/*Description: Bit-level set of corresponding interrupt event.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC1_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC2_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC3_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC4_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC5_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC6_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC7_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC8_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC9_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC10_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC11_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC12_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC13_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC14_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC15_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC16_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC17_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC18_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC19_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC20_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC21_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC22_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC23_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC24_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC25_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC26_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC27_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC28_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC29_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC30_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
        uint8_t SRC31_STATUS_BSET :1;
        /* Corresponding SRCx_STATUS is set if this bit is written with a '1'.*/
    }ITM_FW_EVENT3_STATUS_BSET_ts;

}ITM_FW_EVENT3_STATUS_BSET_tu;



//ITM_FW_EVENT3_EN_BCLR
/*Description: Bit-level clear of corresponding enable control.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC1_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC2_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC3_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC4_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC5_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC6_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC7_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC8_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC9_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC10_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC11_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC12_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC13_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC14_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC15_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC16_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC17_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC18_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC19_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC20_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC21_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC22_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC23_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC24_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC25_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC26_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC27_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC28_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC29_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC30_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
        uint8_t SRC31_EN_BCLR :1;
        /* Corresponding SRCx_EN bit is cleared when this bit is written with a '1'.*/
    }ITM_FW_EVENT3_EN_BCLR_ts;

}ITM_FW_EVENT3_EN_BCLR_tu;



//ITM_FW_EVENT3_EN_BSET
/*Description: Bit level set of corresponding enable control.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t SRC0_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC1_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC2_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC3_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC4_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC5_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC6_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC7_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC8_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC9_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC10_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC11_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC12_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC13_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC14_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC15_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC16_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC17_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC18_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC19_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC20_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC21_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC22_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC23_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC24_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC25_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC26_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC27_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC28_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC29_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC30_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
        uint8_t SRC31_EN_BSET :1;
        /* Corresponding SRCx_EN is set when this bit is written with a '1'.*/
    }ITM_FW_EVENT3_EN_BSET_ts;

}ITM_FW_EVENT3_EN_BSET_tu;



//ITM_GPIO_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t GPIO_CHNL_0_CMPLT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_1_CMPLT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_2_CMPLT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_3_CMPLT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_4_CMPLT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_5_CMPLT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_6_CMPLT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_7_CMPLT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_0_ST_ABORT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_1_ST_ABORT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_2_ST_ABORT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_3_ST_ABORT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_4_ST_ABORT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_5_ST_ABORT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_6_ST_ABORT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_CHNL_7_ST_ABORT_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_TIMER_0_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_TIMER_1_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_TIMER_2_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_TIMER_3_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_INTR_DEBUG_STATUS :1;
        /* Status of the corresponding interrupt source*/
        uint8_t GPIO_TRIG_PULSE_STATUS :1;
        /* Status of the corresponding interrupt source*/
    }ITM_GPIO_STATUS_ts;

}ITM_GPIO_STATUS_tu;



//ITM_GPIO_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t GPIO_CHNL_0_CMPLT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_1_CMPLT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_2_CMPLT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_3_CMPLT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_4_CMPLT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_5_CMPLT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_6_CMPLT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_7_CMPLT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_0_ST_ABORT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_1_ST_ABORT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_2_ST_ABORT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_3_ST_ABORT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_4_ST_ABORT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_5_ST_ABORT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_6_ST_ABORT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_CHNL_7_ST_ABORT_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_TIMER_0_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_TIMER_1_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_TIMER_2_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_TIMER_3_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_INTR_DEBUG_EN_STATUS :1;
        /* Mask of interrupt source.*/
        uint8_t GPIO_TRIG_PULSE_EN_STATUS :1;
        /* Mask of interrupt source.*/
    }ITM_GPIO_EN_STATUS_ts;

}ITM_GPIO_EN_STATUS_tu;



//ITM_GPIO_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t GPIO_CHNL_0_CMPLT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_1_CMPLT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_2_CMPLT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_3_CMPLT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_4_CMPLT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_5_CMPLT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_6_CMPLT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_7_CMPLT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_0_ST_ABORT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_1_ST_ABORT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_2_ST_ABORT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_3_ST_ABORT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_4_ST_ABORT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_5_ST_ABORT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_6_ST_ABORT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_7_ST_ABORT_STATUS_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_TIMER_0_STATUS_BCLR :1;
        /* GPIO_TIMER_[3:0]_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_TIMER_1_STATUS_BCLR :1;
        /* GPIO_TIMER_[3:0]_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_TIMER_2_STATUS_BCLR :1;
        /* GPIO_TIMER_[3:0]_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_TIMER_3_STATUS_BCLR :1;
        /* GPIO_TIMER_[3:0]_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_INTR_DEBUG_STATUS_BCLR :1;
        /* GPIO_INTR_DEBUG_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_TRIG_PULSE_STATUS_BCLR :1;
        /* GPIO_TRIG_PULSE_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_GPIO_STATUS_BCLR_ts;

}ITM_GPIO_STATUS_BCLR_tu;



//ITM_GPIO_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t GPIO_CHNL_0_CMPLT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_1_CMPLT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_2_CMPLT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_3_CMPLT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_4_CMPLT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_5_CMPLT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_6_CMPLT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_7_CMPLT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_0_ST_ABORT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_1_ST_ABORT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_2_ST_ABORT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_3_ST_ABORT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_4_ST_ABORT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_5_ST_ABORT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_6_ST_ABORT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_7_ST_ABORT_STATUS_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_TIMER_0_STATUS_BSET :1;
        /* GPIO_TIMER_[3:0]_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_TIMER_1_STATUS_BSET :1;
        /* GPIO_TIMER_[3:0]_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_TIMER_2_STATUS_BSET :1;
        /* GPIO_TIMER_[3:0]_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_TIMER_3_STATUS_BSET :1;
        /* GPIO_TIMER_[3:0]_STATUS is set if this bit is written with a '1'.*/
        uint8_t GPIO_INTR_DEBUG_STATUS_BSET :1;
        /* GPIO_INTR_DEBUG_STATUS is set if this bit is written with a '1'*/
        uint8_t GPIO_TRIG_PULSE_STATUS_BSET :1;
        /* GPIO_TRIG_PULSE_STATUS is set if this bit is written with a '1'.*/
    }ITM_GPIO_STATUS_BSET_ts;

}ITM_GPIO_STATUS_BSET_tu;



//ITM_GPIO_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t GPIO_CHNL_0_CMPLT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_1_CMPLT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_2_CMPLT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_3_CMPLT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_4_CMPLT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_5_CMPLT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_6_CMPLT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_7_CMPLT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_0_ST_ABORT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_1_ST_ABORT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_2_ST_ABORT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_3_ST_ABORT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_4_ST_ABORT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_5_ST_ABORT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_6_ST_ABORT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_7_ST_ABORT_EN_BCLR :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is cleared when this bit is written with a '1'.*/
        uint8_t GPIO_TIMER_0_EN_BCLR :1;
        /* .GPIO_TIMER_[3:0]_EN is cleared when this bit is written with a '1'*/
        uint8_t GPIO_TIMER_1_EN_BCLR :1;
        /* .GPIO_TIMER_[3:0]_EN is cleared when this bit is written with a '1'*/
        uint8_t GPIO_TIMER_2_EN_BCLR :1;
        /* .GPIO_TIMER_[3:0]_EN is cleared when this bit is written with a '1'*/
        uint8_t GPIO_TIMER_3_EN_BCLR :1;
        /* .GPIO_TIMER_[3:0]_EN is cleared when this bit is written with a '1'*/
        uint8_t GPIO_INTR_DEBUG_EN_BCLR :1;
        /* GPIO_INTR_DEBUG_EN is cleared when this bit is written with a '1'*/
        uint8_t GPIO_TRIG_PULSE_EN_BCLR :1;
        /* GPIO_TRIG_PULSE_EN is cleared when this bit is written with a '1'*/
    }ITM_GPIO_EN_BCLR_ts;

}ITM_GPIO_EN_BCLR_tu;



//ITM_GPIO_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t GPIO_CHNL_0_CMPLT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_1_CMPLT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_2_CMPLT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_3_CMPLT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_4_CMPLT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_5_CMPLT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_6_CMPLT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_7_CMPLT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_CMPLT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_0_ST_ABORT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_1_ST_ABORT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_2_ST_ABORT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_3_ST_ABORT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_4_ST_ABORT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_5_ST_ABORT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_6_ST_ABORT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_CHNL_7_ST_ABORT_EN_BSET :1;
        /* GPIO_CHNL_[7:0]_ST_ABORT_EN is set when this bit is written with a '1'.*/
        uint8_t GPIO_TIMER_0_EN_BSET :1;
        /* .GPIO_TIMER_[3:0]_EN is set when this bit is written with a '1'*/
        uint8_t GPIO_TIMER_1_EN_BSET :1;
        /* .GPIO_TIMER_[3:0]_EN is set when this bit is written with a '1'*/
        uint8_t GPIO_TIMER_2_EN_BSET :1;
        /* .GPIO_TIMER_[3:0]_EN is set when this bit is written with a '1'*/
        uint8_t GPIO_TIMER_3_EN_BSET :1;
        /* .GPIO_TIMER_[3:0]_EN is set when this bit is written with a '1'*/
        uint8_t GPIO_INTR_DEBUG_EN_BSET :1;
        /* GPIO_INTR_DEBUG_EN is set when this bit is written with a '1'*/
        uint8_t GPIO_TRIG_PULSE_EN_BSET :1;
        /* GPIO_TRIG_PULSE_EN is set when this bit is written with a '1'*/
    }ITM_GPIO_EN_BSET_ts;

}ITM_GPIO_EN_BSET_tu;



//ITM_EWB_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EWB_0_STATUS :1;
        /* Status of corresponding interrupt source*/
        uint8_t EWB_1_STATUS :1;
        /* Status of corresponding interrupt source*/
        uint8_t EWB_2_STATUS :1;
        /* Status of corresponding interrupt source*/
        uint8_t EWB_3_STATUS :1;
        /* Status of corresponding interrupt source*/
    }ITM_EWB_STATUS_ts;

}ITM_EWB_STATUS_tu;



//ITM_EWB_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EWB_0_EN_STATUS :1;
        /* Mask of interrupt source 3.*/
        uint8_t EWB_1_EN_STATUS :1;
        /* Mask of interrupt source 3.*/
        uint8_t EWB_2_EN_STATUS :1;
        /* Mask of interrupt source 3.*/
        uint8_t EWB_3_EN_STATUS :1;
        /* Mask of interrupt source 3.*/
    }ITM_EWB_EN_STATUS_ts;

}ITM_EWB_EN_STATUS_tu;



//ITM_EWB_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EWB_0_STATUS_BCLR :1;
        /* EWB_3_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t EWB_1_STATUS_BCLR :1;
        /* EWB_3_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t EWB_2_STATUS_BCLR :1;
        /* EWB_3_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t EWB_3_STATUS_BCLR :1;
        /* EWB_3_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_EWB_STATUS_BCLR_ts;

}ITM_EWB_STATUS_BCLR_tu;



//ITM_EWB_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EWB_0_STATUS_BSET :1;
        /* EWB_3_STATUS is set if this bit is written with a '1'.*/
        uint8_t EWB_1_STATUS_BSET :1;
        /* EWB_3_STATUS is set if this bit is written with a '1'.*/
        uint8_t EWB_2_STATUS_BSET :1;
        /* EWB_3_STATUS is set if this bit is written with a '1'.*/
        uint8_t EWB_3_STATUS_BSET :1;
        /* EWB_3_STATUS is set if this bit is written with a '1'.*/
    }ITM_EWB_STATUS_BSET_ts;

}ITM_EWB_STATUS_BSET_tu;



//ITM_EWB_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EWB_0_EN_BCLR :1;
        /* EWB_3_EN is cleared when this bit is written with a '1'.*/
        uint8_t EWB_1_EN_BCLR :1;
        /* EWB_3_EN is cleared when this bit is written with a '1'.*/
        uint8_t EWB_2_EN_BCLR :1;
        /* EWB_3_EN is cleared when this bit is written with a '1'.*/
        uint8_t EWB_3_EN_BCLR :1;
        /* EWB_3_EN is cleared when this bit is written with a '1'.*/
    }ITM_EWB_EN_BCLR_ts;

}ITM_EWB_EN_BCLR_tu;



//ITM_EWB_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EWB_0_EN_BSET :1;
        /* EWB_3_EN is set when this bit is written with a '1'.*/
        uint8_t EWB_1_EN_BSET :1;
        /* EWB_3_EN is set when this bit is written with a '1'.*/
        uint8_t EWB_2_EN_BSET :1;
        /* EWB_3_EN is set when this bit is written with a '1'.*/
        uint8_t EWB_3_EN_BSET :1;
        /* EWB_3_EN is set when this bit is written with a '1'.*/
    }ITM_EWB_EN_BSET_ts;

}ITM_EWB_EN_BSET_tu;



//ITM_MMWB_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MMWB_STATUS :1;
        /* Status of the interrupt source number 0.*/
    }ITM_MMWB_STATUS_ts;

}ITM_MMWB_STATUS_tu;



//ITM_MMWB_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MMWB_EN_STATUS :1;
        /* Mask of interrupt source 0.*/
    }ITM_MMWB_EN_STATUS_ts;

}ITM_MMWB_EN_STATUS_tu;



//ITM_MMWB_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MMWB_STATUS_BCLR :1;
        /* MMWB_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_MMWB_STATUS_BCLR_ts;

}ITM_MMWB_STATUS_BCLR_tu;



//ITM_MMWB_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MMWB_STATUS_BSET :1;
        /* MMWB_STATUS is set if this bit is written with a '1'.*/
    }ITM_MMWB_STATUS_BSET_ts;

}ITM_MMWB_STATUS_BSET_tu;



//ITM_MMWB_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MMWB_EN_BCLR :1;
        /* MMWB_EN is cleared when this bit is written with a '1'.*/
    }ITM_MMWB_EN_BCLR_ts;

}ITM_MMWB_EN_BCLR_tu;



//ITM_MMWB_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MMWB_EN_BSET :1;
        /* MMWB_EN is set when this bit is written with a '1'.*/
    }ITM_MMWB_EN_BSET_ts;

}ITM_MMWB_EN_BSET_tu;



//ITM_GLACE_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_STATUS :1;
        /* Status of the interrupt source number 0.*/
    }ITM_GLACE_STATUS_ts;

}ITM_GLACE_STATUS_tu;



//ITM_GLACE_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_EN_STATUS :1;
        /* Mask of interrupt source 0.*/
    }ITM_GLACE_EN_STATUS_ts;

}ITM_GLACE_EN_STATUS_tu;



//ITM_GLACE_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_STATUS_BCLR :1;
        /* GLACE_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_GLACE_STATUS_BCLR_ts;

}ITM_GLACE_STATUS_BCLR_tu;



//ITM_GLACE_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_STATUS_BSET :1;
        /* GLACE_STATUS is set if this bit is written with a '1'.*/
    }ITM_GLACE_STATUS_BSET_ts;

}ITM_GLACE_STATUS_BSET_tu;



//ITM_GLACE_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_EN_BCLR :1;
        /* GLACE_EN is cleared when this bit is written with a '1'.*/
    }ITM_GLACE_EN_BCLR_ts;

}ITM_GLACE_EN_BCLR_tu;



//ITM_GLACE_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_EN_BSET :1;
        /* GLACE_EN is set when this bit is written with a '1'.*/
    }ITM_GLACE_EN_BSET_ts;

}ITM_GLACE_EN_BSET_tu;



//ITM_EXP6X8_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EXP6X8_STATUS :1;
        /* Status of the interrupt source number 0.*/
    }ITM_EXP6X8_STATUS_ts;

}ITM_EXP6X8_STATUS_tu;



//ITM_EXP6X8_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EXP6X8_EN_STATUS :1;
        /* Mask of interrupt source 0.*/
    }ITM_EXP6X8_EN_STATUS_ts;

}ITM_EXP6X8_EN_STATUS_tu;



//ITM_EXP6X8_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EXP6X8_STATUS_BCLR :1;
        /* EXP6X8_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_EXP6X8_STATUS_BCLR_ts;

}ITM_EXP6X8_STATUS_BCLR_tu;



//ITM_EXP6X8_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EXP6X8_STATUS_BSET :1;
        /* EXP6X8_STATUS is set if this bit is written with a '1'.*/
    }ITM_EXP6X8_STATUS_BSET_ts;

}ITM_EXP6X8_STATUS_BSET_tu;



//ITM_EXP6X8_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EXP6X8_EN_BCLR :1;
        /* EXP6X8_EN is cleared when this bit is written with a '1'.*/
    }ITM_EXP6X8_EN_BCLR_ts;

}ITM_EXP6X8_EN_BCLR_tu;



//ITM_EXP6X8_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EXP6X8_EN_BSET :1;
        /* EXP6X8_EN is set when this bit is written with a '1'.*/
    }ITM_EXP6X8_EN_BSET_ts;

}ITM_EXP6X8_EN_BSET_tu;



//ITM_GHIST_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GHIST_STATUS :1;
        /* Status of the interrupt source number 0.*/
    }ITM_GHIST_STATUS_ts;

}ITM_GHIST_STATUS_tu;



//ITM_GHIST_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GHIST_EN_STATUS :1;
        /* Mask of interrupt source 0.*/
    }ITM_GHIST_EN_STATUS_ts;

}ITM_GHIST_EN_STATUS_tu;



//ITM_GHIST_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GHIST_STATUS_BCLR :1;
        /* GHIST_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_GHIST_STATUS_BCLR_ts;

}ITM_GHIST_STATUS_BCLR_tu;



//ITM_GHIST_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GHIST_STATUS_BSET :1;
        /* GHIST_STATUS is set if this bit is written with a '1'.*/
    }ITM_GHIST_STATUS_BSET_ts;

}ITM_GHIST_STATUS_BSET_tu;



//ITM_GHIST_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GHIST_EN_BCLR :1;
        /* GHIST_EN is cleared when this bit is written with a '1'.*/
    }ITM_GHIST_EN_BCLR_ts;

}ITM_GHIST_EN_BCLR_tu;



//ITM_GHIST_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GHIST_EN_BSET :1;
        /* GHIST_EN is set when this bit is written with a '1'.*/
    }ITM_GHIST_EN_BSET_ts;

}ITM_GHIST_EN_BSET_tu;



//ITM_AF_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t AF_0_STATUS :1;
        /* Status of the interrupt source number 9.*/
        uint8_t AF_1_STATUS :1;
        /* Status of the interrupt source number 9.*/
        uint8_t AF_2_STATUS :1;
        /* Status of the interrupt source number 9.*/
        uint8_t AF_3_STATUS :1;
        /* Status of the interrupt source number 9.*/
        uint8_t AF_4_STATUS :1;
        /* Status of the interrupt source number 9.*/
        uint8_t AF_5_STATUS :1;
        /* Status of the interrupt source number 9.*/
        uint8_t AF_6_STATUS :1;
        /* Status of the interrupt source number 9.*/
        uint8_t AF_7_STATUS :1;
        /* Status of the interrupt source number 9.*/
        uint8_t AF_8_STATUS :1;
        /* Status of the interrupt source number 9.*/
        uint8_t AF_9_STATUS :1;
        /* Status of the interrupt source number 9.*/
    }ITM_AF_STATUS_ts;

}ITM_AF_STATUS_tu;



//ITM_AF_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t AF_0_EN_STATUS :1;
        /* Mask of interrupt source 9.*/
        uint8_t AF_1_EN_STATUS :1;
        /* Mask of interrupt source 9.*/
        uint8_t AF_2_EN_STATUS :1;
        /* Mask of interrupt source 9.*/
        uint8_t AF_3_EN_STATUS :1;
        /* Mask of interrupt source 9.*/
        uint8_t AF_4_EN_STATUS :1;
        /* Mask of interrupt source 9.*/
        uint8_t AF_5_EN_STATUS :1;
        /* Mask of interrupt source 9.*/
        uint8_t AF_6_EN_STATUS :1;
        /* Mask of interrupt source 9.*/
        uint8_t AF_7_EN_STATUS :1;
        /* Mask of interrupt source 9.*/
        uint8_t AF_8_EN_STATUS :1;
        /* Mask of interrupt source 9.*/
        uint8_t AF_9_EN_STATUS :1;
        /* Mask of interrupt source 9.*/
    }ITM_AF_EN_STATUS_ts;

}ITM_AF_EN_STATUS_tu;



//ITM_AF_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t AF_0_STATUS_BCLR :1;
        /* AF_9_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t AF_1_STATUS_BCLR :1;
        /* AF_9_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t AF_2_STATUS_BCLR :1;
        /* AF_9_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t AF_3_STATUS_BCLR :1;
        /* AF_9_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t AF_4_STATUS_BCLR :1;
        /* AF_9_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t AF_5_STATUS_BCLR :1;
        /* AF_9_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t AF_6_STATUS_BCLR :1;
        /* AF_9_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t AF_7_STATUS_BCLR :1;
        /* AF_9_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t AF_8_STATUS_BCLR :1;
        /* AF_9_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t AF_9_STATUS_BCLR :1;
        /* AF_9_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_AF_STATUS_BCLR_ts;

}ITM_AF_STATUS_BCLR_tu;



//ITM_AF_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t AF_0_STATUS_BSET :1;
        /* AF_9_STATUS is set if this bit is written with a '1'.*/
        uint8_t AF_1_STATUS_BSET :1;
        /* AF_9_STATUS is set if this bit is written with a '1'.*/
        uint8_t AF_2_STATUS_BSET :1;
        /* AF_9_STATUS is set if this bit is written with a '1'.*/
        uint8_t AF_3_STATUS_BSET :1;
        /* AF_9_STATUS is set if this bit is written with a '1'.*/
        uint8_t AF_4_STATUS_BSET :1;
        /* AF_9_STATUS is set if this bit is written with a '1'.*/
        uint8_t AF_5_STATUS_BSET :1;
        /* AF_9_STATUS is set if this bit is written with a '1'.*/
        uint8_t AF_6_STATUS_BSET :1;
        /* AF_9_STATUS is set if this bit is written with a '1'.*/
        uint8_t AF_7_STATUS_BSET :1;
        /* AF_9_STATUS is set if this bit is written with a '1'.*/
        uint8_t AF_8_STATUS_BSET :1;
        /* AF_9_STATUS is set if this bit is written with a '1'.*/
        uint8_t AF_9_STATUS_BSET :1;
        /* AF_9_STATUS is set if this bit is written with a '1'.*/
    }ITM_AF_STATUS_BSET_ts;

}ITM_AF_STATUS_BSET_tu;



//ITM_AF_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t AF_0_EN_BCLR :1;
        /* AF_9_EN is cleared when this bit is written with a '1'.*/
        uint8_t AF_1_EN_BCLR :1;
        /* AF_9_EN is cleared when this bit is written with a '1'.*/
        uint8_t AF_2_EN_BCLR :1;
        /* AF_9_EN is cleared when this bit is written with a '1'.*/
        uint8_t AF_3_EN_BCLR :1;
        /* AF_9_EN is cleared when this bit is written with a '1'.*/
        uint8_t AF_4_EN_BCLR :1;
        /* AF_9_EN is cleared when this bit is written with a '1'.*/
        uint8_t AF_5_EN_BCLR :1;
        /* AF_9_EN is cleared when this bit is written with a '1'.*/
        uint8_t AF_6_EN_BCLR :1;
        /* AF_9_EN is cleared when this bit is written with a '1'.*/
        uint8_t AF_7_EN_BCLR :1;
        /* AF_9_EN is cleared when this bit is written with a '1'.*/
        uint8_t AF_8_EN_BCLR :1;
        /* AF_9_EN is cleared when this bit is written with a '1'.*/
        uint8_t AF_9_EN_BCLR :1;
        /* AF_9_EN is cleared when this bit is written with a '1'.*/
    }ITM_AF_EN_BCLR_ts;

}ITM_AF_EN_BCLR_tu;



//ITM_AF_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t AF_0_EN_BSET :1;
        /* AF_9_EN is set when this bit is written with a '1'.*/
        uint8_t AF_1_EN_BSET :1;
        /* AF_9_EN is set when this bit is written with a '1'.*/
        uint8_t AF_2_EN_BSET :1;
        /* AF_9_EN is set when this bit is written with a '1'.*/
        uint8_t AF_3_EN_BSET :1;
        /* AF_9_EN is set when this bit is written with a '1'.*/
        uint8_t AF_4_EN_BSET :1;
        /* AF_9_EN is set when this bit is written with a '1'.*/
        uint8_t AF_5_EN_BSET :1;
        /* AF_9_EN is set when this bit is written with a '1'.*/
        uint8_t AF_6_EN_BSET :1;
        /* AF_9_EN is set when this bit is written with a '1'.*/
        uint8_t AF_7_EN_BSET :1;
        /* AF_9_EN is set when this bit is written with a '1'.*/
        uint8_t AF_8_EN_BSET :1;
        /* AF_9_EN is set when this bit is written with a '1'.*/
        uint8_t AF_9_EN_BSET :1;
        /* AF_9_EN is set when this bit is written with a '1'.*/
    }ITM_AF_EN_BSET_ts;

}ITM_AF_EN_BSET_tu;



//ITM_ARCTIC_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ARCTIC_STATUS :1;
        /* Status of the interrupt source number 0.*/
    }ITM_ARCTIC_STATUS_ts;

}ITM_ARCTIC_STATUS_tu;



//ITM_ARCTIC_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ARCTIC_EN_STATUS :1;
        /* Mask of interrupt source 0.*/
    }ITM_ARCTIC_EN_STATUS_ts;

}ITM_ARCTIC_EN_STATUS_tu;



//ITM_ARCTIC_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ARCTIC_STATUS_BCLR :1;
        /* ARCTIC_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_ARCTIC_STATUS_BCLR_ts;

}ITM_ARCTIC_STATUS_BCLR_tu;



//ITM_ARCTIC_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ARCTIC_STATUS_BSET :1;
        /* ARCTIC_STATUS is set if this bit is written with a '1'.*/
    }ITM_ARCTIC_STATUS_BSET_ts;

}ITM_ARCTIC_STATUS_BSET_tu;



//ITM_ARCTIC_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ARCTIC_EN_BCLR :1;
        /* ARCTIC_EN is cleared when this bit is written with a '1'.*/
    }ITM_ARCTIC_EN_BCLR_ts;

}ITM_ARCTIC_EN_BCLR_tu;



//ITM_ARCTIC_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ARCTIC_EN_BSET :1;
        /* ARCTIC_EN is set when this bit is written with a '1'.*/
    }ITM_ARCTIC_EN_BSET_ts;

}ITM_ARCTIC_EN_BSET_tu;



//ITM_SKIND_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SKIND_STATUS :1;
        /* Status of the interrupt source number 0.*/
    }ITM_SKIND_STATUS_ts;

}ITM_SKIND_STATUS_tu;



//ITM_SKIND_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SKIND_EN_STATUS :1;
        /* Mask of interrupt source 0.*/
    }ITM_SKIND_EN_STATUS_ts;

}ITM_SKIND_EN_STATUS_tu;



//ITM_SKIND_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SKIND_STATUS_BCLR :1;
        /* SKIND_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_SKIND_STATUS_BCLR_ts;

}ITM_SKIND_STATUS_BCLR_tu;



//ITM_SKIND_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SKIND_STATUS_BSET :1;
        /* SKIND_STATUS is set if this bit is written with a '1'.*/
    }ITM_SKIND_STATUS_BSET_ts;

}ITM_SKIND_STATUS_BSET_tu;



//ITM_SKIND_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SKIND_EN_BCLR :1;
        /* SKIND_EN is cleared when this bit is written with a '1'.*/
    }ITM_SKIND_EN_BCLR_ts;

}ITM_SKIND_EN_BCLR_tu;



//ITM_SKIND_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SKIND_EN_BSET :1;
        /* SKIND_EN is set when this bit is written with a '1'.*/
    }ITM_SKIND_EN_BSET_ts;

}ITM_SKIND_EN_BSET_tu;



//ITM_VIDPIPE0_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t STATUS :1;
        /* Status of the interrupt source number 0.*/
    }ITM_VIDPIPE0_STATUS_ts;

}ITM_VIDPIPE0_STATUS_tu;



//ITM_VIDPIPE0_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EN_STATUS :1;
        /* Mask of interrupt source 0.*/
    }ITM_VIDPIPE0_EN_STATUS_ts;

}ITM_VIDPIPE0_EN_STATUS_tu;



//ITM_VIDPIPE0_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t STATUS_BCLR :1;
        /* VIDPIPEx_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_VIDPIPE0_STATUS_BCLR_ts;

}ITM_VIDPIPE0_STATUS_BCLR_tu;



//ITM_VIDPIPE0_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t STATUS_BSET :1;
        /* VIDPIPEx_STATUS is set if this bit is written with a '1'.*/
    }ITM_VIDPIPE0_STATUS_BSET_ts;

}ITM_VIDPIPE0_STATUS_BSET_tu;



//ITM_VIDPIPE0_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EN_BCLR :1;
        /* VIDPIPE0_EN is cleared when this bit is written with a '1'.*/
    }ITM_VIDPIPE0_EN_BCLR_ts;

}ITM_VIDPIPE0_EN_BCLR_tu;



//ITM_VIDPIPE0_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EN_BSET :1;
        /* VIDPIPE0_EN is set when this bit is written with a '1'.*/
    }ITM_VIDPIPE0_EN_BSET_ts;

}ITM_VIDPIPE0_EN_BSET_tu;



//ITM_VIDPIPE1_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t STATUS :1;
        /* Status of the interrupt source number 0.*/
    }ITM_VIDPIPE1_STATUS_ts;

}ITM_VIDPIPE1_STATUS_tu;



//ITM_VIDPIPE1_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EN_STATUS :1;
        /* Mask of interrupt source 0.*/
    }ITM_VIDPIPE1_EN_STATUS_ts;

}ITM_VIDPIPE1_EN_STATUS_tu;



//ITM_VIDPIPE1_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t STATUS_BCLR :1;
        /* VIDPIPEx_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_VIDPIPE1_STATUS_BCLR_ts;

}ITM_VIDPIPE1_STATUS_BCLR_tu;



//ITM_VIDPIPE1_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t STATUS_BSET :1;
        /* VIDPIPEx_STATUS is set if this bit is written with a '1'.*/
    }ITM_VIDPIPE1_STATUS_BSET_ts;

}ITM_VIDPIPE1_STATUS_BSET_tu;



//ITM_VIDPIPE1_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EN_BCLR :1;
        /* VIDPIPE0_EN is cleared when this bit is written with a '1'.*/
    }ITM_VIDPIPE1_EN_BCLR_ts;

}ITM_VIDPIPE1_EN_BCLR_tu;



//ITM_VIDPIPE1_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t EN_BSET :1;
        /* VIDPIPE0_EN is set when this bit is written with a '1'.*/
    }ITM_VIDPIPE1_EN_BSET_ts;

}ITM_VIDPIPE1_EN_BSET_tu;



//ITM_SMIARX_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_0_STATUS :1;
        /* Status of the interrupt source number 3 to 0.*/
        uint8_t SMIARX_1_STATUS :1;
        /* Status of the interrupt source number 3 to 0.*/
        uint8_t SMIARX_2_STATUS :1;
        /* Status of the interrupt source number 3 to 0.*/
        uint8_t SMIARX_3_STATUS :1;
        /* Status of the interrupt source number 3 to 0.*/
        uint8_t SMIARX_4_STATUS :1;
        /* Status of the interrupt source number 4.*/
    }ITM_SMIARX_STATUS_ts;

}ITM_SMIARX_STATUS_tu;



//ITM_SMIARX_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_0_EN_STATUS :1;
        /* Mask of corresponding interrupt source.*/
        uint8_t SMIARX_1_EN_STATUS :1;
        /* Mask of corresponding interrupt source.*/
        uint8_t SMIARX_2_EN_STATUS :1;
        /* Mask of corresponding interrupt source.*/
        uint8_t SMIARX_3_EN_STATUS :1;
        /* Mask of corresponding interrupt source.*/
        uint8_t SMIARX_4_EN_STATUS :1;
        /* Mask of interrupt source 4.*/
    }ITM_SMIARX_EN_STATUS_ts;

}ITM_SMIARX_EN_STATUS_tu;



//ITM_SMIARX_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_0_STATUS_BCLR :1;
        /* STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_1_STATUS_BCLR :1;
        /* STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_2_STATUS_BCLR :1;
        /* STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_3_STATUS_BCLR :1;
        /* STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_4_STATUS_BCLR :1;
        /* STATUS_4 is cleared when this bit is written with a '1'.*/
    }ITM_SMIARX_STATUS_BCLR_ts;

}ITM_SMIARX_STATUS_BCLR_tu;



//ITM_SMIARX_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_0_STATUS_BSET :1;
        /* STATUS_[3:0] is set if this bit is written with a '1'.*/
        uint8_t SMIARX_1_STATUS_BSET :1;
        /* STATUS_[3:0] is set if this bit is written with a '1'.*/
        uint8_t SMIARX_2_STATUS_BSET :1;
        /* STATUS_[3:0] is set if this bit is written with a '1'.*/
        uint8_t SMIARX_3_STATUS_BSET :1;
        /* STATUS_[3:0] is set if this bit is written with a '1'.*/
        uint8_t SMIARX_4_STATUS_BSET :1;
        /* STATUS_4 is set if this bit is written with a '1'.*/
    }ITM_SMIARX_STATUS_BSET_ts;

}ITM_SMIARX_STATUS_BSET_tu;



//ITM_SMIARX_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_0_EN_BCLR :1;
        /* EN_STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_1_EN_BCLR :1;
        /* EN_STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_2_EN_BCLR :1;
        /* EN_STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_3_EN_BCLR :1;
        /* EN_STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_4_EN_BCLR :1;
        /* EN_STATUS_4 is cleared when this bit is written with a '1'.*/
    }ITM_SMIARX_EN_BCLR_ts;

}ITM_SMIARX_EN_BCLR_tu;



//ITM_SMIARX_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_0_EN_BSET :1;
        /* EN_STATUS_[3:0] is set when this bit is written with a '1'.*/
        uint8_t SMIARX_1_EN_BSET :1;
        /* EN_STATUS_[3:0] is set when this bit is written with a '1'.*/
        uint8_t SMIARX_2_EN_BSET :1;
        /* EN_STATUS_[3:0] is set when this bit is written with a '1'.*/
        uint8_t SMIARX_3_EN_BSET :1;
        /* EN_STATUS_[3:0] is set when this bit is written with a '1'.*/
        uint8_t SMIARX_4_EN_BSET :1;
        /* EN_STATUS_4 is set when this bit is written with a '1'.*/
    }ITM_SMIARX_EN_BSET_ts;

}ITM_SMIARX_EN_BSET_tu;



//ITM_LBE_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t LBE_STATUS :1;
        /* Status of the interrupt source number 0.*/
    }ITM_LBE_STATUS_ts;

}ITM_LBE_STATUS_tu;



//ITM_LBE_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t LBE_EN_STATUS :1;
        /* Mask of interrupt source 0.*/
    }ITM_LBE_EN_STATUS_ts;

}ITM_LBE_EN_STATUS_tu;



//ITM_LBE_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t LBE_STATUS_BCLR :1;
        /* LBE_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_LBE_STATUS_BCLR_ts;

}ITM_LBE_STATUS_BCLR_tu;



//ITM_LBE_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t LBE_STATUS_BSET :1;
        /* LBE_STATUS is set if this bit is written with a '1'.*/
    }ITM_LBE_STATUS_BSET_ts;

}ITM_LBE_STATUS_BSET_tu;



//ITM_LBE_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t LBE_EN_BCLR :1;
        /* LBE_EN is cleared when this bit is written with a '1'.*/
    }ITM_LBE_EN_BCLR_ts;

}ITM_LBE_EN_BCLR_tu;



//ITM_LBE_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t LBE_EN_BSET :1;
        /* LBE_EN is set when this bit is written with a '1'.*/
    }ITM_LBE_EN_BSET_ts;

}ITM_LBE_EN_BSET_tu;



//ITM_MCCI_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Master_cci_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MCCI_EOP_STATUS :1;
        /* Status of the end of process interrupt source.*/
        uint8_t MCCI_ERROR_STATUS :1;
        /* Status of the error interrupt source.*/
    }ITM_MCCI_STATUS_ts;

}ITM_MCCI_STATUS_tu;



//ITM_MCCI_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Master CCI.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MCCI_EOP_EN_STATUS :1;
        /* Mask of emd of process interrupt source.*/
        uint8_t MCCI_ERROR_EN_STATUS :1;
        /* Mask of error nterrupt source.*/
    }ITM_MCCI_EN_STATUS_ts;

}ITM_MCCI_EN_STATUS_tu;



//ITM_MCCI_STATUS_BCLR
/*Description: Bit per bit clear of MasterCCI_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MCCI_EOP_STATUS_BCLR :1;
        /* MCCI_EOP_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t MCCI_ERROR_STATUS_BCLR :1;
        /* MCCI_ERROR_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_MCCI_STATUS_BCLR_ts;

}ITM_MCCI_STATUS_BCLR_tu;



//ITM_MCCI_STATUS_BSET
/*Description: Bit per bit set of MasterCCI_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MCCI_EOP_STATUS_BSET :1;
        /* MCCI_EOP_STATUS is set if this bit is written with a '1'.*/
        uint8_t MCCI_ERROR_STATUS_BSET :1;
        /* MCCI_ERROR_STATUS is set if this bit is written with a '1'.*/
    }ITM_MCCI_STATUS_BSET_ts;

}ITM_MCCI_STATUS_BSET_tu;



//ITM_MCCI_EN_BCLR
/*Description: Bit per bit clear of MasterCCI_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MCCI_EOP_EN_BCLR :1;
        /* MCCI_EN is cleared when this bit is written with a '1'.*/
        uint8_t MCCI_ERROR_EN_BCLR :1;
        /* MCCI_EN is cleared when this bit is written with a '1'.*/
    }ITM_MCCI_EN_BCLR_ts;

}ITM_MCCI_EN_BCLR_tu;



//ITM_MCCI_EN_BSET
/*Description: Bit per bit set of MasterCCI_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t MCCI_EOP_EN_BSET :1;
        /* MCCI_EOP_EN is set when this bit is written with a '1'.*/
        uint8_t MCCI_ERROR_EN_BSET :1;
        /* MCCI_ERROR_EN is set when this bit is written with a '1'.*/
    }ITM_MCCI_EN_BSET_ts;

}ITM_MCCI_EN_BSET_tu;



//ITM_HCOM_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t HCOM_STATUS :1;
        /* Status of the interrupt source number 0.*/
    }ITM_HCOM_STATUS_ts;

}ITM_HCOM_STATUS_tu;



//ITM_HCOM_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t HCOM_EN_STATUS :1;
        /* Mask of interrupt source 0.*/
    }ITM_HCOM_EN_STATUS_ts;

}ITM_HCOM_EN_STATUS_tu;



//ITM_HCOM_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t HCOM_STATUS_BCLR :1;
        /* HCOM_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_HCOM_STATUS_BCLR_ts;

}ITM_HCOM_STATUS_BCLR_tu;



//ITM_HCOM_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t HCOM_STATUS_BSET :1;
        /* HCOM_STATUS is set if this bit is written with a '1'.*/
    }ITM_HCOM_STATUS_BSET_ts;

}ITM_HCOM_STATUS_BSET_tu;



//ITM_HCOM_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t HCOM_EN_BCLR :1;
        /* HCOM_EN is cleared when this bit is written with a '1'.*/
    }ITM_HCOM_EN_BCLR_ts;

}ITM_HCOM_EN_BCLR_tu;



//ITM_HCOM_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t HCOM_EN_BSET :1;
        /* HCOM_EN is set when this bit is written with a '1'.*/
    }ITM_HCOM_EN_BSET_ts;

}ITM_HCOM_EN_BSET_tu;



//ITM_REPIPE_STATUS
/*Description: RE Pipe Interrupt Status.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t RE_IN_STATUS :1;
        /* Status of the RE In ITPoint interrupt.*/
        uint8_t RE_POSTGAIN_STATUS :1;
        /* Status of the RE Post Gain ITPoint interrupt.*/
        uint8_t RE_OUT_STORE_STATUS :1;
        /* Status of the RE Out Store ITPoint interrupt.*/
    }ITM_REPIPE_STATUS_ts;

}ITM_REPIPE_STATUS_tu;



//ITM_REPIPE_EN_STATUS
/*Description: RE Pipe Interrupt mask.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t RE_IN_EN_STATUS :1;
        /* Mask of RE In ITPoint interrupt.*/
        uint8_t RE_POSTGAIN_EN_STATUS :1;
        /* Mask of RE Post Gain ITPoint interrupt..*/
        uint8_t RE_OUT_STORE_EN_STATUS :1;
        /* Mask of RE Out Store ITPoint interrupt.*/
    }ITM_REPIPE_EN_STATUS_ts;

}ITM_REPIPE_EN_STATUS_tu;



//ITM_REPIPE_STATUS_BCLR
/*Description: RE Pipe Clear Status.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t RE_IN_STATUS_BCLR :1;
        /* RE_IN_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t RE_POSTGAIN_STATUS_BCLR :1;
        /* RE_POSTGAIN_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t RE_OUT_STORE_STATUS_BCLR :1;
        /* RE_OUT_STORE_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_REPIPE_STATUS_BCLR_ts;

}ITM_REPIPE_STATUS_BCLR_tu;



//ITM_REPIPE_STATUS_BSET
/*Description: RE Pipe Set Status.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t RE_IN_STATUS_BSET :1;
        /* RE_IN_STATUS is set if this bit is written with a '1'.*/
        uint8_t RE_POSTGAIN_STATUS_BSET :1;
        /* RE_POSTGAIN_STATUS is set if this bit is written with a '1'.*/
        uint8_t RE_OUT_STORE_STATUS_BSET :1;
        /* RE_OUT_STORE_STATUS is set if this bit is written with a '1'.*/
    }ITM_REPIPE_STATUS_BSET_ts;

}ITM_REPIPE_STATUS_BSET_tu;



//ITM_REPIPE_EN_BCLR
/*Description: RE Pipe Clear Mask.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t RE_IN_EN_BCLR :1;
        /* RE_IN_EN is cleared when this bit is written with a '1'.*/
        uint8_t RE_POSTGAIN_EN_BCLR :1;
        /* RE_POSTGAIN_EN is cleared when this bit is written with a '1'.*/
        uint8_t RE_OUT_STORE_EN_BCLR :1;
        /* RE_OUT_STORE_EN is cleared when this bit is written with a '1'.*/
    }ITM_REPIPE_EN_BCLR_ts;

}ITM_REPIPE_EN_BCLR_tu;



//ITM_REPIPE_EN_BSET
/*Description: RE Pipe Set Mask.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t RE_IN_EN_BSET :1;
        /* RE_IN_EN is set when this bit is written with a '1'.*/
        uint8_t RE_POSTGAIN_EN_BSET :1;
        /* RE_POSTGAIN_EN is set when this bit is written with a '1'.*/
        uint8_t RE_OUT_STORE_EN_BSET :1;
        /* RE_OUT_STORE_EN is set when this bit is written with a '1'.*/
    }ITM_REPIPE_EN_BSET_ts;

}ITM_REPIPE_EN_BSET_tu;



//ITM_DMCEPIPE_STATUS
/*Description: DMCE Pipe Interrupt Status.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t DMCE_IN_STATUS :1;
        /* Status of the DMCE In ITPoint interrupt.*/
        uint8_t DMCE_OUT_STATUS :1;
        /* Status of the DMCE Out ITPoint interrupt.*/
        uint8_t RGB_STORE_STATUS :1;
        /* Status of the RGB Store ITPoint interrupt.*/
    }ITM_DMCEPIPE_STATUS_ts;

}ITM_DMCEPIPE_STATUS_tu;



//ITM_DMCEPIPE_EN_STATUS
/*Description: DMCE Pipe Interrupt mask.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t DMCE_IN_EN_STATUS :1;
        /* Mask of DMCE In ITPoint interrupt.*/
        uint8_t DMCE_OUT_EN_STATUS :1;
        /* Mask of DMCE Out ITPoint interrupt..*/
        uint8_t RGB_STORE_EN_STATUS :1;
        /* Mask of RGB Store ITPoint interrupt.*/
    }ITM_DMCEPIPE_EN_STATUS_ts;

}ITM_DMCEPIPE_EN_STATUS_tu;



//ITM_DMCEPIPE_STATUS_BCLR
/*Description: DMCE Pipe Clear Status.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t DMCE_IN_STATUS_BCLR :1;
        /* DMCE_IN_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t DMCE_OUT_STATUS_BCLR :1;
        /* DMCE_OUT_STATUS is cleared when this bit is written with a '1'.*/
        uint8_t RGB_STORE_STATUS_BCLR :1;
        /* RGB_STORE_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_DMCEPIPE_STATUS_BCLR_ts;

}ITM_DMCEPIPE_STATUS_BCLR_tu;



//ITM_DMCEPIPE_STATUS_BSET
/*Description: DMCE Pipe Set Status.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t DMCE_IN_STATUS_BSET :1;
        /* DMCE_IN_STATUS is set if this bit is written with a '1'.*/
        uint8_t DMCE_OUT_STATUS_BSET :1;
        /* DMCE_OUT_STATUS is set if this bit is written with a '1'.*/
        uint8_t RGB_STORE_STATUS_BSET :1;
        /* RGB_STORE_STATUS is set if this bit is written with a '1'.*/
    }ITM_DMCEPIPE_STATUS_BSET_ts;

}ITM_DMCEPIPE_STATUS_BSET_tu;



//ITM_DMCEPIPE_EN_BCLR
/*Description: DMCE Pipe Clear Mask.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t DMCE_IN_EN_BCLR :1;
        /* DMCE_IN_EN is cleared when this bit is written with a '1'.*/
        uint8_t DMCE_OUT_EN_BCLR :1;
        /* DMCE_OUT_EN is cleared when this bit is written with a '1'.*/
        uint8_t RGB_STORE_EN_BCLR :1;
        /* RGB_STORE_EN is cleared when this bit is written with a '1'.*/
    }ITM_DMCEPIPE_EN_BCLR_ts;

}ITM_DMCEPIPE_EN_BCLR_tu;



//ITM_DMCEPIPE_EN_BSET
/*Description: DMCE Pipe Set Mask.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t DMCE_IN_EN_BSET :1;
        /* DMCE_IN_EN is set when this bit is written with a '1'.*/
        uint8_t DMCE_OUT_EN_BSET :1;
        /* DMCE_OUT_EN is set when this bit is written with a '1'.*/
        uint8_t RGB_STORE_EN_BSET :1;
        /* RGB_STORE_EN is set when this bit is written with a '1'.*/
    }ITM_DMCEPIPE_EN_BSET_ts;

}ITM_DMCEPIPE_EN_BSET_tu;



//ITM_3D_SMIARX_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_3D_0_STATUS :1;
        /* Status of the interrupt source number 3 to 0.*/
        uint8_t SMIARX_3D_1_STATUS :1;
        /* Status of the interrupt source number 3 to 0.*/
        uint8_t SMIARX_3D_2_STATUS :1;
        /* Status of the interrupt source number 3 to 0.*/
        uint8_t SMIARX_3D_3_STATUS :1;
        /* Status of the interrupt source number 3 to 0.*/
        uint8_t SMIARX_3D_4_STATUS :1;
        /* Status of the interrupt source number 4.*/
    }ITM_3D_SMIARX_STATUS_ts;

}ITM_3D_SMIARX_STATUS_tu;



//ITM_3D_SMIARX_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_3D_0_EN_STATUS :1;
        /* Mask of corresponding interrupt source.*/
        uint8_t SMIARX_3D_1_EN_STATUS :1;
        /* Mask of corresponding interrupt source.*/
        uint8_t SMIARX_3D_2_EN_STATUS :1;
        /* Mask of corresponding interrupt source.*/
        uint8_t SMIARX_3D_3_EN_STATUS :1;
        /* Mask of corresponding interrupt source.*/
        uint8_t SMIARX_3D_4_EN_STATUS :1;
        /* Mask of interrupt source 4.*/
    }ITM_3D_SMIARX_EN_STATUS_ts;

}ITM_3D_SMIARX_EN_STATUS_tu;



//ITM_3D_SMIARX_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_3D_0_STATUS_BCLR :1;
        /* STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_1_STATUS_BCLR :1;
        /* STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_2_STATUS_BCLR :1;
        /* STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_3_STATUS_BCLR :1;
        /* STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_4_STATUS_BCLR :1;
        /* STATUS_4 is cleared when this bit is written with a '1'.*/
    }ITM_3D_SMIARX_STATUS_BCLR_ts;

}ITM_3D_SMIARX_STATUS_BCLR_tu;



//ITM_3D_SMIARX_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_3D_0_STATUS_BSET :1;
        /* STATUS_[3:0] is set if this bit is written with a '1'.*/
        uint8_t SMIARX_3D_1_STATUS_BSET :1;
        /* STATUS_[3:0] is set if this bit is written with a '1'.*/
        uint8_t SMIARX_3D_2_STATUS_BSET :1;
        /* STATUS_[3:0] is set if this bit is written with a '1'.*/
        uint8_t SMIARX_3D_3_STATUS_BSET :1;
        /* STATUS_[3:0] is set if this bit is written with a '1'.*/
        uint8_t SMIARX_3D_4_STATUS_BSET :1;
        /* STATUS_4 is set if this bit is written with a '1'.*/
    }ITM_3D_SMIARX_STATUS_BSET_ts;

}ITM_3D_SMIARX_STATUS_BSET_tu;



//ITM_3D_SMIARX_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_3D_0_EN_BCLR :1;
        /* EN_STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_1_EN_BCLR :1;
        /* EN_STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_2_EN_BCLR :1;
        /* EN_STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_3_EN_BCLR :1;
        /* EN_STATUS_[3:0] is cleared when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_4_EN_BCLR :1;
        /* EN_STATUS_4 is cleared when this bit is written with a '1'.*/
    }ITM_3D_SMIARX_EN_BCLR_ts;

}ITM_3D_SMIARX_EN_BCLR_tu;



//ITM_3D_SMIARX_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t SMIARX_3D_0_EN_BSET :1;
        /* EN_STATUS_[3:0] is set when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_1_EN_BSET :1;
        /* EN_STATUS_[3:0] is set when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_2_EN_BSET :1;
        /* EN_STATUS_[3:0] is set when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_3_EN_BSET :1;
        /* EN_STATUS_[3:0] is set when this bit is written with a '1'.*/
        uint8_t SMIARX_3D_4_EN_BSET :1;
        /* EN_STATUS_4 is set when this bit is written with a '1'.*/
    }ITM_3D_SMIARX_EN_BSET_ts;

}ITM_3D_SMIARX_EN_BSET_tu;



//ITM_LINE_BURSTY_ELIM_STATUS
/*Description: Each bit memorizes a posedge detection on the corresponding bit of Channel_Closed_STA.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t LINE_BURSTY_ELIM_STATUS :1;
        /* Status of the interrupt source number 0.*/
    }ITM_LINE_BURSTY_ELIM_STATUS_ts;

}ITM_LINE_BURSTY_ELIM_STATUS_tu;



//ITM_LINE_BURSTY_ELIM_EN_STATUS
/*Description: Bit per bit mask of the interrupt source of Channel_Closed.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t LINE_BURSTY_ELIM_EN_STATUS :1;
        /* Mask of interrupt source 0.*/
    }ITM_LINE_BURSTY_ELIM_EN_STATUS_ts;

}ITM_LINE_BURSTY_ELIM_EN_STATUS_tu;



//ITM_LINE_BURSTY_ELIM_STATUS_BCLR
/*Description: Bit per bit clear of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t LINE_BURSTY_ELIM_STATUS_BCLR :1;
        /* LBE_STATUS is cleared when this bit is written with a '1'.*/
    }ITM_LINE_BURSTY_ELIM_STATUS_BCLR_ts;

}ITM_LINE_BURSTY_ELIM_STATUS_BCLR_tu;



//ITM_LINE_BURSTY_ELIM_STATUS_BSET
/*Description: Bit per bit set of Channel_Closed_STATUS.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t LINE_BURSTY_ELIM_STATUS_BSET :1;
        /* LBE_STATUS is set if this bit is written with a '1'.*/
    }ITM_LINE_BURSTY_ELIM_STATUS_BSET_ts;

}ITM_LINE_BURSTY_ELIM_STATUS_BSET_tu;



//ITM_LINE_BURSTY_ELIM_EN_BCLR
/*Description: Bit per bit clear of Channel_Closed_EN.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t LINE_BURSTY_ELIM_EN_BCLR :1;
        /* LBE_EN is cleared when this bit is written with a '1'.*/
    }ITM_LINE_BURSTY_ELIM_EN_BCLR_ts;

}ITM_LINE_BURSTY_ELIM_EN_BCLR_tu;



//ITM_LINE_BURSTY_ELIM_EN_BSET
/*Description: Bit per bit set of Channel_Closed_EN.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t LINE_BURSTY_ELIM_EN_BSET :1;
        /* LBE_EN is set when this bit is written with a '1'.*/
    }ITM_LINE_BURSTY_ELIM_EN_BSET_ts;

}ITM_LINE_BURSTY_ELIM_EN_BSET_tu;

typedef struct
{
    ITM_FW_EVENT0_STATUS_tu ITM_FW_EVENT0_STATUS;
    ITM_FW_EVENT0_EN_STATUS_tu ITM_FW_EVENT0_EN_STATUS;
    ITM_FW_EVENT0_STATUS_BCLR_tu ITM_FW_EVENT0_STATUS_BCLR;
    ITM_FW_EVENT0_STATUS_BSET_tu ITM_FW_EVENT0_STATUS_BSET;
    ITM_FW_EVENT0_EN_BCLR_tu ITM_FW_EVENT0_EN_BCLR;
    ITM_FW_EVENT0_EN_BSET_tu ITM_FW_EVENT0_EN_BSET;
    ITM_FW_EVENT1_STATUS_tu ITM_FW_EVENT1_STATUS;
    ITM_FW_EVENT1_EN_STATUS_tu ITM_FW_EVENT1_EN_STATUS;
    ITM_FW_EVENT1_STATUS_BCLR_tu ITM_FW_EVENT1_STATUS_BCLR;
    ITM_FW_EVENT1_STATUS_BSET_tu ITM_FW_EVENT1_STATUS_BSET;
    ITM_FW_EVENT1_EN_BCLR_tu ITM_FW_EVENT1_EN_BCLR;
    ITM_FW_EVENT1_EN_BSET_tu ITM_FW_EVENT1_EN_BSET;
    ITM_FW_EVENT2_STATUS_tu ITM_FW_EVENT2_STATUS;
    ITM_FW_EVENT2_EN_STATUS_tu ITM_FW_EVENT2_EN_STATUS;
    ITM_FW_EVENT2_STATUS_BCLR_tu ITM_FW_EVENT2_STATUS_BCLR;
    ITM_FW_EVENT2_STATUS_BSET_tu ITM_FW_EVENT2_STATUS_BSET;
    ITM_FW_EVENT2_EN_BCLR_tu ITM_FW_EVENT2_EN_BCLR;
    ITM_FW_EVENT2_EN_BSET_tu ITM_FW_EVENT2_EN_BSET;
    ITM_FW_EVENT3_STATUS_tu ITM_FW_EVENT3_STATUS;
    ITM_FW_EVENT3_EN_STATUS_tu ITM_FW_EVENT3_EN_STATUS;
    ITM_FW_EVENT3_STATUS_BCLR_tu ITM_FW_EVENT3_STATUS_BCLR;
    ITM_FW_EVENT3_STATUS_BSET_tu ITM_FW_EVENT3_STATUS_BSET;
    ITM_FW_EVENT3_EN_BCLR_tu ITM_FW_EVENT3_EN_BCLR;
    ITM_FW_EVENT3_EN_BSET_tu ITM_FW_EVENT3_EN_BSET;
    ITM_GPIO_STATUS_tu ITM_GPIO_STATUS;
    ITM_GPIO_EN_STATUS_tu ITM_GPIO_EN_STATUS;
    ITM_GPIO_STATUS_BCLR_tu ITM_GPIO_STATUS_BCLR;
    ITM_GPIO_STATUS_BSET_tu ITM_GPIO_STATUS_BSET;
    ITM_GPIO_EN_BCLR_tu ITM_GPIO_EN_BCLR;
    ITM_GPIO_EN_BSET_tu ITM_GPIO_EN_BSET;
    ITM_EWB_STATUS_tu ITM_EWB_STATUS;
    ITM_EWB_EN_STATUS_tu ITM_EWB_EN_STATUS;
    ITM_EWB_STATUS_BCLR_tu ITM_EWB_STATUS_BCLR;
    ITM_EWB_STATUS_BSET_tu ITM_EWB_STATUS_BSET;
    ITM_EWB_EN_BCLR_tu ITM_EWB_EN_BCLR;
    ITM_EWB_EN_BSET_tu ITM_EWB_EN_BSET;
    ITM_MMWB_STATUS_tu ITM_MMWB_STATUS;
    ITM_MMWB_EN_STATUS_tu ITM_MMWB_EN_STATUS;
    ITM_MMWB_STATUS_BCLR_tu ITM_MMWB_STATUS_BCLR;
    ITM_MMWB_STATUS_BSET_tu ITM_MMWB_STATUS_BSET;
    ITM_MMWB_EN_BCLR_tu ITM_MMWB_EN_BCLR;
    ITM_MMWB_EN_BSET_tu ITM_MMWB_EN_BSET;
    ITM_GLACE_STATUS_tu ITM_GLACE_STATUS;
    ITM_GLACE_EN_STATUS_tu ITM_GLACE_EN_STATUS;
    ITM_GLACE_STATUS_BCLR_tu ITM_GLACE_STATUS_BCLR;
    ITM_GLACE_STATUS_BSET_tu ITM_GLACE_STATUS_BSET;
    ITM_GLACE_EN_BCLR_tu ITM_GLACE_EN_BCLR;
    ITM_GLACE_EN_BSET_tu ITM_GLACE_EN_BSET;
    ITM_EXP6X8_STATUS_tu ITM_EXP6X8_STATUS;
    ITM_EXP6X8_EN_STATUS_tu ITM_EXP6X8_EN_STATUS;
    ITM_EXP6X8_STATUS_BCLR_tu ITM_EXP6X8_STATUS_BCLR;
    ITM_EXP6X8_STATUS_BSET_tu ITM_EXP6X8_STATUS_BSET;
    ITM_EXP6X8_EN_BCLR_tu ITM_EXP6X8_EN_BCLR;
    ITM_EXP6X8_EN_BSET_tu ITM_EXP6X8_EN_BSET;
    ITM_GHIST_STATUS_tu ITM_GHIST_STATUS;
    ITM_GHIST_EN_STATUS_tu ITM_GHIST_EN_STATUS;
    ITM_GHIST_STATUS_BCLR_tu ITM_GHIST_STATUS_BCLR;
    ITM_GHIST_STATUS_BSET_tu ITM_GHIST_STATUS_BSET;
    ITM_GHIST_EN_BCLR_tu ITM_GHIST_EN_BCLR;
    ITM_GHIST_EN_BSET_tu ITM_GHIST_EN_BSET;
    ITM_AF_STATUS_tu ITM_AF_STATUS;
    ITM_AF_EN_STATUS_tu ITM_AF_EN_STATUS;
    ITM_AF_STATUS_BCLR_tu ITM_AF_STATUS_BCLR;
    ITM_AF_STATUS_BSET_tu ITM_AF_STATUS_BSET;
    ITM_AF_EN_BCLR_tu ITM_AF_EN_BCLR;
    ITM_AF_EN_BSET_tu ITM_AF_EN_BSET;
    ITM_ARCTIC_STATUS_tu ITM_ARCTIC_STATUS;
    ITM_ARCTIC_EN_STATUS_tu ITM_ARCTIC_EN_STATUS;
    ITM_ARCTIC_STATUS_BCLR_tu ITM_ARCTIC_STATUS_BCLR;
    ITM_ARCTIC_STATUS_BSET_tu ITM_ARCTIC_STATUS_BSET;
    ITM_ARCTIC_EN_BCLR_tu ITM_ARCTIC_EN_BCLR;
    ITM_ARCTIC_EN_BSET_tu ITM_ARCTIC_EN_BSET;
    uint32_t pad_ITM_SKIND_STATUS[6];
    ITM_SKIND_STATUS_tu ITM_SKIND_STATUS;
    ITM_SKIND_EN_STATUS_tu ITM_SKIND_EN_STATUS;
    ITM_SKIND_STATUS_BCLR_tu ITM_SKIND_STATUS_BCLR;
    ITM_SKIND_STATUS_BSET_tu ITM_SKIND_STATUS_BSET;
    ITM_SKIND_EN_BCLR_tu ITM_SKIND_EN_BCLR;
    ITM_SKIND_EN_BSET_tu ITM_SKIND_EN_BSET;
    ITM_VIDPIPE0_STATUS_tu ITM_VIDPIPE0_STATUS;
    ITM_VIDPIPE0_EN_STATUS_tu ITM_VIDPIPE0_EN_STATUS;
    ITM_VIDPIPE0_STATUS_BCLR_tu ITM_VIDPIPE0_STATUS_BCLR;
    ITM_VIDPIPE0_STATUS_BSET_tu ITM_VIDPIPE0_STATUS_BSET;
    ITM_VIDPIPE0_EN_BCLR_tu ITM_VIDPIPE0_EN_BCLR;
    ITM_VIDPIPE0_EN_BSET_tu ITM_VIDPIPE0_EN_BSET;
    ITM_VIDPIPE1_STATUS_tu ITM_VIDPIPE1_STATUS;
    ITM_VIDPIPE1_EN_STATUS_tu ITM_VIDPIPE1_EN_STATUS;
    ITM_VIDPIPE1_STATUS_BCLR_tu ITM_VIDPIPE1_STATUS_BCLR;
    ITM_VIDPIPE1_STATUS_BSET_tu ITM_VIDPIPE1_STATUS_BSET;
    ITM_VIDPIPE1_EN_BCLR_tu ITM_VIDPIPE1_EN_BCLR;
    ITM_VIDPIPE1_EN_BSET_tu ITM_VIDPIPE1_EN_BSET;
    ITM_SMIARX_STATUS_tu ITM_SMIARX_STATUS;
    ITM_SMIARX_EN_STATUS_tu ITM_SMIARX_EN_STATUS;
    ITM_SMIARX_STATUS_BCLR_tu ITM_SMIARX_STATUS_BCLR;
    ITM_SMIARX_STATUS_BSET_tu ITM_SMIARX_STATUS_BSET;
    ITM_SMIARX_EN_BCLR_tu ITM_SMIARX_EN_BCLR;
    ITM_SMIARX_EN_BSET_tu ITM_SMIARX_EN_BSET;
    ITM_LBE_STATUS_tu ITM_LBE_STATUS;
    ITM_LBE_EN_STATUS_tu ITM_LBE_EN_STATUS;
    ITM_LBE_STATUS_BCLR_tu ITM_LBE_STATUS_BCLR;
    ITM_LBE_STATUS_BSET_tu ITM_LBE_STATUS_BSET;
    ITM_LBE_EN_BCLR_tu ITM_LBE_EN_BCLR;
    ITM_LBE_EN_BSET_tu ITM_LBE_EN_BSET;
    ITM_MCCI_STATUS_tu ITM_MCCI_STATUS;
    ITM_MCCI_EN_STATUS_tu ITM_MCCI_EN_STATUS;
    ITM_MCCI_STATUS_BCLR_tu ITM_MCCI_STATUS_BCLR;
    ITM_MCCI_STATUS_BSET_tu ITM_MCCI_STATUS_BSET;
    ITM_MCCI_EN_BCLR_tu ITM_MCCI_EN_BCLR;
    ITM_MCCI_EN_BSET_tu ITM_MCCI_EN_BSET;
    ITM_HCOM_STATUS_tu ITM_HCOM_STATUS;
    ITM_HCOM_EN_STATUS_tu ITM_HCOM_EN_STATUS;
    ITM_HCOM_STATUS_BCLR_tu ITM_HCOM_STATUS_BCLR;
    ITM_HCOM_STATUS_BSET_tu ITM_HCOM_STATUS_BSET;
    ITM_HCOM_EN_BCLR_tu ITM_HCOM_EN_BCLR;
    ITM_HCOM_EN_BSET_tu ITM_HCOM_EN_BSET;
    ITM_REPIPE_STATUS_tu ITM_REPIPE_STATUS;
    ITM_REPIPE_EN_STATUS_tu ITM_REPIPE_EN_STATUS;
    ITM_REPIPE_STATUS_BCLR_tu ITM_REPIPE_STATUS_BCLR;
    ITM_REPIPE_STATUS_BSET_tu ITM_REPIPE_STATUS_BSET;
    ITM_REPIPE_EN_BCLR_tu ITM_REPIPE_EN_BCLR;
    ITM_REPIPE_EN_BSET_tu ITM_REPIPE_EN_BSET;
    ITM_DMCEPIPE_STATUS_tu ITM_DMCEPIPE_STATUS;
    ITM_DMCEPIPE_EN_STATUS_tu ITM_DMCEPIPE_EN_STATUS;
    ITM_DMCEPIPE_STATUS_BCLR_tu ITM_DMCEPIPE_STATUS_BCLR;
    ITM_DMCEPIPE_STATUS_BSET_tu ITM_DMCEPIPE_STATUS_BSET;
    ITM_DMCEPIPE_EN_BCLR_tu ITM_DMCEPIPE_EN_BCLR;
    ITM_DMCEPIPE_EN_BSET_tu ITM_DMCEPIPE_EN_BSET;
    ITM_3D_SMIARX_STATUS_tu ITM_3D_SMIARX_STATUS;
    ITM_3D_SMIARX_EN_STATUS_tu ITM_3D_SMIARX_EN_STATUS;
    ITM_3D_SMIARX_STATUS_BCLR_tu ITM_3D_SMIARX_STATUS_BCLR;
    ITM_3D_SMIARX_STATUS_BSET_tu ITM_3D_SMIARX_STATUS_BSET;
    ITM_3D_SMIARX_EN_BCLR_tu ITM_3D_SMIARX_EN_BCLR;
    ITM_3D_SMIARX_EN_BSET_tu ITM_3D_SMIARX_EN_BSET;
    ITM_LINE_BURSTY_ELIM_STATUS_tu ITM_LINE_BURSTY_ELIM_STATUS;
    ITM_LINE_BURSTY_ELIM_EN_STATUS_tu ITM_LINE_BURSTY_ELIM_EN_STATUS;
    ITM_LINE_BURSTY_ELIM_STATUS_BCLR_tu ITM_LINE_BURSTY_ELIM_STATUS_BCLR;
    ITM_LINE_BURSTY_ELIM_STATUS_BSET_tu ITM_LINE_BURSTY_ELIM_STATUS_BSET;
    ITM_LINE_BURSTY_ELIM_EN_BCLR_tu ITM_LINE_BURSTY_ELIM_EN_BCLR;
    ITM_LINE_BURSTY_ELIM_EN_BSET_tu ITM_LINE_BURSTY_ELIM_EN_BSET;
}ITM_IP_ts;




//ITM_FW_EVENT0_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC0_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC0_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC1_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC1_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC2_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC2_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC3_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC3_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC4_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC4_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC5_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC5_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC6_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC6_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC7_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC7_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC8_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC8_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC9_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC9_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC10_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC10_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC11_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC11_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC12_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC12_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC13_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC13_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC14_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC14_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC15_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC15_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC16_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC16_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC17_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC17_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC18_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC18_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC19_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC19_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC20_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC20_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC21_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC21_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC22_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC22_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC23_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC23_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC24_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC24_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC25_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC25_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC26_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC26_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC27_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC27_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC28_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC28_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC29_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC29_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC30_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC30_STATUS


#define Get_ITM_ITM_FW_EVENT0_STATUS_SRC31_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.ITM_FW_EVENT0_STATUS_ts.SRC31_STATUS
#define Get_ITM_ITM_FW_EVENT0_STATUS() p_ITM_IP->ITM_FW_EVENT0_STATUS.word


//ITM_FW_EVENT0_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC0_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC0_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC1_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC1_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC2_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC2_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC3_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC3_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC4_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC4_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC5_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC5_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC6_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC6_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC7_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC7_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC8_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC8_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC9_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC9_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC10_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC10_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC11_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC11_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC12_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC12_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC13_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC13_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC14_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC14_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC15_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC15_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC16_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC16_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC17_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC17_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC18_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC18_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC19_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC19_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC20_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC20_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC21_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC21_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC22_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC22_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC23_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC23_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC24_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC24_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC25_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC25_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC26_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC26_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC27_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC27_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC28_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC28_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC29_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC29_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC30_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC30_EN_STATUS


#define Get_ITM_ITM_FW_EVENT0_EN_STATUS_SRC31_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.ITM_FW_EVENT0_EN_STATUS_ts.SRC31_EN_STATUS
#define Get_ITM_ITM_FW_EVENT0_EN_STATUS() p_ITM_IP->ITM_FW_EVENT0_EN_STATUS.word


//ITM_FW_EVENT0_STATUS_BCLR


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC0_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC0_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC1_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC1_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC2_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC2_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC3_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC3_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC4_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC4_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC5_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC5_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC6_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC6_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC7_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC7_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC8_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC8_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC9_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC9_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC10_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC10_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC11_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC11_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC12_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC12_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC13_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC13_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC14_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC14_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC15_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC15_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC16_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC16_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC17_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC17_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC18_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC18_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC19_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC19_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC20_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC20_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC21_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC21_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC22_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC22_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC23_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC23_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC24_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC24_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC25_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC25_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC26_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC26_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC27_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC27_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC28_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC28_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC29_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC29_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC30_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC30_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_SRC31_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.ITM_FW_EVENT0_STATUS_BCLR_ts.SRC31_STATUS_BCLR = x)
#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR(SRC0_STATUS_BCLR,SRC1_STATUS_BCLR,SRC2_STATUS_BCLR,SRC3_STATUS_BCLR,SRC4_STATUS_BCLR,SRC5_STATUS_BCLR,SRC6_STATUS_BCLR,SRC7_STATUS_BCLR,SRC8_STATUS_BCLR,SRC9_STATUS_BCLR,SRC10_STATUS_BCLR,SRC11_STATUS_BCLR,SRC12_STATUS_BCLR,SRC13_STATUS_BCLR,SRC14_STATUS_BCLR,SRC15_STATUS_BCLR,SRC16_STATUS_BCLR,SRC17_STATUS_BCLR,SRC18_STATUS_BCLR,SRC19_STATUS_BCLR,SRC20_STATUS_BCLR,SRC21_STATUS_BCLR,SRC22_STATUS_BCLR,SRC23_STATUS_BCLR,SRC24_STATUS_BCLR,SRC25_STATUS_BCLR,SRC26_STATUS_BCLR,SRC27_STATUS_BCLR,SRC28_STATUS_BCLR,SRC29_STATUS_BCLR,SRC30_STATUS_BCLR,SRC31_STATUS_BCLR) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.word = (uint32_t)SRC0_STATUS_BCLR<<0 | (uint32_t)SRC1_STATUS_BCLR<<1 | (uint32_t)SRC2_STATUS_BCLR<<2 | (uint32_t)SRC3_STATUS_BCLR<<3 | (uint32_t)SRC4_STATUS_BCLR<<4 | (uint32_t)SRC5_STATUS_BCLR<<5 | (uint32_t)SRC6_STATUS_BCLR<<6 | (uint32_t)SRC7_STATUS_BCLR<<7 | (uint32_t)SRC8_STATUS_BCLR<<8 | (uint32_t)SRC9_STATUS_BCLR<<9 | (uint32_t)SRC10_STATUS_BCLR<<10 | (uint32_t)SRC11_STATUS_BCLR<<11 | (uint32_t)SRC12_STATUS_BCLR<<12 | (uint32_t)SRC13_STATUS_BCLR<<13 | (uint32_t)SRC14_STATUS_BCLR<<14 | (uint32_t)SRC15_STATUS_BCLR<<15 | (uint32_t)SRC16_STATUS_BCLR<<16 | (uint32_t)SRC17_STATUS_BCLR<<17 | (uint32_t)SRC18_STATUS_BCLR<<18 | (uint32_t)SRC19_STATUS_BCLR<<19 | (uint32_t)SRC20_STATUS_BCLR<<20 | (uint32_t)SRC21_STATUS_BCLR<<21 | (uint32_t)SRC22_STATUS_BCLR<<22 | (uint32_t)SRC23_STATUS_BCLR<<23 | (uint32_t)SRC24_STATUS_BCLR<<24 | (uint32_t)SRC25_STATUS_BCLR<<25 | (uint32_t)SRC26_STATUS_BCLR<<26 | (uint32_t)SRC27_STATUS_BCLR<<27 | (uint32_t)SRC28_STATUS_BCLR<<28 | (uint32_t)SRC29_STATUS_BCLR<<29 | (uint32_t)SRC30_STATUS_BCLR<<30 | (uint32_t)SRC31_STATUS_BCLR<<31)
#define Set_ITM_ITM_FW_EVENT0_STATUS_BCLR_word(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BCLR.word = x)


//ITM_FW_EVENT0_STATUS_BSET


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC0_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC0_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC1_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC1_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC2_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC2_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC3_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC3_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC4_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC4_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC5_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC5_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC6_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC6_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC7_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC7_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC8_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC8_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC9_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC9_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC10_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC10_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC11_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC11_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC12_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC12_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC13_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC13_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC14_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC14_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC15_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC15_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC16_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC16_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC17_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC17_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC18_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC18_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC19_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC19_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC20_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC20_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC21_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC21_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC22_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC22_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC23_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC23_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC24_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC24_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC25_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC25_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC26_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC26_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC27_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC27_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC28_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC28_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC29_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC29_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC30_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC30_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_SRC31_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.ITM_FW_EVENT0_STATUS_BSET_ts.SRC31_STATUS_BSET = x)
#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET(SRC0_STATUS_BSET,SRC1_STATUS_BSET,SRC2_STATUS_BSET,SRC3_STATUS_BSET,SRC4_STATUS_BSET,SRC5_STATUS_BSET,SRC6_STATUS_BSET,SRC7_STATUS_BSET,SRC8_STATUS_BSET,SRC9_STATUS_BSET,SRC10_STATUS_BSET,SRC11_STATUS_BSET,SRC12_STATUS_BSET,SRC13_STATUS_BSET,SRC14_STATUS_BSET,SRC15_STATUS_BSET,SRC16_STATUS_BSET,SRC17_STATUS_BSET,SRC18_STATUS_BSET,SRC19_STATUS_BSET,SRC20_STATUS_BSET,SRC21_STATUS_BSET,SRC22_STATUS_BSET,SRC23_STATUS_BSET,SRC24_STATUS_BSET,SRC25_STATUS_BSET,SRC26_STATUS_BSET,SRC27_STATUS_BSET,SRC28_STATUS_BSET,SRC29_STATUS_BSET,SRC30_STATUS_BSET,SRC31_STATUS_BSET) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.word = (uint32_t)SRC0_STATUS_BSET<<0 | (uint32_t)SRC1_STATUS_BSET<<1 | (uint32_t)SRC2_STATUS_BSET<<2 | (uint32_t)SRC3_STATUS_BSET<<3 | (uint32_t)SRC4_STATUS_BSET<<4 | (uint32_t)SRC5_STATUS_BSET<<5 | (uint32_t)SRC6_STATUS_BSET<<6 | (uint32_t)SRC7_STATUS_BSET<<7 | (uint32_t)SRC8_STATUS_BSET<<8 | (uint32_t)SRC9_STATUS_BSET<<9 | (uint32_t)SRC10_STATUS_BSET<<10 | (uint32_t)SRC11_STATUS_BSET<<11 | (uint32_t)SRC12_STATUS_BSET<<12 | (uint32_t)SRC13_STATUS_BSET<<13 | (uint32_t)SRC14_STATUS_BSET<<14 | (uint32_t)SRC15_STATUS_BSET<<15 | (uint32_t)SRC16_STATUS_BSET<<16 | (uint32_t)SRC17_STATUS_BSET<<17 | (uint32_t)SRC18_STATUS_BSET<<18 | (uint32_t)SRC19_STATUS_BSET<<19 | (uint32_t)SRC20_STATUS_BSET<<20 | (uint32_t)SRC21_STATUS_BSET<<21 | (uint32_t)SRC22_STATUS_BSET<<22 | (uint32_t)SRC23_STATUS_BSET<<23 | (uint32_t)SRC24_STATUS_BSET<<24 | (uint32_t)SRC25_STATUS_BSET<<25 | (uint32_t)SRC26_STATUS_BSET<<26 | (uint32_t)SRC27_STATUS_BSET<<27 | (uint32_t)SRC28_STATUS_BSET<<28 | (uint32_t)SRC29_STATUS_BSET<<29 | (uint32_t)SRC30_STATUS_BSET<<30 | (uint32_t)SRC31_STATUS_BSET<<31)
#define Set_ITM_ITM_FW_EVENT0_STATUS_BSET_word(x) (p_ITM_IP->ITM_FW_EVENT0_STATUS_BSET.word = x)


//ITM_FW_EVENT0_EN_BCLR


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC0_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC0_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC1_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC1_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC2_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC2_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC3_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC3_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC4_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC4_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC5_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC5_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC6_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC6_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC7_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC7_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC8_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC8_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC9_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC9_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC10_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC10_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC11_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC11_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC12_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC12_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC13_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC13_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC14_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC14_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC15_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC15_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC16_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC16_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC17_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC17_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC18_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC18_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC19_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC19_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC20_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC20_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC21_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC21_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC22_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC22_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC23_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC23_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC24_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC24_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC25_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC25_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC26_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC26_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC27_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC27_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC28_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC28_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC29_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC29_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC30_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC30_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_SRC31_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.ITM_FW_EVENT0_EN_BCLR_ts.SRC31_EN_BCLR = x)
#define Set_ITM_ITM_FW_EVENT0_EN_BCLR(SRC0_EN_BCLR,SRC1_EN_BCLR,SRC2_EN_BCLR,SRC3_EN_BCLR,SRC4_EN_BCLR,SRC5_EN_BCLR,SRC6_EN_BCLR,SRC7_EN_BCLR,SRC8_EN_BCLR,SRC9_EN_BCLR,SRC10_EN_BCLR,SRC11_EN_BCLR,SRC12_EN_BCLR,SRC13_EN_BCLR,SRC14_EN_BCLR,SRC15_EN_BCLR,SRC16_EN_BCLR,SRC17_EN_BCLR,SRC18_EN_BCLR,SRC19_EN_BCLR,SRC20_EN_BCLR,SRC21_EN_BCLR,SRC22_EN_BCLR,SRC23_EN_BCLR,SRC24_EN_BCLR,SRC25_EN_BCLR,SRC26_EN_BCLR,SRC27_EN_BCLR,SRC28_EN_BCLR,SRC29_EN_BCLR,SRC30_EN_BCLR,SRC31_EN_BCLR) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.word = (uint32_t)SRC0_EN_BCLR<<0 | (uint32_t)SRC1_EN_BCLR<<1 | (uint32_t)SRC2_EN_BCLR<<2 | (uint32_t)SRC3_EN_BCLR<<3 | (uint32_t)SRC4_EN_BCLR<<4 | (uint32_t)SRC5_EN_BCLR<<5 | (uint32_t)SRC6_EN_BCLR<<6 | (uint32_t)SRC7_EN_BCLR<<7 | (uint32_t)SRC8_EN_BCLR<<8 | (uint32_t)SRC9_EN_BCLR<<9 | (uint32_t)SRC10_EN_BCLR<<10 | (uint32_t)SRC11_EN_BCLR<<11 | (uint32_t)SRC12_EN_BCLR<<12 | (uint32_t)SRC13_EN_BCLR<<13 | (uint32_t)SRC14_EN_BCLR<<14 | (uint32_t)SRC15_EN_BCLR<<15 | (uint32_t)SRC16_EN_BCLR<<16 | (uint32_t)SRC17_EN_BCLR<<17 | (uint32_t)SRC18_EN_BCLR<<18 | (uint32_t)SRC19_EN_BCLR<<19 | (uint32_t)SRC20_EN_BCLR<<20 | (uint32_t)SRC21_EN_BCLR<<21 | (uint32_t)SRC22_EN_BCLR<<22 | (uint32_t)SRC23_EN_BCLR<<23 | (uint32_t)SRC24_EN_BCLR<<24 | (uint32_t)SRC25_EN_BCLR<<25 | (uint32_t)SRC26_EN_BCLR<<26 | (uint32_t)SRC27_EN_BCLR<<27 | (uint32_t)SRC28_EN_BCLR<<28 | (uint32_t)SRC29_EN_BCLR<<29 | (uint32_t)SRC30_EN_BCLR<<30 | (uint32_t)SRC31_EN_BCLR<<31)
#define Set_ITM_ITM_FW_EVENT0_EN_BCLR_word(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BCLR.word = x)


//ITM_FW_EVENT0_EN_BSET


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC0_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC0_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC1_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC1_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC2_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC2_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC3_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC3_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC4_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC4_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC5_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC5_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC6_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC6_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC7_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC7_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC8_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC8_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC9_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC9_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC10_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC10_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC11_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC11_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC12_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC12_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC13_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC13_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC14_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC14_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC15_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC15_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC16_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC16_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC17_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC17_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC18_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC18_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC19_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC19_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC20_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC20_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC21_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC21_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC22_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC22_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC23_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC23_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC24_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC24_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC25_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC25_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC26_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC26_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC27_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC27_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC28_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC28_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC29_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC29_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC30_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC30_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT0_EN_BSET_SRC31_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.ITM_FW_EVENT0_EN_BSET_ts.SRC31_EN_BSET = x)
#define Set_ITM_ITM_FW_EVENT0_EN_BSET(SRC0_EN_BSET,SRC1_EN_BSET,SRC2_EN_BSET,SRC3_EN_BSET,SRC4_EN_BSET,SRC5_EN_BSET,SRC6_EN_BSET,SRC7_EN_BSET,SRC8_EN_BSET,SRC9_EN_BSET,SRC10_EN_BSET,SRC11_EN_BSET,SRC12_EN_BSET,SRC13_EN_BSET,SRC14_EN_BSET,SRC15_EN_BSET,SRC16_EN_BSET,SRC17_EN_BSET,SRC18_EN_BSET,SRC19_EN_BSET,SRC20_EN_BSET,SRC21_EN_BSET,SRC22_EN_BSET,SRC23_EN_BSET,SRC24_EN_BSET,SRC25_EN_BSET,SRC26_EN_BSET,SRC27_EN_BSET,SRC28_EN_BSET,SRC29_EN_BSET,SRC30_EN_BSET,SRC31_EN_BSET) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.word = (uint32_t)SRC0_EN_BSET<<0 | (uint32_t)SRC1_EN_BSET<<1 | (uint32_t)SRC2_EN_BSET<<2 | (uint32_t)SRC3_EN_BSET<<3 | (uint32_t)SRC4_EN_BSET<<4 | (uint32_t)SRC5_EN_BSET<<5 | (uint32_t)SRC6_EN_BSET<<6 | (uint32_t)SRC7_EN_BSET<<7 | (uint32_t)SRC8_EN_BSET<<8 | (uint32_t)SRC9_EN_BSET<<9 | (uint32_t)SRC10_EN_BSET<<10 | (uint32_t)SRC11_EN_BSET<<11 | (uint32_t)SRC12_EN_BSET<<12 | (uint32_t)SRC13_EN_BSET<<13 | (uint32_t)SRC14_EN_BSET<<14 | (uint32_t)SRC15_EN_BSET<<15 | (uint32_t)SRC16_EN_BSET<<16 | (uint32_t)SRC17_EN_BSET<<17 | (uint32_t)SRC18_EN_BSET<<18 | (uint32_t)SRC19_EN_BSET<<19 | (uint32_t)SRC20_EN_BSET<<20 | (uint32_t)SRC21_EN_BSET<<21 | (uint32_t)SRC22_EN_BSET<<22 | (uint32_t)SRC23_EN_BSET<<23 | (uint32_t)SRC24_EN_BSET<<24 | (uint32_t)SRC25_EN_BSET<<25 | (uint32_t)SRC26_EN_BSET<<26 | (uint32_t)SRC27_EN_BSET<<27 | (uint32_t)SRC28_EN_BSET<<28 | (uint32_t)SRC29_EN_BSET<<29 | (uint32_t)SRC30_EN_BSET<<30 | (uint32_t)SRC31_EN_BSET<<31)
#define Set_ITM_ITM_FW_EVENT0_EN_BSET_word(x) (p_ITM_IP->ITM_FW_EVENT0_EN_BSET.word = x)


//ITM_FW_EVENT1_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC0_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC0_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC1_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC1_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC2_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC2_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC3_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC3_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC4_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC4_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC5_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC5_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC6_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC6_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC7_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC7_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC8_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC8_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC9_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC9_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC10_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC10_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC11_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC11_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC12_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC12_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC13_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC13_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC14_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC14_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC15_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC15_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC16_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC16_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC17_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC17_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC18_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC18_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC19_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC19_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC20_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC20_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC21_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC21_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC22_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC22_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC23_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC23_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC24_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC24_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC25_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC25_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC26_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC26_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC27_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC27_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC28_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC28_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC29_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC29_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC30_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC30_STATUS


#define Get_ITM_ITM_FW_EVENT1_STATUS_SRC31_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.ITM_FW_EVENT1_STATUS_ts.SRC31_STATUS
#define Get_ITM_ITM_FW_EVENT1_STATUS() p_ITM_IP->ITM_FW_EVENT1_STATUS.word


//ITM_FW_EVENT1_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC0_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC0_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC1_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC1_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC2_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC2_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC3_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC3_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC4_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC4_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC5_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC5_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC6_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC6_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC7_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC7_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC8_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC8_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC9_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC9_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC10_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC10_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC11_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC11_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC12_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC12_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC13_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC13_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC14_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC14_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC15_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC15_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC16_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC16_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC17_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC17_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC18_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC18_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC19_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC19_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC20_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC20_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC21_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC21_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC22_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC22_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC23_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC23_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC24_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC24_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC25_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC25_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC26_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC26_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC27_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC27_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC28_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC28_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC29_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC29_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC30_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC30_EN_STATUS


#define Get_ITM_ITM_FW_EVENT1_EN_STATUS_SRC31_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.ITM_FW_EVENT1_EN_STATUS_ts.SRC31_EN_STATUS
#define Get_ITM_ITM_FW_EVENT1_EN_STATUS() p_ITM_IP->ITM_FW_EVENT1_EN_STATUS.word


//ITM_FW_EVENT1_STATUS_BCLR


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC0_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC0_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC1_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC1_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC2_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC2_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC3_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC3_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC4_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC4_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC5_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC5_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC6_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC6_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC7_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC7_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC8_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC8_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC9_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC9_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC10_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC10_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC11_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC11_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC12_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC12_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC13_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC13_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC14_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC14_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC15_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC15_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC16_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC16_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC17_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC17_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC18_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC18_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC19_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC19_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC20_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC20_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC21_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC21_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC22_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC22_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC23_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC23_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC24_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC24_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC25_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC25_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC26_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC26_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC27_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC27_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC28_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC28_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC29_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC29_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC30_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC30_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_SRC31_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.ITM_FW_EVENT1_STATUS_BCLR_ts.SRC31_STATUS_BCLR = x)
#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR(SRC0_STATUS_BCLR,SRC1_STATUS_BCLR,SRC2_STATUS_BCLR,SRC3_STATUS_BCLR,SRC4_STATUS_BCLR,SRC5_STATUS_BCLR,SRC6_STATUS_BCLR,SRC7_STATUS_BCLR,SRC8_STATUS_BCLR,SRC9_STATUS_BCLR,SRC10_STATUS_BCLR,SRC11_STATUS_BCLR,SRC12_STATUS_BCLR,SRC13_STATUS_BCLR,SRC14_STATUS_BCLR,SRC15_STATUS_BCLR,SRC16_STATUS_BCLR,SRC17_STATUS_BCLR,SRC18_STATUS_BCLR,SRC19_STATUS_BCLR,SRC20_STATUS_BCLR,SRC21_STATUS_BCLR,SRC22_STATUS_BCLR,SRC23_STATUS_BCLR,SRC24_STATUS_BCLR,SRC25_STATUS_BCLR,SRC26_STATUS_BCLR,SRC27_STATUS_BCLR,SRC28_STATUS_BCLR,SRC29_STATUS_BCLR,SRC30_STATUS_BCLR,SRC31_STATUS_BCLR) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.word = (uint32_t)SRC0_STATUS_BCLR<<0 | (uint32_t)SRC1_STATUS_BCLR<<1 | (uint32_t)SRC2_STATUS_BCLR<<2 | (uint32_t)SRC3_STATUS_BCLR<<3 | (uint32_t)SRC4_STATUS_BCLR<<4 | (uint32_t)SRC5_STATUS_BCLR<<5 | (uint32_t)SRC6_STATUS_BCLR<<6 | (uint32_t)SRC7_STATUS_BCLR<<7 | (uint32_t)SRC8_STATUS_BCLR<<8 | (uint32_t)SRC9_STATUS_BCLR<<9 | (uint32_t)SRC10_STATUS_BCLR<<10 | (uint32_t)SRC11_STATUS_BCLR<<11 | (uint32_t)SRC12_STATUS_BCLR<<12 | (uint32_t)SRC13_STATUS_BCLR<<13 | (uint32_t)SRC14_STATUS_BCLR<<14 | (uint32_t)SRC15_STATUS_BCLR<<15 | (uint32_t)SRC16_STATUS_BCLR<<16 | (uint32_t)SRC17_STATUS_BCLR<<17 | (uint32_t)SRC18_STATUS_BCLR<<18 | (uint32_t)SRC19_STATUS_BCLR<<19 | (uint32_t)SRC20_STATUS_BCLR<<20 | (uint32_t)SRC21_STATUS_BCLR<<21 | (uint32_t)SRC22_STATUS_BCLR<<22 | (uint32_t)SRC23_STATUS_BCLR<<23 | (uint32_t)SRC24_STATUS_BCLR<<24 | (uint32_t)SRC25_STATUS_BCLR<<25 | (uint32_t)SRC26_STATUS_BCLR<<26 | (uint32_t)SRC27_STATUS_BCLR<<27 | (uint32_t)SRC28_STATUS_BCLR<<28 | (uint32_t)SRC29_STATUS_BCLR<<29 | (uint32_t)SRC30_STATUS_BCLR<<30 | (uint32_t)SRC31_STATUS_BCLR<<31)
#define Set_ITM_ITM_FW_EVENT1_STATUS_BCLR_word(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BCLR.word = x)


//ITM_FW_EVENT1_STATUS_BSET


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC0_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC0_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC1_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC1_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC2_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC2_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC3_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC3_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC4_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC4_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC5_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC5_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC6_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC6_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC7_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC7_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC8_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC8_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC9_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC9_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC10_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC10_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC11_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC11_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC12_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC12_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC13_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC13_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC14_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC14_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC15_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC15_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC16_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC16_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC17_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC17_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC18_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC18_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC19_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC19_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC20_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC20_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC21_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC21_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC22_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC22_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC23_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC23_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC24_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC24_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC25_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC25_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC26_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC26_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC27_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC27_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC28_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC28_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC29_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC29_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC30_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC30_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_SRC31_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.ITM_FW_EVENT1_STATUS_BSET_ts.SRC31_STATUS_BSET = x)
#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET(SRC0_STATUS_BSET,SRC1_STATUS_BSET,SRC2_STATUS_BSET,SRC3_STATUS_BSET,SRC4_STATUS_BSET,SRC5_STATUS_BSET,SRC6_STATUS_BSET,SRC7_STATUS_BSET,SRC8_STATUS_BSET,SRC9_STATUS_BSET,SRC10_STATUS_BSET,SRC11_STATUS_BSET,SRC12_STATUS_BSET,SRC13_STATUS_BSET,SRC14_STATUS_BSET,SRC15_STATUS_BSET,SRC16_STATUS_BSET,SRC17_STATUS_BSET,SRC18_STATUS_BSET,SRC19_STATUS_BSET,SRC20_STATUS_BSET,SRC21_STATUS_BSET,SRC22_STATUS_BSET,SRC23_STATUS_BSET,SRC24_STATUS_BSET,SRC25_STATUS_BSET,SRC26_STATUS_BSET,SRC27_STATUS_BSET,SRC28_STATUS_BSET,SRC29_STATUS_BSET,SRC30_STATUS_BSET,SRC31_STATUS_BSET) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.word = (uint32_t)SRC0_STATUS_BSET<<0 | (uint32_t)SRC1_STATUS_BSET<<1 | (uint32_t)SRC2_STATUS_BSET<<2 | (uint32_t)SRC3_STATUS_BSET<<3 | (uint32_t)SRC4_STATUS_BSET<<4 | (uint32_t)SRC5_STATUS_BSET<<5 | (uint32_t)SRC6_STATUS_BSET<<6 | (uint32_t)SRC7_STATUS_BSET<<7 | (uint32_t)SRC8_STATUS_BSET<<8 | (uint32_t)SRC9_STATUS_BSET<<9 | (uint32_t)SRC10_STATUS_BSET<<10 | (uint32_t)SRC11_STATUS_BSET<<11 | (uint32_t)SRC12_STATUS_BSET<<12 | (uint32_t)SRC13_STATUS_BSET<<13 | (uint32_t)SRC14_STATUS_BSET<<14 | (uint32_t)SRC15_STATUS_BSET<<15 | (uint32_t)SRC16_STATUS_BSET<<16 | (uint32_t)SRC17_STATUS_BSET<<17 | (uint32_t)SRC18_STATUS_BSET<<18 | (uint32_t)SRC19_STATUS_BSET<<19 | (uint32_t)SRC20_STATUS_BSET<<20 | (uint32_t)SRC21_STATUS_BSET<<21 | (uint32_t)SRC22_STATUS_BSET<<22 | (uint32_t)SRC23_STATUS_BSET<<23 | (uint32_t)SRC24_STATUS_BSET<<24 | (uint32_t)SRC25_STATUS_BSET<<25 | (uint32_t)SRC26_STATUS_BSET<<26 | (uint32_t)SRC27_STATUS_BSET<<27 | (uint32_t)SRC28_STATUS_BSET<<28 | (uint32_t)SRC29_STATUS_BSET<<29 | (uint32_t)SRC30_STATUS_BSET<<30 | (uint32_t)SRC31_STATUS_BSET<<31)
#define Set_ITM_ITM_FW_EVENT1_STATUS_BSET_word(x) (p_ITM_IP->ITM_FW_EVENT1_STATUS_BSET.word = x)


//ITM_FW_EVENT1_EN_BCLR


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC0_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC0_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC1_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC1_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC2_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC2_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC3_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC3_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC4_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC4_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC5_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC5_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC6_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC6_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC7_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC7_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC8_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC8_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC9_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC9_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC10_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC10_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC11_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC11_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC12_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC12_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC13_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC13_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC14_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC14_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC15_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC15_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC16_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC16_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC17_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC17_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC18_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC18_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC19_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC19_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC20_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC20_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC21_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC21_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC22_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC22_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC23_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC23_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC24_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC24_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC25_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC25_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC26_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC26_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC27_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC27_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC28_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC28_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC29_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC29_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC30_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC30_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_SRC31_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.ITM_FW_EVENT1_EN_BCLR_ts.SRC31_EN_BCLR = x)
#define Set_ITM_ITM_FW_EVENT1_EN_BCLR(SRC0_EN_BCLR,SRC1_EN_BCLR,SRC2_EN_BCLR,SRC3_EN_BCLR,SRC4_EN_BCLR,SRC5_EN_BCLR,SRC6_EN_BCLR,SRC7_EN_BCLR,SRC8_EN_BCLR,SRC9_EN_BCLR,SRC10_EN_BCLR,SRC11_EN_BCLR,SRC12_EN_BCLR,SRC13_EN_BCLR,SRC14_EN_BCLR,SRC15_EN_BCLR,SRC16_EN_BCLR,SRC17_EN_BCLR,SRC18_EN_BCLR,SRC19_EN_BCLR,SRC20_EN_BCLR,SRC21_EN_BCLR,SRC22_EN_BCLR,SRC23_EN_BCLR,SRC24_EN_BCLR,SRC25_EN_BCLR,SRC26_EN_BCLR,SRC27_EN_BCLR,SRC28_EN_BCLR,SRC29_EN_BCLR,SRC30_EN_BCLR,SRC31_EN_BCLR) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.word = (uint32_t)SRC0_EN_BCLR<<0 | (uint32_t)SRC1_EN_BCLR<<1 | (uint32_t)SRC2_EN_BCLR<<2 | (uint32_t)SRC3_EN_BCLR<<3 | (uint32_t)SRC4_EN_BCLR<<4 | (uint32_t)SRC5_EN_BCLR<<5 | (uint32_t)SRC6_EN_BCLR<<6 | (uint32_t)SRC7_EN_BCLR<<7 | (uint32_t)SRC8_EN_BCLR<<8 | (uint32_t)SRC9_EN_BCLR<<9 | (uint32_t)SRC10_EN_BCLR<<10 | (uint32_t)SRC11_EN_BCLR<<11 | (uint32_t)SRC12_EN_BCLR<<12 | (uint32_t)SRC13_EN_BCLR<<13 | (uint32_t)SRC14_EN_BCLR<<14 | (uint32_t)SRC15_EN_BCLR<<15 | (uint32_t)SRC16_EN_BCLR<<16 | (uint32_t)SRC17_EN_BCLR<<17 | (uint32_t)SRC18_EN_BCLR<<18 | (uint32_t)SRC19_EN_BCLR<<19 | (uint32_t)SRC20_EN_BCLR<<20 | (uint32_t)SRC21_EN_BCLR<<21 | (uint32_t)SRC22_EN_BCLR<<22 | (uint32_t)SRC23_EN_BCLR<<23 | (uint32_t)SRC24_EN_BCLR<<24 | (uint32_t)SRC25_EN_BCLR<<25 | (uint32_t)SRC26_EN_BCLR<<26 | (uint32_t)SRC27_EN_BCLR<<27 | (uint32_t)SRC28_EN_BCLR<<28 | (uint32_t)SRC29_EN_BCLR<<29 | (uint32_t)SRC30_EN_BCLR<<30 | (uint32_t)SRC31_EN_BCLR<<31)
#define Set_ITM_ITM_FW_EVENT1_EN_BCLR_word(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BCLR.word = x)


//ITM_FW_EVENT1_EN_BSET


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC0_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC0_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC1_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC1_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC2_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC2_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC3_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC3_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC4_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC4_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC5_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC5_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC6_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC6_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC7_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC7_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC8_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC8_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC9_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC9_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC10_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC10_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC11_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC11_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC12_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC12_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC13_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC13_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC14_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC14_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC15_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC15_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC16_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC16_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC17_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC17_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC18_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC18_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC19_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC19_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC20_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC20_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC21_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC21_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC22_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC22_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC23_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC23_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC24_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC24_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC25_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC25_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC26_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC26_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC27_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC27_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC28_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC28_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC29_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC29_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC30_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC30_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT1_EN_BSET_SRC31_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.ITM_FW_EVENT1_EN_BSET_ts.SRC31_EN_BSET = x)
#define Set_ITM_ITM_FW_EVENT1_EN_BSET(SRC0_EN_BSET,SRC1_EN_BSET,SRC2_EN_BSET,SRC3_EN_BSET,SRC4_EN_BSET,SRC5_EN_BSET,SRC6_EN_BSET,SRC7_EN_BSET,SRC8_EN_BSET,SRC9_EN_BSET,SRC10_EN_BSET,SRC11_EN_BSET,SRC12_EN_BSET,SRC13_EN_BSET,SRC14_EN_BSET,SRC15_EN_BSET,SRC16_EN_BSET,SRC17_EN_BSET,SRC18_EN_BSET,SRC19_EN_BSET,SRC20_EN_BSET,SRC21_EN_BSET,SRC22_EN_BSET,SRC23_EN_BSET,SRC24_EN_BSET,SRC25_EN_BSET,SRC26_EN_BSET,SRC27_EN_BSET,SRC28_EN_BSET,SRC29_EN_BSET,SRC30_EN_BSET,SRC31_EN_BSET) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.word = (uint32_t)SRC0_EN_BSET<<0 | (uint32_t)SRC1_EN_BSET<<1 | (uint32_t)SRC2_EN_BSET<<2 | (uint32_t)SRC3_EN_BSET<<3 | (uint32_t)SRC4_EN_BSET<<4 | (uint32_t)SRC5_EN_BSET<<5 | (uint32_t)SRC6_EN_BSET<<6 | (uint32_t)SRC7_EN_BSET<<7 | (uint32_t)SRC8_EN_BSET<<8 | (uint32_t)SRC9_EN_BSET<<9 | (uint32_t)SRC10_EN_BSET<<10 | (uint32_t)SRC11_EN_BSET<<11 | (uint32_t)SRC12_EN_BSET<<12 | (uint32_t)SRC13_EN_BSET<<13 | (uint32_t)SRC14_EN_BSET<<14 | (uint32_t)SRC15_EN_BSET<<15 | (uint32_t)SRC16_EN_BSET<<16 | (uint32_t)SRC17_EN_BSET<<17 | (uint32_t)SRC18_EN_BSET<<18 | (uint32_t)SRC19_EN_BSET<<19 | (uint32_t)SRC20_EN_BSET<<20 | (uint32_t)SRC21_EN_BSET<<21 | (uint32_t)SRC22_EN_BSET<<22 | (uint32_t)SRC23_EN_BSET<<23 | (uint32_t)SRC24_EN_BSET<<24 | (uint32_t)SRC25_EN_BSET<<25 | (uint32_t)SRC26_EN_BSET<<26 | (uint32_t)SRC27_EN_BSET<<27 | (uint32_t)SRC28_EN_BSET<<28 | (uint32_t)SRC29_EN_BSET<<29 | (uint32_t)SRC30_EN_BSET<<30 | (uint32_t)SRC31_EN_BSET<<31)
#define Set_ITM_ITM_FW_EVENT1_EN_BSET_word(x) (p_ITM_IP->ITM_FW_EVENT1_EN_BSET.word = x)


//ITM_FW_EVENT2_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC0_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC0_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC1_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC1_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC2_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC2_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC3_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC3_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC4_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC4_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC5_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC5_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC6_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC6_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC7_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC7_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC8_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC8_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC9_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC9_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC10_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC10_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC11_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC11_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC12_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC12_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC13_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC13_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC14_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC14_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC15_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC15_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC16_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC16_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC17_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC17_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC18_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC18_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC19_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC19_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC20_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC20_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC21_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC21_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC22_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC22_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC23_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC23_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC24_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC24_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC25_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC25_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC26_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC26_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC27_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC27_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC28_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC28_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC29_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC29_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC30_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC30_STATUS


#define Get_ITM_ITM_FW_EVENT2_STATUS_SRC31_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.ITM_FW_EVENT2_STATUS_ts.SRC31_STATUS
#define Get_ITM_ITM_FW_EVENT2_STATUS() p_ITM_IP->ITM_FW_EVENT2_STATUS.word


//ITM_FW_EVENT2_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC0_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC0_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC1_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC1_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC2_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC2_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC3_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC3_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC4_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC4_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC5_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC5_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC6_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC6_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC7_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC7_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC8_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC8_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC9_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC9_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC10_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC10_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC11_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC11_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC12_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC12_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC13_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC13_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC14_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC14_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC15_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC15_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC16_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC16_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC17_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC17_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC18_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC18_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC19_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC19_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC20_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC20_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC21_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC21_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC22_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC22_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC23_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC23_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC24_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC24_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC25_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC25_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC26_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC26_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC27_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC27_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC28_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC28_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC29_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC29_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC30_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC30_EN_STATUS


#define Get_ITM_ITM_FW_EVENT2_EN_STATUS_SRC31_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.ITM_FW_EVENT2_EN_STATUS_ts.SRC31_EN_STATUS
#define Get_ITM_ITM_FW_EVENT2_EN_STATUS() p_ITM_IP->ITM_FW_EVENT2_EN_STATUS.word


//ITM_FW_EVENT2_STATUS_BCLR


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC0_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC0_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC1_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC1_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC2_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC2_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC3_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC3_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC4_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC4_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC5_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC5_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC6_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC6_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC7_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC7_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC8_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC8_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC9_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC9_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC10_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC10_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC11_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC11_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC12_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC12_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC13_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC13_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC14_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC14_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC15_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC15_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC16_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC16_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC17_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC17_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC18_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC18_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC19_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC19_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC20_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC20_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC21_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC21_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC22_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC22_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC23_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC23_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC24_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC24_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC25_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC25_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC26_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC26_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC27_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC27_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC28_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC28_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC29_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC29_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC30_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC30_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_SRC31_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.ITM_FW_EVENT2_STATUS_BCLR_ts.SRC31_STATUS_BCLR = x)
#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR(SRC0_STATUS_BCLR,SRC1_STATUS_BCLR,SRC2_STATUS_BCLR,SRC3_STATUS_BCLR,SRC4_STATUS_BCLR,SRC5_STATUS_BCLR,SRC6_STATUS_BCLR,SRC7_STATUS_BCLR,SRC8_STATUS_BCLR,SRC9_STATUS_BCLR,SRC10_STATUS_BCLR,SRC11_STATUS_BCLR,SRC12_STATUS_BCLR,SRC13_STATUS_BCLR,SRC14_STATUS_BCLR,SRC15_STATUS_BCLR,SRC16_STATUS_BCLR,SRC17_STATUS_BCLR,SRC18_STATUS_BCLR,SRC19_STATUS_BCLR,SRC20_STATUS_BCLR,SRC21_STATUS_BCLR,SRC22_STATUS_BCLR,SRC23_STATUS_BCLR,SRC24_STATUS_BCLR,SRC25_STATUS_BCLR,SRC26_STATUS_BCLR,SRC27_STATUS_BCLR,SRC28_STATUS_BCLR,SRC29_STATUS_BCLR,SRC30_STATUS_BCLR,SRC31_STATUS_BCLR) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.word = (uint32_t)SRC0_STATUS_BCLR<<0 | (uint32_t)SRC1_STATUS_BCLR<<1 | (uint32_t)SRC2_STATUS_BCLR<<2 | (uint32_t)SRC3_STATUS_BCLR<<3 | (uint32_t)SRC4_STATUS_BCLR<<4 | (uint32_t)SRC5_STATUS_BCLR<<5 | (uint32_t)SRC6_STATUS_BCLR<<6 | (uint32_t)SRC7_STATUS_BCLR<<7 | (uint32_t)SRC8_STATUS_BCLR<<8 | (uint32_t)SRC9_STATUS_BCLR<<9 | (uint32_t)SRC10_STATUS_BCLR<<10 | (uint32_t)SRC11_STATUS_BCLR<<11 | (uint32_t)SRC12_STATUS_BCLR<<12 | (uint32_t)SRC13_STATUS_BCLR<<13 | (uint32_t)SRC14_STATUS_BCLR<<14 | (uint32_t)SRC15_STATUS_BCLR<<15 | (uint32_t)SRC16_STATUS_BCLR<<16 | (uint32_t)SRC17_STATUS_BCLR<<17 | (uint32_t)SRC18_STATUS_BCLR<<18 | (uint32_t)SRC19_STATUS_BCLR<<19 | (uint32_t)SRC20_STATUS_BCLR<<20 | (uint32_t)SRC21_STATUS_BCLR<<21 | (uint32_t)SRC22_STATUS_BCLR<<22 | (uint32_t)SRC23_STATUS_BCLR<<23 | (uint32_t)SRC24_STATUS_BCLR<<24 | (uint32_t)SRC25_STATUS_BCLR<<25 | (uint32_t)SRC26_STATUS_BCLR<<26 | (uint32_t)SRC27_STATUS_BCLR<<27 | (uint32_t)SRC28_STATUS_BCLR<<28 | (uint32_t)SRC29_STATUS_BCLR<<29 | (uint32_t)SRC30_STATUS_BCLR<<30 | (uint32_t)SRC31_STATUS_BCLR<<31)
#define Set_ITM_ITM_FW_EVENT2_STATUS_BCLR_word(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BCLR.word = x)


//ITM_FW_EVENT2_STATUS_BSET


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC0_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC0_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC1_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC1_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC2_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC2_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC3_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC3_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC4_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC4_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC5_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC5_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC6_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC6_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC7_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC7_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC8_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC8_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC9_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC9_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC10_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC10_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC11_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC11_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC12_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC12_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC13_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC13_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC14_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC14_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC15_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC15_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC16_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC16_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC17_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC17_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC18_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC18_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC19_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC19_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC20_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC20_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC21_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC21_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC22_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC22_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC23_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC23_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC24_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC24_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC25_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC25_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC26_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC26_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC27_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC27_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC28_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC28_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC29_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC29_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC30_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC30_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_SRC31_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.ITM_FW_EVENT2_STATUS_BSET_ts.SRC31_STATUS_BSET = x)
#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET(SRC0_STATUS_BSET,SRC1_STATUS_BSET,SRC2_STATUS_BSET,SRC3_STATUS_BSET,SRC4_STATUS_BSET,SRC5_STATUS_BSET,SRC6_STATUS_BSET,SRC7_STATUS_BSET,SRC8_STATUS_BSET,SRC9_STATUS_BSET,SRC10_STATUS_BSET,SRC11_STATUS_BSET,SRC12_STATUS_BSET,SRC13_STATUS_BSET,SRC14_STATUS_BSET,SRC15_STATUS_BSET,SRC16_STATUS_BSET,SRC17_STATUS_BSET,SRC18_STATUS_BSET,SRC19_STATUS_BSET,SRC20_STATUS_BSET,SRC21_STATUS_BSET,SRC22_STATUS_BSET,SRC23_STATUS_BSET,SRC24_STATUS_BSET,SRC25_STATUS_BSET,SRC26_STATUS_BSET,SRC27_STATUS_BSET,SRC28_STATUS_BSET,SRC29_STATUS_BSET,SRC30_STATUS_BSET,SRC31_STATUS_BSET) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.word = (uint32_t)SRC0_STATUS_BSET<<0 | (uint32_t)SRC1_STATUS_BSET<<1 | (uint32_t)SRC2_STATUS_BSET<<2 | (uint32_t)SRC3_STATUS_BSET<<3 | (uint32_t)SRC4_STATUS_BSET<<4 | (uint32_t)SRC5_STATUS_BSET<<5 | (uint32_t)SRC6_STATUS_BSET<<6 | (uint32_t)SRC7_STATUS_BSET<<7 | (uint32_t)SRC8_STATUS_BSET<<8 | (uint32_t)SRC9_STATUS_BSET<<9 | (uint32_t)SRC10_STATUS_BSET<<10 | (uint32_t)SRC11_STATUS_BSET<<11 | (uint32_t)SRC12_STATUS_BSET<<12 | (uint32_t)SRC13_STATUS_BSET<<13 | (uint32_t)SRC14_STATUS_BSET<<14 | (uint32_t)SRC15_STATUS_BSET<<15 | (uint32_t)SRC16_STATUS_BSET<<16 | (uint32_t)SRC17_STATUS_BSET<<17 | (uint32_t)SRC18_STATUS_BSET<<18 | (uint32_t)SRC19_STATUS_BSET<<19 | (uint32_t)SRC20_STATUS_BSET<<20 | (uint32_t)SRC21_STATUS_BSET<<21 | (uint32_t)SRC22_STATUS_BSET<<22 | (uint32_t)SRC23_STATUS_BSET<<23 | (uint32_t)SRC24_STATUS_BSET<<24 | (uint32_t)SRC25_STATUS_BSET<<25 | (uint32_t)SRC26_STATUS_BSET<<26 | (uint32_t)SRC27_STATUS_BSET<<27 | (uint32_t)SRC28_STATUS_BSET<<28 | (uint32_t)SRC29_STATUS_BSET<<29 | (uint32_t)SRC30_STATUS_BSET<<30 | (uint32_t)SRC31_STATUS_BSET<<31)
#define Set_ITM_ITM_FW_EVENT2_STATUS_BSET_word(x) (p_ITM_IP->ITM_FW_EVENT2_STATUS_BSET.word = x)


//ITM_FW_EVENT2_EN_BCLR


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC0_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC0_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC1_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC1_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC2_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC2_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC3_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC3_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC4_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC4_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC5_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC5_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC6_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC6_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC7_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC7_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC8_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC8_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC9_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC9_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC10_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC10_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC11_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC11_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC12_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC12_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC13_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC13_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC14_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC14_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC15_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC15_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC16_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC16_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC17_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC17_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC18_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC18_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC19_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC19_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC20_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC20_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC21_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC21_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC22_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC22_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC23_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC23_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC24_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC24_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC25_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC25_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC26_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC26_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC27_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC27_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC28_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC28_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC29_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC29_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC30_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC30_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_SRC31_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.ITM_FW_EVENT2_EN_BCLR_ts.SRC31_EN_BCLR = x)
#define Set_ITM_ITM_FW_EVENT2_EN_BCLR(SRC0_EN_BCLR,SRC1_EN_BCLR,SRC2_EN_BCLR,SRC3_EN_BCLR,SRC4_EN_BCLR,SRC5_EN_BCLR,SRC6_EN_BCLR,SRC7_EN_BCLR,SRC8_EN_BCLR,SRC9_EN_BCLR,SRC10_EN_BCLR,SRC11_EN_BCLR,SRC12_EN_BCLR,SRC13_EN_BCLR,SRC14_EN_BCLR,SRC15_EN_BCLR,SRC16_EN_BCLR,SRC17_EN_BCLR,SRC18_EN_BCLR,SRC19_EN_BCLR,SRC20_EN_BCLR,SRC21_EN_BCLR,SRC22_EN_BCLR,SRC23_EN_BCLR,SRC24_EN_BCLR,SRC25_EN_BCLR,SRC26_EN_BCLR,SRC27_EN_BCLR,SRC28_EN_BCLR,SRC29_EN_BCLR,SRC30_EN_BCLR,SRC31_EN_BCLR) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.word = (uint32_t)SRC0_EN_BCLR<<0 | (uint32_t)SRC1_EN_BCLR<<1 | (uint32_t)SRC2_EN_BCLR<<2 | (uint32_t)SRC3_EN_BCLR<<3 | (uint32_t)SRC4_EN_BCLR<<4 | (uint32_t)SRC5_EN_BCLR<<5 | (uint32_t)SRC6_EN_BCLR<<6 | (uint32_t)SRC7_EN_BCLR<<7 | (uint32_t)SRC8_EN_BCLR<<8 | (uint32_t)SRC9_EN_BCLR<<9 | (uint32_t)SRC10_EN_BCLR<<10 | (uint32_t)SRC11_EN_BCLR<<11 | (uint32_t)SRC12_EN_BCLR<<12 | (uint32_t)SRC13_EN_BCLR<<13 | (uint32_t)SRC14_EN_BCLR<<14 | (uint32_t)SRC15_EN_BCLR<<15 | (uint32_t)SRC16_EN_BCLR<<16 | (uint32_t)SRC17_EN_BCLR<<17 | (uint32_t)SRC18_EN_BCLR<<18 | (uint32_t)SRC19_EN_BCLR<<19 | (uint32_t)SRC20_EN_BCLR<<20 | (uint32_t)SRC21_EN_BCLR<<21 | (uint32_t)SRC22_EN_BCLR<<22 | (uint32_t)SRC23_EN_BCLR<<23 | (uint32_t)SRC24_EN_BCLR<<24 | (uint32_t)SRC25_EN_BCLR<<25 | (uint32_t)SRC26_EN_BCLR<<26 | (uint32_t)SRC27_EN_BCLR<<27 | (uint32_t)SRC28_EN_BCLR<<28 | (uint32_t)SRC29_EN_BCLR<<29 | (uint32_t)SRC30_EN_BCLR<<30 | (uint32_t)SRC31_EN_BCLR<<31)
#define Set_ITM_ITM_FW_EVENT2_EN_BCLR_word(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BCLR.word = x)


//ITM_FW_EVENT2_EN_BSET


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC0_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC0_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC1_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC1_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC2_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC2_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC3_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC3_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC4_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC4_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC5_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC5_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC6_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC6_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC7_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC7_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC8_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC8_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC9_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC9_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC10_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC10_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC11_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC11_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC12_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC12_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC13_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC13_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC14_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC14_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC15_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC15_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC16_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC16_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC17_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC17_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC18_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC18_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC19_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC19_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC20_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC20_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC21_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC21_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC22_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC22_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC23_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC23_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC24_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC24_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC25_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC25_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC26_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC26_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC27_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC27_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC28_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC28_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC29_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC29_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC30_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC30_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT2_EN_BSET_SRC31_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.ITM_FW_EVENT2_EN_BSET_ts.SRC31_EN_BSET = x)
#define Set_ITM_ITM_FW_EVENT2_EN_BSET(SRC0_EN_BSET,SRC1_EN_BSET,SRC2_EN_BSET,SRC3_EN_BSET,SRC4_EN_BSET,SRC5_EN_BSET,SRC6_EN_BSET,SRC7_EN_BSET,SRC8_EN_BSET,SRC9_EN_BSET,SRC10_EN_BSET,SRC11_EN_BSET,SRC12_EN_BSET,SRC13_EN_BSET,SRC14_EN_BSET,SRC15_EN_BSET,SRC16_EN_BSET,SRC17_EN_BSET,SRC18_EN_BSET,SRC19_EN_BSET,SRC20_EN_BSET,SRC21_EN_BSET,SRC22_EN_BSET,SRC23_EN_BSET,SRC24_EN_BSET,SRC25_EN_BSET,SRC26_EN_BSET,SRC27_EN_BSET,SRC28_EN_BSET,SRC29_EN_BSET,SRC30_EN_BSET,SRC31_EN_BSET) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.word = (uint32_t)SRC0_EN_BSET<<0 | (uint32_t)SRC1_EN_BSET<<1 | (uint32_t)SRC2_EN_BSET<<2 | (uint32_t)SRC3_EN_BSET<<3 | (uint32_t)SRC4_EN_BSET<<4 | (uint32_t)SRC5_EN_BSET<<5 | (uint32_t)SRC6_EN_BSET<<6 | (uint32_t)SRC7_EN_BSET<<7 | (uint32_t)SRC8_EN_BSET<<8 | (uint32_t)SRC9_EN_BSET<<9 | (uint32_t)SRC10_EN_BSET<<10 | (uint32_t)SRC11_EN_BSET<<11 | (uint32_t)SRC12_EN_BSET<<12 | (uint32_t)SRC13_EN_BSET<<13 | (uint32_t)SRC14_EN_BSET<<14 | (uint32_t)SRC15_EN_BSET<<15 | (uint32_t)SRC16_EN_BSET<<16 | (uint32_t)SRC17_EN_BSET<<17 | (uint32_t)SRC18_EN_BSET<<18 | (uint32_t)SRC19_EN_BSET<<19 | (uint32_t)SRC20_EN_BSET<<20 | (uint32_t)SRC21_EN_BSET<<21 | (uint32_t)SRC22_EN_BSET<<22 | (uint32_t)SRC23_EN_BSET<<23 | (uint32_t)SRC24_EN_BSET<<24 | (uint32_t)SRC25_EN_BSET<<25 | (uint32_t)SRC26_EN_BSET<<26 | (uint32_t)SRC27_EN_BSET<<27 | (uint32_t)SRC28_EN_BSET<<28 | (uint32_t)SRC29_EN_BSET<<29 | (uint32_t)SRC30_EN_BSET<<30 | (uint32_t)SRC31_EN_BSET<<31)
#define Set_ITM_ITM_FW_EVENT2_EN_BSET_word(x) (p_ITM_IP->ITM_FW_EVENT2_EN_BSET.word = x)


//ITM_FW_EVENT3_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC0_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC0_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC1_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC1_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC2_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC2_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC3_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC3_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC4_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC4_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC5_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC5_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC6_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC6_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC7_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC7_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC8_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC8_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC9_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC9_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC10_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC10_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC11_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC11_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC12_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC12_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC13_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC13_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC14_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC14_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC15_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC15_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC16_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC16_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC17_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC17_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC18_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC18_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC19_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC19_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC20_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC20_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC21_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC21_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC22_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC22_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC23_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC23_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC24_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC24_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC25_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC25_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC26_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC26_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC27_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC27_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC28_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC28_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC29_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC29_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC30_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC30_STATUS


#define Get_ITM_ITM_FW_EVENT3_STATUS_SRC31_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.ITM_FW_EVENT3_STATUS_ts.SRC31_STATUS
#define Get_ITM_ITM_FW_EVENT3_STATUS() p_ITM_IP->ITM_FW_EVENT3_STATUS.word


//ITM_FW_EVENT3_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC0_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC0_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC1_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC1_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC2_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC2_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC3_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC3_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC4_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC4_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC5_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC5_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC6_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC6_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC7_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC7_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC8_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC8_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC9_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC9_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC10_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC10_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC11_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC11_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC12_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC12_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC13_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC13_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC14_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC14_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC15_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC15_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC16_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC16_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC17_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC17_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC18_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC18_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC19_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC19_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC20_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC20_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC21_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC21_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC22_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC22_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC23_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC23_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC24_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC24_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC25_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC25_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC26_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC26_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC27_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC27_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC28_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC28_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC29_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC29_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC30_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC30_EN_STATUS


#define Get_ITM_ITM_FW_EVENT3_EN_STATUS_SRC31_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.ITM_FW_EVENT3_EN_STATUS_ts.SRC31_EN_STATUS
#define Get_ITM_ITM_FW_EVENT3_EN_STATUS() p_ITM_IP->ITM_FW_EVENT3_EN_STATUS.word


//ITM_FW_EVENT3_STATUS_BCLR


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC0_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC0_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC1_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC1_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC2_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC2_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC3_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC3_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC4_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC4_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC5_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC5_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC6_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC6_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC7_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC7_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC8_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC8_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC9_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC9_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC10_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC10_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC11_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC11_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC12_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC12_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC13_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC13_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC14_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC14_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC15_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC15_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC16_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC16_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC17_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC17_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC18_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC18_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC19_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC19_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC20_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC20_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC21_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC21_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC22_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC22_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC23_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC23_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC24_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC24_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC25_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC25_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC26_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC26_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC27_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC27_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC28_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC28_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC29_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC29_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC30_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC30_STATUS_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_SRC31_STATUS_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.ITM_FW_EVENT3_STATUS_BCLR_ts.SRC31_STATUS_BCLR = x)
#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR(SRC0_STATUS_BCLR,SRC1_STATUS_BCLR,SRC2_STATUS_BCLR,SRC3_STATUS_BCLR,SRC4_STATUS_BCLR,SRC5_STATUS_BCLR,SRC6_STATUS_BCLR,SRC7_STATUS_BCLR,SRC8_STATUS_BCLR,SRC9_STATUS_BCLR,SRC10_STATUS_BCLR,SRC11_STATUS_BCLR,SRC12_STATUS_BCLR,SRC13_STATUS_BCLR,SRC14_STATUS_BCLR,SRC15_STATUS_BCLR,SRC16_STATUS_BCLR,SRC17_STATUS_BCLR,SRC18_STATUS_BCLR,SRC19_STATUS_BCLR,SRC20_STATUS_BCLR,SRC21_STATUS_BCLR,SRC22_STATUS_BCLR,SRC23_STATUS_BCLR,SRC24_STATUS_BCLR,SRC25_STATUS_BCLR,SRC26_STATUS_BCLR,SRC27_STATUS_BCLR,SRC28_STATUS_BCLR,SRC29_STATUS_BCLR,SRC30_STATUS_BCLR,SRC31_STATUS_BCLR) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.word = (uint32_t)SRC0_STATUS_BCLR<<0 | (uint32_t)SRC1_STATUS_BCLR<<1 | (uint32_t)SRC2_STATUS_BCLR<<2 | (uint32_t)SRC3_STATUS_BCLR<<3 | (uint32_t)SRC4_STATUS_BCLR<<4 | (uint32_t)SRC5_STATUS_BCLR<<5 | (uint32_t)SRC6_STATUS_BCLR<<6 | (uint32_t)SRC7_STATUS_BCLR<<7 | (uint32_t)SRC8_STATUS_BCLR<<8 | (uint32_t)SRC9_STATUS_BCLR<<9 | (uint32_t)SRC10_STATUS_BCLR<<10 | (uint32_t)SRC11_STATUS_BCLR<<11 | (uint32_t)SRC12_STATUS_BCLR<<12 | (uint32_t)SRC13_STATUS_BCLR<<13 | (uint32_t)SRC14_STATUS_BCLR<<14 | (uint32_t)SRC15_STATUS_BCLR<<15 | (uint32_t)SRC16_STATUS_BCLR<<16 | (uint32_t)SRC17_STATUS_BCLR<<17 | (uint32_t)SRC18_STATUS_BCLR<<18 | (uint32_t)SRC19_STATUS_BCLR<<19 | (uint32_t)SRC20_STATUS_BCLR<<20 | (uint32_t)SRC21_STATUS_BCLR<<21 | (uint32_t)SRC22_STATUS_BCLR<<22 | (uint32_t)SRC23_STATUS_BCLR<<23 | (uint32_t)SRC24_STATUS_BCLR<<24 | (uint32_t)SRC25_STATUS_BCLR<<25 | (uint32_t)SRC26_STATUS_BCLR<<26 | (uint32_t)SRC27_STATUS_BCLR<<27 | (uint32_t)SRC28_STATUS_BCLR<<28 | (uint32_t)SRC29_STATUS_BCLR<<29 | (uint32_t)SRC30_STATUS_BCLR<<30 | (uint32_t)SRC31_STATUS_BCLR<<31)
#define Set_ITM_ITM_FW_EVENT3_STATUS_BCLR_word(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BCLR.word = x)


//ITM_FW_EVENT3_STATUS_BSET


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC0_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC0_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC1_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC1_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC2_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC2_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC3_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC3_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC4_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC4_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC5_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC5_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC6_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC6_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC7_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC7_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC8_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC8_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC9_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC9_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC10_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC10_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC11_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC11_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC12_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC12_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC13_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC13_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC14_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC14_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC15_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC15_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC16_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC16_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC17_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC17_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC18_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC18_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC19_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC19_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC20_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC20_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC21_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC21_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC22_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC22_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC23_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC23_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC24_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC24_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC25_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC25_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC26_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC26_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC27_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC27_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC28_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC28_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC29_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC29_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC30_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC30_STATUS_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_SRC31_STATUS_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.ITM_FW_EVENT3_STATUS_BSET_ts.SRC31_STATUS_BSET = x)
#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET(SRC0_STATUS_BSET,SRC1_STATUS_BSET,SRC2_STATUS_BSET,SRC3_STATUS_BSET,SRC4_STATUS_BSET,SRC5_STATUS_BSET,SRC6_STATUS_BSET,SRC7_STATUS_BSET,SRC8_STATUS_BSET,SRC9_STATUS_BSET,SRC10_STATUS_BSET,SRC11_STATUS_BSET,SRC12_STATUS_BSET,SRC13_STATUS_BSET,SRC14_STATUS_BSET,SRC15_STATUS_BSET,SRC16_STATUS_BSET,SRC17_STATUS_BSET,SRC18_STATUS_BSET,SRC19_STATUS_BSET,SRC20_STATUS_BSET,SRC21_STATUS_BSET,SRC22_STATUS_BSET,SRC23_STATUS_BSET,SRC24_STATUS_BSET,SRC25_STATUS_BSET,SRC26_STATUS_BSET,SRC27_STATUS_BSET,SRC28_STATUS_BSET,SRC29_STATUS_BSET,SRC30_STATUS_BSET,SRC31_STATUS_BSET) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.word = (uint32_t)SRC0_STATUS_BSET<<0 | (uint32_t)SRC1_STATUS_BSET<<1 | (uint32_t)SRC2_STATUS_BSET<<2 | (uint32_t)SRC3_STATUS_BSET<<3 | (uint32_t)SRC4_STATUS_BSET<<4 | (uint32_t)SRC5_STATUS_BSET<<5 | (uint32_t)SRC6_STATUS_BSET<<6 | (uint32_t)SRC7_STATUS_BSET<<7 | (uint32_t)SRC8_STATUS_BSET<<8 | (uint32_t)SRC9_STATUS_BSET<<9 | (uint32_t)SRC10_STATUS_BSET<<10 | (uint32_t)SRC11_STATUS_BSET<<11 | (uint32_t)SRC12_STATUS_BSET<<12 | (uint32_t)SRC13_STATUS_BSET<<13 | (uint32_t)SRC14_STATUS_BSET<<14 | (uint32_t)SRC15_STATUS_BSET<<15 | (uint32_t)SRC16_STATUS_BSET<<16 | (uint32_t)SRC17_STATUS_BSET<<17 | (uint32_t)SRC18_STATUS_BSET<<18 | (uint32_t)SRC19_STATUS_BSET<<19 | (uint32_t)SRC20_STATUS_BSET<<20 | (uint32_t)SRC21_STATUS_BSET<<21 | (uint32_t)SRC22_STATUS_BSET<<22 | (uint32_t)SRC23_STATUS_BSET<<23 | (uint32_t)SRC24_STATUS_BSET<<24 | (uint32_t)SRC25_STATUS_BSET<<25 | (uint32_t)SRC26_STATUS_BSET<<26 | (uint32_t)SRC27_STATUS_BSET<<27 | (uint32_t)SRC28_STATUS_BSET<<28 | (uint32_t)SRC29_STATUS_BSET<<29 | (uint32_t)SRC30_STATUS_BSET<<30 | (uint32_t)SRC31_STATUS_BSET<<31)
#define Set_ITM_ITM_FW_EVENT3_STATUS_BSET_word(x) (p_ITM_IP->ITM_FW_EVENT3_STATUS_BSET.word = x)


//ITM_FW_EVENT3_EN_BCLR


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC0_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC0_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC1_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC1_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC2_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC2_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC3_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC3_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC4_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC4_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC5_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC5_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC6_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC6_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC7_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC7_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC8_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC8_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC9_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC9_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC10_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC10_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC11_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC11_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC12_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC12_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC13_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC13_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC14_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC14_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC15_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC15_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC16_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC16_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC17_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC17_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC18_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC18_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC19_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC19_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC20_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC20_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC21_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC21_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC22_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC22_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC23_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC23_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC24_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC24_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC25_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC25_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC26_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC26_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC27_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC27_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC28_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC28_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC29_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC29_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC30_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC30_EN_BCLR = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_SRC31_EN_BCLR(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.ITM_FW_EVENT3_EN_BCLR_ts.SRC31_EN_BCLR = x)
#define Set_ITM_ITM_FW_EVENT3_EN_BCLR(SRC0_EN_BCLR,SRC1_EN_BCLR,SRC2_EN_BCLR,SRC3_EN_BCLR,SRC4_EN_BCLR,SRC5_EN_BCLR,SRC6_EN_BCLR,SRC7_EN_BCLR,SRC8_EN_BCLR,SRC9_EN_BCLR,SRC10_EN_BCLR,SRC11_EN_BCLR,SRC12_EN_BCLR,SRC13_EN_BCLR,SRC14_EN_BCLR,SRC15_EN_BCLR,SRC16_EN_BCLR,SRC17_EN_BCLR,SRC18_EN_BCLR,SRC19_EN_BCLR,SRC20_EN_BCLR,SRC21_EN_BCLR,SRC22_EN_BCLR,SRC23_EN_BCLR,SRC24_EN_BCLR,SRC25_EN_BCLR,SRC26_EN_BCLR,SRC27_EN_BCLR,SRC28_EN_BCLR,SRC29_EN_BCLR,SRC30_EN_BCLR,SRC31_EN_BCLR) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.word = (uint32_t)SRC0_EN_BCLR<<0 | (uint32_t)SRC1_EN_BCLR<<1 | (uint32_t)SRC2_EN_BCLR<<2 | (uint32_t)SRC3_EN_BCLR<<3 | (uint32_t)SRC4_EN_BCLR<<4 | (uint32_t)SRC5_EN_BCLR<<5 | (uint32_t)SRC6_EN_BCLR<<6 | (uint32_t)SRC7_EN_BCLR<<7 | (uint32_t)SRC8_EN_BCLR<<8 | (uint32_t)SRC9_EN_BCLR<<9 | (uint32_t)SRC10_EN_BCLR<<10 | (uint32_t)SRC11_EN_BCLR<<11 | (uint32_t)SRC12_EN_BCLR<<12 | (uint32_t)SRC13_EN_BCLR<<13 | (uint32_t)SRC14_EN_BCLR<<14 | (uint32_t)SRC15_EN_BCLR<<15 | (uint32_t)SRC16_EN_BCLR<<16 | (uint32_t)SRC17_EN_BCLR<<17 | (uint32_t)SRC18_EN_BCLR<<18 | (uint32_t)SRC19_EN_BCLR<<19 | (uint32_t)SRC20_EN_BCLR<<20 | (uint32_t)SRC21_EN_BCLR<<21 | (uint32_t)SRC22_EN_BCLR<<22 | (uint32_t)SRC23_EN_BCLR<<23 | (uint32_t)SRC24_EN_BCLR<<24 | (uint32_t)SRC25_EN_BCLR<<25 | (uint32_t)SRC26_EN_BCLR<<26 | (uint32_t)SRC27_EN_BCLR<<27 | (uint32_t)SRC28_EN_BCLR<<28 | (uint32_t)SRC29_EN_BCLR<<29 | (uint32_t)SRC30_EN_BCLR<<30 | (uint32_t)SRC31_EN_BCLR<<31)
#define Set_ITM_ITM_FW_EVENT3_EN_BCLR_word(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BCLR.word = x)


//ITM_FW_EVENT3_EN_BSET


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC0_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC0_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC1_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC1_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC2_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC2_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC3_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC3_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC4_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC4_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC5_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC5_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC6_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC6_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC7_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC7_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC8_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC8_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC9_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC9_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC10_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC10_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC11_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC11_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC12_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC12_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC13_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC13_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC14_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC14_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC15_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC15_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC16_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC16_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC17_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC17_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC18_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC18_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC19_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC19_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC20_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC20_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC21_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC21_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC22_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC22_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC23_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC23_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC24_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC24_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC25_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC25_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC26_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC26_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC27_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC27_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC28_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC28_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC29_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC29_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC30_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC30_EN_BSET = x)


#define Set_ITM_ITM_FW_EVENT3_EN_BSET_SRC31_EN_BSET(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.ITM_FW_EVENT3_EN_BSET_ts.SRC31_EN_BSET = x)
#define Set_ITM_ITM_FW_EVENT3_EN_BSET(SRC0_EN_BSET,SRC1_EN_BSET,SRC2_EN_BSET,SRC3_EN_BSET,SRC4_EN_BSET,SRC5_EN_BSET,SRC6_EN_BSET,SRC7_EN_BSET,SRC8_EN_BSET,SRC9_EN_BSET,SRC10_EN_BSET,SRC11_EN_BSET,SRC12_EN_BSET,SRC13_EN_BSET,SRC14_EN_BSET,SRC15_EN_BSET,SRC16_EN_BSET,SRC17_EN_BSET,SRC18_EN_BSET,SRC19_EN_BSET,SRC20_EN_BSET,SRC21_EN_BSET,SRC22_EN_BSET,SRC23_EN_BSET,SRC24_EN_BSET,SRC25_EN_BSET,SRC26_EN_BSET,SRC27_EN_BSET,SRC28_EN_BSET,SRC29_EN_BSET,SRC30_EN_BSET,SRC31_EN_BSET) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.word = (uint32_t)SRC0_EN_BSET<<0 | (uint32_t)SRC1_EN_BSET<<1 | (uint32_t)SRC2_EN_BSET<<2 | (uint32_t)SRC3_EN_BSET<<3 | (uint32_t)SRC4_EN_BSET<<4 | (uint32_t)SRC5_EN_BSET<<5 | (uint32_t)SRC6_EN_BSET<<6 | (uint32_t)SRC7_EN_BSET<<7 | (uint32_t)SRC8_EN_BSET<<8 | (uint32_t)SRC9_EN_BSET<<9 | (uint32_t)SRC10_EN_BSET<<10 | (uint32_t)SRC11_EN_BSET<<11 | (uint32_t)SRC12_EN_BSET<<12 | (uint32_t)SRC13_EN_BSET<<13 | (uint32_t)SRC14_EN_BSET<<14 | (uint32_t)SRC15_EN_BSET<<15 | (uint32_t)SRC16_EN_BSET<<16 | (uint32_t)SRC17_EN_BSET<<17 | (uint32_t)SRC18_EN_BSET<<18 | (uint32_t)SRC19_EN_BSET<<19 | (uint32_t)SRC20_EN_BSET<<20 | (uint32_t)SRC21_EN_BSET<<21 | (uint32_t)SRC22_EN_BSET<<22 | (uint32_t)SRC23_EN_BSET<<23 | (uint32_t)SRC24_EN_BSET<<24 | (uint32_t)SRC25_EN_BSET<<25 | (uint32_t)SRC26_EN_BSET<<26 | (uint32_t)SRC27_EN_BSET<<27 | (uint32_t)SRC28_EN_BSET<<28 | (uint32_t)SRC29_EN_BSET<<29 | (uint32_t)SRC30_EN_BSET<<30 | (uint32_t)SRC31_EN_BSET<<31)
#define Set_ITM_ITM_FW_EVENT3_EN_BSET_word(x) (p_ITM_IP->ITM_FW_EVENT3_EN_BSET.word = x)


//ITM_GPIO_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_0_CMPLT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_0_CMPLT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_1_CMPLT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_1_CMPLT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_2_CMPLT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_2_CMPLT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_3_CMPLT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_3_CMPLT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_4_CMPLT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_4_CMPLT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_5_CMPLT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_5_CMPLT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_6_CMPLT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_6_CMPLT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_7_CMPLT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_7_CMPLT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_0_ST_ABORT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_0_ST_ABORT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_1_ST_ABORT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_1_ST_ABORT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_2_ST_ABORT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_2_ST_ABORT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_3_ST_ABORT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_3_ST_ABORT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_4_ST_ABORT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_4_ST_ABORT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_5_ST_ABORT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_5_ST_ABORT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_6_ST_ABORT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_6_ST_ABORT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_CHNL_7_ST_ABORT_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_CHNL_7_ST_ABORT_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_TIMER_0_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_TIMER_0_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_TIMER_1_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_TIMER_1_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_TIMER_2_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_TIMER_2_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_TIMER_3_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_TIMER_3_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_INTR_DEBUG_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_INTR_DEBUG_STATUS


#define Get_ITM_ITM_GPIO_STATUS_GPIO_TRIG_PULSE_STATUS() p_ITM_IP->ITM_GPIO_STATUS.ITM_GPIO_STATUS_ts.GPIO_TRIG_PULSE_STATUS
#define Get_ITM_ITM_GPIO_STATUS() p_ITM_IP->ITM_GPIO_STATUS.word


//ITM_GPIO_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_0_CMPLT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_0_CMPLT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_1_CMPLT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_1_CMPLT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_2_CMPLT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_2_CMPLT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_3_CMPLT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_3_CMPLT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_4_CMPLT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_4_CMPLT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_5_CMPLT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_5_CMPLT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_6_CMPLT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_6_CMPLT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_7_CMPLT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_7_CMPLT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_0_ST_ABORT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_0_ST_ABORT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_1_ST_ABORT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_1_ST_ABORT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_2_ST_ABORT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_2_ST_ABORT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_3_ST_ABORT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_3_ST_ABORT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_4_ST_ABORT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_4_ST_ABORT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_5_ST_ABORT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_5_ST_ABORT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_6_ST_ABORT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_6_ST_ABORT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_CHNL_7_ST_ABORT_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_CHNL_7_ST_ABORT_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_TIMER_0_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_TIMER_0_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_TIMER_1_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_TIMER_1_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_TIMER_2_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_TIMER_2_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_TIMER_3_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_TIMER_3_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_INTR_DEBUG_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_INTR_DEBUG_EN_STATUS


#define Get_ITM_ITM_GPIO_EN_STATUS_GPIO_TRIG_PULSE_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.ITM_GPIO_EN_STATUS_ts.GPIO_TRIG_PULSE_EN_STATUS
#define Get_ITM_ITM_GPIO_EN_STATUS() p_ITM_IP->ITM_GPIO_EN_STATUS.word


//ITM_GPIO_STATUS_BCLR


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_0_CMPLT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_0_CMPLT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_1_CMPLT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_1_CMPLT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_2_CMPLT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_2_CMPLT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_3_CMPLT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_3_CMPLT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_4_CMPLT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_4_CMPLT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_5_CMPLT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_5_CMPLT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_6_CMPLT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_6_CMPLT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_7_CMPLT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_7_CMPLT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_0_ST_ABORT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_0_ST_ABORT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_1_ST_ABORT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_1_ST_ABORT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_2_ST_ABORT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_2_ST_ABORT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_3_ST_ABORT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_3_ST_ABORT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_4_ST_ABORT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_4_ST_ABORT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_5_ST_ABORT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_5_ST_ABORT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_6_ST_ABORT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_6_ST_ABORT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_CHNL_7_ST_ABORT_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_CHNL_7_ST_ABORT_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_TIMER_0_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_TIMER_0_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_TIMER_1_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_TIMER_1_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_TIMER_2_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_TIMER_2_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_TIMER_3_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_TIMER_3_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_INTR_DEBUG_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_INTR_DEBUG_STATUS_BCLR = x)


#define Set_ITM_ITM_GPIO_STATUS_BCLR_GPIO_TRIG_PULSE_STATUS_BCLR(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.ITM_GPIO_STATUS_BCLR_ts.GPIO_TRIG_PULSE_STATUS_BCLR = x)
#define Set_ITM_ITM_GPIO_STATUS_BCLR(GPIO_CHNL_0_CMPLT_STATUS_BCLR,GPIO_CHNL_1_CMPLT_STATUS_BCLR,GPIO_CHNL_2_CMPLT_STATUS_BCLR,GPIO_CHNL_3_CMPLT_STATUS_BCLR,GPIO_CHNL_4_CMPLT_STATUS_BCLR,GPIO_CHNL_5_CMPLT_STATUS_BCLR,GPIO_CHNL_6_CMPLT_STATUS_BCLR,GPIO_CHNL_7_CMPLT_STATUS_BCLR,GPIO_CHNL_0_ST_ABORT_STATUS_BCLR,GPIO_CHNL_1_ST_ABORT_STATUS_BCLR,GPIO_CHNL_2_ST_ABORT_STATUS_BCLR,GPIO_CHNL_3_ST_ABORT_STATUS_BCLR,GPIO_CHNL_4_ST_ABORT_STATUS_BCLR,GPIO_CHNL_5_ST_ABORT_STATUS_BCLR,GPIO_CHNL_6_ST_ABORT_STATUS_BCLR,GPIO_CHNL_7_ST_ABORT_STATUS_BCLR,GPIO_TIMER_0_STATUS_BCLR,GPIO_TIMER_1_STATUS_BCLR,GPIO_TIMER_2_STATUS_BCLR,GPIO_TIMER_3_STATUS_BCLR,GPIO_INTR_DEBUG_STATUS_BCLR,GPIO_TRIG_PULSE_STATUS_BCLR) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.word = (uint32_t)GPIO_CHNL_0_CMPLT_STATUS_BCLR<<0 | (uint32_t)GPIO_CHNL_1_CMPLT_STATUS_BCLR<<1 | (uint32_t)GPIO_CHNL_2_CMPLT_STATUS_BCLR<<2 | (uint32_t)GPIO_CHNL_3_CMPLT_STATUS_BCLR<<3 | (uint32_t)GPIO_CHNL_4_CMPLT_STATUS_BCLR<<4 | (uint32_t)GPIO_CHNL_5_CMPLT_STATUS_BCLR<<5 | (uint32_t)GPIO_CHNL_6_CMPLT_STATUS_BCLR<<6 | (uint32_t)GPIO_CHNL_7_CMPLT_STATUS_BCLR<<7 | (uint32_t)GPIO_CHNL_0_ST_ABORT_STATUS_BCLR<<8 | (uint32_t)GPIO_CHNL_1_ST_ABORT_STATUS_BCLR<<9 | (uint32_t)GPIO_CHNL_2_ST_ABORT_STATUS_BCLR<<10 | (uint32_t)GPIO_CHNL_3_ST_ABORT_STATUS_BCLR<<11 | (uint32_t)GPIO_CHNL_4_ST_ABORT_STATUS_BCLR<<12 | (uint32_t)GPIO_CHNL_5_ST_ABORT_STATUS_BCLR<<13 | (uint32_t)GPIO_CHNL_6_ST_ABORT_STATUS_BCLR<<14 | (uint32_t)GPIO_CHNL_7_ST_ABORT_STATUS_BCLR<<15 | (uint32_t)GPIO_TIMER_0_STATUS_BCLR<<16 | (uint32_t)GPIO_TIMER_1_STATUS_BCLR<<17 | (uint32_t)GPIO_TIMER_2_STATUS_BCLR<<18 | (uint32_t)GPIO_TIMER_3_STATUS_BCLR<<19 | (uint32_t)GPIO_INTR_DEBUG_STATUS_BCLR<<20 | (uint32_t)GPIO_TRIG_PULSE_STATUS_BCLR<<21)
#define Get_ITM_ITM_GPIO_STATUS_BCLR() p_ITM_IP->ITM_GPIO_STATUS_BCLR.word
#define Set_ITM_ITM_GPIO_STATUS_BCLR_word(x) (p_ITM_IP->ITM_GPIO_STATUS_BCLR.word = x)


//ITM_GPIO_STATUS_BSET


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_0_CMPLT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_0_CMPLT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_1_CMPLT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_1_CMPLT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_2_CMPLT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_2_CMPLT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_3_CMPLT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_3_CMPLT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_4_CMPLT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_4_CMPLT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_5_CMPLT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_5_CMPLT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_6_CMPLT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_6_CMPLT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_7_CMPLT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_7_CMPLT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_0_ST_ABORT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_0_ST_ABORT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_1_ST_ABORT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_1_ST_ABORT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_2_ST_ABORT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_2_ST_ABORT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_3_ST_ABORT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_3_ST_ABORT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_4_ST_ABORT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_4_ST_ABORT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_5_ST_ABORT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_5_ST_ABORT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_6_ST_ABORT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_6_ST_ABORT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_CHNL_7_ST_ABORT_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_CHNL_7_ST_ABORT_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_TIMER_0_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_TIMER_0_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_TIMER_1_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_TIMER_1_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_TIMER_2_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_TIMER_2_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_TIMER_3_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_TIMER_3_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_INTR_DEBUG_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_INTR_DEBUG_STATUS_BSET = x)


#define Set_ITM_ITM_GPIO_STATUS_BSET_GPIO_TRIG_PULSE_STATUS_BSET(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.ITM_GPIO_STATUS_BSET_ts.GPIO_TRIG_PULSE_STATUS_BSET = x)
#define Set_ITM_ITM_GPIO_STATUS_BSET(GPIO_CHNL_0_CMPLT_STATUS_BSET,GPIO_CHNL_1_CMPLT_STATUS_BSET,GPIO_CHNL_2_CMPLT_STATUS_BSET,GPIO_CHNL_3_CMPLT_STATUS_BSET,GPIO_CHNL_4_CMPLT_STATUS_BSET,GPIO_CHNL_5_CMPLT_STATUS_BSET,GPIO_CHNL_6_CMPLT_STATUS_BSET,GPIO_CHNL_7_CMPLT_STATUS_BSET,GPIO_CHNL_0_ST_ABORT_STATUS_BSET,GPIO_CHNL_1_ST_ABORT_STATUS_BSET,GPIO_CHNL_2_ST_ABORT_STATUS_BSET,GPIO_CHNL_3_ST_ABORT_STATUS_BSET,GPIO_CHNL_4_ST_ABORT_STATUS_BSET,GPIO_CHNL_5_ST_ABORT_STATUS_BSET,GPIO_CHNL_6_ST_ABORT_STATUS_BSET,GPIO_CHNL_7_ST_ABORT_STATUS_BSET,GPIO_TIMER_0_STATUS_BSET,GPIO_TIMER_1_STATUS_BSET,GPIO_TIMER_2_STATUS_BSET,GPIO_TIMER_3_STATUS_BSET,GPIO_INTR_DEBUG_STATUS_BSET,GPIO_TRIG_PULSE_STATUS_BSET) (p_ITM_IP->ITM_GPIO_STATUS_BSET.word = (uint32_t)GPIO_CHNL_0_CMPLT_STATUS_BSET<<0 | (uint32_t)GPIO_CHNL_1_CMPLT_STATUS_BSET<<1 | (uint32_t)GPIO_CHNL_2_CMPLT_STATUS_BSET<<2 | (uint32_t)GPIO_CHNL_3_CMPLT_STATUS_BSET<<3 | (uint32_t)GPIO_CHNL_4_CMPLT_STATUS_BSET<<4 | (uint32_t)GPIO_CHNL_5_CMPLT_STATUS_BSET<<5 | (uint32_t)GPIO_CHNL_6_CMPLT_STATUS_BSET<<6 | (uint32_t)GPIO_CHNL_7_CMPLT_STATUS_BSET<<7 | (uint32_t)GPIO_CHNL_0_ST_ABORT_STATUS_BSET<<8 | (uint32_t)GPIO_CHNL_1_ST_ABORT_STATUS_BSET<<9 | (uint32_t)GPIO_CHNL_2_ST_ABORT_STATUS_BSET<<10 | (uint32_t)GPIO_CHNL_3_ST_ABORT_STATUS_BSET<<11 | (uint32_t)GPIO_CHNL_4_ST_ABORT_STATUS_BSET<<12 | (uint32_t)GPIO_CHNL_5_ST_ABORT_STATUS_BSET<<13 | (uint32_t)GPIO_CHNL_6_ST_ABORT_STATUS_BSET<<14 | (uint32_t)GPIO_CHNL_7_ST_ABORT_STATUS_BSET<<15 | (uint32_t)GPIO_TIMER_0_STATUS_BSET<<16 | (uint32_t)GPIO_TIMER_1_STATUS_BSET<<17 | (uint32_t)GPIO_TIMER_2_STATUS_BSET<<18 | (uint32_t)GPIO_TIMER_3_STATUS_BSET<<19 | (uint32_t)GPIO_INTR_DEBUG_STATUS_BSET<<20 | (uint32_t)GPIO_TRIG_PULSE_STATUS_BSET<<21)
#define Get_ITM_ITM_GPIO_STATUS_BSET() p_ITM_IP->ITM_GPIO_STATUS_BSET.word
#define Set_ITM_ITM_GPIO_STATUS_BSET_word(x) (p_ITM_IP->ITM_GPIO_STATUS_BSET.word = x)


//ITM_GPIO_EN_BCLR


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_0_CMPLT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_0_CMPLT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_1_CMPLT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_1_CMPLT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_2_CMPLT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_2_CMPLT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_3_CMPLT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_3_CMPLT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_4_CMPLT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_4_CMPLT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_5_CMPLT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_5_CMPLT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_6_CMPLT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_6_CMPLT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_7_CMPLT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_7_CMPLT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_0_ST_ABORT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_0_ST_ABORT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_1_ST_ABORT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_1_ST_ABORT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_2_ST_ABORT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_2_ST_ABORT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_3_ST_ABORT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_3_ST_ABORT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_4_ST_ABORT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_4_ST_ABORT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_5_ST_ABORT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_5_ST_ABORT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_6_ST_ABORT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_6_ST_ABORT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_CHNL_7_ST_ABORT_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_CHNL_7_ST_ABORT_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_TIMER_0_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_TIMER_0_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_TIMER_1_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_TIMER_1_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_TIMER_2_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_TIMER_2_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_TIMER_3_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_TIMER_3_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_INTR_DEBUG_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_INTR_DEBUG_EN_BCLR = x)


#define Set_ITM_ITM_GPIO_EN_BCLR_GPIO_TRIG_PULSE_EN_BCLR(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.ITM_GPIO_EN_BCLR_ts.GPIO_TRIG_PULSE_EN_BCLR = x)
#define Set_ITM_ITM_GPIO_EN_BCLR(GPIO_CHNL_0_CMPLT_EN_BCLR,GPIO_CHNL_1_CMPLT_EN_BCLR,GPIO_CHNL_2_CMPLT_EN_BCLR,GPIO_CHNL_3_CMPLT_EN_BCLR,GPIO_CHNL_4_CMPLT_EN_BCLR,GPIO_CHNL_5_CMPLT_EN_BCLR,GPIO_CHNL_6_CMPLT_EN_BCLR,GPIO_CHNL_7_CMPLT_EN_BCLR,GPIO_CHNL_0_ST_ABORT_EN_BCLR,GPIO_CHNL_1_ST_ABORT_EN_BCLR,GPIO_CHNL_2_ST_ABORT_EN_BCLR,GPIO_CHNL_3_ST_ABORT_EN_BCLR,GPIO_CHNL_4_ST_ABORT_EN_BCLR,GPIO_CHNL_5_ST_ABORT_EN_BCLR,GPIO_CHNL_6_ST_ABORT_EN_BCLR,GPIO_CHNL_7_ST_ABORT_EN_BCLR,GPIO_TIMER_0_EN_BCLR,GPIO_TIMER_1_EN_BCLR,GPIO_TIMER_2_EN_BCLR,GPIO_TIMER_3_EN_BCLR,GPIO_INTR_DEBUG_EN_BCLR,GPIO_TRIG_PULSE_EN_BCLR) (p_ITM_IP->ITM_GPIO_EN_BCLR.word = (uint32_t)GPIO_CHNL_0_CMPLT_EN_BCLR<<0 | (uint32_t)GPIO_CHNL_1_CMPLT_EN_BCLR<<1 | (uint32_t)GPIO_CHNL_2_CMPLT_EN_BCLR<<2 | (uint32_t)GPIO_CHNL_3_CMPLT_EN_BCLR<<3 | (uint32_t)GPIO_CHNL_4_CMPLT_EN_BCLR<<4 | (uint32_t)GPIO_CHNL_5_CMPLT_EN_BCLR<<5 | (uint32_t)GPIO_CHNL_6_CMPLT_EN_BCLR<<6 | (uint32_t)GPIO_CHNL_7_CMPLT_EN_BCLR<<7 | (uint32_t)GPIO_CHNL_0_ST_ABORT_EN_BCLR<<8 | (uint32_t)GPIO_CHNL_1_ST_ABORT_EN_BCLR<<9 | (uint32_t)GPIO_CHNL_2_ST_ABORT_EN_BCLR<<10 | (uint32_t)GPIO_CHNL_3_ST_ABORT_EN_BCLR<<11 | (uint32_t)GPIO_CHNL_4_ST_ABORT_EN_BCLR<<12 | (uint32_t)GPIO_CHNL_5_ST_ABORT_EN_BCLR<<13 | (uint32_t)GPIO_CHNL_6_ST_ABORT_EN_BCLR<<14 | (uint32_t)GPIO_CHNL_7_ST_ABORT_EN_BCLR<<15 | (uint32_t)GPIO_TIMER_0_EN_BCLR<<16 | (uint32_t)GPIO_TIMER_1_EN_BCLR<<17 | (uint32_t)GPIO_TIMER_2_EN_BCLR<<18 | (uint32_t)GPIO_TIMER_3_EN_BCLR<<19 | (uint32_t)GPIO_INTR_DEBUG_EN_BCLR<<20 | (uint32_t)GPIO_TRIG_PULSE_EN_BCLR<<21)
#define Get_ITM_ITM_GPIO_EN_BCLR() p_ITM_IP->ITM_GPIO_EN_BCLR.word
#define Set_ITM_ITM_GPIO_EN_BCLR_word(x) (p_ITM_IP->ITM_GPIO_EN_BCLR.word = x)


//ITM_GPIO_EN_BSET


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_0_CMPLT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_0_CMPLT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_1_CMPLT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_1_CMPLT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_2_CMPLT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_2_CMPLT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_3_CMPLT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_3_CMPLT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_4_CMPLT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_4_CMPLT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_5_CMPLT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_5_CMPLT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_6_CMPLT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_6_CMPLT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_7_CMPLT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_7_CMPLT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_0_ST_ABORT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_0_ST_ABORT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_1_ST_ABORT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_1_ST_ABORT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_2_ST_ABORT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_2_ST_ABORT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_3_ST_ABORT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_3_ST_ABORT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_4_ST_ABORT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_4_ST_ABORT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_5_ST_ABORT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_5_ST_ABORT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_6_ST_ABORT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_6_ST_ABORT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_CHNL_7_ST_ABORT_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_CHNL_7_ST_ABORT_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_TIMER_0_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_TIMER_0_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_TIMER_1_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_TIMER_1_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_TIMER_2_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_TIMER_2_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_TIMER_3_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_TIMER_3_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_INTR_DEBUG_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_INTR_DEBUG_EN_BSET = x)


#define Set_ITM_ITM_GPIO_EN_BSET_GPIO_TRIG_PULSE_EN_BSET(x) (p_ITM_IP->ITM_GPIO_EN_BSET.ITM_GPIO_EN_BSET_ts.GPIO_TRIG_PULSE_EN_BSET = x)
#define Set_ITM_ITM_GPIO_EN_BSET(GPIO_CHNL_0_CMPLT_EN_BSET,GPIO_CHNL_1_CMPLT_EN_BSET,GPIO_CHNL_2_CMPLT_EN_BSET,GPIO_CHNL_3_CMPLT_EN_BSET,GPIO_CHNL_4_CMPLT_EN_BSET,GPIO_CHNL_5_CMPLT_EN_BSET,GPIO_CHNL_6_CMPLT_EN_BSET,GPIO_CHNL_7_CMPLT_EN_BSET,GPIO_CHNL_0_ST_ABORT_EN_BSET,GPIO_CHNL_1_ST_ABORT_EN_BSET,GPIO_CHNL_2_ST_ABORT_EN_BSET,GPIO_CHNL_3_ST_ABORT_EN_BSET,GPIO_CHNL_4_ST_ABORT_EN_BSET,GPIO_CHNL_5_ST_ABORT_EN_BSET,GPIO_CHNL_6_ST_ABORT_EN_BSET,GPIO_CHNL_7_ST_ABORT_EN_BSET,GPIO_TIMER_0_EN_BSET,GPIO_TIMER_1_EN_BSET,GPIO_TIMER_2_EN_BSET,GPIO_TIMER_3_EN_BSET,GPIO_INTR_DEBUG_EN_BSET,GPIO_TRIG_PULSE_EN_BSET) (p_ITM_IP->ITM_GPIO_EN_BSET.word = (uint32_t)GPIO_CHNL_0_CMPLT_EN_BSET<<0 | (uint32_t)GPIO_CHNL_1_CMPLT_EN_BSET<<1 | (uint32_t)GPIO_CHNL_2_CMPLT_EN_BSET<<2 | (uint32_t)GPIO_CHNL_3_CMPLT_EN_BSET<<3 | (uint32_t)GPIO_CHNL_4_CMPLT_EN_BSET<<4 | (uint32_t)GPIO_CHNL_5_CMPLT_EN_BSET<<5 | (uint32_t)GPIO_CHNL_6_CMPLT_EN_BSET<<6 | (uint32_t)GPIO_CHNL_7_CMPLT_EN_BSET<<7 | (uint32_t)GPIO_CHNL_0_ST_ABORT_EN_BSET<<8 | (uint32_t)GPIO_CHNL_1_ST_ABORT_EN_BSET<<9 | (uint32_t)GPIO_CHNL_2_ST_ABORT_EN_BSET<<10 | (uint32_t)GPIO_CHNL_3_ST_ABORT_EN_BSET<<11 | (uint32_t)GPIO_CHNL_4_ST_ABORT_EN_BSET<<12 | (uint32_t)GPIO_CHNL_5_ST_ABORT_EN_BSET<<13 | (uint32_t)GPIO_CHNL_6_ST_ABORT_EN_BSET<<14 | (uint32_t)GPIO_CHNL_7_ST_ABORT_EN_BSET<<15 | (uint32_t)GPIO_TIMER_0_EN_BSET<<16 | (uint32_t)GPIO_TIMER_1_EN_BSET<<17 | (uint32_t)GPIO_TIMER_2_EN_BSET<<18 | (uint32_t)GPIO_TIMER_3_EN_BSET<<19 | (uint32_t)GPIO_INTR_DEBUG_EN_BSET<<20 | (uint32_t)GPIO_TRIG_PULSE_EN_BSET<<21)
#define Get_ITM_ITM_GPIO_EN_BSET() p_ITM_IP->ITM_GPIO_EN_BSET.word
#define Set_ITM_ITM_GPIO_EN_BSET_word(x) (p_ITM_IP->ITM_GPIO_EN_BSET.word = x)


//ITM_EWB_STATUS


#define Get_ITM_ITM_EWB_STATUS_EWB_0_STATUS() p_ITM_IP->ITM_EWB_STATUS.ITM_EWB_STATUS_ts.EWB_0_STATUS


#define Get_ITM_ITM_EWB_STATUS_EWB_1_STATUS() p_ITM_IP->ITM_EWB_STATUS.ITM_EWB_STATUS_ts.EWB_1_STATUS


#define Get_ITM_ITM_EWB_STATUS_EWB_2_STATUS() p_ITM_IP->ITM_EWB_STATUS.ITM_EWB_STATUS_ts.EWB_2_STATUS


#define Get_ITM_ITM_EWB_STATUS_EWB_3_STATUS() p_ITM_IP->ITM_EWB_STATUS.ITM_EWB_STATUS_ts.EWB_3_STATUS
#define Get_ITM_ITM_EWB_STATUS() p_ITM_IP->ITM_EWB_STATUS.word


//ITM_EWB_EN_STATUS


#define Get_ITM_ITM_EWB_EN_STATUS_EWB_0_EN_STATUS() p_ITM_IP->ITM_EWB_EN_STATUS.ITM_EWB_EN_STATUS_ts.EWB_0_EN_STATUS


#define Get_ITM_ITM_EWB_EN_STATUS_EWB_1_EN_STATUS() p_ITM_IP->ITM_EWB_EN_STATUS.ITM_EWB_EN_STATUS_ts.EWB_1_EN_STATUS


#define Get_ITM_ITM_EWB_EN_STATUS_EWB_2_EN_STATUS() p_ITM_IP->ITM_EWB_EN_STATUS.ITM_EWB_EN_STATUS_ts.EWB_2_EN_STATUS


#define Get_ITM_ITM_EWB_EN_STATUS_EWB_3_EN_STATUS() p_ITM_IP->ITM_EWB_EN_STATUS.ITM_EWB_EN_STATUS_ts.EWB_3_EN_STATUS
#define Get_ITM_ITM_EWB_EN_STATUS() p_ITM_IP->ITM_EWB_EN_STATUS.word


//ITM_EWB_STATUS_BCLR


#define Set_ITM_ITM_EWB_STATUS_BCLR_EWB_0_STATUS_BCLR(x) (p_ITM_IP->ITM_EWB_STATUS_BCLR.ITM_EWB_STATUS_BCLR_ts.EWB_0_STATUS_BCLR = x)


#define Set_ITM_ITM_EWB_STATUS_BCLR_EWB_1_STATUS_BCLR(x) (p_ITM_IP->ITM_EWB_STATUS_BCLR.ITM_EWB_STATUS_BCLR_ts.EWB_1_STATUS_BCLR = x)


#define Set_ITM_ITM_EWB_STATUS_BCLR_EWB_2_STATUS_BCLR(x) (p_ITM_IP->ITM_EWB_STATUS_BCLR.ITM_EWB_STATUS_BCLR_ts.EWB_2_STATUS_BCLR = x)


#define Set_ITM_ITM_EWB_STATUS_BCLR_EWB_3_STATUS_BCLR(x) (p_ITM_IP->ITM_EWB_STATUS_BCLR.ITM_EWB_STATUS_BCLR_ts.EWB_3_STATUS_BCLR = x)
#define Set_ITM_ITM_EWB_STATUS_BCLR(EWB_0_STATUS_BCLR,EWB_1_STATUS_BCLR,EWB_2_STATUS_BCLR,EWB_3_STATUS_BCLR) (p_ITM_IP->ITM_EWB_STATUS_BCLR.word = (uint32_t)EWB_0_STATUS_BCLR<<0 | (uint32_t)EWB_1_STATUS_BCLR<<1 | (uint32_t)EWB_2_STATUS_BCLR<<2 | (uint32_t)EWB_3_STATUS_BCLR<<3)
#define Get_ITM_ITM_EWB_STATUS_BCLR() p_ITM_IP->ITM_EWB_STATUS_BCLR.word
#define Set_ITM_ITM_EWB_STATUS_BCLR_word(x) (p_ITM_IP->ITM_EWB_STATUS_BCLR.word = x)


//ITM_EWB_STATUS_BSET


#define Set_ITM_ITM_EWB_STATUS_BSET_EWB_0_STATUS_BSET(x) (p_ITM_IP->ITM_EWB_STATUS_BSET.ITM_EWB_STATUS_BSET_ts.EWB_0_STATUS_BSET = x)


#define Set_ITM_ITM_EWB_STATUS_BSET_EWB_1_STATUS_BSET(x) (p_ITM_IP->ITM_EWB_STATUS_BSET.ITM_EWB_STATUS_BSET_ts.EWB_1_STATUS_BSET = x)


#define Set_ITM_ITM_EWB_STATUS_BSET_EWB_2_STATUS_BSET(x) (p_ITM_IP->ITM_EWB_STATUS_BSET.ITM_EWB_STATUS_BSET_ts.EWB_2_STATUS_BSET = x)


#define Set_ITM_ITM_EWB_STATUS_BSET_EWB_3_STATUS_BSET(x) (p_ITM_IP->ITM_EWB_STATUS_BSET.ITM_EWB_STATUS_BSET_ts.EWB_3_STATUS_BSET = x)
#define Set_ITM_ITM_EWB_STATUS_BSET(EWB_0_STATUS_BSET,EWB_1_STATUS_BSET,EWB_2_STATUS_BSET,EWB_3_STATUS_BSET) (p_ITM_IP->ITM_EWB_STATUS_BSET.word = (uint32_t)EWB_0_STATUS_BSET<<0 | (uint32_t)EWB_1_STATUS_BSET<<1 | (uint32_t)EWB_2_STATUS_BSET<<2 | (uint32_t)EWB_3_STATUS_BSET<<3)
#define Get_ITM_ITM_EWB_STATUS_BSET() p_ITM_IP->ITM_EWB_STATUS_BSET.word
#define Set_ITM_ITM_EWB_STATUS_BSET_word(x) (p_ITM_IP->ITM_EWB_STATUS_BSET.word = x)


//ITM_EWB_EN_BCLR


#define Set_ITM_ITM_EWB_EN_BCLR_EWB_0_EN_BCLR(x) (p_ITM_IP->ITM_EWB_EN_BCLR.ITM_EWB_EN_BCLR_ts.EWB_0_EN_BCLR = x)


#define Set_ITM_ITM_EWB_EN_BCLR_EWB_1_EN_BCLR(x) (p_ITM_IP->ITM_EWB_EN_BCLR.ITM_EWB_EN_BCLR_ts.EWB_1_EN_BCLR = x)


#define Set_ITM_ITM_EWB_EN_BCLR_EWB_2_EN_BCLR(x) (p_ITM_IP->ITM_EWB_EN_BCLR.ITM_EWB_EN_BCLR_ts.EWB_2_EN_BCLR = x)


#define Set_ITM_ITM_EWB_EN_BCLR_EWB_3_EN_BCLR(x) (p_ITM_IP->ITM_EWB_EN_BCLR.ITM_EWB_EN_BCLR_ts.EWB_3_EN_BCLR = x)
#define Set_ITM_ITM_EWB_EN_BCLR(EWB_0_EN_BCLR,EWB_1_EN_BCLR,EWB_2_EN_BCLR,EWB_3_EN_BCLR) (p_ITM_IP->ITM_EWB_EN_BCLR.word = (uint32_t)EWB_0_EN_BCLR<<0 | (uint32_t)EWB_1_EN_BCLR<<1 | (uint32_t)EWB_2_EN_BCLR<<2 | (uint32_t)EWB_3_EN_BCLR<<3)
#define Get_ITM_ITM_EWB_EN_BCLR() p_ITM_IP->ITM_EWB_EN_BCLR.word
#define Set_ITM_ITM_EWB_EN_BCLR_word(x) (p_ITM_IP->ITM_EWB_EN_BCLR.word = x)


//ITM_EWB_EN_BSET


#define Set_ITM_ITM_EWB_EN_BSET_EWB_0_EN_BSET(x) (p_ITM_IP->ITM_EWB_EN_BSET.ITM_EWB_EN_BSET_ts.EWB_0_EN_BSET = x)


#define Set_ITM_ITM_EWB_EN_BSET_EWB_1_EN_BSET(x) (p_ITM_IP->ITM_EWB_EN_BSET.ITM_EWB_EN_BSET_ts.EWB_1_EN_BSET = x)


#define Set_ITM_ITM_EWB_EN_BSET_EWB_2_EN_BSET(x) (p_ITM_IP->ITM_EWB_EN_BSET.ITM_EWB_EN_BSET_ts.EWB_2_EN_BSET = x)


#define Set_ITM_ITM_EWB_EN_BSET_EWB_3_EN_BSET(x) (p_ITM_IP->ITM_EWB_EN_BSET.ITM_EWB_EN_BSET_ts.EWB_3_EN_BSET = x)
#define Set_ITM_ITM_EWB_EN_BSET(EWB_0_EN_BSET,EWB_1_EN_BSET,EWB_2_EN_BSET,EWB_3_EN_BSET) (p_ITM_IP->ITM_EWB_EN_BSET.word = (uint32_t)EWB_0_EN_BSET<<0 | (uint32_t)EWB_1_EN_BSET<<1 | (uint32_t)EWB_2_EN_BSET<<2 | (uint32_t)EWB_3_EN_BSET<<3)
#define Get_ITM_ITM_EWB_EN_BSET() p_ITM_IP->ITM_EWB_EN_BSET.word
#define Set_ITM_ITM_EWB_EN_BSET_word(x) (p_ITM_IP->ITM_EWB_EN_BSET.word = x)


//ITM_MMWB_STATUS


#define Get_ITM_ITM_MMWB_STATUS_MMWB_STATUS() p_ITM_IP->ITM_MMWB_STATUS.ITM_MMWB_STATUS_ts.MMWB_STATUS
#define Get_ITM_ITM_MMWB_STATUS() p_ITM_IP->ITM_MMWB_STATUS.word


//ITM_MMWB_EN_STATUS


#define Get_ITM_ITM_MMWB_EN_STATUS_MMWB_EN_STATUS() p_ITM_IP->ITM_MMWB_EN_STATUS.ITM_MMWB_EN_STATUS_ts.MMWB_EN_STATUS
#define Get_ITM_ITM_MMWB_EN_STATUS() p_ITM_IP->ITM_MMWB_EN_STATUS.word


//ITM_MMWB_STATUS_BCLR


#define Set_ITM_ITM_MMWB_STATUS_BCLR_MMWB_STATUS_BCLR(x) (p_ITM_IP->ITM_MMWB_STATUS_BCLR.ITM_MMWB_STATUS_BCLR_ts.MMWB_STATUS_BCLR = x)
#define Set_ITM_ITM_MMWB_STATUS_BCLR(MMWB_STATUS_BCLR) (p_ITM_IP->ITM_MMWB_STATUS_BCLR.word = (uint32_t)MMWB_STATUS_BCLR<<0)
#define Get_ITM_ITM_MMWB_STATUS_BCLR() p_ITM_IP->ITM_MMWB_STATUS_BCLR.word
#define Set_ITM_ITM_MMWB_STATUS_BCLR_word(x) (p_ITM_IP->ITM_MMWB_STATUS_BCLR.word = x)


//ITM_MMWB_STATUS_BSET


#define Set_ITM_ITM_MMWB_STATUS_BSET_MMWB_STATUS_BSET(x) (p_ITM_IP->ITM_MMWB_STATUS_BSET.ITM_MMWB_STATUS_BSET_ts.MMWB_STATUS_BSET = x)
#define Set_ITM_ITM_MMWB_STATUS_BSET(MMWB_STATUS_BSET) (p_ITM_IP->ITM_MMWB_STATUS_BSET.word = (uint32_t)MMWB_STATUS_BSET<<0)
#define Get_ITM_ITM_MMWB_STATUS_BSET() p_ITM_IP->ITM_MMWB_STATUS_BSET.word
#define Set_ITM_ITM_MMWB_STATUS_BSET_word(x) (p_ITM_IP->ITM_MMWB_STATUS_BSET.word = x)


//ITM_MMWB_EN_BCLR


#define Set_ITM_ITM_MMWB_EN_BCLR_MMWB_EN_BCLR(x) (p_ITM_IP->ITM_MMWB_EN_BCLR.ITM_MMWB_EN_BCLR_ts.MMWB_EN_BCLR = x)
#define Set_ITM_ITM_MMWB_EN_BCLR(MMWB_EN_BCLR) (p_ITM_IP->ITM_MMWB_EN_BCLR.word = (uint32_t)MMWB_EN_BCLR<<0)
#define Get_ITM_ITM_MMWB_EN_BCLR() p_ITM_IP->ITM_MMWB_EN_BCLR.word
#define Set_ITM_ITM_MMWB_EN_BCLR_word(x) (p_ITM_IP->ITM_MMWB_EN_BCLR.word = x)


//ITM_MMWB_EN_BSET


#define Set_ITM_ITM_MMWB_EN_BSET_MMWB_EN_BSET(x) (p_ITM_IP->ITM_MMWB_EN_BSET.ITM_MMWB_EN_BSET_ts.MMWB_EN_BSET = x)
#define Set_ITM_ITM_MMWB_EN_BSET(MMWB_EN_BSET) (p_ITM_IP->ITM_MMWB_EN_BSET.word = (uint32_t)MMWB_EN_BSET<<0)
#define Get_ITM_ITM_MMWB_EN_BSET() p_ITM_IP->ITM_MMWB_EN_BSET.word
#define Set_ITM_ITM_MMWB_EN_BSET_word(x) (p_ITM_IP->ITM_MMWB_EN_BSET.word = x)


//ITM_GLACE_STATUS


#define Get_ITM_ITM_GLACE_STATUS_GLACE_STATUS() p_ITM_IP->ITM_GLACE_STATUS.ITM_GLACE_STATUS_ts.GLACE_STATUS
#define Get_ITM_ITM_GLACE_STATUS() p_ITM_IP->ITM_GLACE_STATUS.word


//ITM_GLACE_EN_STATUS


#define Get_ITM_ITM_GLACE_EN_STATUS_GLACE_EN_STATUS() p_ITM_IP->ITM_GLACE_EN_STATUS.ITM_GLACE_EN_STATUS_ts.GLACE_EN_STATUS
#define Get_ITM_ITM_GLACE_EN_STATUS() p_ITM_IP->ITM_GLACE_EN_STATUS.word


//ITM_GLACE_STATUS_BCLR


#define Set_ITM_ITM_GLACE_STATUS_BCLR_GLACE_STATUS_BCLR(x) (p_ITM_IP->ITM_GLACE_STATUS_BCLR.ITM_GLACE_STATUS_BCLR_ts.GLACE_STATUS_BCLR = x)
#define Set_ITM_ITM_GLACE_STATUS_BCLR(GLACE_STATUS_BCLR) (p_ITM_IP->ITM_GLACE_STATUS_BCLR.word = (uint32_t)GLACE_STATUS_BCLR<<0)
#define Get_ITM_ITM_GLACE_STATUS_BCLR() p_ITM_IP->ITM_GLACE_STATUS_BCLR.word
#define Set_ITM_ITM_GLACE_STATUS_BCLR_word(x) (p_ITM_IP->ITM_GLACE_STATUS_BCLR.word = x)


//ITM_GLACE_STATUS_BSET


#define Set_ITM_ITM_GLACE_STATUS_BSET_GLACE_STATUS_BSET(x) (p_ITM_IP->ITM_GLACE_STATUS_BSET.ITM_GLACE_STATUS_BSET_ts.GLACE_STATUS_BSET = x)
#define Set_ITM_ITM_GLACE_STATUS_BSET(GLACE_STATUS_BSET) (p_ITM_IP->ITM_GLACE_STATUS_BSET.word = (uint32_t)GLACE_STATUS_BSET<<0)
#define Get_ITM_ITM_GLACE_STATUS_BSET() p_ITM_IP->ITM_GLACE_STATUS_BSET.word
#define Set_ITM_ITM_GLACE_STATUS_BSET_word(x) (p_ITM_IP->ITM_GLACE_STATUS_BSET.word = x)


//ITM_GLACE_EN_BCLR


#define Set_ITM_ITM_GLACE_EN_BCLR_GLACE_EN_BCLR(x) (p_ITM_IP->ITM_GLACE_EN_BCLR.ITM_GLACE_EN_BCLR_ts.GLACE_EN_BCLR = x)
#define Set_ITM_ITM_GLACE_EN_BCLR(GLACE_EN_BCLR) (p_ITM_IP->ITM_GLACE_EN_BCLR.word = (uint32_t)GLACE_EN_BCLR<<0)
#define Get_ITM_ITM_GLACE_EN_BCLR() p_ITM_IP->ITM_GLACE_EN_BCLR.word
#define Set_ITM_ITM_GLACE_EN_BCLR_word(x) (p_ITM_IP->ITM_GLACE_EN_BCLR.word = x)


//ITM_GLACE_EN_BSET


#define Set_ITM_ITM_GLACE_EN_BSET_GLACE_EN_BSET(x) (p_ITM_IP->ITM_GLACE_EN_BSET.ITM_GLACE_EN_BSET_ts.GLACE_EN_BSET = x)
#define Set_ITM_ITM_GLACE_EN_BSET(GLACE_EN_BSET) (p_ITM_IP->ITM_GLACE_EN_BSET.word = (uint32_t)GLACE_EN_BSET<<0)
#define Get_ITM_ITM_GLACE_EN_BSET() p_ITM_IP->ITM_GLACE_EN_BSET.word
#define Set_ITM_ITM_GLACE_EN_BSET_word(x) (p_ITM_IP->ITM_GLACE_EN_BSET.word = x)


//ITM_EXP6X8_STATUS


#define Get_ITM_ITM_EXP6X8_STATUS_EXP6X8_STATUS() p_ITM_IP->ITM_EXP6X8_STATUS.ITM_EXP6X8_STATUS_ts.EXP6X8_STATUS
#define Get_ITM_ITM_EXP6X8_STATUS() p_ITM_IP->ITM_EXP6X8_STATUS.word


//ITM_EXP6X8_EN_STATUS


#define Get_ITM_ITM_EXP6X8_EN_STATUS_EXP6X8_EN_STATUS() p_ITM_IP->ITM_EXP6X8_EN_STATUS.ITM_EXP6X8_EN_STATUS_ts.EXP6X8_EN_STATUS
#define Get_ITM_ITM_EXP6X8_EN_STATUS() p_ITM_IP->ITM_EXP6X8_EN_STATUS.word


//ITM_EXP6X8_STATUS_BCLR


#define Set_ITM_ITM_EXP6X8_STATUS_BCLR_EXP6X8_STATUS_BCLR(x) (p_ITM_IP->ITM_EXP6X8_STATUS_BCLR.ITM_EXP6X8_STATUS_BCLR_ts.EXP6X8_STATUS_BCLR = x)
#define Set_ITM_ITM_EXP6X8_STATUS_BCLR(EXP6X8_STATUS_BCLR) (p_ITM_IP->ITM_EXP6X8_STATUS_BCLR.word = (uint32_t)EXP6X8_STATUS_BCLR<<0)
#define Get_ITM_ITM_EXP6X8_STATUS_BCLR() p_ITM_IP->ITM_EXP6X8_STATUS_BCLR.word
#define Set_ITM_ITM_EXP6X8_STATUS_BCLR_word(x) (p_ITM_IP->ITM_EXP6X8_STATUS_BCLR.word = x)


//ITM_EXP6X8_STATUS_BSET


#define Set_ITM_ITM_EXP6X8_STATUS_BSET_EXP6X8_STATUS_BSET(x) (p_ITM_IP->ITM_EXP6X8_STATUS_BSET.ITM_EXP6X8_STATUS_BSET_ts.EXP6X8_STATUS_BSET = x)
#define Set_ITM_ITM_EXP6X8_STATUS_BSET(EXP6X8_STATUS_BSET) (p_ITM_IP->ITM_EXP6X8_STATUS_BSET.word = (uint32_t)EXP6X8_STATUS_BSET<<0)
#define Get_ITM_ITM_EXP6X8_STATUS_BSET() p_ITM_IP->ITM_EXP6X8_STATUS_BSET.word
#define Set_ITM_ITM_EXP6X8_STATUS_BSET_word(x) (p_ITM_IP->ITM_EXP6X8_STATUS_BSET.word = x)


//ITM_EXP6X8_EN_BCLR


#define Set_ITM_ITM_EXP6X8_EN_BCLR_EXP6X8_EN_BCLR(x) (p_ITM_IP->ITM_EXP6X8_EN_BCLR.ITM_EXP6X8_EN_BCLR_ts.EXP6X8_EN_BCLR = x)
#define Set_ITM_ITM_EXP6X8_EN_BCLR(EXP6X8_EN_BCLR) (p_ITM_IP->ITM_EXP6X8_EN_BCLR.word = (uint32_t)EXP6X8_EN_BCLR<<0)
#define Get_ITM_ITM_EXP6X8_EN_BCLR() p_ITM_IP->ITM_EXP6X8_EN_BCLR.word
#define Set_ITM_ITM_EXP6X8_EN_BCLR_word(x) (p_ITM_IP->ITM_EXP6X8_EN_BCLR.word = x)


//ITM_EXP6X8_EN_BSET


#define Set_ITM_ITM_EXP6X8_EN_BSET_EXP6X8_EN_BSET(x) (p_ITM_IP->ITM_EXP6X8_EN_BSET.ITM_EXP6X8_EN_BSET_ts.EXP6X8_EN_BSET = x)
#define Set_ITM_ITM_EXP6X8_EN_BSET(EXP6X8_EN_BSET) (p_ITM_IP->ITM_EXP6X8_EN_BSET.word = (uint32_t)EXP6X8_EN_BSET<<0)
#define Get_ITM_ITM_EXP6X8_EN_BSET() p_ITM_IP->ITM_EXP6X8_EN_BSET.word
#define Set_ITM_ITM_EXP6X8_EN_BSET_word(x) (p_ITM_IP->ITM_EXP6X8_EN_BSET.word = x)


//ITM_GHIST_STATUS


#define Get_ITM_ITM_GHIST_STATUS_GHIST_STATUS() p_ITM_IP->ITM_GHIST_STATUS.ITM_GHIST_STATUS_ts.GHIST_STATUS
#define Get_ITM_ITM_GHIST_STATUS() p_ITM_IP->ITM_GHIST_STATUS.word


//ITM_GHIST_EN_STATUS


#define Get_ITM_ITM_GHIST_EN_STATUS_GHIST_EN_STATUS() p_ITM_IP->ITM_GHIST_EN_STATUS.ITM_GHIST_EN_STATUS_ts.GHIST_EN_STATUS
#define Get_ITM_ITM_GHIST_EN_STATUS() p_ITM_IP->ITM_GHIST_EN_STATUS.word


//ITM_GHIST_STATUS_BCLR


#define Set_ITM_ITM_GHIST_STATUS_BCLR_GHIST_STATUS_BCLR(x) (p_ITM_IP->ITM_GHIST_STATUS_BCLR.ITM_GHIST_STATUS_BCLR_ts.GHIST_STATUS_BCLR = x)
#define Set_ITM_ITM_GHIST_STATUS_BCLR(GHIST_STATUS_BCLR) (p_ITM_IP->ITM_GHIST_STATUS_BCLR.word = (uint32_t)GHIST_STATUS_BCLR<<0)
#define Get_ITM_ITM_GHIST_STATUS_BCLR() p_ITM_IP->ITM_GHIST_STATUS_BCLR.word
#define Set_ITM_ITM_GHIST_STATUS_BCLR_word(x) (p_ITM_IP->ITM_GHIST_STATUS_BCLR.word = x)


//ITM_GHIST_STATUS_BSET


#define Set_ITM_ITM_GHIST_STATUS_BSET_GHIST_STATUS_BSET(x) (p_ITM_IP->ITM_GHIST_STATUS_BSET.ITM_GHIST_STATUS_BSET_ts.GHIST_STATUS_BSET = x)
#define Set_ITM_ITM_GHIST_STATUS_BSET(GHIST_STATUS_BSET) (p_ITM_IP->ITM_GHIST_STATUS_BSET.word = (uint32_t)GHIST_STATUS_BSET<<0)
#define Get_ITM_ITM_GHIST_STATUS_BSET() p_ITM_IP->ITM_GHIST_STATUS_BSET.word
#define Set_ITM_ITM_GHIST_STATUS_BSET_word(x) (p_ITM_IP->ITM_GHIST_STATUS_BSET.word = x)


//ITM_GHIST_EN_BCLR


#define Set_ITM_ITM_GHIST_EN_BCLR_GHIST_EN_BCLR(x) (p_ITM_IP->ITM_GHIST_EN_BCLR.ITM_GHIST_EN_BCLR_ts.GHIST_EN_BCLR = x)
#define Set_ITM_ITM_GHIST_EN_BCLR(GHIST_EN_BCLR) (p_ITM_IP->ITM_GHIST_EN_BCLR.word = (uint32_t)GHIST_EN_BCLR<<0)
#define Get_ITM_ITM_GHIST_EN_BCLR() p_ITM_IP->ITM_GHIST_EN_BCLR.word
#define Set_ITM_ITM_GHIST_EN_BCLR_word(x) (p_ITM_IP->ITM_GHIST_EN_BCLR.word = x)


//ITM_GHIST_EN_BSET


#define Set_ITM_ITM_GHIST_EN_BSET_GHIST_EN_BSET(x) (p_ITM_IP->ITM_GHIST_EN_BSET.ITM_GHIST_EN_BSET_ts.GHIST_EN_BSET = x)
#define Set_ITM_ITM_GHIST_EN_BSET(GHIST_EN_BSET) (p_ITM_IP->ITM_GHIST_EN_BSET.word = (uint32_t)GHIST_EN_BSET<<0)
#define Get_ITM_ITM_GHIST_EN_BSET() p_ITM_IP->ITM_GHIST_EN_BSET.word
#define Set_ITM_ITM_GHIST_EN_BSET_word(x) (p_ITM_IP->ITM_GHIST_EN_BSET.word = x)


//ITM_AF_STATUS


#define Get_ITM_ITM_AF_STATUS_AF_0_STATUS() p_ITM_IP->ITM_AF_STATUS.ITM_AF_STATUS_ts.AF_0_STATUS


#define Get_ITM_ITM_AF_STATUS_AF_1_STATUS() p_ITM_IP->ITM_AF_STATUS.ITM_AF_STATUS_ts.AF_1_STATUS


#define Get_ITM_ITM_AF_STATUS_AF_2_STATUS() p_ITM_IP->ITM_AF_STATUS.ITM_AF_STATUS_ts.AF_2_STATUS


#define Get_ITM_ITM_AF_STATUS_AF_3_STATUS() p_ITM_IP->ITM_AF_STATUS.ITM_AF_STATUS_ts.AF_3_STATUS


#define Get_ITM_ITM_AF_STATUS_AF_4_STATUS() p_ITM_IP->ITM_AF_STATUS.ITM_AF_STATUS_ts.AF_4_STATUS


#define Get_ITM_ITM_AF_STATUS_AF_5_STATUS() p_ITM_IP->ITM_AF_STATUS.ITM_AF_STATUS_ts.AF_5_STATUS


#define Get_ITM_ITM_AF_STATUS_AF_6_STATUS() p_ITM_IP->ITM_AF_STATUS.ITM_AF_STATUS_ts.AF_6_STATUS


#define Get_ITM_ITM_AF_STATUS_AF_7_STATUS() p_ITM_IP->ITM_AF_STATUS.ITM_AF_STATUS_ts.AF_7_STATUS


#define Get_ITM_ITM_AF_STATUS_AF_8_STATUS() p_ITM_IP->ITM_AF_STATUS.ITM_AF_STATUS_ts.AF_8_STATUS


#define Get_ITM_ITM_AF_STATUS_AF_9_STATUS() p_ITM_IP->ITM_AF_STATUS.ITM_AF_STATUS_ts.AF_9_STATUS
#define Get_ITM_ITM_AF_STATUS() p_ITM_IP->ITM_AF_STATUS.word


//ITM_AF_EN_STATUS


#define Get_ITM_ITM_AF_EN_STATUS_AF_0_EN_STATUS() p_ITM_IP->ITM_AF_EN_STATUS.ITM_AF_EN_STATUS_ts.AF_0_EN_STATUS


#define Get_ITM_ITM_AF_EN_STATUS_AF_1_EN_STATUS() p_ITM_IP->ITM_AF_EN_STATUS.ITM_AF_EN_STATUS_ts.AF_1_EN_STATUS


#define Get_ITM_ITM_AF_EN_STATUS_AF_2_EN_STATUS() p_ITM_IP->ITM_AF_EN_STATUS.ITM_AF_EN_STATUS_ts.AF_2_EN_STATUS


#define Get_ITM_ITM_AF_EN_STATUS_AF_3_EN_STATUS() p_ITM_IP->ITM_AF_EN_STATUS.ITM_AF_EN_STATUS_ts.AF_3_EN_STATUS


#define Get_ITM_ITM_AF_EN_STATUS_AF_4_EN_STATUS() p_ITM_IP->ITM_AF_EN_STATUS.ITM_AF_EN_STATUS_ts.AF_4_EN_STATUS


#define Get_ITM_ITM_AF_EN_STATUS_AF_5_EN_STATUS() p_ITM_IP->ITM_AF_EN_STATUS.ITM_AF_EN_STATUS_ts.AF_5_EN_STATUS


#define Get_ITM_ITM_AF_EN_STATUS_AF_6_EN_STATUS() p_ITM_IP->ITM_AF_EN_STATUS.ITM_AF_EN_STATUS_ts.AF_6_EN_STATUS


#define Get_ITM_ITM_AF_EN_STATUS_AF_7_EN_STATUS() p_ITM_IP->ITM_AF_EN_STATUS.ITM_AF_EN_STATUS_ts.AF_7_EN_STATUS


#define Get_ITM_ITM_AF_EN_STATUS_AF_8_EN_STATUS() p_ITM_IP->ITM_AF_EN_STATUS.ITM_AF_EN_STATUS_ts.AF_8_EN_STATUS


#define Get_ITM_ITM_AF_EN_STATUS_AF_9_EN_STATUS() p_ITM_IP->ITM_AF_EN_STATUS.ITM_AF_EN_STATUS_ts.AF_9_EN_STATUS
#define Get_ITM_ITM_AF_EN_STATUS() p_ITM_IP->ITM_AF_EN_STATUS.word


//ITM_AF_STATUS_BCLR


#define Set_ITM_ITM_AF_STATUS_BCLR_AF_0_STATUS_BCLR(x) (p_ITM_IP->ITM_AF_STATUS_BCLR.ITM_AF_STATUS_BCLR_ts.AF_0_STATUS_BCLR = x)


#define Set_ITM_ITM_AF_STATUS_BCLR_AF_1_STATUS_BCLR(x) (p_ITM_IP->ITM_AF_STATUS_BCLR.ITM_AF_STATUS_BCLR_ts.AF_1_STATUS_BCLR = x)


#define Set_ITM_ITM_AF_STATUS_BCLR_AF_2_STATUS_BCLR(x) (p_ITM_IP->ITM_AF_STATUS_BCLR.ITM_AF_STATUS_BCLR_ts.AF_2_STATUS_BCLR = x)


#define Set_ITM_ITM_AF_STATUS_BCLR_AF_3_STATUS_BCLR(x) (p_ITM_IP->ITM_AF_STATUS_BCLR.ITM_AF_STATUS_BCLR_ts.AF_3_STATUS_BCLR = x)


#define Set_ITM_ITM_AF_STATUS_BCLR_AF_4_STATUS_BCLR(x) (p_ITM_IP->ITM_AF_STATUS_BCLR.ITM_AF_STATUS_BCLR_ts.AF_4_STATUS_BCLR = x)


#define Set_ITM_ITM_AF_STATUS_BCLR_AF_5_STATUS_BCLR(x) (p_ITM_IP->ITM_AF_STATUS_BCLR.ITM_AF_STATUS_BCLR_ts.AF_5_STATUS_BCLR = x)


#define Set_ITM_ITM_AF_STATUS_BCLR_AF_6_STATUS_BCLR(x) (p_ITM_IP->ITM_AF_STATUS_BCLR.ITM_AF_STATUS_BCLR_ts.AF_6_STATUS_BCLR = x)


#define Set_ITM_ITM_AF_STATUS_BCLR_AF_7_STATUS_BCLR(x) (p_ITM_IP->ITM_AF_STATUS_BCLR.ITM_AF_STATUS_BCLR_ts.AF_7_STATUS_BCLR = x)


#define Set_ITM_ITM_AF_STATUS_BCLR_AF_8_STATUS_BCLR(x) (p_ITM_IP->ITM_AF_STATUS_BCLR.ITM_AF_STATUS_BCLR_ts.AF_8_STATUS_BCLR = x)


#define Set_ITM_ITM_AF_STATUS_BCLR_AF_9_STATUS_BCLR(x) (p_ITM_IP->ITM_AF_STATUS_BCLR.ITM_AF_STATUS_BCLR_ts.AF_9_STATUS_BCLR = x)
#define Set_ITM_ITM_AF_STATUS_BCLR(AF_0_STATUS_BCLR,AF_1_STATUS_BCLR,AF_2_STATUS_BCLR,AF_3_STATUS_BCLR,AF_4_STATUS_BCLR,AF_5_STATUS_BCLR,AF_6_STATUS_BCLR,AF_7_STATUS_BCLR,AF_8_STATUS_BCLR,AF_9_STATUS_BCLR) (p_ITM_IP->ITM_AF_STATUS_BCLR.word = (uint32_t)AF_0_STATUS_BCLR<<0 | (uint32_t)AF_1_STATUS_BCLR<<1 | (uint32_t)AF_2_STATUS_BCLR<<2 | (uint32_t)AF_3_STATUS_BCLR<<3 | (uint32_t)AF_4_STATUS_BCLR<<4 | (uint32_t)AF_5_STATUS_BCLR<<5 | (uint32_t)AF_6_STATUS_BCLR<<6 | (uint32_t)AF_7_STATUS_BCLR<<7 | (uint32_t)AF_8_STATUS_BCLR<<8 | (uint32_t)AF_9_STATUS_BCLR<<9)
#define Get_ITM_ITM_AF_STATUS_BCLR() p_ITM_IP->ITM_AF_STATUS_BCLR.word
#define Set_ITM_ITM_AF_STATUS_BCLR_word(x) (p_ITM_IP->ITM_AF_STATUS_BCLR.word = x)


//ITM_AF_STATUS_BSET


#define Set_ITM_ITM_AF_STATUS_BSET_AF_0_STATUS_BSET(x) (p_ITM_IP->ITM_AF_STATUS_BSET.ITM_AF_STATUS_BSET_ts.AF_0_STATUS_BSET = x)


#define Set_ITM_ITM_AF_STATUS_BSET_AF_1_STATUS_BSET(x) (p_ITM_IP->ITM_AF_STATUS_BSET.ITM_AF_STATUS_BSET_ts.AF_1_STATUS_BSET = x)


#define Set_ITM_ITM_AF_STATUS_BSET_AF_2_STATUS_BSET(x) (p_ITM_IP->ITM_AF_STATUS_BSET.ITM_AF_STATUS_BSET_ts.AF_2_STATUS_BSET = x)


#define Set_ITM_ITM_AF_STATUS_BSET_AF_3_STATUS_BSET(x) (p_ITM_IP->ITM_AF_STATUS_BSET.ITM_AF_STATUS_BSET_ts.AF_3_STATUS_BSET = x)


#define Set_ITM_ITM_AF_STATUS_BSET_AF_4_STATUS_BSET(x) (p_ITM_IP->ITM_AF_STATUS_BSET.ITM_AF_STATUS_BSET_ts.AF_4_STATUS_BSET = x)


#define Set_ITM_ITM_AF_STATUS_BSET_AF_5_STATUS_BSET(x) (p_ITM_IP->ITM_AF_STATUS_BSET.ITM_AF_STATUS_BSET_ts.AF_5_STATUS_BSET = x)


#define Set_ITM_ITM_AF_STATUS_BSET_AF_6_STATUS_BSET(x) (p_ITM_IP->ITM_AF_STATUS_BSET.ITM_AF_STATUS_BSET_ts.AF_6_STATUS_BSET = x)


#define Set_ITM_ITM_AF_STATUS_BSET_AF_7_STATUS_BSET(x) (p_ITM_IP->ITM_AF_STATUS_BSET.ITM_AF_STATUS_BSET_ts.AF_7_STATUS_BSET = x)


#define Set_ITM_ITM_AF_STATUS_BSET_AF_8_STATUS_BSET(x) (p_ITM_IP->ITM_AF_STATUS_BSET.ITM_AF_STATUS_BSET_ts.AF_8_STATUS_BSET = x)


#define Set_ITM_ITM_AF_STATUS_BSET_AF_9_STATUS_BSET(x) (p_ITM_IP->ITM_AF_STATUS_BSET.ITM_AF_STATUS_BSET_ts.AF_9_STATUS_BSET = x)
#define Set_ITM_ITM_AF_STATUS_BSET(AF_0_STATUS_BSET,AF_1_STATUS_BSET,AF_2_STATUS_BSET,AF_3_STATUS_BSET,AF_4_STATUS_BSET,AF_5_STATUS_BSET,AF_6_STATUS_BSET,AF_7_STATUS_BSET,AF_8_STATUS_BSET,AF_9_STATUS_BSET) (p_ITM_IP->ITM_AF_STATUS_BSET.word = (uint32_t)AF_0_STATUS_BSET<<0 | (uint32_t)AF_1_STATUS_BSET<<1 | (uint32_t)AF_2_STATUS_BSET<<2 | (uint32_t)AF_3_STATUS_BSET<<3 | (uint32_t)AF_4_STATUS_BSET<<4 | (uint32_t)AF_5_STATUS_BSET<<5 | (uint32_t)AF_6_STATUS_BSET<<6 | (uint32_t)AF_7_STATUS_BSET<<7 | (uint32_t)AF_8_STATUS_BSET<<8 | (uint32_t)AF_9_STATUS_BSET<<9)
#define Get_ITM_ITM_AF_STATUS_BSET() p_ITM_IP->ITM_AF_STATUS_BSET.word
#define Set_ITM_ITM_AF_STATUS_BSET_word(x) (p_ITM_IP->ITM_AF_STATUS_BSET.word = x)


//ITM_AF_EN_BCLR


#define Set_ITM_ITM_AF_EN_BCLR_AF_0_EN_BCLR(x) (p_ITM_IP->ITM_AF_EN_BCLR.ITM_AF_EN_BCLR_ts.AF_0_EN_BCLR = x)


#define Set_ITM_ITM_AF_EN_BCLR_AF_1_EN_BCLR(x) (p_ITM_IP->ITM_AF_EN_BCLR.ITM_AF_EN_BCLR_ts.AF_1_EN_BCLR = x)


#define Set_ITM_ITM_AF_EN_BCLR_AF_2_EN_BCLR(x) (p_ITM_IP->ITM_AF_EN_BCLR.ITM_AF_EN_BCLR_ts.AF_2_EN_BCLR = x)


#define Set_ITM_ITM_AF_EN_BCLR_AF_3_EN_BCLR(x) (p_ITM_IP->ITM_AF_EN_BCLR.ITM_AF_EN_BCLR_ts.AF_3_EN_BCLR = x)


#define Set_ITM_ITM_AF_EN_BCLR_AF_4_EN_BCLR(x) (p_ITM_IP->ITM_AF_EN_BCLR.ITM_AF_EN_BCLR_ts.AF_4_EN_BCLR = x)


#define Set_ITM_ITM_AF_EN_BCLR_AF_5_EN_BCLR(x) (p_ITM_IP->ITM_AF_EN_BCLR.ITM_AF_EN_BCLR_ts.AF_5_EN_BCLR = x)


#define Set_ITM_ITM_AF_EN_BCLR_AF_6_EN_BCLR(x) (p_ITM_IP->ITM_AF_EN_BCLR.ITM_AF_EN_BCLR_ts.AF_6_EN_BCLR = x)


#define Set_ITM_ITM_AF_EN_BCLR_AF_7_EN_BCLR(x) (p_ITM_IP->ITM_AF_EN_BCLR.ITM_AF_EN_BCLR_ts.AF_7_EN_BCLR = x)


#define Set_ITM_ITM_AF_EN_BCLR_AF_8_EN_BCLR(x) (p_ITM_IP->ITM_AF_EN_BCLR.ITM_AF_EN_BCLR_ts.AF_8_EN_BCLR = x)


#define Set_ITM_ITM_AF_EN_BCLR_AF_9_EN_BCLR(x) (p_ITM_IP->ITM_AF_EN_BCLR.ITM_AF_EN_BCLR_ts.AF_9_EN_BCLR = x)
#define Set_ITM_ITM_AF_EN_BCLR(AF_0_EN_BCLR,AF_1_EN_BCLR,AF_2_EN_BCLR,AF_3_EN_BCLR,AF_4_EN_BCLR,AF_5_EN_BCLR,AF_6_EN_BCLR,AF_7_EN_BCLR,AF_8_EN_BCLR,AF_9_EN_BCLR) (p_ITM_IP->ITM_AF_EN_BCLR.word = (uint32_t)AF_0_EN_BCLR<<0 | (uint32_t)AF_1_EN_BCLR<<1 | (uint32_t)AF_2_EN_BCLR<<2 | (uint32_t)AF_3_EN_BCLR<<3 | (uint32_t)AF_4_EN_BCLR<<4 | (uint32_t)AF_5_EN_BCLR<<5 | (uint32_t)AF_6_EN_BCLR<<6 | (uint32_t)AF_7_EN_BCLR<<7 | (uint32_t)AF_8_EN_BCLR<<8 | (uint32_t)AF_9_EN_BCLR<<9)
#define Get_ITM_ITM_AF_EN_BCLR() p_ITM_IP->ITM_AF_EN_BCLR.word
#define Set_ITM_ITM_AF_EN_BCLR_word(x) (p_ITM_IP->ITM_AF_EN_BCLR.word = x)


//ITM_AF_EN_BSET


#define Set_ITM_ITM_AF_EN_BSET_AF_0_EN_BSET(x) (p_ITM_IP->ITM_AF_EN_BSET.ITM_AF_EN_BSET_ts.AF_0_EN_BSET = x)


#define Set_ITM_ITM_AF_EN_BSET_AF_1_EN_BSET(x) (p_ITM_IP->ITM_AF_EN_BSET.ITM_AF_EN_BSET_ts.AF_1_EN_BSET = x)


#define Set_ITM_ITM_AF_EN_BSET_AF_2_EN_BSET(x) (p_ITM_IP->ITM_AF_EN_BSET.ITM_AF_EN_BSET_ts.AF_2_EN_BSET = x)


#define Set_ITM_ITM_AF_EN_BSET_AF_3_EN_BSET(x) (p_ITM_IP->ITM_AF_EN_BSET.ITM_AF_EN_BSET_ts.AF_3_EN_BSET = x)


#define Set_ITM_ITM_AF_EN_BSET_AF_4_EN_BSET(x) (p_ITM_IP->ITM_AF_EN_BSET.ITM_AF_EN_BSET_ts.AF_4_EN_BSET = x)


#define Set_ITM_ITM_AF_EN_BSET_AF_5_EN_BSET(x) (p_ITM_IP->ITM_AF_EN_BSET.ITM_AF_EN_BSET_ts.AF_5_EN_BSET = x)


#define Set_ITM_ITM_AF_EN_BSET_AF_6_EN_BSET(x) (p_ITM_IP->ITM_AF_EN_BSET.ITM_AF_EN_BSET_ts.AF_6_EN_BSET = x)


#define Set_ITM_ITM_AF_EN_BSET_AF_7_EN_BSET(x) (p_ITM_IP->ITM_AF_EN_BSET.ITM_AF_EN_BSET_ts.AF_7_EN_BSET = x)


#define Set_ITM_ITM_AF_EN_BSET_AF_8_EN_BSET(x) (p_ITM_IP->ITM_AF_EN_BSET.ITM_AF_EN_BSET_ts.AF_8_EN_BSET = x)


#define Set_ITM_ITM_AF_EN_BSET_AF_9_EN_BSET(x) (p_ITM_IP->ITM_AF_EN_BSET.ITM_AF_EN_BSET_ts.AF_9_EN_BSET = x)
#define Set_ITM_ITM_AF_EN_BSET(AF_0_EN_BSET,AF_1_EN_BSET,AF_2_EN_BSET,AF_3_EN_BSET,AF_4_EN_BSET,AF_5_EN_BSET,AF_6_EN_BSET,AF_7_EN_BSET,AF_8_EN_BSET,AF_9_EN_BSET) (p_ITM_IP->ITM_AF_EN_BSET.word = (uint32_t)AF_0_EN_BSET<<0 | (uint32_t)AF_1_EN_BSET<<1 | (uint32_t)AF_2_EN_BSET<<2 | (uint32_t)AF_3_EN_BSET<<3 | (uint32_t)AF_4_EN_BSET<<4 | (uint32_t)AF_5_EN_BSET<<5 | (uint32_t)AF_6_EN_BSET<<6 | (uint32_t)AF_7_EN_BSET<<7 | (uint32_t)AF_8_EN_BSET<<8 | (uint32_t)AF_9_EN_BSET<<9)
#define Get_ITM_ITM_AF_EN_BSET() p_ITM_IP->ITM_AF_EN_BSET.word
#define Set_ITM_ITM_AF_EN_BSET_word(x) (p_ITM_IP->ITM_AF_EN_BSET.word = x)


//ITM_ARCTIC_STATUS


#define Get_ITM_ITM_ARCTIC_STATUS_ARCTIC_STATUS() p_ITM_IP->ITM_ARCTIC_STATUS.ITM_ARCTIC_STATUS_ts.ARCTIC_STATUS
#define Get_ITM_ITM_ARCTIC_STATUS() p_ITM_IP->ITM_ARCTIC_STATUS.word


//ITM_ARCTIC_EN_STATUS


#define Get_ITM_ITM_ARCTIC_EN_STATUS_ARCTIC_EN_STATUS() p_ITM_IP->ITM_ARCTIC_EN_STATUS.ITM_ARCTIC_EN_STATUS_ts.ARCTIC_EN_STATUS
#define Get_ITM_ITM_ARCTIC_EN_STATUS() p_ITM_IP->ITM_ARCTIC_EN_STATUS.word


//ITM_ARCTIC_STATUS_BCLR


#define Set_ITM_ITM_ARCTIC_STATUS_BCLR_ARCTIC_STATUS_BCLR(x) (p_ITM_IP->ITM_ARCTIC_STATUS_BCLR.ITM_ARCTIC_STATUS_BCLR_ts.ARCTIC_STATUS_BCLR = x)
#define Set_ITM_ITM_ARCTIC_STATUS_BCLR(ARCTIC_STATUS_BCLR) (p_ITM_IP->ITM_ARCTIC_STATUS_BCLR.word = (uint32_t)ARCTIC_STATUS_BCLR<<0)
#define Get_ITM_ITM_ARCTIC_STATUS_BCLR() p_ITM_IP->ITM_ARCTIC_STATUS_BCLR.word
#define Set_ITM_ITM_ARCTIC_STATUS_BCLR_word(x) (p_ITM_IP->ITM_ARCTIC_STATUS_BCLR.word = x)


//ITM_ARCTIC_STATUS_BSET


#define Set_ITM_ITM_ARCTIC_STATUS_BSET_ARCTIC_STATUS_BSET(x) (p_ITM_IP->ITM_ARCTIC_STATUS_BSET.ITM_ARCTIC_STATUS_BSET_ts.ARCTIC_STATUS_BSET = x)
#define Set_ITM_ITM_ARCTIC_STATUS_BSET(ARCTIC_STATUS_BSET) (p_ITM_IP->ITM_ARCTIC_STATUS_BSET.word = (uint32_t)ARCTIC_STATUS_BSET<<0)
#define Get_ITM_ITM_ARCTIC_STATUS_BSET() p_ITM_IP->ITM_ARCTIC_STATUS_BSET.word
#define Set_ITM_ITM_ARCTIC_STATUS_BSET_word(x) (p_ITM_IP->ITM_ARCTIC_STATUS_BSET.word = x)


//ITM_ARCTIC_EN_BCLR


#define Set_ITM_ITM_ARCTIC_EN_BCLR_ARCTIC_EN_BCLR(x) (p_ITM_IP->ITM_ARCTIC_EN_BCLR.ITM_ARCTIC_EN_BCLR_ts.ARCTIC_EN_BCLR = x)
#define Set_ITM_ITM_ARCTIC_EN_BCLR(ARCTIC_EN_BCLR) (p_ITM_IP->ITM_ARCTIC_EN_BCLR.word = (uint32_t)ARCTIC_EN_BCLR<<0)
#define Get_ITM_ITM_ARCTIC_EN_BCLR() p_ITM_IP->ITM_ARCTIC_EN_BCLR.word
#define Set_ITM_ITM_ARCTIC_EN_BCLR_word(x) (p_ITM_IP->ITM_ARCTIC_EN_BCLR.word = x)


//ITM_ARCTIC_EN_BSET


#define Set_ITM_ITM_ARCTIC_EN_BSET_ARCTIC_EN_BSET(x) (p_ITM_IP->ITM_ARCTIC_EN_BSET.ITM_ARCTIC_EN_BSET_ts.ARCTIC_EN_BSET = x)
#define Set_ITM_ITM_ARCTIC_EN_BSET(ARCTIC_EN_BSET) (p_ITM_IP->ITM_ARCTIC_EN_BSET.word = (uint32_t)ARCTIC_EN_BSET<<0)
#define Get_ITM_ITM_ARCTIC_EN_BSET() p_ITM_IP->ITM_ARCTIC_EN_BSET.word
#define Set_ITM_ITM_ARCTIC_EN_BSET_word(x) (p_ITM_IP->ITM_ARCTIC_EN_BSET.word = x)


//ITM_SKIND_STATUS


#define Get_ITM_ITM_SKIND_STATUS_SKIND_STATUS() p_ITM_IP->ITM_SKIND_STATUS.ITM_SKIND_STATUS_ts.SKIND_STATUS
#define Get_ITM_ITM_SKIND_STATUS() p_ITM_IP->ITM_SKIND_STATUS.word


//ITM_SKIND_EN_STATUS


#define Get_ITM_ITM_SKIND_EN_STATUS_SKIND_EN_STATUS() p_ITM_IP->ITM_SKIND_EN_STATUS.ITM_SKIND_EN_STATUS_ts.SKIND_EN_STATUS
#define Get_ITM_ITM_SKIND_EN_STATUS() p_ITM_IP->ITM_SKIND_EN_STATUS.word


//ITM_SKIND_STATUS_BCLR


#define Set_ITM_ITM_SKIND_STATUS_BCLR_SKIND_STATUS_BCLR(x) (p_ITM_IP->ITM_SKIND_STATUS_BCLR.ITM_SKIND_STATUS_BCLR_ts.SKIND_STATUS_BCLR = x)
#define Set_ITM_ITM_SKIND_STATUS_BCLR(SKIND_STATUS_BCLR) (p_ITM_IP->ITM_SKIND_STATUS_BCLR.word = (uint32_t)SKIND_STATUS_BCLR<<0)
#define Get_ITM_ITM_SKIND_STATUS_BCLR() p_ITM_IP->ITM_SKIND_STATUS_BCLR.word
#define Set_ITM_ITM_SKIND_STATUS_BCLR_word(x) (p_ITM_IP->ITM_SKIND_STATUS_BCLR.word = x)


//ITM_SKIND_STATUS_BSET


#define Set_ITM_ITM_SKIND_STATUS_BSET_SKIND_STATUS_BSET(x) (p_ITM_IP->ITM_SKIND_STATUS_BSET.ITM_SKIND_STATUS_BSET_ts.SKIND_STATUS_BSET = x)
#define Set_ITM_ITM_SKIND_STATUS_BSET(SKIND_STATUS_BSET) (p_ITM_IP->ITM_SKIND_STATUS_BSET.word = (uint32_t)SKIND_STATUS_BSET<<0)
#define Get_ITM_ITM_SKIND_STATUS_BSET() p_ITM_IP->ITM_SKIND_STATUS_BSET.word
#define Set_ITM_ITM_SKIND_STATUS_BSET_word(x) (p_ITM_IP->ITM_SKIND_STATUS_BSET.word = x)


//ITM_SKIND_EN_BCLR


#define Set_ITM_ITM_SKIND_EN_BCLR_SKIND_EN_BCLR(x) (p_ITM_IP->ITM_SKIND_EN_BCLR.ITM_SKIND_EN_BCLR_ts.SKIND_EN_BCLR = x)
#define Set_ITM_ITM_SKIND_EN_BCLR(SKIND_EN_BCLR) (p_ITM_IP->ITM_SKIND_EN_BCLR.word = (uint32_t)SKIND_EN_BCLR<<0)
#define Get_ITM_ITM_SKIND_EN_BCLR() p_ITM_IP->ITM_SKIND_EN_BCLR.word
#define Set_ITM_ITM_SKIND_EN_BCLR_word(x) (p_ITM_IP->ITM_SKIND_EN_BCLR.word = x)


//ITM_SKIND_EN_BSET


#define Set_ITM_ITM_SKIND_EN_BSET_SKIND_EN_BSET(x) (p_ITM_IP->ITM_SKIND_EN_BSET.ITM_SKIND_EN_BSET_ts.SKIND_EN_BSET = x)
#define Set_ITM_ITM_SKIND_EN_BSET(SKIND_EN_BSET) (p_ITM_IP->ITM_SKIND_EN_BSET.word = (uint32_t)SKIND_EN_BSET<<0)
#define Get_ITM_ITM_SKIND_EN_BSET() p_ITM_IP->ITM_SKIND_EN_BSET.word
#define Set_ITM_ITM_SKIND_EN_BSET_word(x) (p_ITM_IP->ITM_SKIND_EN_BSET.word = x)


//ITM_VIDPIPE0_STATUS


#define Get_ITM_ITM_VIDPIPE0_STATUS_STATUS() p_ITM_IP->ITM_VIDPIPE0_STATUS.ITM_VIDPIPE0_STATUS_ts.STATUS
#define Get_ITM_ITM_VIDPIPE0_STATUS() p_ITM_IP->ITM_VIDPIPE0_STATUS.word


//ITM_VIDPIPE0_EN_STATUS


#define Get_ITM_ITM_VIDPIPE0_EN_STATUS_EN_STATUS() p_ITM_IP->ITM_VIDPIPE0_EN_STATUS.ITM_VIDPIPE0_EN_STATUS_ts.EN_STATUS
#define Get_ITM_ITM_VIDPIPE0_EN_STATUS() p_ITM_IP->ITM_VIDPIPE0_EN_STATUS.word


//ITM_VIDPIPE0_STATUS_BCLR


#define Set_ITM_ITM_VIDPIPE0_STATUS_BCLR_STATUS_BCLR(x) (p_ITM_IP->ITM_VIDPIPE0_STATUS_BCLR.ITM_VIDPIPE0_STATUS_BCLR_ts.STATUS_BCLR = x)
#define Set_ITM_ITM_VIDPIPE0_STATUS_BCLR(STATUS_BCLR) (p_ITM_IP->ITM_VIDPIPE0_STATUS_BCLR.word = (uint32_t)STATUS_BCLR<<0)
#define Get_ITM_ITM_VIDPIPE0_STATUS_BCLR() p_ITM_IP->ITM_VIDPIPE0_STATUS_BCLR.word
#define Set_ITM_ITM_VIDPIPE0_STATUS_BCLR_word(x) (p_ITM_IP->ITM_VIDPIPE0_STATUS_BCLR.word = x)


//ITM_VIDPIPE0_STATUS_BSET


#define Set_ITM_ITM_VIDPIPE0_STATUS_BSET_STATUS_BSET(x) (p_ITM_IP->ITM_VIDPIPE0_STATUS_BSET.ITM_VIDPIPE0_STATUS_BSET_ts.STATUS_BSET = x)
#define Set_ITM_ITM_VIDPIPE0_STATUS_BSET(STATUS_BSET) (p_ITM_IP->ITM_VIDPIPE0_STATUS_BSET.word = (uint32_t)STATUS_BSET<<0)
#define Get_ITM_ITM_VIDPIPE0_STATUS_BSET() p_ITM_IP->ITM_VIDPIPE0_STATUS_BSET.word
#define Set_ITM_ITM_VIDPIPE0_STATUS_BSET_word(x) (p_ITM_IP->ITM_VIDPIPE0_STATUS_BSET.word = x)


//ITM_VIDPIPE0_EN_BCLR


#define Set_ITM_ITM_VIDPIPE0_EN_BCLR_EN_BCLR(x) (p_ITM_IP->ITM_VIDPIPE0_EN_BCLR.ITM_VIDPIPE0_EN_BCLR_ts.EN_BCLR = x)
#define Set_ITM_ITM_VIDPIPE0_EN_BCLR(EN_BCLR) (p_ITM_IP->ITM_VIDPIPE0_EN_BCLR.word = (uint32_t)EN_BCLR<<0)
#define Get_ITM_ITM_VIDPIPE0_EN_BCLR() p_ITM_IP->ITM_VIDPIPE0_EN_BCLR.word
#define Set_ITM_ITM_VIDPIPE0_EN_BCLR_word(x) (p_ITM_IP->ITM_VIDPIPE0_EN_BCLR.word = x)


//ITM_VIDPIPE0_EN_BSET


#define Set_ITM_ITM_VIDPIPE0_EN_BSET_EN_BSET(x) (p_ITM_IP->ITM_VIDPIPE0_EN_BSET.ITM_VIDPIPE0_EN_BSET_ts.EN_BSET = x)
#define Set_ITM_ITM_VIDPIPE0_EN_BSET(EN_BSET) (p_ITM_IP->ITM_VIDPIPE0_EN_BSET.word = (uint32_t)EN_BSET<<0)
#define Get_ITM_ITM_VIDPIPE0_EN_BSET() p_ITM_IP->ITM_VIDPIPE0_EN_BSET.word
#define Set_ITM_ITM_VIDPIPE0_EN_BSET_word(x) (p_ITM_IP->ITM_VIDPIPE0_EN_BSET.word = x)


//ITM_VIDPIPE1_STATUS


#define Get_ITM_ITM_VIDPIPE1_STATUS_STATUS() p_ITM_IP->ITM_VIDPIPE1_STATUS.ITM_VIDPIPE1_STATUS_ts.STATUS
#define Get_ITM_ITM_VIDPIPE1_STATUS() p_ITM_IP->ITM_VIDPIPE1_STATUS.word


//ITM_VIDPIPE1_EN_STATUS


#define Get_ITM_ITM_VIDPIPE1_EN_STATUS_EN_STATUS() p_ITM_IP->ITM_VIDPIPE1_EN_STATUS.ITM_VIDPIPE1_EN_STATUS_ts.EN_STATUS
#define Get_ITM_ITM_VIDPIPE1_EN_STATUS() p_ITM_IP->ITM_VIDPIPE1_EN_STATUS.word


//ITM_VIDPIPE1_STATUS_BCLR


#define Set_ITM_ITM_VIDPIPE1_STATUS_BCLR_STATUS_BCLR(x) (p_ITM_IP->ITM_VIDPIPE1_STATUS_BCLR.ITM_VIDPIPE1_STATUS_BCLR_ts.STATUS_BCLR = x)
#define Set_ITM_ITM_VIDPIPE1_STATUS_BCLR(STATUS_BCLR) (p_ITM_IP->ITM_VIDPIPE1_STATUS_BCLR.word = (uint32_t)STATUS_BCLR<<0)
#define Get_ITM_ITM_VIDPIPE1_STATUS_BCLR() p_ITM_IP->ITM_VIDPIPE1_STATUS_BCLR.word
#define Set_ITM_ITM_VIDPIPE1_STATUS_BCLR_word(x) (p_ITM_IP->ITM_VIDPIPE1_STATUS_BCLR.word = x)


//ITM_VIDPIPE1_STATUS_BSET


#define Set_ITM_ITM_VIDPIPE1_STATUS_BSET_STATUS_BSET(x) (p_ITM_IP->ITM_VIDPIPE1_STATUS_BSET.ITM_VIDPIPE1_STATUS_BSET_ts.STATUS_BSET = x)
#define Set_ITM_ITM_VIDPIPE1_STATUS_BSET(STATUS_BSET) (p_ITM_IP->ITM_VIDPIPE1_STATUS_BSET.word = (uint32_t)STATUS_BSET<<0)
#define Get_ITM_ITM_VIDPIPE1_STATUS_BSET() p_ITM_IP->ITM_VIDPIPE1_STATUS_BSET.word
#define Set_ITM_ITM_VIDPIPE1_STATUS_BSET_word(x) (p_ITM_IP->ITM_VIDPIPE1_STATUS_BSET.word = x)


//ITM_VIDPIPE1_EN_BCLR


#define Set_ITM_ITM_VIDPIPE1_EN_BCLR_EN_BCLR(x) (p_ITM_IP->ITM_VIDPIPE1_EN_BCLR.ITM_VIDPIPE1_EN_BCLR_ts.EN_BCLR = x)
#define Set_ITM_ITM_VIDPIPE1_EN_BCLR(EN_BCLR) (p_ITM_IP->ITM_VIDPIPE1_EN_BCLR.word = (uint32_t)EN_BCLR<<0)
#define Get_ITM_ITM_VIDPIPE1_EN_BCLR() p_ITM_IP->ITM_VIDPIPE1_EN_BCLR.word
#define Set_ITM_ITM_VIDPIPE1_EN_BCLR_word(x) (p_ITM_IP->ITM_VIDPIPE1_EN_BCLR.word = x)


//ITM_VIDPIPE1_EN_BSET


#define Set_ITM_ITM_VIDPIPE1_EN_BSET_EN_BSET(x) (p_ITM_IP->ITM_VIDPIPE1_EN_BSET.ITM_VIDPIPE1_EN_BSET_ts.EN_BSET = x)
#define Set_ITM_ITM_VIDPIPE1_EN_BSET(EN_BSET) (p_ITM_IP->ITM_VIDPIPE1_EN_BSET.word = (uint32_t)EN_BSET<<0)
#define Get_ITM_ITM_VIDPIPE1_EN_BSET() p_ITM_IP->ITM_VIDPIPE1_EN_BSET.word
#define Set_ITM_ITM_VIDPIPE1_EN_BSET_word(x) (p_ITM_IP->ITM_VIDPIPE1_EN_BSET.word = x)


//ITM_SMIARX_STATUS


#define Get_ITM_ITM_SMIARX_STATUS_SMIARX_0_STATUS() p_ITM_IP->ITM_SMIARX_STATUS.ITM_SMIARX_STATUS_ts.SMIARX_0_STATUS


#define Get_ITM_ITM_SMIARX_STATUS_SMIARX_1_STATUS() p_ITM_IP->ITM_SMIARX_STATUS.ITM_SMIARX_STATUS_ts.SMIARX_1_STATUS


#define Get_ITM_ITM_SMIARX_STATUS_SMIARX_2_STATUS() p_ITM_IP->ITM_SMIARX_STATUS.ITM_SMIARX_STATUS_ts.SMIARX_2_STATUS


#define Get_ITM_ITM_SMIARX_STATUS_SMIARX_3_STATUS() p_ITM_IP->ITM_SMIARX_STATUS.ITM_SMIARX_STATUS_ts.SMIARX_3_STATUS


#define Get_ITM_ITM_SMIARX_STATUS_SMIARX_4_STATUS() p_ITM_IP->ITM_SMIARX_STATUS.ITM_SMIARX_STATUS_ts.SMIARX_4_STATUS
#define Get_ITM_ITM_SMIARX_STATUS() p_ITM_IP->ITM_SMIARX_STATUS.word


//ITM_SMIARX_EN_STATUS


#define Get_ITM_ITM_SMIARX_EN_STATUS_SMIARX_0_EN_STATUS() p_ITM_IP->ITM_SMIARX_EN_STATUS.ITM_SMIARX_EN_STATUS_ts.SMIARX_0_EN_STATUS


#define Get_ITM_ITM_SMIARX_EN_STATUS_SMIARX_1_EN_STATUS() p_ITM_IP->ITM_SMIARX_EN_STATUS.ITM_SMIARX_EN_STATUS_ts.SMIARX_1_EN_STATUS


#define Get_ITM_ITM_SMIARX_EN_STATUS_SMIARX_2_EN_STATUS() p_ITM_IP->ITM_SMIARX_EN_STATUS.ITM_SMIARX_EN_STATUS_ts.SMIARX_2_EN_STATUS


#define Get_ITM_ITM_SMIARX_EN_STATUS_SMIARX_3_EN_STATUS() p_ITM_IP->ITM_SMIARX_EN_STATUS.ITM_SMIARX_EN_STATUS_ts.SMIARX_3_EN_STATUS


#define Get_ITM_ITM_SMIARX_EN_STATUS_SMIARX_4_EN_STATUS() p_ITM_IP->ITM_SMIARX_EN_STATUS.ITM_SMIARX_EN_STATUS_ts.SMIARX_4_EN_STATUS
#define Get_ITM_ITM_SMIARX_EN_STATUS() p_ITM_IP->ITM_SMIARX_EN_STATUS.word


//ITM_SMIARX_STATUS_BCLR


#define Set_ITM_ITM_SMIARX_STATUS_BCLR_SMIARX_0_STATUS_BCLR(x) (p_ITM_IP->ITM_SMIARX_STATUS_BCLR.ITM_SMIARX_STATUS_BCLR_ts.SMIARX_0_STATUS_BCLR = x)


#define Set_ITM_ITM_SMIARX_STATUS_BCLR_SMIARX_1_STATUS_BCLR(x) (p_ITM_IP->ITM_SMIARX_STATUS_BCLR.ITM_SMIARX_STATUS_BCLR_ts.SMIARX_1_STATUS_BCLR = x)


#define Set_ITM_ITM_SMIARX_STATUS_BCLR_SMIARX_2_STATUS_BCLR(x) (p_ITM_IP->ITM_SMIARX_STATUS_BCLR.ITM_SMIARX_STATUS_BCLR_ts.SMIARX_2_STATUS_BCLR = x)


#define Set_ITM_ITM_SMIARX_STATUS_BCLR_SMIARX_3_STATUS_BCLR(x) (p_ITM_IP->ITM_SMIARX_STATUS_BCLR.ITM_SMIARX_STATUS_BCLR_ts.SMIARX_3_STATUS_BCLR = x)


#define Set_ITM_ITM_SMIARX_STATUS_BCLR_SMIARX_4_STATUS_BCLR(x) (p_ITM_IP->ITM_SMIARX_STATUS_BCLR.ITM_SMIARX_STATUS_BCLR_ts.SMIARX_4_STATUS_BCLR = x)
#define Set_ITM_ITM_SMIARX_STATUS_BCLR(SMIARX_0_STATUS_BCLR,SMIARX_1_STATUS_BCLR,SMIARX_2_STATUS_BCLR,SMIARX_3_STATUS_BCLR,SMIARX_4_STATUS_BCLR) (p_ITM_IP->ITM_SMIARX_STATUS_BCLR.word = (uint32_t)SMIARX_0_STATUS_BCLR<<0 | (uint32_t)SMIARX_1_STATUS_BCLR<<1 | (uint32_t)SMIARX_2_STATUS_BCLR<<2 | (uint32_t)SMIARX_3_STATUS_BCLR<<3 | (uint32_t)SMIARX_4_STATUS_BCLR<<4)
#define Get_ITM_ITM_SMIARX_STATUS_BCLR() p_ITM_IP->ITM_SMIARX_STATUS_BCLR.word
#define Set_ITM_ITM_SMIARX_STATUS_BCLR_word(x) (p_ITM_IP->ITM_SMIARX_STATUS_BCLR.word = x)


//ITM_SMIARX_STATUS_BSET


#define Set_ITM_ITM_SMIARX_STATUS_BSET_SMIARX_0_STATUS_BSET(x) (p_ITM_IP->ITM_SMIARX_STATUS_BSET.ITM_SMIARX_STATUS_BSET_ts.SMIARX_0_STATUS_BSET = x)


#define Set_ITM_ITM_SMIARX_STATUS_BSET_SMIARX_1_STATUS_BSET(x) (p_ITM_IP->ITM_SMIARX_STATUS_BSET.ITM_SMIARX_STATUS_BSET_ts.SMIARX_1_STATUS_BSET = x)


#define Set_ITM_ITM_SMIARX_STATUS_BSET_SMIARX_2_STATUS_BSET(x) (p_ITM_IP->ITM_SMIARX_STATUS_BSET.ITM_SMIARX_STATUS_BSET_ts.SMIARX_2_STATUS_BSET = x)


#define Set_ITM_ITM_SMIARX_STATUS_BSET_SMIARX_3_STATUS_BSET(x) (p_ITM_IP->ITM_SMIARX_STATUS_BSET.ITM_SMIARX_STATUS_BSET_ts.SMIARX_3_STATUS_BSET = x)


#define Set_ITM_ITM_SMIARX_STATUS_BSET_SMIARX_4_STATUS_BSET(x) (p_ITM_IP->ITM_SMIARX_STATUS_BSET.ITM_SMIARX_STATUS_BSET_ts.SMIARX_4_STATUS_BSET = x)
#define Set_ITM_ITM_SMIARX_STATUS_BSET(SMIARX_0_STATUS_BSET,SMIARX_1_STATUS_BSET,SMIARX_2_STATUS_BSET,SMIARX_3_STATUS_BSET,SMIARX_4_STATUS_BSET) (p_ITM_IP->ITM_SMIARX_STATUS_BSET.word = (uint32_t)SMIARX_0_STATUS_BSET<<0 | (uint32_t)SMIARX_1_STATUS_BSET<<1 | (uint32_t)SMIARX_2_STATUS_BSET<<2 | (uint32_t)SMIARX_3_STATUS_BSET<<3 | (uint32_t)SMIARX_4_STATUS_BSET<<4)
#define Get_ITM_ITM_SMIARX_STATUS_BSET() p_ITM_IP->ITM_SMIARX_STATUS_BSET.word
#define Set_ITM_ITM_SMIARX_STATUS_BSET_word(x) (p_ITM_IP->ITM_SMIARX_STATUS_BSET.word = x)


//ITM_SMIARX_EN_BCLR


#define Set_ITM_ITM_SMIARX_EN_BCLR_SMIARX_0_EN_BCLR(x) (p_ITM_IP->ITM_SMIARX_EN_BCLR.ITM_SMIARX_EN_BCLR_ts.SMIARX_0_EN_BCLR = x)


#define Set_ITM_ITM_SMIARX_EN_BCLR_SMIARX_1_EN_BCLR(x) (p_ITM_IP->ITM_SMIARX_EN_BCLR.ITM_SMIARX_EN_BCLR_ts.SMIARX_1_EN_BCLR = x)


#define Set_ITM_ITM_SMIARX_EN_BCLR_SMIARX_2_EN_BCLR(x) (p_ITM_IP->ITM_SMIARX_EN_BCLR.ITM_SMIARX_EN_BCLR_ts.SMIARX_2_EN_BCLR = x)


#define Set_ITM_ITM_SMIARX_EN_BCLR_SMIARX_3_EN_BCLR(x) (p_ITM_IP->ITM_SMIARX_EN_BCLR.ITM_SMIARX_EN_BCLR_ts.SMIARX_3_EN_BCLR = x)


#define Set_ITM_ITM_SMIARX_EN_BCLR_SMIARX_4_EN_BCLR(x) (p_ITM_IP->ITM_SMIARX_EN_BCLR.ITM_SMIARX_EN_BCLR_ts.SMIARX_4_EN_BCLR = x)
#define Set_ITM_ITM_SMIARX_EN_BCLR(SMIARX_0_EN_BCLR,SMIARX_1_EN_BCLR,SMIARX_2_EN_BCLR,SMIARX_3_EN_BCLR,SMIARX_4_EN_BCLR) (p_ITM_IP->ITM_SMIARX_EN_BCLR.word = (uint32_t)SMIARX_0_EN_BCLR<<0 | (uint32_t)SMIARX_1_EN_BCLR<<1 | (uint32_t)SMIARX_2_EN_BCLR<<2 | (uint32_t)SMIARX_3_EN_BCLR<<3 | (uint32_t)SMIARX_4_EN_BCLR<<4)
#define Get_ITM_ITM_SMIARX_EN_BCLR() p_ITM_IP->ITM_SMIARX_EN_BCLR.word
#define Set_ITM_ITM_SMIARX_EN_BCLR_word(x) (p_ITM_IP->ITM_SMIARX_EN_BCLR.word = x)


//ITM_SMIARX_EN_BSET


#define Set_ITM_ITM_SMIARX_EN_BSET_SMIARX_0_EN_BSET(x) (p_ITM_IP->ITM_SMIARX_EN_BSET.ITM_SMIARX_EN_BSET_ts.SMIARX_0_EN_BSET = x)


#define Set_ITM_ITM_SMIARX_EN_BSET_SMIARX_1_EN_BSET(x) (p_ITM_IP->ITM_SMIARX_EN_BSET.ITM_SMIARX_EN_BSET_ts.SMIARX_1_EN_BSET = x)


#define Set_ITM_ITM_SMIARX_EN_BSET_SMIARX_2_EN_BSET(x) (p_ITM_IP->ITM_SMIARX_EN_BSET.ITM_SMIARX_EN_BSET_ts.SMIARX_2_EN_BSET = x)


#define Set_ITM_ITM_SMIARX_EN_BSET_SMIARX_3_EN_BSET(x) (p_ITM_IP->ITM_SMIARX_EN_BSET.ITM_SMIARX_EN_BSET_ts.SMIARX_3_EN_BSET = x)


#define Set_ITM_ITM_SMIARX_EN_BSET_SMIARX_4_EN_BSET(x) (p_ITM_IP->ITM_SMIARX_EN_BSET.ITM_SMIARX_EN_BSET_ts.SMIARX_4_EN_BSET = x)
#define Set_ITM_ITM_SMIARX_EN_BSET(SMIARX_0_EN_BSET,SMIARX_1_EN_BSET,SMIARX_2_EN_BSET,SMIARX_3_EN_BSET,SMIARX_4_EN_BSET) (p_ITM_IP->ITM_SMIARX_EN_BSET.word = (uint32_t)SMIARX_0_EN_BSET<<0 | (uint32_t)SMIARX_1_EN_BSET<<1 | (uint32_t)SMIARX_2_EN_BSET<<2 | (uint32_t)SMIARX_3_EN_BSET<<3 | (uint32_t)SMIARX_4_EN_BSET<<4)
#define Get_ITM_ITM_SMIARX_EN_BSET() p_ITM_IP->ITM_SMIARX_EN_BSET.word
#define Set_ITM_ITM_SMIARX_EN_BSET_word(x) (p_ITM_IP->ITM_SMIARX_EN_BSET.word = x)


//ITM_LBE_STATUS


#define Get_ITM_ITM_LBE_STATUS_LBE_STATUS() p_ITM_IP->ITM_LBE_STATUS.ITM_LBE_STATUS_ts.LBE_STATUS
#define Get_ITM_ITM_LBE_STATUS() p_ITM_IP->ITM_LBE_STATUS.word


//ITM_LBE_EN_STATUS


#define Get_ITM_ITM_LBE_EN_STATUS_LBE_EN_STATUS() p_ITM_IP->ITM_LBE_EN_STATUS.ITM_LBE_EN_STATUS_ts.LBE_EN_STATUS
#define Get_ITM_ITM_LBE_EN_STATUS() p_ITM_IP->ITM_LBE_EN_STATUS.word


//ITM_LBE_STATUS_BCLR


#define Set_ITM_ITM_LBE_STATUS_BCLR_LBE_STATUS_BCLR(x) (p_ITM_IP->ITM_LBE_STATUS_BCLR.ITM_LBE_STATUS_BCLR_ts.LBE_STATUS_BCLR = x)
#define Set_ITM_ITM_LBE_STATUS_BCLR(LBE_STATUS_BCLR) (p_ITM_IP->ITM_LBE_STATUS_BCLR.word = (uint32_t)LBE_STATUS_BCLR<<0)
#define Get_ITM_ITM_LBE_STATUS_BCLR() p_ITM_IP->ITM_LBE_STATUS_BCLR.word
#define Set_ITM_ITM_LBE_STATUS_BCLR_word(x) (p_ITM_IP->ITM_LBE_STATUS_BCLR.word = x)


//ITM_LBE_STATUS_BSET


#define Set_ITM_ITM_LBE_STATUS_BSET_LBE_STATUS_BSET(x) (p_ITM_IP->ITM_LBE_STATUS_BSET.ITM_LBE_STATUS_BSET_ts.LBE_STATUS_BSET = x)
#define Set_ITM_ITM_LBE_STATUS_BSET(LBE_STATUS_BSET) (p_ITM_IP->ITM_LBE_STATUS_BSET.word = (uint32_t)LBE_STATUS_BSET<<0)
#define Get_ITM_ITM_LBE_STATUS_BSET() p_ITM_IP->ITM_LBE_STATUS_BSET.word
#define Set_ITM_ITM_LBE_STATUS_BSET_word(x) (p_ITM_IP->ITM_LBE_STATUS_BSET.word = x)


//ITM_LBE_EN_BCLR


#define Set_ITM_ITM_LBE_EN_BCLR_LBE_EN_BCLR(x) (p_ITM_IP->ITM_LBE_EN_BCLR.ITM_LBE_EN_BCLR_ts.LBE_EN_BCLR = x)
#define Set_ITM_ITM_LBE_EN_BCLR(LBE_EN_BCLR) (p_ITM_IP->ITM_LBE_EN_BCLR.word = (uint32_t)LBE_EN_BCLR<<0)
#define Get_ITM_ITM_LBE_EN_BCLR() p_ITM_IP->ITM_LBE_EN_BCLR.word
#define Set_ITM_ITM_LBE_EN_BCLR_word(x) (p_ITM_IP->ITM_LBE_EN_BCLR.word = x)


//ITM_LBE_EN_BSET


#define Set_ITM_ITM_LBE_EN_BSET_LBE_EN_BSET(x) (p_ITM_IP->ITM_LBE_EN_BSET.ITM_LBE_EN_BSET_ts.LBE_EN_BSET = x)
#define Set_ITM_ITM_LBE_EN_BSET(LBE_EN_BSET) (p_ITM_IP->ITM_LBE_EN_BSET.word = (uint32_t)LBE_EN_BSET<<0)
#define Get_ITM_ITM_LBE_EN_BSET() p_ITM_IP->ITM_LBE_EN_BSET.word
#define Set_ITM_ITM_LBE_EN_BSET_word(x) (p_ITM_IP->ITM_LBE_EN_BSET.word = x)


//ITM_MCCI_STATUS


#define Get_ITM_ITM_MCCI_STATUS_MCCI_EOP_STATUS() p_ITM_IP->ITM_MCCI_STATUS.ITM_MCCI_STATUS_ts.MCCI_EOP_STATUS


#define Get_ITM_ITM_MCCI_STATUS_MCCI_ERROR_STATUS() p_ITM_IP->ITM_MCCI_STATUS.ITM_MCCI_STATUS_ts.MCCI_ERROR_STATUS
#define Get_ITM_ITM_MCCI_STATUS() p_ITM_IP->ITM_MCCI_STATUS.word


//ITM_MCCI_EN_STATUS


#define Get_ITM_ITM_MCCI_EN_STATUS_MCCI_EOP_EN_STATUS() p_ITM_IP->ITM_MCCI_EN_STATUS.ITM_MCCI_EN_STATUS_ts.MCCI_EOP_EN_STATUS


#define Get_ITM_ITM_MCCI_EN_STATUS_MCCI_ERROR_EN_STATUS() p_ITM_IP->ITM_MCCI_EN_STATUS.ITM_MCCI_EN_STATUS_ts.MCCI_ERROR_EN_STATUS
#define Get_ITM_ITM_MCCI_EN_STATUS() p_ITM_IP->ITM_MCCI_EN_STATUS.word


//ITM_MCCI_STATUS_BCLR


#define Set_ITM_ITM_MCCI_STATUS_BCLR_MCCI_EOP_STATUS_BCLR(x) (p_ITM_IP->ITM_MCCI_STATUS_BCLR.ITM_MCCI_STATUS_BCLR_ts.MCCI_EOP_STATUS_BCLR = x)


#define Set_ITM_ITM_MCCI_STATUS_BCLR_MCCI_ERROR_STATUS_BCLR(x) (p_ITM_IP->ITM_MCCI_STATUS_BCLR.ITM_MCCI_STATUS_BCLR_ts.MCCI_ERROR_STATUS_BCLR = x)
#define Set_ITM_ITM_MCCI_STATUS_BCLR(MCCI_EOP_STATUS_BCLR,MCCI_ERROR_STATUS_BCLR) (p_ITM_IP->ITM_MCCI_STATUS_BCLR.word = (uint32_t)MCCI_EOP_STATUS_BCLR<<0 | (uint32_t)MCCI_ERROR_STATUS_BCLR<<1)
#define Get_ITM_ITM_MCCI_STATUS_BCLR() p_ITM_IP->ITM_MCCI_STATUS_BCLR.word
#define Set_ITM_ITM_MCCI_STATUS_BCLR_word(x) (p_ITM_IP->ITM_MCCI_STATUS_BCLR.word = x)


//ITM_MCCI_STATUS_BSET


#define Set_ITM_ITM_MCCI_STATUS_BSET_MCCI_EOP_STATUS_BSET(x) (p_ITM_IP->ITM_MCCI_STATUS_BSET.ITM_MCCI_STATUS_BSET_ts.MCCI_EOP_STATUS_BSET = x)


#define Set_ITM_ITM_MCCI_STATUS_BSET_MCCI_ERROR_STATUS_BSET(x) (p_ITM_IP->ITM_MCCI_STATUS_BSET.ITM_MCCI_STATUS_BSET_ts.MCCI_ERROR_STATUS_BSET = x)
#define Set_ITM_ITM_MCCI_STATUS_BSET(MCCI_EOP_STATUS_BSET,MCCI_ERROR_STATUS_BSET) (p_ITM_IP->ITM_MCCI_STATUS_BSET.word = (uint32_t)MCCI_EOP_STATUS_BSET<<0 | (uint32_t)MCCI_ERROR_STATUS_BSET<<1)
#define Get_ITM_ITM_MCCI_STATUS_BSET() p_ITM_IP->ITM_MCCI_STATUS_BSET.word
#define Set_ITM_ITM_MCCI_STATUS_BSET_word(x) (p_ITM_IP->ITM_MCCI_STATUS_BSET.word = x)


//ITM_MCCI_EN_BCLR


#define Set_ITM_ITM_MCCI_EN_BCLR_MCCI_EOP_EN_BCLR(x) (p_ITM_IP->ITM_MCCI_EN_BCLR.ITM_MCCI_EN_BCLR_ts.MCCI_EOP_EN_BCLR = x)


#define Set_ITM_ITM_MCCI_EN_BCLR_MCCI_ERROR_EN_BCLR(x) (p_ITM_IP->ITM_MCCI_EN_BCLR.ITM_MCCI_EN_BCLR_ts.MCCI_ERROR_EN_BCLR = x)
#define Set_ITM_ITM_MCCI_EN_BCLR(MCCI_EOP_EN_BCLR,MCCI_ERROR_EN_BCLR) (p_ITM_IP->ITM_MCCI_EN_BCLR.word = (uint32_t)MCCI_EOP_EN_BCLR<<0 | (uint32_t)MCCI_ERROR_EN_BCLR<<1)
#define Get_ITM_ITM_MCCI_EN_BCLR() p_ITM_IP->ITM_MCCI_EN_BCLR.word
#define Set_ITM_ITM_MCCI_EN_BCLR_word(x) (p_ITM_IP->ITM_MCCI_EN_BCLR.word = x)


//ITM_MCCI_EN_BSET


#define Set_ITM_ITM_MCCI_EN_BSET_MCCI_EOP_EN_BSET(x) (p_ITM_IP->ITM_MCCI_EN_BSET.ITM_MCCI_EN_BSET_ts.MCCI_EOP_EN_BSET = x)


#define Set_ITM_ITM_MCCI_EN_BSET_MCCI_ERROR_EN_BSET(x) (p_ITM_IP->ITM_MCCI_EN_BSET.ITM_MCCI_EN_BSET_ts.MCCI_ERROR_EN_BSET = x)
#define Set_ITM_ITM_MCCI_EN_BSET(MCCI_EOP_EN_BSET,MCCI_ERROR_EN_BSET) (p_ITM_IP->ITM_MCCI_EN_BSET.word = (uint32_t)MCCI_EOP_EN_BSET<<0 | (uint32_t)MCCI_ERROR_EN_BSET<<1)
#define Get_ITM_ITM_MCCI_EN_BSET() p_ITM_IP->ITM_MCCI_EN_BSET.word
#define Set_ITM_ITM_MCCI_EN_BSET_word(x) (p_ITM_IP->ITM_MCCI_EN_BSET.word = x)


//ITM_HCOM_STATUS


#define Get_ITM_ITM_HCOM_STATUS_HCOM_STATUS() p_ITM_IP->ITM_HCOM_STATUS.ITM_HCOM_STATUS_ts.HCOM_STATUS
#define Get_ITM_ITM_HCOM_STATUS() p_ITM_IP->ITM_HCOM_STATUS.word


//ITM_HCOM_EN_STATUS


#define Get_ITM_ITM_HCOM_EN_STATUS_HCOM_EN_STATUS() p_ITM_IP->ITM_HCOM_EN_STATUS.ITM_HCOM_EN_STATUS_ts.HCOM_EN_STATUS
#define Get_ITM_ITM_HCOM_EN_STATUS() p_ITM_IP->ITM_HCOM_EN_STATUS.word


//ITM_HCOM_STATUS_BCLR


#define Set_ITM_ITM_HCOM_STATUS_BCLR_HCOM_STATUS_BCLR(x) (p_ITM_IP->ITM_HCOM_STATUS_BCLR.ITM_HCOM_STATUS_BCLR_ts.HCOM_STATUS_BCLR = x)
#define Set_ITM_ITM_HCOM_STATUS_BCLR(HCOM_STATUS_BCLR) (p_ITM_IP->ITM_HCOM_STATUS_BCLR.word = (uint32_t)HCOM_STATUS_BCLR<<0)
#define Get_ITM_ITM_HCOM_STATUS_BCLR() p_ITM_IP->ITM_HCOM_STATUS_BCLR.word
#define Set_ITM_ITM_HCOM_STATUS_BCLR_word(x) (p_ITM_IP->ITM_HCOM_STATUS_BCLR.word = x)


//ITM_HCOM_STATUS_BSET


#define Set_ITM_ITM_HCOM_STATUS_BSET_HCOM_STATUS_BSET(x) (p_ITM_IP->ITM_HCOM_STATUS_BSET.ITM_HCOM_STATUS_BSET_ts.HCOM_STATUS_BSET = x)
#define Set_ITM_ITM_HCOM_STATUS_BSET(HCOM_STATUS_BSET) (p_ITM_IP->ITM_HCOM_STATUS_BSET.word = (uint32_t)HCOM_STATUS_BSET<<0)
#define Get_ITM_ITM_HCOM_STATUS_BSET() p_ITM_IP->ITM_HCOM_STATUS_BSET.word
#define Set_ITM_ITM_HCOM_STATUS_BSET_word(x) (p_ITM_IP->ITM_HCOM_STATUS_BSET.word = x)


//ITM_HCOM_EN_BCLR


#define Set_ITM_ITM_HCOM_EN_BCLR_HCOM_EN_BCLR(x) (p_ITM_IP->ITM_HCOM_EN_BCLR.ITM_HCOM_EN_BCLR_ts.HCOM_EN_BCLR = x)
#define Set_ITM_ITM_HCOM_EN_BCLR(HCOM_EN_BCLR) (p_ITM_IP->ITM_HCOM_EN_BCLR.word = (uint32_t)HCOM_EN_BCLR<<0)
#define Get_ITM_ITM_HCOM_EN_BCLR() p_ITM_IP->ITM_HCOM_EN_BCLR.word
#define Set_ITM_ITM_HCOM_EN_BCLR_word(x) (p_ITM_IP->ITM_HCOM_EN_BCLR.word = x)


//ITM_HCOM_EN_BSET


#define Set_ITM_ITM_HCOM_EN_BSET_HCOM_EN_BSET(x) (p_ITM_IP->ITM_HCOM_EN_BSET.ITM_HCOM_EN_BSET_ts.HCOM_EN_BSET = x)
#define Set_ITM_ITM_HCOM_EN_BSET(HCOM_EN_BSET) (p_ITM_IP->ITM_HCOM_EN_BSET.word = (uint32_t)HCOM_EN_BSET<<0)
#define Get_ITM_ITM_HCOM_EN_BSET() p_ITM_IP->ITM_HCOM_EN_BSET.word
#define Set_ITM_ITM_HCOM_EN_BSET_word(x) (p_ITM_IP->ITM_HCOM_EN_BSET.word = x)


//ITM_REPIPE_STATUS


#define Get_ITM_ITM_REPIPE_STATUS_RE_IN_STATUS() p_ITM_IP->ITM_REPIPE_STATUS.ITM_REPIPE_STATUS_ts.RE_IN_STATUS


#define Get_ITM_ITM_REPIPE_STATUS_RE_POSTGAIN_STATUS() p_ITM_IP->ITM_REPIPE_STATUS.ITM_REPIPE_STATUS_ts.RE_POSTGAIN_STATUS


#define Get_ITM_ITM_REPIPE_STATUS_RE_OUT_STORE_STATUS() p_ITM_IP->ITM_REPIPE_STATUS.ITM_REPIPE_STATUS_ts.RE_OUT_STORE_STATUS
#define Get_ITM_ITM_REPIPE_STATUS() p_ITM_IP->ITM_REPIPE_STATUS.word


//ITM_REPIPE_EN_STATUS


#define Get_ITM_ITM_REPIPE_EN_STATUS_RE_IN_EN_STATUS() p_ITM_IP->ITM_REPIPE_EN_STATUS.ITM_REPIPE_EN_STATUS_ts.RE_IN_EN_STATUS


#define Get_ITM_ITM_REPIPE_EN_STATUS_RE_POSTGAIN_EN_STATUS() p_ITM_IP->ITM_REPIPE_EN_STATUS.ITM_REPIPE_EN_STATUS_ts.RE_POSTGAIN_EN_STATUS


#define Get_ITM_ITM_REPIPE_EN_STATUS_RE_OUT_STORE_EN_STATUS() p_ITM_IP->ITM_REPIPE_EN_STATUS.ITM_REPIPE_EN_STATUS_ts.RE_OUT_STORE_EN_STATUS
#define Get_ITM_ITM_REPIPE_EN_STATUS() p_ITM_IP->ITM_REPIPE_EN_STATUS.word


//ITM_REPIPE_STATUS_BCLR


#define Set_ITM_ITM_REPIPE_STATUS_BCLR_RE_IN_STATUS_BCLR(x) (p_ITM_IP->ITM_REPIPE_STATUS_BCLR.ITM_REPIPE_STATUS_BCLR_ts.RE_IN_STATUS_BCLR = x)


#define Set_ITM_ITM_REPIPE_STATUS_BCLR_RE_POSTGAIN_STATUS_BCLR(x) (p_ITM_IP->ITM_REPIPE_STATUS_BCLR.ITM_REPIPE_STATUS_BCLR_ts.RE_POSTGAIN_STATUS_BCLR = x)


#define Set_ITM_ITM_REPIPE_STATUS_BCLR_RE_OUT_STORE_STATUS_BCLR(x) (p_ITM_IP->ITM_REPIPE_STATUS_BCLR.ITM_REPIPE_STATUS_BCLR_ts.RE_OUT_STORE_STATUS_BCLR = x)
#define Set_ITM_ITM_REPIPE_STATUS_BCLR(RE_IN_STATUS_BCLR,RE_POSTGAIN_STATUS_BCLR,RE_OUT_STORE_STATUS_BCLR) (p_ITM_IP->ITM_REPIPE_STATUS_BCLR.word = (uint32_t)RE_IN_STATUS_BCLR<<0 | (uint32_t)RE_POSTGAIN_STATUS_BCLR<<1 | (uint32_t)RE_OUT_STORE_STATUS_BCLR<<2)
#define Get_ITM_ITM_REPIPE_STATUS_BCLR() p_ITM_IP->ITM_REPIPE_STATUS_BCLR.word
#define Set_ITM_ITM_REPIPE_STATUS_BCLR_word(x) (p_ITM_IP->ITM_REPIPE_STATUS_BCLR.word = x)


//ITM_REPIPE_STATUS_BSET


#define Set_ITM_ITM_REPIPE_STATUS_BSET_RE_IN_STATUS_BSET(x) (p_ITM_IP->ITM_REPIPE_STATUS_BSET.ITM_REPIPE_STATUS_BSET_ts.RE_IN_STATUS_BSET = x)


#define Set_ITM_ITM_REPIPE_STATUS_BSET_RE_POSTGAIN_STATUS_BSET(x) (p_ITM_IP->ITM_REPIPE_STATUS_BSET.ITM_REPIPE_STATUS_BSET_ts.RE_POSTGAIN_STATUS_BSET = x)


#define Set_ITM_ITM_REPIPE_STATUS_BSET_RE_OUT_STORE_STATUS_BSET(x) (p_ITM_IP->ITM_REPIPE_STATUS_BSET.ITM_REPIPE_STATUS_BSET_ts.RE_OUT_STORE_STATUS_BSET = x)
#define Set_ITM_ITM_REPIPE_STATUS_BSET(RE_IN_STATUS_BSET,RE_POSTGAIN_STATUS_BSET,RE_OUT_STORE_STATUS_BSET) (p_ITM_IP->ITM_REPIPE_STATUS_BSET.word = (uint32_t)RE_IN_STATUS_BSET<<0 | (uint32_t)RE_POSTGAIN_STATUS_BSET<<1 | (uint32_t)RE_OUT_STORE_STATUS_BSET<<2)
#define Get_ITM_ITM_REPIPE_STATUS_BSET() p_ITM_IP->ITM_REPIPE_STATUS_BSET.word
#define Set_ITM_ITM_REPIPE_STATUS_BSET_word(x) (p_ITM_IP->ITM_REPIPE_STATUS_BSET.word = x)


//ITM_REPIPE_EN_BCLR


#define Set_ITM_ITM_REPIPE_EN_BCLR_RE_IN_EN_BCLR(x) (p_ITM_IP->ITM_REPIPE_EN_BCLR.ITM_REPIPE_EN_BCLR_ts.RE_IN_EN_BCLR = x)


#define Set_ITM_ITM_REPIPE_EN_BCLR_RE_POSTGAIN_EN_BCLR(x) (p_ITM_IP->ITM_REPIPE_EN_BCLR.ITM_REPIPE_EN_BCLR_ts.RE_POSTGAIN_EN_BCLR = x)


#define Set_ITM_ITM_REPIPE_EN_BCLR_RE_OUT_STORE_EN_BCLR(x) (p_ITM_IP->ITM_REPIPE_EN_BCLR.ITM_REPIPE_EN_BCLR_ts.RE_OUT_STORE_EN_BCLR = x)
#define Set_ITM_ITM_REPIPE_EN_BCLR(RE_IN_EN_BCLR,RE_POSTGAIN_EN_BCLR,RE_OUT_STORE_EN_BCLR) (p_ITM_IP->ITM_REPIPE_EN_BCLR.word = (uint32_t)RE_IN_EN_BCLR<<0 | (uint32_t)RE_POSTGAIN_EN_BCLR<<1 | (uint32_t)RE_OUT_STORE_EN_BCLR<<2)
#define Get_ITM_ITM_REPIPE_EN_BCLR() p_ITM_IP->ITM_REPIPE_EN_BCLR.word
#define Set_ITM_ITM_REPIPE_EN_BCLR_word(x) (p_ITM_IP->ITM_REPIPE_EN_BCLR.word = x)


//ITM_REPIPE_EN_BSET


#define Set_ITM_ITM_REPIPE_EN_BSET_RE_IN_EN_BSET(x) (p_ITM_IP->ITM_REPIPE_EN_BSET.ITM_REPIPE_EN_BSET_ts.RE_IN_EN_BSET = x)


#define Set_ITM_ITM_REPIPE_EN_BSET_RE_POSTGAIN_EN_BSET(x) (p_ITM_IP->ITM_REPIPE_EN_BSET.ITM_REPIPE_EN_BSET_ts.RE_POSTGAIN_EN_BSET = x)


#define Set_ITM_ITM_REPIPE_EN_BSET_RE_OUT_STORE_EN_BSET(x) (p_ITM_IP->ITM_REPIPE_EN_BSET.ITM_REPIPE_EN_BSET_ts.RE_OUT_STORE_EN_BSET = x)
#define Set_ITM_ITM_REPIPE_EN_BSET(RE_IN_EN_BSET,RE_POSTGAIN_EN_BSET,RE_OUT_STORE_EN_BSET) (p_ITM_IP->ITM_REPIPE_EN_BSET.word = (uint32_t)RE_IN_EN_BSET<<0 | (uint32_t)RE_POSTGAIN_EN_BSET<<1 | (uint32_t)RE_OUT_STORE_EN_BSET<<2)
#define Get_ITM_ITM_REPIPE_EN_BSET() p_ITM_IP->ITM_REPIPE_EN_BSET.word
#define Set_ITM_ITM_REPIPE_EN_BSET_word(x) (p_ITM_IP->ITM_REPIPE_EN_BSET.word = x)


//ITM_DMCEPIPE_STATUS


#define Get_ITM_ITM_DMCEPIPE_STATUS_DMCE_IN_STATUS() p_ITM_IP->ITM_DMCEPIPE_STATUS.ITM_DMCEPIPE_STATUS_ts.DMCE_IN_STATUS


#define Get_ITM_ITM_DMCEPIPE_STATUS_DMCE_OUT_STATUS() p_ITM_IP->ITM_DMCEPIPE_STATUS.ITM_DMCEPIPE_STATUS_ts.DMCE_OUT_STATUS


#define Get_ITM_ITM_DMCEPIPE_STATUS_RGB_STORE_STATUS() p_ITM_IP->ITM_DMCEPIPE_STATUS.ITM_DMCEPIPE_STATUS_ts.RGB_STORE_STATUS
#define Get_ITM_ITM_DMCEPIPE_STATUS() p_ITM_IP->ITM_DMCEPIPE_STATUS.word


//ITM_DMCEPIPE_EN_STATUS


#define Get_ITM_ITM_DMCEPIPE_EN_STATUS_DMCE_IN_EN_STATUS() p_ITM_IP->ITM_DMCEPIPE_EN_STATUS.ITM_DMCEPIPE_EN_STATUS_ts.DMCE_IN_EN_STATUS


#define Get_ITM_ITM_DMCEPIPE_EN_STATUS_DMCE_OUT_EN_STATUS() p_ITM_IP->ITM_DMCEPIPE_EN_STATUS.ITM_DMCEPIPE_EN_STATUS_ts.DMCE_OUT_EN_STATUS


#define Get_ITM_ITM_DMCEPIPE_EN_STATUS_RGB_STORE_EN_STATUS() p_ITM_IP->ITM_DMCEPIPE_EN_STATUS.ITM_DMCEPIPE_EN_STATUS_ts.RGB_STORE_EN_STATUS
#define Get_ITM_ITM_DMCEPIPE_EN_STATUS() p_ITM_IP->ITM_DMCEPIPE_EN_STATUS.word


//ITM_DMCEPIPE_STATUS_BCLR


#define Set_ITM_ITM_DMCEPIPE_STATUS_BCLR_DMCE_IN_STATUS_BCLR(x) (p_ITM_IP->ITM_DMCEPIPE_STATUS_BCLR.ITM_DMCEPIPE_STATUS_BCLR_ts.DMCE_IN_STATUS_BCLR = x)


#define Set_ITM_ITM_DMCEPIPE_STATUS_BCLR_DMCE_OUT_STATUS_BCLR(x) (p_ITM_IP->ITM_DMCEPIPE_STATUS_BCLR.ITM_DMCEPIPE_STATUS_BCLR_ts.DMCE_OUT_STATUS_BCLR = x)


#define Set_ITM_ITM_DMCEPIPE_STATUS_BCLR_RGB_STORE_STATUS_BCLR(x) (p_ITM_IP->ITM_DMCEPIPE_STATUS_BCLR.ITM_DMCEPIPE_STATUS_BCLR_ts.RGB_STORE_STATUS_BCLR = x)
#define Set_ITM_ITM_DMCEPIPE_STATUS_BCLR(DMCE_IN_STATUS_BCLR,DMCE_OUT_STATUS_BCLR,RGB_STORE_STATUS_BCLR) (p_ITM_IP->ITM_DMCEPIPE_STATUS_BCLR.word = (uint32_t)DMCE_IN_STATUS_BCLR<<0 | (uint32_t)DMCE_OUT_STATUS_BCLR<<1 | (uint32_t)RGB_STORE_STATUS_BCLR<<2)
#define Get_ITM_ITM_DMCEPIPE_STATUS_BCLR() p_ITM_IP->ITM_DMCEPIPE_STATUS_BCLR.word
#define Set_ITM_ITM_DMCEPIPE_STATUS_BCLR_word(x) (p_ITM_IP->ITM_DMCEPIPE_STATUS_BCLR.word = x)


//ITM_DMCEPIPE_STATUS_BSET


#define Set_ITM_ITM_DMCEPIPE_STATUS_BSET_DMCE_IN_STATUS_BSET(x) (p_ITM_IP->ITM_DMCEPIPE_STATUS_BSET.ITM_DMCEPIPE_STATUS_BSET_ts.DMCE_IN_STATUS_BSET = x)


#define Set_ITM_ITM_DMCEPIPE_STATUS_BSET_DMCE_OUT_STATUS_BSET(x) (p_ITM_IP->ITM_DMCEPIPE_STATUS_BSET.ITM_DMCEPIPE_STATUS_BSET_ts.DMCE_OUT_STATUS_BSET = x)


#define Set_ITM_ITM_DMCEPIPE_STATUS_BSET_RGB_STORE_STATUS_BSET(x) (p_ITM_IP->ITM_DMCEPIPE_STATUS_BSET.ITM_DMCEPIPE_STATUS_BSET_ts.RGB_STORE_STATUS_BSET = x)
#define Set_ITM_ITM_DMCEPIPE_STATUS_BSET(DMCE_IN_STATUS_BSET,DMCE_OUT_STATUS_BSET,RGB_STORE_STATUS_BSET) (p_ITM_IP->ITM_DMCEPIPE_STATUS_BSET.word = (uint32_t)DMCE_IN_STATUS_BSET<<0 | (uint32_t)DMCE_OUT_STATUS_BSET<<1 | (uint32_t)RGB_STORE_STATUS_BSET<<2)
#define Get_ITM_ITM_DMCEPIPE_STATUS_BSET() p_ITM_IP->ITM_DMCEPIPE_STATUS_BSET.word
#define Set_ITM_ITM_DMCEPIPE_STATUS_BSET_word(x) (p_ITM_IP->ITM_DMCEPIPE_STATUS_BSET.word = x)


//ITM_DMCEPIPE_EN_BCLR


#define Set_ITM_ITM_DMCEPIPE_EN_BCLR_DMCE_IN_EN_BCLR(x) (p_ITM_IP->ITM_DMCEPIPE_EN_BCLR.ITM_DMCEPIPE_EN_BCLR_ts.DMCE_IN_EN_BCLR = x)


#define Set_ITM_ITM_DMCEPIPE_EN_BCLR_DMCE_OUT_EN_BCLR(x) (p_ITM_IP->ITM_DMCEPIPE_EN_BCLR.ITM_DMCEPIPE_EN_BCLR_ts.DMCE_OUT_EN_BCLR = x)


#define Set_ITM_ITM_DMCEPIPE_EN_BCLR_RGB_STORE_EN_BCLR(x) (p_ITM_IP->ITM_DMCEPIPE_EN_BCLR.ITM_DMCEPIPE_EN_BCLR_ts.RGB_STORE_EN_BCLR = x)
#define Set_ITM_ITM_DMCEPIPE_EN_BCLR(DMCE_IN_EN_BCLR,DMCE_OUT_EN_BCLR,RGB_STORE_EN_BCLR) (p_ITM_IP->ITM_DMCEPIPE_EN_BCLR.word = (uint32_t)DMCE_IN_EN_BCLR<<0 | (uint32_t)DMCE_OUT_EN_BCLR<<1 | (uint32_t)RGB_STORE_EN_BCLR<<2)
#define Get_ITM_ITM_DMCEPIPE_EN_BCLR() p_ITM_IP->ITM_DMCEPIPE_EN_BCLR.word
#define Set_ITM_ITM_DMCEPIPE_EN_BCLR_word(x) (p_ITM_IP->ITM_DMCEPIPE_EN_BCLR.word = x)


//ITM_DMCEPIPE_EN_BSET


#define Set_ITM_ITM_DMCEPIPE_EN_BSET_DMCE_IN_EN_BSET(x) (p_ITM_IP->ITM_DMCEPIPE_EN_BSET.ITM_DMCEPIPE_EN_BSET_ts.DMCE_IN_EN_BSET = x)


#define Set_ITM_ITM_DMCEPIPE_EN_BSET_DMCE_OUT_EN_BSET(x) (p_ITM_IP->ITM_DMCEPIPE_EN_BSET.ITM_DMCEPIPE_EN_BSET_ts.DMCE_OUT_EN_BSET = x)


#define Set_ITM_ITM_DMCEPIPE_EN_BSET_RGB_STORE_EN_BSET(x) (p_ITM_IP->ITM_DMCEPIPE_EN_BSET.ITM_DMCEPIPE_EN_BSET_ts.RGB_STORE_EN_BSET = x)
#define Set_ITM_ITM_DMCEPIPE_EN_BSET(DMCE_IN_EN_BSET,DMCE_OUT_EN_BSET,RGB_STORE_EN_BSET) (p_ITM_IP->ITM_DMCEPIPE_EN_BSET.word = (uint32_t)DMCE_IN_EN_BSET<<0 | (uint32_t)DMCE_OUT_EN_BSET<<1 | (uint32_t)RGB_STORE_EN_BSET<<2)
#define Get_ITM_ITM_DMCEPIPE_EN_BSET() p_ITM_IP->ITM_DMCEPIPE_EN_BSET.word
#define Set_ITM_ITM_DMCEPIPE_EN_BSET_word(x) (p_ITM_IP->ITM_DMCEPIPE_EN_BSET.word = x)


//ITM_3D_SMIARX_STATUS


#define Get_ITM_ITM_3D_SMIARX_STATUS_SMIARX_3D_0_STATUS() p_ITM_IP->ITM_3D_SMIARX_STATUS.ITM_3D_SMIARX_STATUS_ts.SMIARX_3D_0_STATUS


#define Get_ITM_ITM_3D_SMIARX_STATUS_SMIARX_3D_1_STATUS() p_ITM_IP->ITM_3D_SMIARX_STATUS.ITM_3D_SMIARX_STATUS_ts.SMIARX_3D_1_STATUS


#define Get_ITM_ITM_3D_SMIARX_STATUS_SMIARX_3D_2_STATUS() p_ITM_IP->ITM_3D_SMIARX_STATUS.ITM_3D_SMIARX_STATUS_ts.SMIARX_3D_2_STATUS


#define Get_ITM_ITM_3D_SMIARX_STATUS_SMIARX_3D_3_STATUS() p_ITM_IP->ITM_3D_SMIARX_STATUS.ITM_3D_SMIARX_STATUS_ts.SMIARX_3D_3_STATUS


#define Get_ITM_ITM_3D_SMIARX_STATUS_SMIARX_3D_4_STATUS() p_ITM_IP->ITM_3D_SMIARX_STATUS.ITM_3D_SMIARX_STATUS_ts.SMIARX_3D_4_STATUS
#define Get_ITM_ITM_3D_SMIARX_STATUS() p_ITM_IP->ITM_3D_SMIARX_STATUS.word


//ITM_3D_SMIARX_EN_STATUS


#define Get_ITM_ITM_3D_SMIARX_EN_STATUS_SMIARX_3D_0_EN_STATUS() p_ITM_IP->ITM_3D_SMIARX_EN_STATUS.ITM_3D_SMIARX_EN_STATUS_ts.SMIARX_3D_0_EN_STATUS


#define Get_ITM_ITM_3D_SMIARX_EN_STATUS_SMIARX_3D_1_EN_STATUS() p_ITM_IP->ITM_3D_SMIARX_EN_STATUS.ITM_3D_SMIARX_EN_STATUS_ts.SMIARX_3D_1_EN_STATUS


#define Get_ITM_ITM_3D_SMIARX_EN_STATUS_SMIARX_3D_2_EN_STATUS() p_ITM_IP->ITM_3D_SMIARX_EN_STATUS.ITM_3D_SMIARX_EN_STATUS_ts.SMIARX_3D_2_EN_STATUS


#define Get_ITM_ITM_3D_SMIARX_EN_STATUS_SMIARX_3D_3_EN_STATUS() p_ITM_IP->ITM_3D_SMIARX_EN_STATUS.ITM_3D_SMIARX_EN_STATUS_ts.SMIARX_3D_3_EN_STATUS


#define Get_ITM_ITM_3D_SMIARX_EN_STATUS_SMIARX_3D_4_EN_STATUS() p_ITM_IP->ITM_3D_SMIARX_EN_STATUS.ITM_3D_SMIARX_EN_STATUS_ts.SMIARX_3D_4_EN_STATUS
#define Get_ITM_ITM_3D_SMIARX_EN_STATUS() p_ITM_IP->ITM_3D_SMIARX_EN_STATUS.word


//ITM_3D_SMIARX_STATUS_BCLR


#define Set_ITM_ITM_3D_SMIARX_STATUS_BCLR_SMIARX_3D_0_STATUS_BCLR(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BCLR.ITM_3D_SMIARX_STATUS_BCLR_ts.SMIARX_3D_0_STATUS_BCLR = x)


#define Set_ITM_ITM_3D_SMIARX_STATUS_BCLR_SMIARX_3D_1_STATUS_BCLR(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BCLR.ITM_3D_SMIARX_STATUS_BCLR_ts.SMIARX_3D_1_STATUS_BCLR = x)


#define Set_ITM_ITM_3D_SMIARX_STATUS_BCLR_SMIARX_3D_2_STATUS_BCLR(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BCLR.ITM_3D_SMIARX_STATUS_BCLR_ts.SMIARX_3D_2_STATUS_BCLR = x)


#define Set_ITM_ITM_3D_SMIARX_STATUS_BCLR_SMIARX_3D_3_STATUS_BCLR(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BCLR.ITM_3D_SMIARX_STATUS_BCLR_ts.SMIARX_3D_3_STATUS_BCLR = x)


#define Set_ITM_ITM_3D_SMIARX_STATUS_BCLR_SMIARX_3D_4_STATUS_BCLR(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BCLR.ITM_3D_SMIARX_STATUS_BCLR_ts.SMIARX_3D_4_STATUS_BCLR = x)
#define Set_ITM_ITM_3D_SMIARX_STATUS_BCLR(SMIARX_3D_0_STATUS_BCLR,SMIARX_3D_1_STATUS_BCLR,SMIARX_3D_2_STATUS_BCLR,SMIARX_3D_3_STATUS_BCLR,SMIARX_3D_4_STATUS_BCLR) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BCLR.word = (uint32_t)SMIARX_3D_0_STATUS_BCLR<<0 | (uint32_t)SMIARX_3D_1_STATUS_BCLR<<1 | (uint32_t)SMIARX_3D_2_STATUS_BCLR<<2 | (uint32_t)SMIARX_3D_3_STATUS_BCLR<<3 | (uint32_t)SMIARX_3D_4_STATUS_BCLR<<4)
#define Get_ITM_ITM_3D_SMIARX_STATUS_BCLR() p_ITM_IP->ITM_3D_SMIARX_STATUS_BCLR.word
#define Set_ITM_ITM_3D_SMIARX_STATUS_BCLR_word(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BCLR.word = x)


//ITM_3D_SMIARX_STATUS_BSET


#define Set_ITM_ITM_3D_SMIARX_STATUS_BSET_SMIARX_3D_0_STATUS_BSET(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BSET.ITM_3D_SMIARX_STATUS_BSET_ts.SMIARX_3D_0_STATUS_BSET = x)


#define Set_ITM_ITM_3D_SMIARX_STATUS_BSET_SMIARX_3D_1_STATUS_BSET(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BSET.ITM_3D_SMIARX_STATUS_BSET_ts.SMIARX_3D_1_STATUS_BSET = x)


#define Set_ITM_ITM_3D_SMIARX_STATUS_BSET_SMIARX_3D_2_STATUS_BSET(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BSET.ITM_3D_SMIARX_STATUS_BSET_ts.SMIARX_3D_2_STATUS_BSET = x)


#define Set_ITM_ITM_3D_SMIARX_STATUS_BSET_SMIARX_3D_3_STATUS_BSET(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BSET.ITM_3D_SMIARX_STATUS_BSET_ts.SMIARX_3D_3_STATUS_BSET = x)


#define Set_ITM_ITM_3D_SMIARX_STATUS_BSET_SMIARX_3D_4_STATUS_BSET(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BSET.ITM_3D_SMIARX_STATUS_BSET_ts.SMIARX_3D_4_STATUS_BSET = x)
#define Set_ITM_ITM_3D_SMIARX_STATUS_BSET(SMIARX_3D_0_STATUS_BSET,SMIARX_3D_1_STATUS_BSET,SMIARX_3D_2_STATUS_BSET,SMIARX_3D_3_STATUS_BSET,SMIARX_3D_4_STATUS_BSET) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BSET.word = (uint32_t)SMIARX_3D_0_STATUS_BSET<<0 | (uint32_t)SMIARX_3D_1_STATUS_BSET<<1 | (uint32_t)SMIARX_3D_2_STATUS_BSET<<2 | (uint32_t)SMIARX_3D_3_STATUS_BSET<<3 | (uint32_t)SMIARX_3D_4_STATUS_BSET<<4)
#define Get_ITM_ITM_3D_SMIARX_STATUS_BSET() p_ITM_IP->ITM_3D_SMIARX_STATUS_BSET.word
#define Set_ITM_ITM_3D_SMIARX_STATUS_BSET_word(x) (p_ITM_IP->ITM_3D_SMIARX_STATUS_BSET.word = x)


//ITM_3D_SMIARX_EN_BCLR


#define Set_ITM_ITM_3D_SMIARX_EN_BCLR_SMIARX_3D_0_EN_BCLR(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BCLR.ITM_3D_SMIARX_EN_BCLR_ts.SMIARX_3D_0_EN_BCLR = x)


#define Set_ITM_ITM_3D_SMIARX_EN_BCLR_SMIARX_3D_1_EN_BCLR(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BCLR.ITM_3D_SMIARX_EN_BCLR_ts.SMIARX_3D_1_EN_BCLR = x)


#define Set_ITM_ITM_3D_SMIARX_EN_BCLR_SMIARX_3D_2_EN_BCLR(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BCLR.ITM_3D_SMIARX_EN_BCLR_ts.SMIARX_3D_2_EN_BCLR = x)


#define Set_ITM_ITM_3D_SMIARX_EN_BCLR_SMIARX_3D_3_EN_BCLR(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BCLR.ITM_3D_SMIARX_EN_BCLR_ts.SMIARX_3D_3_EN_BCLR = x)


#define Set_ITM_ITM_3D_SMIARX_EN_BCLR_SMIARX_3D_4_EN_BCLR(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BCLR.ITM_3D_SMIARX_EN_BCLR_ts.SMIARX_3D_4_EN_BCLR = x)
#define Set_ITM_ITM_3D_SMIARX_EN_BCLR(SMIARX_3D_0_EN_BCLR,SMIARX_3D_1_EN_BCLR,SMIARX_3D_2_EN_BCLR,SMIARX_3D_3_EN_BCLR,SMIARX_3D_4_EN_BCLR) (p_ITM_IP->ITM_3D_SMIARX_EN_BCLR.word = (uint32_t)SMIARX_3D_0_EN_BCLR<<0 | (uint32_t)SMIARX_3D_1_EN_BCLR<<1 | (uint32_t)SMIARX_3D_2_EN_BCLR<<2 | (uint32_t)SMIARX_3D_3_EN_BCLR<<3 | (uint32_t)SMIARX_3D_4_EN_BCLR<<4)
#define Get_ITM_ITM_3D_SMIARX_EN_BCLR() p_ITM_IP->ITM_3D_SMIARX_EN_BCLR.word
#define Set_ITM_ITM_3D_SMIARX_EN_BCLR_word(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BCLR.word = x)


//ITM_3D_SMIARX_EN_BSET


#define Set_ITM_ITM_3D_SMIARX_EN_BSET_SMIARX_3D_0_EN_BSET(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BSET.ITM_3D_SMIARX_EN_BSET_ts.SMIARX_3D_0_EN_BSET = x)


#define Set_ITM_ITM_3D_SMIARX_EN_BSET_SMIARX_3D_1_EN_BSET(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BSET.ITM_3D_SMIARX_EN_BSET_ts.SMIARX_3D_1_EN_BSET = x)


#define Set_ITM_ITM_3D_SMIARX_EN_BSET_SMIARX_3D_2_EN_BSET(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BSET.ITM_3D_SMIARX_EN_BSET_ts.SMIARX_3D_2_EN_BSET = x)


#define Set_ITM_ITM_3D_SMIARX_EN_BSET_SMIARX_3D_3_EN_BSET(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BSET.ITM_3D_SMIARX_EN_BSET_ts.SMIARX_3D_3_EN_BSET = x)


#define Set_ITM_ITM_3D_SMIARX_EN_BSET_SMIARX_3D_4_EN_BSET(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BSET.ITM_3D_SMIARX_EN_BSET_ts.SMIARX_3D_4_EN_BSET = x)
#define Set_ITM_ITM_3D_SMIARX_EN_BSET(SMIARX_3D_0_EN_BSET,SMIARX_3D_1_EN_BSET,SMIARX_3D_2_EN_BSET,SMIARX_3D_3_EN_BSET,SMIARX_3D_4_EN_BSET) (p_ITM_IP->ITM_3D_SMIARX_EN_BSET.word = (uint32_t)SMIARX_3D_0_EN_BSET<<0 | (uint32_t)SMIARX_3D_1_EN_BSET<<1 | (uint32_t)SMIARX_3D_2_EN_BSET<<2 | (uint32_t)SMIARX_3D_3_EN_BSET<<3 | (uint32_t)SMIARX_3D_4_EN_BSET<<4)
#define Get_ITM_ITM_3D_SMIARX_EN_BSET() p_ITM_IP->ITM_3D_SMIARX_EN_BSET.word
#define Set_ITM_ITM_3D_SMIARX_EN_BSET_word(x) (p_ITM_IP->ITM_3D_SMIARX_EN_BSET.word = x)


//ITM_LINE_BURSTY_ELIM_STATUS


#define Get_ITM_ITM_LINE_BURSTY_ELIM_STATUS_LINE_BURSTY_ELIM_STATUS() p_ITM_IP->ITM_LINE_BURSTY_ELIM_STATUS.ITM_LINE_BURSTY_ELIM_STATUS_ts.LINE_BURSTY_ELIM_STATUS
#define Get_ITM_ITM_LINE_BURSTY_ELIM_STATUS() p_ITM_IP->ITM_LINE_BURSTY_ELIM_STATUS.word


//ITM_LINE_BURSTY_ELIM_EN_STATUS


#define Get_ITM_ITM_LINE_BURSTY_ELIM_EN_STATUS_LINE_BURSTY_ELIM_EN_STATUS() p_ITM_IP->ITM_LINE_BURSTY_ELIM_EN_STATUS.ITM_LINE_BURSTY_ELIM_EN_STATUS_ts.LINE_BURSTY_ELIM_EN_STATUS
#define Get_ITM_ITM_LINE_BURSTY_ELIM_EN_STATUS() p_ITM_IP->ITM_LINE_BURSTY_ELIM_EN_STATUS.word


//ITM_LINE_BURSTY_ELIM_STATUS_BCLR


#define Set_ITM_ITM_LINE_BURSTY_ELIM_STATUS_BCLR_LINE_BURSTY_ELIM_STATUS_BCLR(x) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_STATUS_BCLR.ITM_LINE_BURSTY_ELIM_STATUS_BCLR_ts.LINE_BURSTY_ELIM_STATUS_BCLR = x)
#define Set_ITM_ITM_LINE_BURSTY_ELIM_STATUS_BCLR(LINE_BURSTY_ELIM_STATUS_BCLR) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_STATUS_BCLR.word = (uint32_t)LINE_BURSTY_ELIM_STATUS_BCLR<<0)
#define Get_ITM_ITM_LINE_BURSTY_ELIM_STATUS_BCLR() p_ITM_IP->ITM_LINE_BURSTY_ELIM_STATUS_BCLR.word
#define Set_ITM_ITM_LINE_BURSTY_ELIM_STATUS_BCLR_word(x) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_STATUS_BCLR.word = x)


//ITM_LINE_BURSTY_ELIM_STATUS_BSET


#define Set_ITM_ITM_LINE_BURSTY_ELIM_STATUS_BSET_LINE_BURSTY_ELIM_STATUS_BSET(x) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_STATUS_BSET.ITM_LINE_BURSTY_ELIM_STATUS_BSET_ts.LINE_BURSTY_ELIM_STATUS_BSET = x)
#define Set_ITM_ITM_LINE_BURSTY_ELIM_STATUS_BSET(LINE_BURSTY_ELIM_STATUS_BSET) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_STATUS_BSET.word = (uint32_t)LINE_BURSTY_ELIM_STATUS_BSET<<0)
#define Get_ITM_ITM_LINE_BURSTY_ELIM_STATUS_BSET() p_ITM_IP->ITM_LINE_BURSTY_ELIM_STATUS_BSET.word
#define Set_ITM_ITM_LINE_BURSTY_ELIM_STATUS_BSET_word(x) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_STATUS_BSET.word = x)


//ITM_LINE_BURSTY_ELIM_EN_BCLR


#define Set_ITM_ITM_LINE_BURSTY_ELIM_EN_BCLR_LINE_BURSTY_ELIM_EN_BCLR(x) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_EN_BCLR.ITM_LINE_BURSTY_ELIM_EN_BCLR_ts.LINE_BURSTY_ELIM_EN_BCLR = x)
#define Set_ITM_ITM_LINE_BURSTY_ELIM_EN_BCLR(LINE_BURSTY_ELIM_EN_BCLR) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_EN_BCLR.word = (uint32_t)LINE_BURSTY_ELIM_EN_BCLR<<0)
#define Get_ITM_ITM_LINE_BURSTY_ELIM_EN_BCLR() p_ITM_IP->ITM_LINE_BURSTY_ELIM_EN_BCLR.word
#define Set_ITM_ITM_LINE_BURSTY_ELIM_EN_BCLR_word(x) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_EN_BCLR.word = x)


//ITM_LINE_BURSTY_ELIM_EN_BSET


#define Set_ITM_ITM_LINE_BURSTY_ELIM_EN_BSET_LINE_BURSTY_ELIM_EN_BSET(x) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_EN_BSET.ITM_LINE_BURSTY_ELIM_EN_BSET_ts.LINE_BURSTY_ELIM_EN_BSET = x)
#define Set_ITM_ITM_LINE_BURSTY_ELIM_EN_BSET(LINE_BURSTY_ELIM_EN_BSET) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_EN_BSET.word = (uint8_t)LINE_BURSTY_ELIM_EN_BSET<<0)
#define Get_ITM_ITM_LINE_BURSTY_ELIM_EN_BSET() p_ITM_IP->ITM_LINE_BURSTY_ELIM_EN_BSET.word
#define Set_ITM_ITM_LINE_BURSTY_ELIM_EN_BSET_word(x) (p_ITM_IP->ITM_LINE_BURSTY_ELIM_EN_BSET.word = x)

//ISP_SMIARX_CTRL
/*Description: Rx Streaming control
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t rx_start :1;
        /* Start Rx - can be cleared after setting. Both rx_stop and rx_abort must be cleared before Rx will start*/
        uint8_t reserved0 :7;
        uint8_t rx_stop :1;
        /* Stop Rx (at end of current frame)rx_abort control must be cleared for the end-of-frame stop.Overides the rx_start control*/
        uint8_t reserved1 :7;
        uint8_t rx_abort :1;
        /* Stop Rx immediatly Overrides both rx_stop and rx_start controls*/
    }ISP_SMIARX_CTRL_ts;

}ISP_SMIARX_CTRL_tu;



//ISP_SMIARX_SETUP
/*Description: Rx Status
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t ip_pix_width :4;
        /* width of received pixel data (number of bits per pixel) - 6,7,8,10 or 12*/
        uint8_t op_pix_width :4;
        /* width of output pixel data from SMIA Rx*/
        uint8_t parallel_enable :1;
        /* Enable parallel interface input.*/
        uint8_t vsync_polarity :1;
        /* Polarity of input VSYNC:*/
        uint8_t hsync_polarity :1;
        /* Polarity of input HSYNC:*/
        uint8_t ds_mode :1;
        /* Select whether data strobe encoding is enabled for selected CCP input*/
        uint8_t dcpx_enable :1;
        /* Bayer decompression module enable*/
        uint8_t ccp_sel :1;
        /* Select which CCP input (0 or 1) is input to deserialiser (star_decoder)Note: this signal is not used by the Rx, it is provided to control an external module*/
        uint8_t reset_ccp_rx_n :1;
        /* May be connected to the CCP receivers to clear out their state in the event of lost synchronisationNote: this signal is not used by the Rx, it is provided to control an external module*/
        uint8_t reserved0 :1;
        uint8_t auto_sync :1;
        /* Rx Synchronisation source:*/
        uint8_t pattern_type :3;
        /* Test pattern selection:*/
        uint8_t no_sof :1;
        /* Allow operation with no status-line in data-stream (must override all frame-setup registers).If set, must override all frame-setup registers.*/
        uint8_t reserved1 :3;
        uint8_t clr_ccp_shift_sync :1;
        /* Clear CCP Shifted Sync-code flagNote: this signal is not used by the Rx, it is provided to control an external module*/
        uint8_t clr_ccp_crc_error :1;
        /* Clear CCP CRC Error flagNote: this signal is not used by the Rx, it is provided to control an external module*/
        uint8_t clr_pixel_sync_error :1;
        /* Clear Unpack pixel Sync error flag*/
        uint8_t clr_aborted_iframe :1;
        /* Clears aborted interframe flag*/
        uint8_t clr_insuff_iline :1;
        /* Clears insufficient interline flag*/
        uint8_t fifo_rd_rst :1;
        /* Resets input data fifo*/
    }ISP_SMIARX_SETUP_ts;

}ISP_SMIARX_SETUP_tu;



//ISP_SMIARX_FRAME_CTRL
/*Description: Frame control register
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t latency_lines;
        /* Number of lines to wait after image capture before attempting to grab the next frame (safety factor)*/
        uint8_t stream_size;
        /* Set the number of frames to stream. When set to zero, stream continuous video*/
        uint8_t start_grab_dly;
        /* Number of frames (from sensor) to skip before streaming data*/
        uint8_t ffhc_control :2;
        /* Controls frame-format h-crop (see Design Reference*/
        uint8_t stop_at_interframe :1;
        /* When stopping Rx, stop at the start of interframe, rather than at the end of interframe.*/
    }ISP_SMIARX_FRAME_CTRL_ts;

}ISP_SMIARX_FRAME_CTRL_tu;



//ISP_SMIARX_STATUS
/*Description: Status of the Rx block
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t frame_counter;
        /* Count of frames streamed through Rx*/
        uint8_t rx_state :2;
        /* Current state of the idp_gen module*/
        uint8_t ff_state :3;
        /* Current state of the frame formatter machine*/
        uint8_t snoop_state :3;
        /* Current state of the snoop module*/
        uint8_t fifo_rd_usedw :5;
        /* Rx fifo used words*/
        uint8_t fifo_empty :1;
        /* Rx fifo empty*/
        uint8_t reserved0 :2;
        uint8_t pixel_sync_error :1;
        /* SMIA decoder detected a pixel synchronisation error.*/
        uint8_t aborted_iframe :1;
        /* Aborted interframe flag.A new input frame has arrived before the full requested frame (line_length x frame_length) has completed.Status only, not an error.*/
        uint8_t insuff_iline :1;
        /* Insufficient interline error flag.The input data has fewer than 6-pixels of interline time.*/
        uint8_t fifo_under :1;
        /* Input data fifo has under-flowed*/
        uint8_t fifo_over :1;
        /* Input data fifo has over-flowed*/
    }ISP_SMIARX_STATUS_ts;

}ISP_SMIARX_STATUS_tu;



//ISP_SMIARX_TPAT_DATA_RG
/*Description: Test Data for pixels in Red/Green line
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t tpat_data_gir :13;
        /* Test data value for GIR pixels*/
        uint8_t reserved0 :3;
        uint16_t tpat_data_red :13;
        /* Test data value for RED pixels*/
    }ISP_SMIARX_TPAT_DATA_RG_ts;

}ISP_SMIARX_TPAT_DATA_RG_tu;



//ISP_SMIARX_TPAT_DATA_BG
/*Description: Test Data for pixels in Blue/Green line
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t tpat_data_gib :13;
        uint8_t reserved0 :3;
        uint16_t tpat_data_blu :13;
    }ISP_SMIARX_TPAT_DATA_BG_ts;

}ISP_SMIARX_TPAT_DATA_BG_tu;



//ISP_SMIARX_TPAT_HCUR_WP
/*Description: Test pattern Horizontal cursor control
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t tpat_hcur_posn :13;
        uint8_t reserved0 :3;
        uint16_t tpat_hcur_width :13;
    }ISP_SMIARX_TPAT_HCUR_WP_ts;

}ISP_SMIARX_TPAT_HCUR_WP_tu;



//ISP_SMIARX_TPAT_VCUR_WP
/*Description: Test pattern Horizontal cursor control
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t tpat_vcur_posn :13;
        /* Vertical cursor position in pixels.*/
        uint8_t reserved0 :3;
        uint16_t tpat_vcur_width :13;
        /* Vertical cursor width in pixels*/
    }ISP_SMIARX_TPAT_VCUR_WP_ts;

}ISP_SMIARX_TPAT_VCUR_WP_tu;



//ISP_SMIARX_CCP_STATUS
/*Description: Status of the CCPRx
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t ccp_channel :4;
        /* CCP Channel extracted from sync-codes.Note: this signal is not generated by the Rx, it is provided by an external module*/
        uint8_t reserved0 :4;
        uint8_t ccp_false_sync :1;
        /* CCP Rx detected a false sync-codeNote: this signal is not generated by the Rx, it is provided by an external module*/
        uint8_t ccp_shift_sync :1;
        /* CCP Rx detected a shifted sync-codeNote: this signal is not generated by the Rx, it is provided by an external module*/
        uint8_t ccp_crc_error :1;
        /* CCP Rx detected a CRC error in the received line.Note: this signal is not generated by the Rx, it is provided by an external module*/
    }ISP_SMIARX_CCP_STATUS_ts;

}ISP_SMIARX_CCP_STATUS_tu;



//ISP_SMIARX_HK_REQ_ADDR_0
/*Description: Programmable address to extract from status line data
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hk_req_addr;
    }ISP_SMIARX_HK_REQ_ADDR_0_ts;

}ISP_SMIARX_HK_REQ_ADDR_0_tu;



//ISP_SMIARX_HK_REQ_ADDR_1
/*Description: Programmable address to extract from status line data
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hk_req_addr;
    }ISP_SMIARX_HK_REQ_ADDR_1_ts;

}ISP_SMIARX_HK_REQ_ADDR_1_tu;



//ISP_SMIARX_HK_REQ_ADDR_2
/*Description: Programmable address to extract from status line data
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hk_req_addr;
    }ISP_SMIARX_HK_REQ_ADDR_2_ts;

}ISP_SMIARX_HK_REQ_ADDR_2_tu;



//ISP_SMIARX_HK_REQ_ADDR_3
/*Description: Programmable address to extract from status line data
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hk_req_addr;
    }ISP_SMIARX_HK_REQ_ADDR_3_ts;

}ISP_SMIARX_HK_REQ_ADDR_3_tu;



//ISP_SMIARX_HK_REQ_DATA_0
/*Description: Data extracted from Status Line
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t hk_req_data;
    }ISP_SMIARX_HK_REQ_DATA_0_ts;

}ISP_SMIARX_HK_REQ_DATA_0_tu;



//ISP_SMIARX_HK_REQ_DATA_1
/*Description: Data extracted from Status Line
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t hk_req_data;
    }ISP_SMIARX_HK_REQ_DATA_1_ts;

}ISP_SMIARX_HK_REQ_DATA_1_tu;



//ISP_SMIARX_HK_REQ_DATA_2
/*Description: Data extracted from Status Line
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t hk_req_data;
    }ISP_SMIARX_HK_REQ_DATA_2_ts;

}ISP_SMIARX_HK_REQ_DATA_2_tu;



//ISP_SMIARX_HK_REQ_DATA_3
/*Description: Data extracted from Status Line
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t hk_req_data;
    }ISP_SMIARX_HK_REQ_DATA_3_ts;

}ISP_SMIARX_HK_REQ_DATA_3_tu;



//ISP_SMIARX_INT_COUNT_0
/*Description: Parameter used with rx_pix_count to generate an interrupt
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t pix_count;
        /* Programs the pixel count for Rx interrupt n*/
        uint16_t line_count;
        /* Programs the line count for Rx interrupt n*/
    }ISP_SMIARX_INT_COUNT_0_ts;

}ISP_SMIARX_INT_COUNT_0_tu;



//ISP_SMIARX_INT_COUNT_1
/*Description: Parameter used with rx_pix_count to generate an interrupt
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t pix_count;
        /* Programs the pixel count for Rx interrupt n*/
        uint16_t line_count;
        /* Programs the line count for Rx interrupt n*/
    }ISP_SMIARX_INT_COUNT_1_ts;

}ISP_SMIARX_INT_COUNT_1_tu;



//ISP_SMIARX_INT_COUNT_2
/*Description: Parameter used with rx_pix_count to generate an interrupt
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t pix_count;
        /* Programs the pixel count for Rx interrupt n*/
        uint16_t line_count;
        /* Programs the line count for Rx interrupt n*/
    }ISP_SMIARX_INT_COUNT_2_ts;

}ISP_SMIARX_INT_COUNT_2_tu;



//ISP_SMIARX_INT_COUNT_3
/*Description: Parameter used with rx_pix_count to generate an interrupt
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t pix_count;
        /* Programs the pixel count for Rx interrupt n*/
        uint16_t line_count;
        /* Programs the line count for Rx interrupt n*/
    }ISP_SMIARX_INT_COUNT_3_ts;

}ISP_SMIARX_INT_COUNT_3_tu;



//ISP_SMIARX_DFV
/*Description: Interrupt control register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* DFV feature enable*/
        uint8_t dfv_count_0_interrupt_ctrl :1;
        /* Counter n Interrupt DFV control. A count_n interrupt is generated everytime its associated control bit value changes*/
        uint8_t dfv_count_1_interrupt_ctrl :1;
        /* Counter n Interrupt DFV control. A count_n interrupt is generated everytime its associated control bit value changes*/
        uint8_t dfv_count_2_interrupt_ctrl :1;
        /* Counter n Interrupt DFV control. A count_n interrupt is generated everytime its associated control bit value changes*/
        uint8_t dfv_count_3_interrupt_ctrl :1;
        /* Counter n Interrupt DFV control. A count_n interrupt is generated everytime its associated control bit value changes*/
        uint8_t dfv_seq_complete_interrupt_ctrl :1;
        /* Sequence Complete DFV control. A seq_complete interrupt is generated everytime this control bit value changes*/
    }ISP_SMIARX_DFV_ts;

}ISP_SMIARX_DFV_tu;



//ISP_SMIARX_COUNT_INT_EN
/*Description: Interrupt enable control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rx_line_count_0_int_en :1;
        /* Counter n interrupt enable*/
        uint8_t rx_line_count_1_int_en :1;
        /* Counter n interrupt enable*/
        uint8_t rx_line_count_2_int_en :1;
        /* Counter n interrupt enable*/
        uint8_t rx_line_count_3_int_en :1;
        /* Counter n interrupt enable*/
        uint8_t rx_seq_complete_int_en :1;
        /* Sequence complete interrupt enable*/
    }ISP_SMIARX_COUNT_INT_EN_ts;

}ISP_SMIARX_COUNT_INT_EN_tu;



//ISP_SMIARX_OVERRIDE
/*Description: Device ID value from status line
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t override :23;
        /* If one bit is set then snooped value is overriden.
        Bit 22: y odd increment LSBit\\
        Bit 21: y even increment LSBit\\
        Bit 20: x odd increment LSBit\\
        Bit 19: x even increment LSBit\\
        Bit 18: pixel order\\
        Bit 17: line length\\
        Bit 16: field length\\
        Bit 15: SMIA descriptor 14\\
        Bit 14: SMIA descriptor 13\\
        Bit 13: SMIA descriptor 12\\
        Bit 12: SMIA descriptor 11\\
        Bit 11: SMIA descriptor 10\\
        Bit 10: SMIA descriptor 9\\
        Bit 9: SMIA descriptor 8\\
        Bit 8: SMIA descriptor 7\\
        Bit 7: SMIA descriptor 6\\
        Bit 6: SMIA descriptor 5\\
        Bit 5: SMIA descriptor 4\\
        Bit 4: SMIA descriptor 3\\
        Bit 3: SMIA descriptor 2\\
        Bit 2: SMIA descriptor 1\\
        Bit 1: SMIA descriptor 0\\
        Bit 0: SMIA model subtype*/
    }ISP_SMIARX_OVERRIDE_ts;

}ISP_SMIARX_OVERRIDE_tu;



//ISP_SMIARX_SENSOR_ID
/*Description: Device ID value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t sensor_id;
    }ISP_SMIARX_SENSOR_ID_ts;

}ISP_SMIARX_SENSOR_ID_tu;



//ISP_SMIARX_PIXEL_ORDER
/*Description: Color Pixel order
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t pixel_order :2;
        /* Pixel order from status line*/
        uint8_t reserved0 :6;
        uint8_t pixel_order_ovr :2;
        /* Pixel order value for override*/
    }ISP_SMIARX_PIXEL_ORDER_ts;

}ISP_SMIARX_PIXEL_ORDER_tu;



//ISP_SMIARX_AUTO_HENV_LENGTH
/*Description: Number of pixels in active henv output from idp_gen when running in auto_sync mode (see RX_SETUP register)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t auto_henv_length :13;
    }ISP_SMIARX_AUTO_HENV_LENGTH_ts;

}ISP_SMIARX_AUTO_HENV_LENGTH_tu;



//ISP_SMIARX_FRAME_LENGTH
/*Description: Frame Length
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t frame_length;
        /* Frame length value from status line*/
        uint16_t frame_length_ovr;
        /* Frame length value for override*/
    }ISP_SMIARX_FRAME_LENGTH_ts;

}ISP_SMIARX_FRAME_LENGTH_tu;



//ISP_SMIARX_LINE_LENGTH
/*Description: Line Length
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t line_length;
        /* Line length value from status line*/
        uint16_t line_length_ovr;
        /* Line length value for override*/
    }ISP_SMIARX_LINE_LENGTH_ts;

}ISP_SMIARX_LINE_LENGTH_tu;



//ISP_SMIARX_X_ADDR_START
/*Description: X address start value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_addr_start;
    }ISP_SMIARX_X_ADDR_START_ts;

}ISP_SMIARX_X_ADDR_START_tu;



//ISP_SMIARX_Y_ADDR_START
/*Description: Y address start from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_addr_start;
    }ISP_SMIARX_Y_ADDR_START_ts;

}ISP_SMIARX_Y_ADDR_START_tu;



//ISP_SMIARX_X_ADDR_END
/*Description: X address end value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_addr_end;
    }ISP_SMIARX_X_ADDR_END_ts;

}ISP_SMIARX_X_ADDR_END_tu;



//ISP_SMIARX_Y_ADDR_END
/*Description: Y address end value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_addr_end;
    }ISP_SMIARX_Y_ADDR_END_ts;

}ISP_SMIARX_Y_ADDR_END_tu;



//ISP_SMIARX_X_OUTPUT_SIZE
/*Description: X output size value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_output_size;
    }ISP_SMIARX_X_OUTPUT_SIZE_ts;

}ISP_SMIARX_X_OUTPUT_SIZE_tu;



//ISP_SMIARX_Y_OUTPUT_SIZE
/*Description: Y output size value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_output_size;
    }ISP_SMIARX_Y_OUTPUT_SIZE_ts;

}ISP_SMIARX_Y_OUTPUT_SIZE_tu;



//ISP_SMIARX_ADDR_INCREMENTS
/*Description: Address increments control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t x_even_inc_lsb :1;
        /* X Address even increment value from status line*/
        uint8_t x_even_inc_lsb_ovr :1;
        /* X Address even increment value for override*/
        uint8_t x_odd_inc_lsb :1;
        /* X Address odd increment value from status line*/
        uint8_t x_odd_inc_lsb_ovr :1;
        /* X Address odd increment value for override*/
        uint8_t y_even_inc_lsb :1;
        /* Y Address even increment value from status line*/
        uint8_t y_even_inc_lsb_ovr :1;
        /* Y Address even increment value for override*/
        uint8_t y_odd_inc_lsb :1;
        /* Y Address odd increment value from status line*/
        uint8_t y_odd_inc_lsb_ovr :1;
        /* Y Address odd increment value for override*/
    }ISP_SMIARX_ADDR_INCREMENTS_ts;

}ISP_SMIARX_ADDR_INCREMENTS_tu;



//ISP_SMIARX_FINE_EXPOSURE
/*Description: Fine exposure value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t fine_exposure;
    }ISP_SMIARX_FINE_EXPOSURE_ts;

}ISP_SMIARX_FINE_EXPOSURE_tu;



//ISP_SMIARX_COARSE_EXPOSURE
/*Description: Coarse exposure from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t coarse_exposure;
    }ISP_SMIARX_COARSE_EXPOSURE_ts;

}ISP_SMIARX_COARSE_EXPOSURE_tu;



//ISP_SMIARX_ANALOG_GAIN
/*Description: Analogue Gain value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t analog_gain;
    }ISP_SMIARX_ANALOG_GAIN_ts;

}ISP_SMIARX_ANALOG_GAIN_tu;



//ISP_SMIARX_MODEL_SUBTYPE
/*Description: SMIA Frame Format Model Subtype
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t frame_format_model_subtype;
        /* Frame format subtype value from status line*/
        uint8_t frame_format_model_subtype_ovr;
        /* Frame format subtype value for override*/
    }ISP_SMIARX_MODEL_SUBTYPE_ts;

}ISP_SMIARX_MODEL_SUBTYPE_tu;



//ISP_SMIARX_DESCRIPTOR_0
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_0_ts;

}ISP_SMIARX_DESCRIPTOR_0_tu;



//ISP_SMIARX_DESCRIPTOR_1
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_1_ts;

}ISP_SMIARX_DESCRIPTOR_1_tu;



//ISP_SMIARX_DESCRIPTOR_2
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_2_ts;

}ISP_SMIARX_DESCRIPTOR_2_tu;



//ISP_SMIARX_DESCRIPTOR_3
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_3_ts;

}ISP_SMIARX_DESCRIPTOR_3_tu;



//ISP_SMIARX_DESCRIPTOR_4
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_4_ts;

}ISP_SMIARX_DESCRIPTOR_4_tu;



//ISP_SMIARX_DESCRIPTOR_5
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_5_ts;

}ISP_SMIARX_DESCRIPTOR_5_tu;



//ISP_SMIARX_DESCRIPTOR_6
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_6_ts;

}ISP_SMIARX_DESCRIPTOR_6_tu;



//ISP_SMIARX_DESCRIPTOR_7
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_7_ts;

}ISP_SMIARX_DESCRIPTOR_7_tu;



//ISP_SMIARX_DESCRIPTOR_8
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_8_ts;

}ISP_SMIARX_DESCRIPTOR_8_tu;



//ISP_SMIARX_DESCRIPTOR_9
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_9_ts;

}ISP_SMIARX_DESCRIPTOR_9_tu;



//ISP_SMIARX_DESCRIPTOR_10
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_10_ts;

}ISP_SMIARX_DESCRIPTOR_10_tu;



//ISP_SMIARX_DESCRIPTOR_11
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_11_ts;

}ISP_SMIARX_DESCRIPTOR_11_tu;



//ISP_SMIARX_DESCRIPTOR_12
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_12_ts;

}ISP_SMIARX_DESCRIPTOR_12_tu;



//ISP_SMIARX_DESCRIPTOR_13
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_13_ts;

}ISP_SMIARX_DESCRIPTOR_13_tu;



//ISP_SMIARX_DESCRIPTOR_14
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_14_ts;

}ISP_SMIARX_DESCRIPTOR_14_tu;



//ISP_SMIARX_TYPE_TRANS_1
/*Description: Defines translation SMIA to IDP linetype
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint8_t type_trans_mspec_4 :3;
        /* IDP LineType value for SMIA MAN_SPEC_4 lines*/
        uint8_t reserved0 :1;
        uint8_t type_trans_mspec_5 :3;
        /* IDP LineType value for SMIA MAN_SPEC_5 lines*/
        uint8_t reserved1 :1;
        uint8_t type_trans_mspec_6 :3;
        /* IDP LineType value for SMIA MAN_SPEC_6 lines*/
    }ISP_SMIARX_TYPE_TRANS_1_ts;

}ISP_SMIARX_TYPE_TRANS_1_tu;



//ISP_SMIARX_TYPE_TRANS_0
/*Description: Defines translation SMIA to IDP linetype
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t type_trans_black :3;
        /* IDP LineType value for SMIA BLACK lines*/
        uint8_t reserved0 :1;
        uint8_t type_trans_dark :3;
        /* IDP LineType value for SMIA DARK lines*/
        uint8_t reserved1 :1;
        uint8_t type_trans_visible :3;
        /* IDP LineType value for SMIA VISIBLE lines*/
        uint8_t reserved2 :1;
        uint8_t type_trans_dummy :3;
        /* IDP LineType value for SMIA DUMMY lines*/
        uint8_t reserved3 :1;
        uint8_t type_trans_mspec_0 :3;
        /* IDP LineType value for SMIA MAN_SPEC_0 lines*/
        uint8_t reserved4 :1;
        uint8_t type_trans_mspec_1 :3;
        /* IDP LineType value for SMIA MAN_SPEC_1 lines*/
        uint8_t reserved5 :1;
        uint8_t type_trans_mspec_2 :3;
        /* IDP LineType value for SMIA MAN_SPEC_2 lines*/
        uint8_t reserved6 :1;
        uint8_t type_trans_mspec_3 :3;
        /* IDP LineType value for SMIA MAN_SPEC_3 lines*/
    }ISP_SMIARX_TYPE_TRANS_0_ts;

}ISP_SMIARX_TYPE_TRANS_0_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_0
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_0_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_0_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_1
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_1_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_1_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_2
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_2_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_2_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_3
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_3_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_3_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_4
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_4_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_4_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_5
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_5_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_5_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_6
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_6_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_6_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_7
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_7_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_7_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_8
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_8_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_8_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_9
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_9_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_9_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_10
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_10_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_10_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_11
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_11_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_11_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_12
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_12_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_12_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_13
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_13_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_13_tu;



//ISP_SMIARX_DESCRIPTOR_OVR_14
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX_DESCRIPTOR_OVR_14_ts;

}ISP_SMIARX_DESCRIPTOR_OVR_14_tu;

typedef struct
{
    ISP_SMIARX_CTRL_tu ISP_SMIARX_CTRL;
    ISP_SMIARX_SETUP_tu ISP_SMIARX_SETUP;
    ISP_SMIARX_FRAME_CTRL_tu ISP_SMIARX_FRAME_CTRL;
    ISP_SMIARX_STATUS_tu ISP_SMIARX_STATUS;
    ISP_SMIARX_TPAT_DATA_RG_tu ISP_SMIARX_TPAT_DATA_RG;
    ISP_SMIARX_TPAT_DATA_BG_tu ISP_SMIARX_TPAT_DATA_BG;
    ISP_SMIARX_TPAT_HCUR_WP_tu ISP_SMIARX_TPAT_HCUR_WP;
    ISP_SMIARX_TPAT_VCUR_WP_tu ISP_SMIARX_TPAT_VCUR_WP;
    ISP_SMIARX_CCP_STATUS_tu ISP_SMIARX_CCP_STATUS;
    ISP_SMIARX_HK_REQ_ADDR_0_tu ISP_SMIARX_HK_REQ_ADDR_0;
    ISP_SMIARX_HK_REQ_ADDR_1_tu ISP_SMIARX_HK_REQ_ADDR_1;
    ISP_SMIARX_HK_REQ_ADDR_2_tu ISP_SMIARX_HK_REQ_ADDR_2;
    ISP_SMIARX_HK_REQ_ADDR_3_tu ISP_SMIARX_HK_REQ_ADDR_3;
    ISP_SMIARX_HK_REQ_DATA_0_tu ISP_SMIARX_HK_REQ_DATA_0;
    ISP_SMIARX_HK_REQ_DATA_1_tu ISP_SMIARX_HK_REQ_DATA_1;
    ISP_SMIARX_HK_REQ_DATA_2_tu ISP_SMIARX_HK_REQ_DATA_2;
    ISP_SMIARX_HK_REQ_DATA_3_tu ISP_SMIARX_HK_REQ_DATA_3;
    ISP_SMIARX_INT_COUNT_0_tu ISP_SMIARX_INT_COUNT_0;
    ISP_SMIARX_INT_COUNT_1_tu ISP_SMIARX_INT_COUNT_1;
    ISP_SMIARX_INT_COUNT_2_tu ISP_SMIARX_INT_COUNT_2;
    ISP_SMIARX_INT_COUNT_3_tu ISP_SMIARX_INT_COUNT_3;
    ISP_SMIARX_DFV_tu ISP_SMIARX_DFV;
    ISP_SMIARX_COUNT_INT_EN_tu ISP_SMIARX_COUNT_INT_EN;
    ISP_SMIARX_OVERRIDE_tu ISP_SMIARX_OVERRIDE;
    ISP_SMIARX_SENSOR_ID_tu ISP_SMIARX_SENSOR_ID;
    ISP_SMIARX_PIXEL_ORDER_tu ISP_SMIARX_PIXEL_ORDER;
    ISP_SMIARX_AUTO_HENV_LENGTH_tu ISP_SMIARX_AUTO_HENV_LENGTH;
    ISP_SMIARX_FRAME_LENGTH_tu ISP_SMIARX_FRAME_LENGTH;
    ISP_SMIARX_LINE_LENGTH_tu ISP_SMIARX_LINE_LENGTH;
    ISP_SMIARX_X_ADDR_START_tu ISP_SMIARX_X_ADDR_START;
    ISP_SMIARX_Y_ADDR_START_tu ISP_SMIARX_Y_ADDR_START;
    ISP_SMIARX_X_ADDR_END_tu ISP_SMIARX_X_ADDR_END;
    ISP_SMIARX_Y_ADDR_END_tu ISP_SMIARX_Y_ADDR_END;
    ISP_SMIARX_X_OUTPUT_SIZE_tu ISP_SMIARX_X_OUTPUT_SIZE;
    ISP_SMIARX_Y_OUTPUT_SIZE_tu ISP_SMIARX_Y_OUTPUT_SIZE;
    ISP_SMIARX_ADDR_INCREMENTS_tu ISP_SMIARX_ADDR_INCREMENTS;
    ISP_SMIARX_FINE_EXPOSURE_tu ISP_SMIARX_FINE_EXPOSURE;
    ISP_SMIARX_COARSE_EXPOSURE_tu ISP_SMIARX_COARSE_EXPOSURE;
    ISP_SMIARX_ANALOG_GAIN_tu ISP_SMIARX_ANALOG_GAIN;
    ISP_SMIARX_MODEL_SUBTYPE_tu ISP_SMIARX_MODEL_SUBTYPE;
    ISP_SMIARX_DESCRIPTOR_0_tu ISP_SMIARX_DESCRIPTOR_0;
    ISP_SMIARX_DESCRIPTOR_1_tu ISP_SMIARX_DESCRIPTOR_1;
    ISP_SMIARX_DESCRIPTOR_2_tu ISP_SMIARX_DESCRIPTOR_2;
    ISP_SMIARX_DESCRIPTOR_3_tu ISP_SMIARX_DESCRIPTOR_3;
    ISP_SMIARX_DESCRIPTOR_4_tu ISP_SMIARX_DESCRIPTOR_4;
    ISP_SMIARX_DESCRIPTOR_5_tu ISP_SMIARX_DESCRIPTOR_5;
    ISP_SMIARX_DESCRIPTOR_6_tu ISP_SMIARX_DESCRIPTOR_6;
    ISP_SMIARX_DESCRIPTOR_7_tu ISP_SMIARX_DESCRIPTOR_7;
    ISP_SMIARX_DESCRIPTOR_8_tu ISP_SMIARX_DESCRIPTOR_8;
    ISP_SMIARX_DESCRIPTOR_9_tu ISP_SMIARX_DESCRIPTOR_9;
    ISP_SMIARX_DESCRIPTOR_10_tu ISP_SMIARX_DESCRIPTOR_10;
    ISP_SMIARX_DESCRIPTOR_11_tu ISP_SMIARX_DESCRIPTOR_11;
    ISP_SMIARX_DESCRIPTOR_12_tu ISP_SMIARX_DESCRIPTOR_12;
    ISP_SMIARX_DESCRIPTOR_13_tu ISP_SMIARX_DESCRIPTOR_13;
    ISP_SMIARX_DESCRIPTOR_14_tu ISP_SMIARX_DESCRIPTOR_14;
    ISP_SMIARX_TYPE_TRANS_1_tu ISP_SMIARX_TYPE_TRANS_1;
    ISP_SMIARX_TYPE_TRANS_0_tu ISP_SMIARX_TYPE_TRANS_0;
    ISP_SMIARX_DESCRIPTOR_OVR_0_tu ISP_SMIARX_DESCRIPTOR_OVR_0;
    ISP_SMIARX_DESCRIPTOR_OVR_1_tu ISP_SMIARX_DESCRIPTOR_OVR_1;
    ISP_SMIARX_DESCRIPTOR_OVR_2_tu ISP_SMIARX_DESCRIPTOR_OVR_2;
    ISP_SMIARX_DESCRIPTOR_OVR_3_tu ISP_SMIARX_DESCRIPTOR_OVR_3;
    ISP_SMIARX_DESCRIPTOR_OVR_4_tu ISP_SMIARX_DESCRIPTOR_OVR_4;
    ISP_SMIARX_DESCRIPTOR_OVR_5_tu ISP_SMIARX_DESCRIPTOR_OVR_5;
    ISP_SMIARX_DESCRIPTOR_OVR_6_tu ISP_SMIARX_DESCRIPTOR_OVR_6;
    ISP_SMIARX_DESCRIPTOR_OVR_7_tu ISP_SMIARX_DESCRIPTOR_OVR_7;
    ISP_SMIARX_DESCRIPTOR_OVR_8_tu ISP_SMIARX_DESCRIPTOR_OVR_8;
    ISP_SMIARX_DESCRIPTOR_OVR_9_tu ISP_SMIARX_DESCRIPTOR_OVR_9;
    ISP_SMIARX_DESCRIPTOR_OVR_10_tu ISP_SMIARX_DESCRIPTOR_OVR_10;
    ISP_SMIARX_DESCRIPTOR_OVR_11_tu ISP_SMIARX_DESCRIPTOR_OVR_11;
    ISP_SMIARX_DESCRIPTOR_OVR_12_tu ISP_SMIARX_DESCRIPTOR_OVR_12;
    ISP_SMIARX_DESCRIPTOR_OVR_13_tu ISP_SMIARX_DESCRIPTOR_OVR_13;
    ISP_SMIARX_DESCRIPTOR_OVR_14_tu ISP_SMIARX_DESCRIPTOR_OVR_14;
}ISP_SMIARX_IP_ts;




//ISP_SMIARX_CTRL


#define Get_ISP_SMIARX_ISP_SMIARX_CTRL_rx_start() p_ISP_SMIARX_IP->ISP_SMIARX_CTRL.ISP_SMIARX_CTRL_ts.rx_start
#define Set_ISP_SMIARX_ISP_SMIARX_CTRL_rx_start(x) (p_ISP_SMIARX_IP->ISP_SMIARX_CTRL.ISP_SMIARX_CTRL_ts.rx_start = x)


#define Get_ISP_SMIARX_ISP_SMIARX_CTRL_rx_stop() p_ISP_SMIARX_IP->ISP_SMIARX_CTRL.ISP_SMIARX_CTRL_ts.rx_stop
#define Set_ISP_SMIARX_ISP_SMIARX_CTRL_rx_stop(x) (p_ISP_SMIARX_IP->ISP_SMIARX_CTRL.ISP_SMIARX_CTRL_ts.rx_stop = x)


#define Get_ISP_SMIARX_ISP_SMIARX_CTRL_rx_abort() p_ISP_SMIARX_IP->ISP_SMIARX_CTRL.ISP_SMIARX_CTRL_ts.rx_abort
#define Set_ISP_SMIARX_ISP_SMIARX_CTRL_rx_abort(x) (p_ISP_SMIARX_IP->ISP_SMIARX_CTRL.ISP_SMIARX_CTRL_ts.rx_abort = x)
#define Set_ISP_SMIARX_ISP_SMIARX_CTRL(rx_start,rx_stop,rx_abort) (p_ISP_SMIARX_IP->ISP_SMIARX_CTRL.word = (uint32_t)rx_start<<0 | (uint32_t)rx_stop<<8 | (uint32_t)rx_abort<<16)
#define Get_ISP_SMIARX_ISP_SMIARX_CTRL() p_ISP_SMIARX_IP->ISP_SMIARX_CTRL.word
#define Set_ISP_SMIARX_ISP_SMIARX_CTRL_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_CTRL.word = x)


//ISP_SMIARX_SETUP


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_ip_pix_width() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ip_pix_width
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_ip_pix_width_B_0x6() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ip_pix_width == ip_pix_width_B_0x6)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_ip_pix_width__B_0x6() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ip_pix_width = ip_pix_width_B_0x6)
#define ip_pix_width_B_0x6 0x6    //(6_BITS)
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_ip_pix_width_B_0x7() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ip_pix_width == ip_pix_width_B_0x7)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_ip_pix_width__B_0x7() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ip_pix_width = ip_pix_width_B_0x7)
#define ip_pix_width_B_0x7 0x7    //(7_BITS)
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_ip_pix_width_B_0x8() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ip_pix_width == ip_pix_width_B_0x8)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_ip_pix_width__B_0x8() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ip_pix_width = ip_pix_width_B_0x8)
#define ip_pix_width_B_0x8 0x8    //(8_BITS)
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_ip_pix_width_B_0xA() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ip_pix_width == ip_pix_width_B_0xA)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_ip_pix_width__B_0xA() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ip_pix_width = ip_pix_width_B_0xA)
#define ip_pix_width_B_0xA 0xA    //(10_BITS)
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_ip_pix_width_B_0xC() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ip_pix_width == ip_pix_width_B_0xC)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_ip_pix_width__B_0xC() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ip_pix_width = ip_pix_width_B_0xC)
#define ip_pix_width_B_0xC 0xC    //(12_BITS)


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_op_pix_width() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.op_pix_width
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_op_pix_width_B_0x6() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.op_pix_width == op_pix_width_B_0x6)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_op_pix_width__B_0x6() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.op_pix_width = op_pix_width_B_0x6)
#define op_pix_width_B_0x6 0x6    //(6_BITS)
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_op_pix_width_B_0x7() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.op_pix_width == op_pix_width_B_0x7)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_op_pix_width__B_0x7() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.op_pix_width = op_pix_width_B_0x7)
#define op_pix_width_B_0x7 0x7    //(7_BITS)
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_op_pix_width_B_0x8() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.op_pix_width == op_pix_width_B_0x8)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_op_pix_width__B_0x8() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.op_pix_width = op_pix_width_B_0x8)
#define op_pix_width_B_0x8 0x8    //(8_BITS)
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_op_pix_width_B_0xA() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.op_pix_width == op_pix_width_B_0xA)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_op_pix_width__B_0xA() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.op_pix_width = op_pix_width_B_0xA)
#define op_pix_width_B_0xA 0xA    //(10_BITS)
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_op_pix_width_B_0xC() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.op_pix_width == op_pix_width_B_0xC)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_op_pix_width__B_0xC() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.op_pix_width = op_pix_width_B_0xC)
#define op_pix_width_B_0xC 0xC    //(12_BITS)


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_parallel_enable() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.parallel_enable
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_parallel_enable(x) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.parallel_enable = x)


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_vsync_polarity() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.vsync_polarity
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_vsync_polarity_ACTIVE_LOW() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.vsync_polarity == vsync_polarity_ACTIVE_LOW)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_vsync_polarity__ACTIVE_LOW() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.vsync_polarity = vsync_polarity_ACTIVE_LOW)
#define vsync_polarity_ACTIVE_LOW 0x0    //Active Low
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_vsync_polarity_ACTIVE_HIGH() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.vsync_polarity == vsync_polarity_ACTIVE_HIGH)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_vsync_polarity__ACTIVE_HIGH() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.vsync_polarity = vsync_polarity_ACTIVE_HIGH)
#define vsync_polarity_ACTIVE_HIGH 0x1    //Active High


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_hsync_polarity() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.hsync_polarity
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_hsync_polarity_ACTIVE_LOW() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.hsync_polarity == hsync_polarity_ACTIVE_LOW)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_hsync_polarity__ACTIVE_LOW() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.hsync_polarity = hsync_polarity_ACTIVE_LOW)
#define hsync_polarity_ACTIVE_LOW 0x0    //Active Low
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_hsync_polarity_ACTIVE_HIGH() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.hsync_polarity == hsync_polarity_ACTIVE_HIGH)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_hsync_polarity__ACTIVE_HIGH() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.hsync_polarity = hsync_polarity_ACTIVE_HIGH)
#define hsync_polarity_ACTIVE_HIGH 0x1    //Active High


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_ds_mode() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ds_mode
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_ds_mode_DISABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ds_mode == ds_mode_DISABLE)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_ds_mode__DISABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ds_mode = ds_mode_DISABLE)
#define ds_mode_DISABLE 0x0    //Disable Data/Strobe encoding
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_ds_mode_ENABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ds_mode == ds_mode_ENABLE)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_ds_mode__ENABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ds_mode = ds_mode_ENABLE)
#define ds_mode_ENABLE 0x1    //Enable Data/Strobe encoding


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_dcpx_enable() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.dcpx_enable
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_dcpx_enable_DISABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.dcpx_enable == dcpx_enable_DISABLE)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_dcpx_enable__DISABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.dcpx_enable = dcpx_enable_DISABLE)
#define dcpx_enable_DISABLE 0x0    //Disable bayer decompression
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_dcpx_enable_ENABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.dcpx_enable == dcpx_enable_ENABLE)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_dcpx_enable__ENABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.dcpx_enable = dcpx_enable_ENABLE)
#define dcpx_enable_ENABLE 0x1    //Enable bayer decompression


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_ccp_sel() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ccp_sel
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_ccp_sel(x) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.ccp_sel = x)


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_reset_ccp_rx_n() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.reset_ccp_rx_n
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_reset_ccp_rx_n(x) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.reset_ccp_rx_n = x)


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_auto_sync() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.auto_sync
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_auto_sync_SYNCHRO_SENSOR() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.auto_sync == auto_sync_SYNCHRO_SENSOR)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_auto_sync__SYNCHRO_SENSOR() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.auto_sync = auto_sync_SYNCHRO_SENSOR)
#define auto_sync_SYNCHRO_SENSOR 0x0    //Sensor (Serial or Parallel)
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_auto_sync_SYNCHRO_AUTO() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.auto_sync == auto_sync_SYNCHRO_AUTO)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_auto_sync__SYNCHRO_AUTO() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.auto_sync = auto_sync_SYNCHRO_AUTO)
#define auto_sync_SYNCHRO_AUTO 0x1    //Auto on rx_start


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type_PATTERN_DISABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type == pattern_type_PATTERN_DISABLE)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type__PATTERN_DISABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type = pattern_type_PATTERN_DISABLE)
#define pattern_type_PATTERN_DISABLE 0x0    //Disabled
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type_PATTERN_COLOUR_BAR() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type == pattern_type_PATTERN_COLOUR_BAR)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type__PATTERN_COLOUR_BAR() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type = pattern_type_PATTERN_COLOUR_BAR)
#define pattern_type_PATTERN_COLOUR_BAR 0x1    //Colour Bars
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type_PATTERN_GRAD_BAR() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type == pattern_type_PATTERN_GRAD_BAR)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type__PATTERN_GRAD_BAR() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type = pattern_type_PATTERN_GRAD_BAR)
#define pattern_type_PATTERN_GRAD_BAR 0x2    //Graduated Colour Bars
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type_PATTERN_DIAG_GREY() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type == pattern_type_PATTERN_DIAG_GREY)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type__PATTERN_DIAG_GREY() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type = pattern_type_PATTERN_DIAG_GREY)
#define pattern_type_PATTERN_DIAG_GREY 0x3    //Diagonal Greyscale
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type_PATTERN_PSEUDORANDOM() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type == pattern_type_PATTERN_PSEUDORANDOM)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type__PATTERN_PSEUDORANDOM() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type = pattern_type_PATTERN_PSEUDORANDOM)
#define pattern_type_PATTERN_PSEUDORANDOM 0x4    //Pseudo-random
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type_PATTERN_HOR_GREY() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type == pattern_type_PATTERN_HOR_GREY)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type__PATTERN_HOR_GREY() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type = pattern_type_PATTERN_HOR_GREY)
#define pattern_type_PATTERN_HOR_GREY 0x5    //Horizontal Greyscale
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type_PATTERN_VERT_GREY() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type == pattern_type_PATTERN_VERT_GREY)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type__PATTERN_VERT_GREY() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type = pattern_type_PATTERN_VERT_GREY)
#define pattern_type_PATTERN_VERT_GREY 0x6    //Vertical Greyscale
#define Is_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type_PATTERN_SOLID() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type == pattern_type_PATTERN_SOLID)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_pattern_type__PATTERN_SOLID() (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.pattern_type = pattern_type_PATTERN_SOLID)
#define pattern_type_PATTERN_SOLID 0x7    //Solid colour


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_no_sof() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.no_sof
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_no_sof(x) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.no_sof = x)


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_clr_ccp_shift_sync() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.clr_ccp_shift_sync
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_clr_ccp_shift_sync(x) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.clr_ccp_shift_sync = x)


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_clr_ccp_crc_error() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.clr_ccp_crc_error
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_clr_ccp_crc_error(x) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.clr_ccp_crc_error = x)


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_clr_pixel_sync_error() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.clr_pixel_sync_error
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_clr_pixel_sync_error(x) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.clr_pixel_sync_error = x)


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_clr_aborted_iframe() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.clr_aborted_iframe
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_clr_aborted_iframe(x) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.clr_aborted_iframe = x)


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_clr_insuff_iline() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.clr_insuff_iline
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_clr_insuff_iline(x) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.clr_insuff_iline = x)


#define Get_ISP_SMIARX_ISP_SMIARX_SETUP_fifo_rd_rst() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.fifo_rd_rst
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_fifo_rd_rst(x) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.ISP_SMIARX_SETUP_ts.fifo_rd_rst = x)
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP(ip_pix_width,op_pix_width,parallel_enable,vsync_polarity,hsync_polarity,ds_mode,dcpx_enable,ccp_sel,reset_ccp_rx_n,auto_sync,pattern_type,no_sof,clr_ccp_shift_sync,clr_ccp_crc_error,clr_pixel_sync_error,clr_aborted_iframe,clr_insuff_iline,fifo_rd_rst) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.word = (uint32_t)ip_pix_width<<0 | (uint32_t)op_pix_width<<4 | (uint32_t)parallel_enable<<8 | (uint32_t)vsync_polarity<<9 | (uint32_t)hsync_polarity<<10 | (uint32_t)ds_mode<<11 | (uint32_t)dcpx_enable<<12 | (uint32_t)ccp_sel<<13 | (uint32_t)reset_ccp_rx_n<<14 | (uint32_t)auto_sync<<16 | (uint32_t)pattern_type<<17 | (uint32_t)no_sof<<20 | (uint32_t)clr_ccp_shift_sync<<24 | (uint32_t)clr_ccp_crc_error<<25 | (uint32_t)clr_pixel_sync_error<<26 | (uint32_t)clr_aborted_iframe<<27 | (uint32_t)clr_insuff_iline<<28 | (uint32_t)fifo_rd_rst<<29)
#define Get_ISP_SMIARX_ISP_SMIARX_SETUP() p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.word
#define Set_ISP_SMIARX_ISP_SMIARX_SETUP_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_SETUP.word = x)


//ISP_SMIARX_FRAME_CTRL


#define Get_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_latency_lines() p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.latency_lines
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_latency_lines(x) (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.latency_lines = x)


#define Get_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_stream_size() p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.stream_size
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_stream_size(x) (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.stream_size = x)


#define Get_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_start_grab_dly() p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.start_grab_dly
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_start_grab_dly(x) (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.start_grab_dly = x)


#define Get_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_ffhc_control() p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.ffhc_control
#define Is_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_ffhc_control_FFHC_DISABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.ffhc_control == ffhc_control_FFHC_DISABLE)
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_ffhc_control__FFHC_DISABLE() (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.ffhc_control = ffhc_control_FFHC_DISABLE)
#define ffhc_control_FFHC_DISABLE 0x0    //Disable/Bypass
#define Is_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_ffhc_control_FFHC_FULL_AUTO() (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.ffhc_control == ffhc_control_FFHC_FULL_AUTO)
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_ffhc_control__FFHC_FULL_AUTO() (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.ffhc_control = ffhc_control_FFHC_FULL_AUTO)
#define ffhc_control_FFHC_FULL_AUTO 0x1    //Fully automatic
#define Is_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_ffhc_control_FFHC_SEMI_AUTO() (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.ffhc_control == ffhc_control_FFHC_SEMI_AUTO)
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_ffhc_control__FFHC_SEMI_AUTO() (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.ffhc_control = ffhc_control_FFHC_SEMI_AUTO)
#define ffhc_control_FFHC_SEMI_AUTO 0x2    //Semi-automatic (Static SOL columns)
#define Is_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_ffhc_control_FFHC_MANUAL() (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.ffhc_control == ffhc_control_FFHC_MANUAL)
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_ffhc_control__FFHC_MANUAL() (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.ffhc_control = ffhc_control_FFHC_MANUAL)
#define ffhc_control_FFHC_MANUAL 0x3    //Manual (Static SOL and EOL columns)


#define Get_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_stop_at_interframe() p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.stop_at_interframe
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_stop_at_interframe(x) (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.ISP_SMIARX_FRAME_CTRL_ts.stop_at_interframe = x)
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL(latency_lines,stream_size,start_grab_dly,ffhc_control,stop_at_interframe) (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.word = (uint32_t)latency_lines<<0 | (uint32_t)stream_size<<8 | (uint32_t)start_grab_dly<<16 | (uint32_t)ffhc_control<<24 | (uint32_t)stop_at_interframe<<26)
#define Get_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL() p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.word
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_CTRL_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_CTRL.word = x)


//ISP_SMIARX_STATUS


#define Get_ISP_SMIARX_ISP_SMIARX_STATUS_frame_counter() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.frame_counter


#define Get_ISP_SMIARX_ISP_SMIARX_STATUS_rx_state() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.rx_state
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_rx_state_GEN_IDLE() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.rx_state == rx_state_GEN_IDLE)
#define rx_state_GEN_IDLE 0x0    //Idle
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_rx_state_GEN_WAITVSTART() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.rx_state == rx_state_GEN_WAITVSTART)
#define rx_state_GEN_WAITVSTART 0x1    //wait vstart
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_rx_state_GEN_RUNNING() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.rx_state == rx_state_GEN_RUNNING)
#define rx_state_GEN_RUNNING 0x2    //running
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_rx_state_GEN_WAITFRAME() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.rx_state == rx_state_GEN_WAITFRAME)
#define rx_state_GEN_WAITFRAME 0x3    //wait frame


#define Get_ISP_SMIARX_ISP_SMIARX_STATUS_ff_state() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.ff_state
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_ff_state_FF_IDLE() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.ff_state == ff_state_FF_IDLE)
#define ff_state_FF_IDLE 0x0    //Idle
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_ff_state_FF_WAIT_EOSD() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.ff_state == ff_state_FF_WAIT_EOSD)
#define ff_state_FF_WAIT_EOSD 0x1    //Waiting for end of status/Data
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_ff_state_FF_FIRSTLINE() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.ff_state == ff_state_FF_FIRSTLINE)
#define ff_state_FF_FIRSTLINE 0x2    //First line of frame (1-cycle state)
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_ff_state_FF_TRANSLATE() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.ff_state == ff_state_FF_TRANSLATE)
#define ff_state_FF_TRANSLATE 0x3    //Translate current row/descriptor
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_ff_state_FF_UPDATE() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.ff_state == ff_state_FF_UPDATE)
#define ff_state_FF_UPDATE 0x4    //Update row/descriptor
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_ff_state_FF_INTERFRAME() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.ff_state == ff_state_FF_INTERFRAME)
#define ff_state_FF_INTERFRAME 0x5    //Interframe


#define Get_ISP_SMIARX_ISP_SMIARX_STATUS_snoop_state() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.snoop_state
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_snoop_state_SNOOP_IDLE() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.snoop_state == snoop_state_SNOOP_IDLE)
#define snoop_state_SNOOP_IDLE 0x0    //Idle
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_snoop_state_SNOOP_TAG_LSN() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.snoop_state == snoop_state_SNOOP_TAG_LSN)
#define snoop_state_SNOOP_TAG_LSN 0x1    //Data tag (LS-Nibble)
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_snoop_state_SNOOP_TAG() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.snoop_state == snoop_state_SNOOP_TAG)
#define snoop_state_SNOOP_TAG 0x2    //Data Tag
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_snoop_state_SNOOP_REG_LSM() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.snoop_state == snoop_state_SNOOP_REG_LSM)
#define snoop_state_SNOOP_REG_LSM 0x3    //Register Data (LS-Nibble)
#define Is_ISP_SMIARX_ISP_SMIARX_STATUS_snoop_state_SNOOP_REG() (p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.snoop_state == snoop_state_SNOOP_REG)
#define snoop_state_SNOOP_REG 0x4    //Register Data


#define Get_ISP_SMIARX_ISP_SMIARX_STATUS_fifo_rd_usedw() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.fifo_rd_usedw


#define Get_ISP_SMIARX_ISP_SMIARX_STATUS_fifo_empty() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.fifo_empty


#define Get_ISP_SMIARX_ISP_SMIARX_STATUS_pixel_sync_error() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.pixel_sync_error


#define Get_ISP_SMIARX_ISP_SMIARX_STATUS_aborted_iframe() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.aborted_iframe


#define Get_ISP_SMIARX_ISP_SMIARX_STATUS_insuff_iline() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.insuff_iline


#define Get_ISP_SMIARX_ISP_SMIARX_STATUS_fifo_under() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.fifo_under


#define Get_ISP_SMIARX_ISP_SMIARX_STATUS_fifo_over() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.ISP_SMIARX_STATUS_ts.fifo_over
#define Get_ISP_SMIARX_ISP_SMIARX_STATUS() p_ISP_SMIARX_IP->ISP_SMIARX_STATUS.word


//ISP_SMIARX_TPAT_DATA_RG


#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_RG_tpat_data_gir() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_RG.ISP_SMIARX_TPAT_DATA_RG_ts.tpat_data_gir
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_RG_tpat_data_gir(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_RG.ISP_SMIARX_TPAT_DATA_RG_ts.tpat_data_gir = x)


#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_RG_tpat_data_red() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_RG.ISP_SMIARX_TPAT_DATA_RG_ts.tpat_data_red
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_RG_tpat_data_red(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_RG.ISP_SMIARX_TPAT_DATA_RG_ts.tpat_data_red = x)
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_RG(tpat_data_gir,tpat_data_red) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_RG.word = (uint32_t)tpat_data_gir<<0 | (uint32_t)tpat_data_red<<16)
#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_RG() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_RG.word
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_RG_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_RG.word = x)


//ISP_SMIARX_TPAT_DATA_BG


#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_BG_tpat_data_gib() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_BG.ISP_SMIARX_TPAT_DATA_BG_ts.tpat_data_gib
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_BG_tpat_data_gib(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_BG.ISP_SMIARX_TPAT_DATA_BG_ts.tpat_data_gib = x)


#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_BG_tpat_data_blu() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_BG.ISP_SMIARX_TPAT_DATA_BG_ts.tpat_data_blu
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_BG_tpat_data_blu(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_BG.ISP_SMIARX_TPAT_DATA_BG_ts.tpat_data_blu = x)
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_BG(tpat_data_gib,tpat_data_blu) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_BG.word = (uint32_t)tpat_data_gib<<0 | (uint32_t)tpat_data_blu<<16)
#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_BG() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_BG.word
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_DATA_BG_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_DATA_BG.word = x)


//ISP_SMIARX_TPAT_HCUR_WP


#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_HCUR_WP_tpat_hcur_posn() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_HCUR_WP.ISP_SMIARX_TPAT_HCUR_WP_ts.tpat_hcur_posn
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_HCUR_WP_tpat_hcur_posn(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_HCUR_WP.ISP_SMIARX_TPAT_HCUR_WP_ts.tpat_hcur_posn = x)


#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_HCUR_WP_tpat_hcur_width() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_HCUR_WP.ISP_SMIARX_TPAT_HCUR_WP_ts.tpat_hcur_width
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_HCUR_WP_tpat_hcur_width(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_HCUR_WP.ISP_SMIARX_TPAT_HCUR_WP_ts.tpat_hcur_width = x)
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_HCUR_WP(tpat_hcur_posn,tpat_hcur_width) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_HCUR_WP.word = (uint32_t)tpat_hcur_posn<<0 | (uint32_t)tpat_hcur_width<<16)
#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_HCUR_WP() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_HCUR_WP.word
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_HCUR_WP_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_HCUR_WP.word = x)


//ISP_SMIARX_TPAT_VCUR_WP


#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_VCUR_WP_tpat_vcur_posn() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_VCUR_WP.ISP_SMIARX_TPAT_VCUR_WP_ts.tpat_vcur_posn
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_VCUR_WP_tpat_vcur_posn(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_VCUR_WP.ISP_SMIARX_TPAT_VCUR_WP_ts.tpat_vcur_posn = x)


#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_VCUR_WP_tpat_vcur_width() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_VCUR_WP.ISP_SMIARX_TPAT_VCUR_WP_ts.tpat_vcur_width
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_VCUR_WP_tpat_vcur_width(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_VCUR_WP.ISP_SMIARX_TPAT_VCUR_WP_ts.tpat_vcur_width = x)
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_VCUR_WP(tpat_vcur_posn,tpat_vcur_width) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_VCUR_WP.word = (uint32_t)tpat_vcur_posn<<0 | (uint32_t)tpat_vcur_width<<16)
#define Get_ISP_SMIARX_ISP_SMIARX_TPAT_VCUR_WP() p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_VCUR_WP.word
#define Set_ISP_SMIARX_ISP_SMIARX_TPAT_VCUR_WP_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TPAT_VCUR_WP.word = x)


//ISP_SMIARX_CCP_STATUS


#define Get_ISP_SMIARX_ISP_SMIARX_CCP_STATUS_ccp_channel() p_ISP_SMIARX_IP->ISP_SMIARX_CCP_STATUS.ISP_SMIARX_CCP_STATUS_ts.ccp_channel


#define Get_ISP_SMIARX_ISP_SMIARX_CCP_STATUS_ccp_false_sync() p_ISP_SMIARX_IP->ISP_SMIARX_CCP_STATUS.ISP_SMIARX_CCP_STATUS_ts.ccp_false_sync


#define Get_ISP_SMIARX_ISP_SMIARX_CCP_STATUS_ccp_shift_sync() p_ISP_SMIARX_IP->ISP_SMIARX_CCP_STATUS.ISP_SMIARX_CCP_STATUS_ts.ccp_shift_sync


#define Get_ISP_SMIARX_ISP_SMIARX_CCP_STATUS_ccp_crc_error() p_ISP_SMIARX_IP->ISP_SMIARX_CCP_STATUS.ISP_SMIARX_CCP_STATUS_ts.ccp_crc_error
#define Get_ISP_SMIARX_ISP_SMIARX_CCP_STATUS() p_ISP_SMIARX_IP->ISP_SMIARX_CCP_STATUS.word


//ISP_SMIARX_HK_REQ_ADDR_0


#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_0_hk_req_addr() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_0.ISP_SMIARX_HK_REQ_ADDR_0_ts.hk_req_addr
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_0_hk_req_addr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_0.ISP_SMIARX_HK_REQ_ADDR_0_ts.hk_req_addr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_0(hk_req_addr) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_0.word = (uint32_t)hk_req_addr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_0() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_0.word
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_0_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_0.word = x)


//ISP_SMIARX_HK_REQ_ADDR_1


#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_1_hk_req_addr() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_1.ISP_SMIARX_HK_REQ_ADDR_1_ts.hk_req_addr
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_1_hk_req_addr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_1.ISP_SMIARX_HK_REQ_ADDR_1_ts.hk_req_addr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_1(hk_req_addr) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_1.word = (uint32_t)hk_req_addr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_1() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_1.word
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_1_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_1.word = x)


//ISP_SMIARX_HK_REQ_ADDR_2


#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_2_hk_req_addr() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_2.ISP_SMIARX_HK_REQ_ADDR_2_ts.hk_req_addr
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_2_hk_req_addr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_2.ISP_SMIARX_HK_REQ_ADDR_2_ts.hk_req_addr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_2(hk_req_addr) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_2.word = (uint32_t)hk_req_addr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_2() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_2.word
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_2_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_2.word = x)


//ISP_SMIARX_HK_REQ_ADDR_3


#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_3_hk_req_addr() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_3.ISP_SMIARX_HK_REQ_ADDR_3_ts.hk_req_addr
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_3_hk_req_addr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_3.ISP_SMIARX_HK_REQ_ADDR_3_ts.hk_req_addr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_3(hk_req_addr) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_3.word = (uint32_t)hk_req_addr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_3() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_3.word
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_ADDR_3_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_ADDR_3.word = x)


//ISP_SMIARX_HK_REQ_DATA_0


#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_0_hk_req_data() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_0.ISP_SMIARX_HK_REQ_DATA_0_ts.hk_req_data
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_0() (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_0.word = )
#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_0() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_0.word
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_0_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_0.word = x)


//ISP_SMIARX_HK_REQ_DATA_1


#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_1_hk_req_data() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_1.ISP_SMIARX_HK_REQ_DATA_1_ts.hk_req_data
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_1() (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_1.word = )
#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_1() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_1.word
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_1_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_1.word = x)


//ISP_SMIARX_HK_REQ_DATA_2


#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_2_hk_req_data() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_2.ISP_SMIARX_HK_REQ_DATA_2_ts.hk_req_data
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_2() (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_2.word = )
#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_2() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_2.word
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_2_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_2.word = x)


//ISP_SMIARX_HK_REQ_DATA_3


#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_3_hk_req_data() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_3.ISP_SMIARX_HK_REQ_DATA_3_ts.hk_req_data
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_3() (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_3.word = )
#define Get_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_3() p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_3.word
#define Set_ISP_SMIARX_ISP_SMIARX_HK_REQ_DATA_3_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_HK_REQ_DATA_3.word = x)


//ISP_SMIARX_INT_COUNT_0


#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_0_pix_count() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_0.ISP_SMIARX_INT_COUNT_0_ts.pix_count
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_0_pix_count(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_0.ISP_SMIARX_INT_COUNT_0_ts.pix_count = x)


#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_0_line_count() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_0.ISP_SMIARX_INT_COUNT_0_ts.line_count
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_0_line_count(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_0.ISP_SMIARX_INT_COUNT_0_ts.line_count = x)
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_0(pix_count,line_count) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_0.word = (uint32_t)pix_count<<0 | (uint32_t)line_count<<16)
#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_0() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_0.word
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_0_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_0.word = x)


//ISP_SMIARX_INT_COUNT_1


#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_1_pix_count() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_1.ISP_SMIARX_INT_COUNT_1_ts.pix_count
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_1_pix_count(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_1.ISP_SMIARX_INT_COUNT_1_ts.pix_count = x)


#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_1_line_count() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_1.ISP_SMIARX_INT_COUNT_1_ts.line_count
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_1_line_count(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_1.ISP_SMIARX_INT_COUNT_1_ts.line_count = x)
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_1(pix_count,line_count) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_1.word = (uint32_t)pix_count<<0 | (uint32_t)line_count<<16)
#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_1() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_1.word
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_1_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_1.word = x)


//ISP_SMIARX_INT_COUNT_2


#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_2_pix_count() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_2.ISP_SMIARX_INT_COUNT_2_ts.pix_count
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_2_pix_count(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_2.ISP_SMIARX_INT_COUNT_2_ts.pix_count = x)


#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_2_line_count() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_2.ISP_SMIARX_INT_COUNT_2_ts.line_count
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_2_line_count(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_2.ISP_SMIARX_INT_COUNT_2_ts.line_count = x)
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_2(pix_count,line_count) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_2.word = (uint32_t)pix_count<<0 | (uint32_t)line_count<<16)
#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_2() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_2.word
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_2_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_2.word = x)


//ISP_SMIARX_INT_COUNT_3


#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_3_pix_count() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_3.ISP_SMIARX_INT_COUNT_3_ts.pix_count
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_3_pix_count(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_3.ISP_SMIARX_INT_COUNT_3_ts.pix_count = x)


#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_3_line_count() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_3.ISP_SMIARX_INT_COUNT_3_ts.line_count
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_3_line_count(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_3.ISP_SMIARX_INT_COUNT_3_ts.line_count = x)
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_3(pix_count,line_count) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_3.word = (uint32_t)pix_count<<0 | (uint32_t)line_count<<16)
#define Get_ISP_SMIARX_ISP_SMIARX_INT_COUNT_3() p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_3.word
#define Set_ISP_SMIARX_ISP_SMIARX_INT_COUNT_3_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_INT_COUNT_3.word = x)


//ISP_SMIARX_DFV


#define Get_ISP_SMIARX_ISP_SMIARX_DFV_dfv_enable() p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_enable
#define Set_ISP_SMIARX_ISP_SMIARX_DFV_dfv_enable(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_enable = x)


#define Get_ISP_SMIARX_ISP_SMIARX_DFV_dfv_count_0_interrupt_ctrl() p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_count_0_interrupt_ctrl
#define Set_ISP_SMIARX_ISP_SMIARX_DFV_dfv_count_0_interrupt_ctrl(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_count_0_interrupt_ctrl = x)


#define Get_ISP_SMIARX_ISP_SMIARX_DFV_dfv_count_1_interrupt_ctrl() p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_count_1_interrupt_ctrl
#define Set_ISP_SMIARX_ISP_SMIARX_DFV_dfv_count_1_interrupt_ctrl(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_count_1_interrupt_ctrl = x)


#define Get_ISP_SMIARX_ISP_SMIARX_DFV_dfv_count_2_interrupt_ctrl() p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_count_2_interrupt_ctrl
#define Set_ISP_SMIARX_ISP_SMIARX_DFV_dfv_count_2_interrupt_ctrl(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_count_2_interrupt_ctrl = x)


#define Get_ISP_SMIARX_ISP_SMIARX_DFV_dfv_count_3_interrupt_ctrl() p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_count_3_interrupt_ctrl
#define Set_ISP_SMIARX_ISP_SMIARX_DFV_dfv_count_3_interrupt_ctrl(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_count_3_interrupt_ctrl = x)


#define Get_ISP_SMIARX_ISP_SMIARX_DFV_dfv_seq_complete_interrupt_ctrl() p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_seq_complete_interrupt_ctrl
#define Set_ISP_SMIARX_ISP_SMIARX_DFV_dfv_seq_complete_interrupt_ctrl(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DFV.ISP_SMIARX_DFV_ts.dfv_seq_complete_interrupt_ctrl = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DFV(dfv_enable,dfv_count_0_interrupt_ctrl,dfv_count_1_interrupt_ctrl,dfv_count_2_interrupt_ctrl,dfv_count_3_interrupt_ctrl,dfv_seq_complete_interrupt_ctrl) (p_ISP_SMIARX_IP->ISP_SMIARX_DFV.word = (uint32_t)dfv_enable<<0 | (uint32_t)dfv_count_0_interrupt_ctrl<<1 | (uint32_t)dfv_count_1_interrupt_ctrl<<2 | (uint32_t)dfv_count_2_interrupt_ctrl<<3 | (uint32_t)dfv_count_3_interrupt_ctrl<<4 | (uint32_t)dfv_seq_complete_interrupt_ctrl<<5)
#define Get_ISP_SMIARX_ISP_SMIARX_DFV() p_ISP_SMIARX_IP->ISP_SMIARX_DFV.word
#define Set_ISP_SMIARX_ISP_SMIARX_DFV_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DFV.word = x)


//ISP_SMIARX_COUNT_INT_EN


#define Get_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN_rx_line_count_0_int_en() p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.ISP_SMIARX_COUNT_INT_EN_ts.rx_line_count_0_int_en
#define Set_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN_rx_line_count_0_int_en(x) (p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.ISP_SMIARX_COUNT_INT_EN_ts.rx_line_count_0_int_en = x)


#define Get_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN_rx_line_count_1_int_en() p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.ISP_SMIARX_COUNT_INT_EN_ts.rx_line_count_1_int_en
#define Set_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN_rx_line_count_1_int_en(x) (p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.ISP_SMIARX_COUNT_INT_EN_ts.rx_line_count_1_int_en = x)


#define Get_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN_rx_line_count_2_int_en() p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.ISP_SMIARX_COUNT_INT_EN_ts.rx_line_count_2_int_en
#define Set_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN_rx_line_count_2_int_en(x) (p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.ISP_SMIARX_COUNT_INT_EN_ts.rx_line_count_2_int_en = x)


#define Get_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN_rx_line_count_3_int_en() p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.ISP_SMIARX_COUNT_INT_EN_ts.rx_line_count_3_int_en
#define Set_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN_rx_line_count_3_int_en(x) (p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.ISP_SMIARX_COUNT_INT_EN_ts.rx_line_count_3_int_en = x)


#define Get_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN_rx_seq_complete_int_en() p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.ISP_SMIARX_COUNT_INT_EN_ts.rx_seq_complete_int_en
#define Set_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN_rx_seq_complete_int_en(x) (p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.ISP_SMIARX_COUNT_INT_EN_ts.rx_seq_complete_int_en = x)
#define Set_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN(rx_line_count_0_int_en,rx_line_count_1_int_en,rx_line_count_2_int_en,rx_line_count_3_int_en,rx_seq_complete_int_en) (p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.word = (uint32_t)rx_line_count_0_int_en<<0 | (uint32_t)rx_line_count_1_int_en<<1 | (uint32_t)rx_line_count_2_int_en<<2 | (uint32_t)rx_line_count_3_int_en<<3 | (uint32_t)rx_seq_complete_int_en<<4)
#define Get_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN() p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.word
#define Set_ISP_SMIARX_ISP_SMIARX_COUNT_INT_EN_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_COUNT_INT_EN.word = x)


//ISP_SMIARX_OVERRIDE


#define Get_ISP_SMIARX_ISP_SMIARX_OVERRIDE_override() p_ISP_SMIARX_IP->ISP_SMIARX_OVERRIDE.ISP_SMIARX_OVERRIDE_ts.override
#define Set_ISP_SMIARX_ISP_SMIARX_OVERRIDE_override(x) (p_ISP_SMIARX_IP->ISP_SMIARX_OVERRIDE.ISP_SMIARX_OVERRIDE_ts.override = x)
#define Set_ISP_SMIARX_ISP_SMIARX_OVERRIDE(override) (p_ISP_SMIARX_IP->ISP_SMIARX_OVERRIDE.word = (uint32_t)override<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_OVERRIDE() p_ISP_SMIARX_IP->ISP_SMIARX_OVERRIDE.word
#define Set_ISP_SMIARX_ISP_SMIARX_OVERRIDE_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_OVERRIDE.word = x)


//ISP_SMIARX_SENSOR_ID


#define Get_ISP_SMIARX_ISP_SMIARX_SENSOR_ID_sensor_id() p_ISP_SMIARX_IP->ISP_SMIARX_SENSOR_ID.ISP_SMIARX_SENSOR_ID_ts.sensor_id
#define Get_ISP_SMIARX_ISP_SMIARX_SENSOR_ID() p_ISP_SMIARX_IP->ISP_SMIARX_SENSOR_ID.word


//ISP_SMIARX_PIXEL_ORDER


#define Get_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order() p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order
#define Is_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_B_0x0() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order == pixel_order_B_0x0)
#define pixel_order_B_0x0 0x0    //GR
#define Is_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_B_0x1() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order == pixel_order_B_0x1)
#define pixel_order_B_0x1 0x1    //RG
#define Is_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_B_0x2() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order == pixel_order_B_0x2)
#define pixel_order_B_0x2 0x2    //BG
#define Is_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_B_0x3() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order == pixel_order_B_0x3)
#define pixel_order_B_0x3 0x3    //GB


#define Get_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order_ovr
#define Is_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_ovr_B_0x0() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order_ovr == pixel_order_ovr_B_0x0)
#define Set_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_ovr__B_0x0() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order_ovr = pixel_order_ovr_B_0x0)
#define pixel_order_ovr_B_0x0 0x0    //GR
#define Is_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_ovr_B_0x1() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order_ovr == pixel_order_ovr_B_0x1)
#define Set_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_ovr__B_0x1() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order_ovr = pixel_order_ovr_B_0x1)
#define pixel_order_ovr_B_0x1 0x1    //RG
#define Is_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_ovr_B_0x2() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order_ovr == pixel_order_ovr_B_0x2)
#define Set_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_ovr__B_0x2() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order_ovr = pixel_order_ovr_B_0x2)
#define pixel_order_ovr_B_0x2 0x2    //BG
#define Is_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_ovr_B_0x3() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order_ovr == pixel_order_ovr_B_0x3)
#define Set_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_pixel_order_ovr__B_0x3() (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.ISP_SMIARX_PIXEL_ORDER_ts.pixel_order_ovr = pixel_order_ovr_B_0x3)
#define pixel_order_ovr_B_0x3 0x3    //GB
#define Set_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER(pixel_order_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.word = (uint32_t)pixel_order_ovr<<8)
#define Get_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER() p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.word
#define Set_ISP_SMIARX_ISP_SMIARX_PIXEL_ORDER_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_PIXEL_ORDER.word = x)


//ISP_SMIARX_AUTO_HENV_LENGTH


#define Get_ISP_SMIARX_ISP_SMIARX_AUTO_HENV_LENGTH_auto_henv_length() p_ISP_SMIARX_IP->ISP_SMIARX_AUTO_HENV_LENGTH.ISP_SMIARX_AUTO_HENV_LENGTH_ts.auto_henv_length
#define Set_ISP_SMIARX_ISP_SMIARX_AUTO_HENV_LENGTH_auto_henv_length(x) (p_ISP_SMIARX_IP->ISP_SMIARX_AUTO_HENV_LENGTH.ISP_SMIARX_AUTO_HENV_LENGTH_ts.auto_henv_length = x)
#define Set_ISP_SMIARX_ISP_SMIARX_AUTO_HENV_LENGTH(auto_henv_length) (p_ISP_SMIARX_IP->ISP_SMIARX_AUTO_HENV_LENGTH.word = (uint32_t)auto_henv_length<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_AUTO_HENV_LENGTH() p_ISP_SMIARX_IP->ISP_SMIARX_AUTO_HENV_LENGTH.word
#define Set_ISP_SMIARX_ISP_SMIARX_AUTO_HENV_LENGTH_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_AUTO_HENV_LENGTH.word = x)


//ISP_SMIARX_FRAME_LENGTH


#define Get_ISP_SMIARX_ISP_SMIARX_FRAME_LENGTH_frame_length() p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_LENGTH.ISP_SMIARX_FRAME_LENGTH_ts.frame_length


#define Get_ISP_SMIARX_ISP_SMIARX_FRAME_LENGTH_frame_length_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_LENGTH.ISP_SMIARX_FRAME_LENGTH_ts.frame_length_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_LENGTH_frame_length_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_LENGTH.ISP_SMIARX_FRAME_LENGTH_ts.frame_length_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_LENGTH(frame_length_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_LENGTH.word = (uint32_t)frame_length_ovr<<16)
#define Get_ISP_SMIARX_ISP_SMIARX_FRAME_LENGTH() p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_LENGTH.word
#define Set_ISP_SMIARX_ISP_SMIARX_FRAME_LENGTH_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_FRAME_LENGTH.word = x)


//ISP_SMIARX_LINE_LENGTH


#define Get_ISP_SMIARX_ISP_SMIARX_LINE_LENGTH_line_length() p_ISP_SMIARX_IP->ISP_SMIARX_LINE_LENGTH.ISP_SMIARX_LINE_LENGTH_ts.line_length


#define Get_ISP_SMIARX_ISP_SMIARX_LINE_LENGTH_line_length_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_LINE_LENGTH.ISP_SMIARX_LINE_LENGTH_ts.line_length_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_LINE_LENGTH_line_length_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_LINE_LENGTH.ISP_SMIARX_LINE_LENGTH_ts.line_length_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_LINE_LENGTH(line_length_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_LINE_LENGTH.word = (uint32_t)line_length_ovr<<16)
#define Get_ISP_SMIARX_ISP_SMIARX_LINE_LENGTH() p_ISP_SMIARX_IP->ISP_SMIARX_LINE_LENGTH.word
#define Set_ISP_SMIARX_ISP_SMIARX_LINE_LENGTH_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_LINE_LENGTH.word = x)


//ISP_SMIARX_X_ADDR_START


#define Get_ISP_SMIARX_ISP_SMIARX_X_ADDR_START_x_addr_start() p_ISP_SMIARX_IP->ISP_SMIARX_X_ADDR_START.ISP_SMIARX_X_ADDR_START_ts.x_addr_start
#define Get_ISP_SMIARX_ISP_SMIARX_X_ADDR_START() p_ISP_SMIARX_IP->ISP_SMIARX_X_ADDR_START.word


//ISP_SMIARX_Y_ADDR_START


#define Get_ISP_SMIARX_ISP_SMIARX_Y_ADDR_START_y_addr_start() p_ISP_SMIARX_IP->ISP_SMIARX_Y_ADDR_START.ISP_SMIARX_Y_ADDR_START_ts.y_addr_start
#define Get_ISP_SMIARX_ISP_SMIARX_Y_ADDR_START() p_ISP_SMIARX_IP->ISP_SMIARX_Y_ADDR_START.word


//ISP_SMIARX_X_ADDR_END


#define Get_ISP_SMIARX_ISP_SMIARX_X_ADDR_END_x_addr_end() p_ISP_SMIARX_IP->ISP_SMIARX_X_ADDR_END.ISP_SMIARX_X_ADDR_END_ts.x_addr_end
#define Get_ISP_SMIARX_ISP_SMIARX_X_ADDR_END() p_ISP_SMIARX_IP->ISP_SMIARX_X_ADDR_END.word


//ISP_SMIARX_Y_ADDR_END


#define Get_ISP_SMIARX_ISP_SMIARX_Y_ADDR_END_y_addr_end() p_ISP_SMIARX_IP->ISP_SMIARX_Y_ADDR_END.ISP_SMIARX_Y_ADDR_END_ts.y_addr_end
#define Get_ISP_SMIARX_ISP_SMIARX_Y_ADDR_END() p_ISP_SMIARX_IP->ISP_SMIARX_Y_ADDR_END.word


//ISP_SMIARX_X_OUTPUT_SIZE


#define Get_ISP_SMIARX_ISP_SMIARX_X_OUTPUT_SIZE_x_output_size() p_ISP_SMIARX_IP->ISP_SMIARX_X_OUTPUT_SIZE.ISP_SMIARX_X_OUTPUT_SIZE_ts.x_output_size
#define Get_ISP_SMIARX_ISP_SMIARX_X_OUTPUT_SIZE() p_ISP_SMIARX_IP->ISP_SMIARX_X_OUTPUT_SIZE.word


//ISP_SMIARX_Y_OUTPUT_SIZE


#define Get_ISP_SMIARX_ISP_SMIARX_Y_OUTPUT_SIZE_y_output_size() p_ISP_SMIARX_IP->ISP_SMIARX_Y_OUTPUT_SIZE.ISP_SMIARX_Y_OUTPUT_SIZE_ts.y_output_size
#define Get_ISP_SMIARX_ISP_SMIARX_Y_OUTPUT_SIZE() p_ISP_SMIARX_IP->ISP_SMIARX_Y_OUTPUT_SIZE.word


//ISP_SMIARX_ADDR_INCREMENTS


#define Get_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_x_even_inc_lsb() p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.x_even_inc_lsb


#define Get_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_x_even_inc_lsb_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.x_even_inc_lsb_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_x_even_inc_lsb_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.x_even_inc_lsb_ovr = x)


#define Get_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_x_odd_inc_lsb() p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.x_odd_inc_lsb


#define Get_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_x_odd_inc_lsb_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.x_odd_inc_lsb_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_x_odd_inc_lsb_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.x_odd_inc_lsb_ovr = x)


#define Get_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_y_even_inc_lsb() p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.y_even_inc_lsb


#define Get_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_y_even_inc_lsb_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.y_even_inc_lsb_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_y_even_inc_lsb_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.y_even_inc_lsb_ovr = x)


#define Get_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_y_odd_inc_lsb() p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.y_odd_inc_lsb


#define Get_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_y_odd_inc_lsb_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.y_odd_inc_lsb_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_y_odd_inc_lsb_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.ISP_SMIARX_ADDR_INCREMENTS_ts.y_odd_inc_lsb_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS(x_even_inc_lsb_ovr,x_odd_inc_lsb_ovr,y_even_inc_lsb_ovr,y_odd_inc_lsb_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.word = (uint32_t)x_even_inc_lsb_ovr<<1 | (uint32_t)x_odd_inc_lsb_ovr<<3 | (uint32_t)y_even_inc_lsb_ovr<<5 | (uint32_t)y_odd_inc_lsb_ovr<<7)
#define Get_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS() p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.word
#define Set_ISP_SMIARX_ISP_SMIARX_ADDR_INCREMENTS_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_ADDR_INCREMENTS.word = x)


//ISP_SMIARX_FINE_EXPOSURE


#define Get_ISP_SMIARX_ISP_SMIARX_FINE_EXPOSURE_fine_exposure() p_ISP_SMIARX_IP->ISP_SMIARX_FINE_EXPOSURE.ISP_SMIARX_FINE_EXPOSURE_ts.fine_exposure
#define Get_ISP_SMIARX_ISP_SMIARX_FINE_EXPOSURE() p_ISP_SMIARX_IP->ISP_SMIARX_FINE_EXPOSURE.word


//ISP_SMIARX_COARSE_EXPOSURE


#define Get_ISP_SMIARX_ISP_SMIARX_COARSE_EXPOSURE_coarse_exposure() p_ISP_SMIARX_IP->ISP_SMIARX_COARSE_EXPOSURE.ISP_SMIARX_COARSE_EXPOSURE_ts.coarse_exposure
#define Get_ISP_SMIARX_ISP_SMIARX_COARSE_EXPOSURE() p_ISP_SMIARX_IP->ISP_SMIARX_COARSE_EXPOSURE.word


//ISP_SMIARX_ANALOG_GAIN


#define Get_ISP_SMIARX_ISP_SMIARX_ANALOG_GAIN_analog_gain() p_ISP_SMIARX_IP->ISP_SMIARX_ANALOG_GAIN.ISP_SMIARX_ANALOG_GAIN_ts.analog_gain
#define Get_ISP_SMIARX_ISP_SMIARX_ANALOG_GAIN() p_ISP_SMIARX_IP->ISP_SMIARX_ANALOG_GAIN.word


//ISP_SMIARX_MODEL_SUBTYPE


#define Get_ISP_SMIARX_ISP_SMIARX_MODEL_SUBTYPE_frame_format_model_subtype() p_ISP_SMIARX_IP->ISP_SMIARX_MODEL_SUBTYPE.ISP_SMIARX_MODEL_SUBTYPE_ts.frame_format_model_subtype


#define Get_ISP_SMIARX_ISP_SMIARX_MODEL_SUBTYPE_frame_format_model_subtype_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_MODEL_SUBTYPE.ISP_SMIARX_MODEL_SUBTYPE_ts.frame_format_model_subtype_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_MODEL_SUBTYPE_frame_format_model_subtype_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_MODEL_SUBTYPE.ISP_SMIARX_MODEL_SUBTYPE_ts.frame_format_model_subtype_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_MODEL_SUBTYPE(frame_format_model_subtype_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_MODEL_SUBTYPE.word = (uint32_t)frame_format_model_subtype_ovr<<8)
#define Get_ISP_SMIARX_ISP_SMIARX_MODEL_SUBTYPE() p_ISP_SMIARX_IP->ISP_SMIARX_MODEL_SUBTYPE.word
#define Set_ISP_SMIARX_ISP_SMIARX_MODEL_SUBTYPE_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_MODEL_SUBTYPE.word = x)


//ISP_SMIARX_DESCRIPTOR_0


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_0_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_0.ISP_SMIARX_DESCRIPTOR_0_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_0() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_0.word


//ISP_SMIARX_DESCRIPTOR_1


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_1_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_1.ISP_SMIARX_DESCRIPTOR_1_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_1() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_1.word


//ISP_SMIARX_DESCRIPTOR_2


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_2_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_2.ISP_SMIARX_DESCRIPTOR_2_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_2() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_2.word


//ISP_SMIARX_DESCRIPTOR_3


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_3_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_3.ISP_SMIARX_DESCRIPTOR_3_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_3() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_3.word


//ISP_SMIARX_DESCRIPTOR_4


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_4_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_4.ISP_SMIARX_DESCRIPTOR_4_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_4() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_4.word


//ISP_SMIARX_DESCRIPTOR_5


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_5_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_5.ISP_SMIARX_DESCRIPTOR_5_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_5() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_5.word


//ISP_SMIARX_DESCRIPTOR_6


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_6_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_6.ISP_SMIARX_DESCRIPTOR_6_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_6() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_6.word


//ISP_SMIARX_DESCRIPTOR_7


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_7_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_7.ISP_SMIARX_DESCRIPTOR_7_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_7() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_7.word


//ISP_SMIARX_DESCRIPTOR_8


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_8_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_8.ISP_SMIARX_DESCRIPTOR_8_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_8() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_8.word


//ISP_SMIARX_DESCRIPTOR_9


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_9_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_9.ISP_SMIARX_DESCRIPTOR_9_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_9() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_9.word


//ISP_SMIARX_DESCRIPTOR_10


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_10_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_10.ISP_SMIARX_DESCRIPTOR_10_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_10() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_10.word


//ISP_SMIARX_DESCRIPTOR_11


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_11_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_11.ISP_SMIARX_DESCRIPTOR_11_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_11() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_11.word


//ISP_SMIARX_DESCRIPTOR_12


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_12_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_12.ISP_SMIARX_DESCRIPTOR_12_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_12() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_12.word


//ISP_SMIARX_DESCRIPTOR_13


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_13_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_13.ISP_SMIARX_DESCRIPTOR_13_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_13() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_13.word


//ISP_SMIARX_DESCRIPTOR_14


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_14_frame_format_descriptor() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_14.ISP_SMIARX_DESCRIPTOR_14_ts.frame_format_descriptor
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_14() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_14.word


//ISP_SMIARX_TYPE_TRANS_1


#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_4() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_4
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_4_BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_4 == type_trans_mspec_4_BLANK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_4__BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_4 = type_trans_mspec_4_BLANK)
#define type_trans_mspec_4_BLANK 0x0    //MAN_SPEC_4 lines will be converted to BLANK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_4_BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_4 == type_trans_mspec_4_BLACK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_4__BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_4 = type_trans_mspec_4_BLACK)
#define type_trans_mspec_4_BLACK 0x1    //MAN_SPEC_4 lines will be converted to BLACK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_4_DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_4 == type_trans_mspec_4_DARK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_4__DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_4 = type_trans_mspec_4_DARK)
#define type_trans_mspec_4_DARK 0x2    //MAN_SPEC_4 lines will be converted to DARK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_4_ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_4 == type_trans_mspec_4_ACTIVE)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_4__ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_4 = type_trans_mspec_4_ACTIVE)
#define type_trans_mspec_4_ACTIVE 0x3    //MAN_SPEC_4 lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_5() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_5
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_5_BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_5 == type_trans_mspec_5_BLANK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_5__BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_5 = type_trans_mspec_5_BLANK)
#define type_trans_mspec_5_BLANK 0x0    //MAN_SPEC_5 lines will be converted to BLANK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_5_BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_5 == type_trans_mspec_5_BLACK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_5__BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_5 = type_trans_mspec_5_BLACK)
#define type_trans_mspec_5_BLACK 0x1    //MAN_SPEC_5 lines will be converted to BLACK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_5_DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_5 == type_trans_mspec_5_DARK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_5__DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_5 = type_trans_mspec_5_DARK)
#define type_trans_mspec_5_DARK 0x2    //MAN_SPEC_5 lines will be converted to DARK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_5_ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_5 == type_trans_mspec_5_ACTIVE)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_5__ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_5 = type_trans_mspec_5_ACTIVE)
#define type_trans_mspec_5_ACTIVE 0x3    //MAN_SPEC_5 lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_6() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_6
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_6_BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_6 == type_trans_mspec_6_BLANK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_6__BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_6 = type_trans_mspec_6_BLANK)
#define type_trans_mspec_6_BLANK 0x0    //MAN_SPEC_6 lines will be converted to BLANK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_6_BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_6 == type_trans_mspec_6_BLACK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_6__BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_6 = type_trans_mspec_6_BLACK)
#define type_trans_mspec_6_BLACK 0x1    //MAN_SPEC_6 lines will be converted to BLACK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_6_DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_6 == type_trans_mspec_6_DARK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_6__DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_6 = type_trans_mspec_6_DARK)
#define type_trans_mspec_6_DARK 0x2    //MAN_SPEC_6 lines will be converted to DARK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_6_ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_6 == type_trans_mspec_6_ACTIVE)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_type_trans_mspec_6__ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.ISP_SMIARX_TYPE_TRANS_1_ts.type_trans_mspec_6 = type_trans_mspec_6_ACTIVE)
#define type_trans_mspec_6_ACTIVE 0x3    //MAN_SPEC_6 lines will be converted to ACTIVE lines
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1(type_trans_mspec_4,type_trans_mspec_5,type_trans_mspec_6) (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.word = (uint16_t)type_trans_mspec_4<<0 | (uint16_t)type_trans_mspec_5<<4 | (uint16_t)type_trans_mspec_6<<8)
#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.word
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_1_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_1.word = x)


//ISP_SMIARX_TYPE_TRANS_0


#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_black() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_black
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_black_BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_black == type_trans_black_BLANK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_black__BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_black = type_trans_black_BLANK)
#define type_trans_black_BLANK 0x0    //BLACK lines will be converted to BLANK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_black_BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_black == type_trans_black_BLACK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_black__BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_black = type_trans_black_BLACK)
#define type_trans_black_BLACK 0x1    //BLACK lines will be converted to BLACK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_black_DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_black == type_trans_black_DARK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_black__DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_black = type_trans_black_DARK)
#define type_trans_black_DARK 0x2    //BLACK lines will be converted to DARK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_black_ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_black == type_trans_black_ACTIVE)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_black__ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_black = type_trans_black_ACTIVE)
#define type_trans_black_ACTIVE 0x3    //BLACK lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dark() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dark
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dark_BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dark == type_trans_dark_BLANK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dark__BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dark = type_trans_dark_BLANK)
#define type_trans_dark_BLANK 0x0    //DARK lines will be converted to BLANK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dark_BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dark == type_trans_dark_BLACK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dark__BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dark = type_trans_dark_BLACK)
#define type_trans_dark_BLACK 0x1    //DARK lines will be converted to BLACK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dark_DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dark == type_trans_dark_DARK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dark__DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dark = type_trans_dark_DARK)
#define type_trans_dark_DARK 0x2    //DARK lines will be converted to DARK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dark_ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dark == type_trans_dark_ACTIVE)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dark__ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dark = type_trans_dark_ACTIVE)
#define type_trans_dark_ACTIVE 0x3    //DARK lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_visible() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_visible
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_visible_BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_visible == type_trans_visible_BLANK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_visible__BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_visible = type_trans_visible_BLANK)
#define type_trans_visible_BLANK 0x0    //VISIBLE lines will be converted to BLANK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_visible_BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_visible == type_trans_visible_BLACK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_visible__BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_visible = type_trans_visible_BLACK)
#define type_trans_visible_BLACK 0x1    //VISIBLE lines will be converted to BLACK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_visible_DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_visible == type_trans_visible_DARK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_visible__DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_visible = type_trans_visible_DARK)
#define type_trans_visible_DARK 0x2    //VISIBLE lines will be converted to DARK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_visible_ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_visible == type_trans_visible_ACTIVE)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_visible__ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_visible = type_trans_visible_ACTIVE)
#define type_trans_visible_ACTIVE 0x3    //VISIBLE lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dummy() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dummy
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dummy_BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dummy == type_trans_dummy_BLANK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dummy__BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dummy = type_trans_dummy_BLANK)
#define type_trans_dummy_BLANK 0x0    //DUMMY lines will be converted to BLANK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dummy_BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dummy == type_trans_dummy_BLACK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dummy__BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dummy = type_trans_dummy_BLACK)
#define type_trans_dummy_BLACK 0x1    //DUMMY lines will be converted to BLACK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dummy_DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dummy == type_trans_dummy_DARK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dummy__DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dummy = type_trans_dummy_DARK)
#define type_trans_dummy_DARK 0x2    //DUMMY lines will be converted to DARK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dummy_ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dummy == type_trans_dummy_ACTIVE)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_dummy__ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_dummy = type_trans_dummy_ACTIVE)
#define type_trans_dummy_ACTIVE 0x3    //DUMMY lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_0() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_0
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_0_BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_0 == type_trans_mspec_0_BLANK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_0__BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_0 = type_trans_mspec_0_BLANK)
#define type_trans_mspec_0_BLANK 0x0    //MAN_SPEC_0 lines will be converted to BLANK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_0_BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_0 == type_trans_mspec_0_BLACK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_0__BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_0 = type_trans_mspec_0_BLACK)
#define type_trans_mspec_0_BLACK 0x1    //MAN_SPEC_0 lines will be converted to BLACK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_0_DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_0 == type_trans_mspec_0_DARK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_0__DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_0 = type_trans_mspec_0_DARK)
#define type_trans_mspec_0_DARK 0x2    //MAN_SPEC_0 lines will be converted to DARK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_0_ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_0 == type_trans_mspec_0_ACTIVE)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_0__ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_0 = type_trans_mspec_0_ACTIVE)
#define type_trans_mspec_0_ACTIVE 0x3    //MAN_SPEC_0 lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_1() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_1
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_1_BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_1 == type_trans_mspec_1_BLANK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_1__BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_1 = type_trans_mspec_1_BLANK)
#define type_trans_mspec_1_BLANK 0x0    //MAN_SPEC_1 lines will be converted to BLANK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_1_BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_1 == type_trans_mspec_1_BLACK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_1__BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_1 = type_trans_mspec_1_BLACK)
#define type_trans_mspec_1_BLACK 0x1    //MAN_SPEC_1 lines will be converted to BLACK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_1_DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_1 == type_trans_mspec_1_DARK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_1__DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_1 = type_trans_mspec_1_DARK)
#define type_trans_mspec_1_DARK 0x2    //MAN_SPEC_1 lines will be converted to DARK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_1_ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_1 == type_trans_mspec_1_ACTIVE)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_1__ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_1 = type_trans_mspec_1_ACTIVE)
#define type_trans_mspec_1_ACTIVE 0x3    //MAN_SPEC_1 lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_2() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_2
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_2_BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_2 == type_trans_mspec_2_BLANK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_2__BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_2 = type_trans_mspec_2_BLANK)
#define type_trans_mspec_2_BLANK 0x0    //MAN_SPEC_2 lines will be converted to BLANK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_2_BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_2 == type_trans_mspec_2_BLACK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_2__BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_2 = type_trans_mspec_2_BLACK)
#define type_trans_mspec_2_BLACK 0x1    //MAN_SPEC_2 lines will be converted to BLACK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_2_DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_2 == type_trans_mspec_2_DARK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_2__DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_2 = type_trans_mspec_2_DARK)
#define type_trans_mspec_2_DARK 0x2    //MAN_SPEC_2 lines will be converted to DARK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_2_ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_2 == type_trans_mspec_2_ACTIVE)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_2__ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_2 = type_trans_mspec_2_ACTIVE)
#define type_trans_mspec_2_ACTIVE 0x3    //MAN_SPEC_2 lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_3() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_3
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_3_BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_3 == type_trans_mspec_3_BLANK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_3__BLANK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_3 = type_trans_mspec_3_BLANK)
#define type_trans_mspec_3_BLANK 0x0    //MAN_SPEC_3 lines will be converted to BLANK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_3_BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_3 == type_trans_mspec_3_BLACK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_3__BLACK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_3 = type_trans_mspec_3_BLACK)
#define type_trans_mspec_3_BLACK 0x1    //MAN_SPEC_3 lines will be converted to BLACK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_3_DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_3 == type_trans_mspec_3_DARK)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_3__DARK() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_3 = type_trans_mspec_3_DARK)
#define type_trans_mspec_3_DARK 0x2    //MAN_SPEC_3 lines will be converted to DARK lines
#define Is_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_3_ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_3 == type_trans_mspec_3_ACTIVE)
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_type_trans_mspec_3__ACTIVE() (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.ISP_SMIARX_TYPE_TRANS_0_ts.type_trans_mspec_3 = type_trans_mspec_3_ACTIVE)
#define type_trans_mspec_3_ACTIVE 0x3    //MAN_SPEC_3 lines will be converted to ACTIVE lines
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0(type_trans_black,type_trans_dark,type_trans_visible,type_trans_dummy,type_trans_mspec_0,type_trans_mspec_1,type_trans_mspec_2,type_trans_mspec_3) (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.word = (uint32_t)type_trans_black<<0 | (uint32_t)type_trans_dark<<4 | (uint32_t)type_trans_visible<<8 | (uint32_t)type_trans_dummy<<12 | (uint32_t)type_trans_mspec_0<<16 | (uint32_t)type_trans_mspec_1<<20 | (uint32_t)type_trans_mspec_2<<24 | (uint32_t)type_trans_mspec_3<<28)
#define Get_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0() p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.word
#define Set_ISP_SMIARX_ISP_SMIARX_TYPE_TRANS_0_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_TYPE_TRANS_0.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_0


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_0_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_0.ISP_SMIARX_DESCRIPTOR_OVR_0_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_0_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_0.ISP_SMIARX_DESCRIPTOR_OVR_0_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_0(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_0.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_0() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_0.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_0_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_0.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_1


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_1_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_1.ISP_SMIARX_DESCRIPTOR_OVR_1_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_1_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_1.ISP_SMIARX_DESCRIPTOR_OVR_1_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_1(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_1.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_1() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_1.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_1_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_1.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_2


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_2_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_2.ISP_SMIARX_DESCRIPTOR_OVR_2_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_2_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_2.ISP_SMIARX_DESCRIPTOR_OVR_2_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_2(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_2.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_2() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_2.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_2_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_2.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_3


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_3_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_3.ISP_SMIARX_DESCRIPTOR_OVR_3_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_3_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_3.ISP_SMIARX_DESCRIPTOR_OVR_3_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_3(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_3.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_3() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_3.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_3_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_3.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_4


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_4_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_4.ISP_SMIARX_DESCRIPTOR_OVR_4_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_4_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_4.ISP_SMIARX_DESCRIPTOR_OVR_4_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_4(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_4.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_4() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_4.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_4_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_4.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_5


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_5_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_5.ISP_SMIARX_DESCRIPTOR_OVR_5_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_5_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_5.ISP_SMIARX_DESCRIPTOR_OVR_5_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_5(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_5.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_5() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_5.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_5_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_5.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_6


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_6_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_6.ISP_SMIARX_DESCRIPTOR_OVR_6_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_6_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_6.ISP_SMIARX_DESCRIPTOR_OVR_6_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_6(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_6.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_6() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_6.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_6_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_6.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_7


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_7_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_7.ISP_SMIARX_DESCRIPTOR_OVR_7_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_7_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_7.ISP_SMIARX_DESCRIPTOR_OVR_7_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_7(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_7.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_7() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_7.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_7_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_7.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_8


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_8_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_8.ISP_SMIARX_DESCRIPTOR_OVR_8_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_8_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_8.ISP_SMIARX_DESCRIPTOR_OVR_8_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_8(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_8.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_8() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_8.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_8_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_8.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_9


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_9_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_9.ISP_SMIARX_DESCRIPTOR_OVR_9_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_9_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_9.ISP_SMIARX_DESCRIPTOR_OVR_9_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_9(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_9.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_9() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_9.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_9_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_9.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_10


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_10_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_10.ISP_SMIARX_DESCRIPTOR_OVR_10_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_10_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_10.ISP_SMIARX_DESCRIPTOR_OVR_10_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_10(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_10.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_10() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_10.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_10_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_10.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_11


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_11_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_11.ISP_SMIARX_DESCRIPTOR_OVR_11_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_11_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_11.ISP_SMIARX_DESCRIPTOR_OVR_11_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_11(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_11.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_11() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_11.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_11_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_11.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_12


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_12_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_12.ISP_SMIARX_DESCRIPTOR_OVR_12_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_12_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_12.ISP_SMIARX_DESCRIPTOR_OVR_12_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_12(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_12.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_12() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_12.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_12_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_12.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_13


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_13_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_13.ISP_SMIARX_DESCRIPTOR_OVR_13_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_13_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_13.ISP_SMIARX_DESCRIPTOR_OVR_13_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_13(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_13.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_13() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_13.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_13_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_13.word = x)


//ISP_SMIARX_DESCRIPTOR_OVR_14


#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_14_frame_format_descriptor_ovr() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_14.ISP_SMIARX_DESCRIPTOR_OVR_14_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_14_frame_format_descriptor_ovr(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_14.ISP_SMIARX_DESCRIPTOR_OVR_14_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_14(frame_format_descriptor_ovr) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_14.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_14() p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_14.word
#define Set_ISP_SMIARX_ISP_SMIARX_DESCRIPTOR_OVR_14_word(x) (p_ISP_SMIARX_IP->ISP_SMIARX_DESCRIPTOR_OVR_14.word = x)

//ISP_SD_IDP_GATE_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_SD_IDP_GATE_ENABLE_ts;

}ISP_SD_IDP_GATE_ENABLE_tu;



//ISP_SD_IDP_GATE_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_SD_IDP_GATE_SELECT_ts;

}ISP_SD_IDP_GATE_SELECT_tu;

typedef struct
{
    ISP_SD_IDP_GATE_ENABLE_tu ISP_SD_IDP_GATE_ENABLE;
    ISP_SD_IDP_GATE_SELECT_tu ISP_SD_IDP_GATE_SELECT;
}ISP_SD_IDP_GATE_IP_ts;




//ISP_SD_IDP_GATE_ENABLE


#define Get_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE_mux2to1_enable() p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.ISP_SD_IDP_GATE_ENABLE_ts.mux2to1_enable
#define Is_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE_mux2to1_enable_DISABLE() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.ISP_SD_IDP_GATE_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE_mux2to1_enable__DISABLE() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.ISP_SD_IDP_GATE_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE_mux2to1_enable_ENABLE() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.ISP_SD_IDP_GATE_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE_mux2to1_enable__ENABLE() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.ISP_SD_IDP_GATE_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE_mux2to1_soft_reset() p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.ISP_SD_IDP_GATE_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.ISP_SD_IDP_GATE_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.ISP_SD_IDP_GATE_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.ISP_SD_IDP_GATE_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.ISP_SD_IDP_GATE_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE() p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.word
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_ENABLE_word(x) (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_ENABLE.word = x)


//ISP_SD_IDP_GATE_SELECT


#define Get_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT_mux2to1_select() p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.ISP_SD_IDP_GATE_SELECT_ts.mux2to1_select
#define Is_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT_mux2to1_select_IDP0() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.ISP_SD_IDP_GATE_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT_mux2to1_select__IDP0() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.ISP_SD_IDP_GATE_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT_mux2to1_select_IDP1() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.ISP_SD_IDP_GATE_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT_mux2to1_select__IDP1() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.ISP_SD_IDP_GATE_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT_mux2to1_shadow_en() p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.ISP_SD_IDP_GATE_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.ISP_SD_IDP_GATE_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.ISP_SD_IDP_GATE_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.ISP_SD_IDP_GATE_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.ISP_SD_IDP_GATE_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT() p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.word
#define Set_ISP_SD_IDP_GATE_ISP_SD_IDP_GATE_SELECT_word(x) (p_ISP_SD_IDP_GATE_IP->ISP_SD_IDP_GATE_SELECT.word = x)

//ISP_BAYER_STORE_SD_CLK_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_BAYER_STORE_SD_CLK_ENABLE_ts;

}ISP_BAYER_STORE_SD_CLK_ENABLE_tu;



//ISP_BAYER_STORE_SD_CLK_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_BAYER_STORE_SD_CLK_SELECT_ts;

}ISP_BAYER_STORE_SD_CLK_SELECT_tu;

typedef struct
{
    ISP_BAYER_STORE_SD_CLK_ENABLE_tu ISP_BAYER_STORE_SD_CLK_ENABLE;
    ISP_BAYER_STORE_SD_CLK_SELECT_tu ISP_BAYER_STORE_SD_CLK_SELECT;
}ISP_BAYER_STORE_SD_CLK_IP_ts;




//ISP_BAYER_STORE_SD_CLK_ENABLE


#define Get_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE_mux2to1_enable() p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.ISP_BAYER_STORE_SD_CLK_ENABLE_ts.mux2to1_enable
#define Is_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE_mux2to1_enable_DISABLE() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.ISP_BAYER_STORE_SD_CLK_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE_mux2to1_enable__DISABLE() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.ISP_BAYER_STORE_SD_CLK_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE_mux2to1_enable_ENABLE() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.ISP_BAYER_STORE_SD_CLK_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE_mux2to1_enable__ENABLE() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.ISP_BAYER_STORE_SD_CLK_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE_mux2to1_soft_reset() p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.ISP_BAYER_STORE_SD_CLK_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.ISP_BAYER_STORE_SD_CLK_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.ISP_BAYER_STORE_SD_CLK_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.ISP_BAYER_STORE_SD_CLK_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.ISP_BAYER_STORE_SD_CLK_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE() p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.word
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_ENABLE_word(x) (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_ENABLE.word = x)


//ISP_BAYER_STORE_SD_CLK_SELECT


#define Get_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT_mux2to1_select() p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.ISP_BAYER_STORE_SD_CLK_SELECT_ts.mux2to1_select
#define Is_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT_mux2to1_select_IDP0() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.ISP_BAYER_STORE_SD_CLK_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT_mux2to1_select__IDP0() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.ISP_BAYER_STORE_SD_CLK_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT_mux2to1_select_IDP1() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.ISP_BAYER_STORE_SD_CLK_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT_mux2to1_select__IDP1() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.ISP_BAYER_STORE_SD_CLK_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT_mux2to1_shadow_en() p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.ISP_BAYER_STORE_SD_CLK_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.ISP_BAYER_STORE_SD_CLK_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.ISP_BAYER_STORE_SD_CLK_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.ISP_BAYER_STORE_SD_CLK_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.ISP_BAYER_STORE_SD_CLK_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT() p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.word
#define Set_ISP_BAYER_STORE_SD_CLK_ISP_BAYER_STORE_SD_CLK_SELECT_word(x) (p_ISP_BAYER_STORE_SD_CLK_IP->ISP_BAYER_STORE_SD_CLK_SELECT.word = x)

//ISP_LBE_ENABLE
/*Description: line_blk_elim Control Register. When the module is disable, is mean clk from-end and clock Back-end have the same frequency whith different phase only, so data are transfert from input to output with simple asyncronous mecanism
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t line_blk_elim_enable :1;
        /* Disable line_blk_elim module*/
        uint8_t reserved0 :3;
        uint8_t line_blk_elim_soft_reset :1;
        /* Disable line_blk_elim_soft_reset module*/
    }ISP_LBE_ENABLE_ts;

}ISP_LBE_ENABLE_tu;



//ISP_LBE_DFV
/*Description: Design for verification register, use to verify interrupt.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t line_blk_elim_dfv_enable :1;
        /* Disable DFV for Line Blanking Elimination module*/
        uint8_t line_blk_elim_dfv_interrupt_ctrl :1;
        /* When the register value change, interrupt is set to activ*/
    }ISP_LBE_DFV_ts;

}ISP_LBE_DFV_tu;



//ISP_LBE_H_SIZE
/*Description: H-size control register. When clk_0 and clk_1 are different, hsize have to program by firmware to inform the read out state machine where is the last data into lines.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_blk_elim_h_size :14;
        /* Horizontal size.*/
    }ISP_LBE_H_SIZE_ts;

}ISP_LBE_H_SIZE_tu;



//ISP_LBE_READ_START
/*Description: Define the value of memory address index to start reading data to output transfert
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t line_blk_elim_read_start :14;
        /* Memory index to start reading.Minimum value must be 8*/
    }ISP_LBE_READ_START_ts;

}ISP_LBE_READ_START_tu;

typedef struct
{
    ISP_LBE_ENABLE_tu ISP_LBE_ENABLE;
    ISP_LBE_DFV_tu ISP_LBE_DFV;
    ISP_LBE_H_SIZE_tu ISP_LBE_H_SIZE;
    ISP_LBE_READ_START_tu ISP_LBE_READ_START;
}ISP_LBE_IP_ts;




//ISP_LBE_ENABLE


#define Get_ISP_LBE_ISP_LBE_ENABLE_line_blk_elim_enable() p_ISP_LBE_IP->ISP_LBE_ENABLE.ISP_LBE_ENABLE_ts.line_blk_elim_enable
#define Is_ISP_LBE_ISP_LBE_ENABLE_line_blk_elim_enable_DISABLE() (p_ISP_LBE_IP->ISP_LBE_ENABLE.ISP_LBE_ENABLE_ts.line_blk_elim_enable == line_blk_elim_enable_DISABLE)
#define Set_ISP_LBE_ISP_LBE_ENABLE_line_blk_elim_enable__DISABLE() (p_ISP_LBE_IP->ISP_LBE_ENABLE.ISP_LBE_ENABLE_ts.line_blk_elim_enable = line_blk_elim_enable_DISABLE)
#define line_blk_elim_enable_DISABLE 0x0    //Disable line_blk_elim module
#define Is_ISP_LBE_ISP_LBE_ENABLE_line_blk_elim_enable_ENABLE() (p_ISP_LBE_IP->ISP_LBE_ENABLE.ISP_LBE_ENABLE_ts.line_blk_elim_enable == line_blk_elim_enable_ENABLE)
#define Set_ISP_LBE_ISP_LBE_ENABLE_line_blk_elim_enable__ENABLE() (p_ISP_LBE_IP->ISP_LBE_ENABLE.ISP_LBE_ENABLE_ts.line_blk_elim_enable = line_blk_elim_enable_ENABLE)
#define line_blk_elim_enable_ENABLE 0x1    //Enable line_blk_elim module


#define Get_ISP_LBE_ISP_LBE_ENABLE_line_blk_elim_soft_reset() p_ISP_LBE_IP->ISP_LBE_ENABLE.ISP_LBE_ENABLE_ts.line_blk_elim_soft_reset
#define Is_ISP_LBE_ISP_LBE_ENABLE_line_blk_elim_soft_reset_DISABLE() (p_ISP_LBE_IP->ISP_LBE_ENABLE.ISP_LBE_ENABLE_ts.line_blk_elim_soft_reset == line_blk_elim_soft_reset_DISABLE)
#define Set_ISP_LBE_ISP_LBE_ENABLE_line_blk_elim_soft_reset__DISABLE() (p_ISP_LBE_IP->ISP_LBE_ENABLE.ISP_LBE_ENABLE_ts.line_blk_elim_soft_reset = line_blk_elim_soft_reset_DISABLE)
#define line_blk_elim_soft_reset_DISABLE 0x0    //Disable line_blk_elim_soft_reset module
#define Is_ISP_LBE_ISP_LBE_ENABLE_line_blk_elim_soft_reset_ENABLE() (p_ISP_LBE_IP->ISP_LBE_ENABLE.ISP_LBE_ENABLE_ts.line_blk_elim_soft_reset == line_blk_elim_soft_reset_ENABLE)
#define Set_ISP_LBE_ISP_LBE_ENABLE_line_blk_elim_soft_reset__ENABLE() (p_ISP_LBE_IP->ISP_LBE_ENABLE.ISP_LBE_ENABLE_ts.line_blk_elim_soft_reset = line_blk_elim_soft_reset_ENABLE)
#define line_blk_elim_soft_reset_ENABLE 0x1    //Enable line_blk_elim_soft_reset module
#define Set_ISP_LBE_ISP_LBE_ENABLE(line_blk_elim_enable,line_blk_elim_soft_reset) (p_ISP_LBE_IP->ISP_LBE_ENABLE.word = (uint32_t)line_blk_elim_enable<<0 | (uint32_t)line_blk_elim_soft_reset<<4)
#define Get_ISP_LBE_ISP_LBE_ENABLE() p_ISP_LBE_IP->ISP_LBE_ENABLE.word
#define Set_ISP_LBE_ISP_LBE_ENABLE_word(x) (p_ISP_LBE_IP->ISP_LBE_ENABLE.word = x)


//ISP_LBE_DFV


#define Get_ISP_LBE_ISP_LBE_DFV_line_blk_elim_dfv_enable() p_ISP_LBE_IP->ISP_LBE_DFV.ISP_LBE_DFV_ts.line_blk_elim_dfv_enable
#define Is_ISP_LBE_ISP_LBE_DFV_line_blk_elim_dfv_enable_DISABLE() (p_ISP_LBE_IP->ISP_LBE_DFV.ISP_LBE_DFV_ts.line_blk_elim_dfv_enable == line_blk_elim_dfv_enable_DISABLE)
#define Set_ISP_LBE_ISP_LBE_DFV_line_blk_elim_dfv_enable__DISABLE() (p_ISP_LBE_IP->ISP_LBE_DFV.ISP_LBE_DFV_ts.line_blk_elim_dfv_enable = line_blk_elim_dfv_enable_DISABLE)
#define line_blk_elim_dfv_enable_DISABLE 0x0    //Disable DFV for Line Blanking Elimination module
#define Is_ISP_LBE_ISP_LBE_DFV_line_blk_elim_dfv_enable_ENABLE() (p_ISP_LBE_IP->ISP_LBE_DFV.ISP_LBE_DFV_ts.line_blk_elim_dfv_enable == line_blk_elim_dfv_enable_ENABLE)
#define Set_ISP_LBE_ISP_LBE_DFV_line_blk_elim_dfv_enable__ENABLE() (p_ISP_LBE_IP->ISP_LBE_DFV.ISP_LBE_DFV_ts.line_blk_elim_dfv_enable = line_blk_elim_dfv_enable_ENABLE)
#define line_blk_elim_dfv_enable_ENABLE 0x1    //Enable DFV for Line Blanking Elimination module


#define Get_ISP_LBE_ISP_LBE_DFV_line_blk_elim_dfv_interrupt_ctrl() p_ISP_LBE_IP->ISP_LBE_DFV.ISP_LBE_DFV_ts.line_blk_elim_dfv_interrupt_ctrl
#define Set_ISP_LBE_ISP_LBE_DFV_line_blk_elim_dfv_interrupt_ctrl(x) (p_ISP_LBE_IP->ISP_LBE_DFV.ISP_LBE_DFV_ts.line_blk_elim_dfv_interrupt_ctrl = x)
#define Set_ISP_LBE_ISP_LBE_DFV(line_blk_elim_dfv_enable,line_blk_elim_dfv_interrupt_ctrl) (p_ISP_LBE_IP->ISP_LBE_DFV.word = (uint32_t)line_blk_elim_dfv_enable<<0 | (uint32_t)line_blk_elim_dfv_interrupt_ctrl<<1)
#define Get_ISP_LBE_ISP_LBE_DFV() p_ISP_LBE_IP->ISP_LBE_DFV.word
#define Set_ISP_LBE_ISP_LBE_DFV_word(x) (p_ISP_LBE_IP->ISP_LBE_DFV.word = x)


//ISP_LBE_H_SIZE


#define Get_ISP_LBE_ISP_LBE_H_SIZE_line_blk_elim_h_size() p_ISP_LBE_IP->ISP_LBE_H_SIZE.ISP_LBE_H_SIZE_ts.line_blk_elim_h_size
#define Set_ISP_LBE_ISP_LBE_H_SIZE_line_blk_elim_h_size(x) (p_ISP_LBE_IP->ISP_LBE_H_SIZE.ISP_LBE_H_SIZE_ts.line_blk_elim_h_size = x)
#define Set_ISP_LBE_ISP_LBE_H_SIZE(line_blk_elim_h_size) (p_ISP_LBE_IP->ISP_LBE_H_SIZE.word = (uint32_t)line_blk_elim_h_size<<0)
#define Get_ISP_LBE_ISP_LBE_H_SIZE() p_ISP_LBE_IP->ISP_LBE_H_SIZE.word
#define Set_ISP_LBE_ISP_LBE_H_SIZE_word(x) (p_ISP_LBE_IP->ISP_LBE_H_SIZE.word = x)


//ISP_LBE_READ_START


#define Get_ISP_LBE_ISP_LBE_READ_START_line_blk_elim_read_start() p_ISP_LBE_IP->ISP_LBE_READ_START.ISP_LBE_READ_START_ts.line_blk_elim_read_start
#define Set_ISP_LBE_ISP_LBE_READ_START_line_blk_elim_read_start(x) (p_ISP_LBE_IP->ISP_LBE_READ_START.ISP_LBE_READ_START_ts.line_blk_elim_read_start = x)
#define Set_ISP_LBE_ISP_LBE_READ_START(line_blk_elim_read_start) (p_ISP_LBE_IP->ISP_LBE_READ_START.word = (uint16_t)line_blk_elim_read_start<<0)
#define Get_ISP_LBE_ISP_LBE_READ_START() p_ISP_LBE_IP->ISP_LBE_READ_START.word
#define Set_ISP_LBE_ISP_LBE_READ_START_word(x) (p_ISP_LBE_IP->ISP_LBE_READ_START.word = x)

//ISP_BAYER_STORE_PIX_CLK_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_BAYER_STORE_PIX_CLK_ENABLE_ts;

}ISP_BAYER_STORE_PIX_CLK_ENABLE_tu;



//ISP_BAYER_STORE_PIX_CLK_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_BAYER_STORE_PIX_CLK_SELECT_ts;

}ISP_BAYER_STORE_PIX_CLK_SELECT_tu;

typedef struct
{
    ISP_BAYER_STORE_PIX_CLK_ENABLE_tu ISP_BAYER_STORE_PIX_CLK_ENABLE;
    ISP_BAYER_STORE_PIX_CLK_SELECT_tu ISP_BAYER_STORE_PIX_CLK_SELECT;
}ISP_BAYER_STORE_PIX_CLK_IP_ts;




//ISP_BAYER_STORE_PIX_CLK_ENABLE


#define Get_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE_mux2to1_enable() p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.ISP_BAYER_STORE_PIX_CLK_ENABLE_ts.mux2to1_enable
#define Is_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE_mux2to1_enable_DISABLE() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.ISP_BAYER_STORE_PIX_CLK_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE_mux2to1_enable__DISABLE() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.ISP_BAYER_STORE_PIX_CLK_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE_mux2to1_enable_ENABLE() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.ISP_BAYER_STORE_PIX_CLK_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE_mux2to1_enable__ENABLE() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.ISP_BAYER_STORE_PIX_CLK_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE_mux2to1_soft_reset() p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.ISP_BAYER_STORE_PIX_CLK_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.ISP_BAYER_STORE_PIX_CLK_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.ISP_BAYER_STORE_PIX_CLK_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.ISP_BAYER_STORE_PIX_CLK_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.ISP_BAYER_STORE_PIX_CLK_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE() p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.word
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_ENABLE_word(x) (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_ENABLE.word = x)


//ISP_BAYER_STORE_PIX_CLK_SELECT


#define Get_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT_mux2to1_select() p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.ISP_BAYER_STORE_PIX_CLK_SELECT_ts.mux2to1_select
#define Is_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT_mux2to1_select_IDP0() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.ISP_BAYER_STORE_PIX_CLK_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT_mux2to1_select__IDP0() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.ISP_BAYER_STORE_PIX_CLK_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT_mux2to1_select_IDP1() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.ISP_BAYER_STORE_PIX_CLK_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT_mux2to1_select__IDP1() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.ISP_BAYER_STORE_PIX_CLK_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT_mux2to1_shadow_en() p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.ISP_BAYER_STORE_PIX_CLK_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.ISP_BAYER_STORE_PIX_CLK_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.ISP_BAYER_STORE_PIX_CLK_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.ISP_BAYER_STORE_PIX_CLK_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.ISP_BAYER_STORE_PIX_CLK_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT() p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.word
#define Set_ISP_BAYER_STORE_PIX_CLK_ISP_BAYER_STORE_PIX_CLK_SELECT_word(x) (p_ISP_BAYER_STORE_PIX_CLK_IP->ISP_BAYER_STORE_PIX_CLK_SELECT.word = x)

//ISP_RE_BAYER_LOAD_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_RE_BAYER_LOAD_ENABLE_ts;

}ISP_RE_BAYER_LOAD_ENABLE_tu;



//ISP_RE_BAYER_LOAD_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_RE_BAYER_LOAD_SELECT_ts;

}ISP_RE_BAYER_LOAD_SELECT_tu;

typedef struct
{
    ISP_RE_BAYER_LOAD_ENABLE_tu ISP_RE_BAYER_LOAD_ENABLE;
    ISP_RE_BAYER_LOAD_SELECT_tu ISP_RE_BAYER_LOAD_SELECT;
}ISP_RE_BAYER_LOAD_IP_ts;




//ISP_RE_BAYER_LOAD_ENABLE


#define Get_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE_mux2to1_enable() p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.ISP_RE_BAYER_LOAD_ENABLE_ts.mux2to1_enable
#define Is_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE_mux2to1_enable_DISABLE() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.ISP_RE_BAYER_LOAD_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE_mux2to1_enable__DISABLE() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.ISP_RE_BAYER_LOAD_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE_mux2to1_enable_ENABLE() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.ISP_RE_BAYER_LOAD_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE_mux2to1_enable__ENABLE() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.ISP_RE_BAYER_LOAD_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE_mux2to1_soft_reset() p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.ISP_RE_BAYER_LOAD_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.ISP_RE_BAYER_LOAD_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.ISP_RE_BAYER_LOAD_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.ISP_RE_BAYER_LOAD_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.ISP_RE_BAYER_LOAD_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE() p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.word
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_ENABLE_word(x) (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_ENABLE.word = x)


//ISP_RE_BAYER_LOAD_SELECT


#define Get_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT_mux2to1_select() p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.ISP_RE_BAYER_LOAD_SELECT_ts.mux2to1_select
#define Is_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT_mux2to1_select_IDP0() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.ISP_RE_BAYER_LOAD_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT_mux2to1_select__IDP0() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.ISP_RE_BAYER_LOAD_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT_mux2to1_select_IDP1() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.ISP_RE_BAYER_LOAD_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT_mux2to1_select__IDP1() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.ISP_RE_BAYER_LOAD_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT_mux2to1_shadow_en() p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.ISP_RE_BAYER_LOAD_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.ISP_RE_BAYER_LOAD_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.ISP_RE_BAYER_LOAD_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.ISP_RE_BAYER_LOAD_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.ISP_RE_BAYER_LOAD_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT() p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.word
#define Set_ISP_RE_BAYER_LOAD_ISP_RE_BAYER_LOAD_SELECT_word(x) (p_ISP_RE_BAYER_LOAD_IP->ISP_RE_BAYER_LOAD_SELECT.word = x)

//ISP_RSO_SLANT_CTRL
/*Description: RSO Control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rso_en :1;
        /* Disable RSO module*/
    }ISP_RSO_SLANT_CTRL_ts;

}ISP_RSO_SLANT_CTRL_tu;



//ISP_RSO_DC_TERM_GR
/*Description: DC Term for GR channel
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t dc_term_gr :12;
        /* 
        DC offset term for GR Bayer channel.*/
    }ISP_RSO_DC_TERM_GR_ts;

}ISP_RSO_DC_TERM_GR_tu;



//ISP_RSO_X_COEF_GR
/*Description: X coeff. for GR channel
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t x_coef_gr :18;
        /* 
        X slant offset coefficient in fixpoint 6.12 signed (2's complement) representation for GR Bayer channel.*/
    }ISP_RSO_X_COEF_GR_ts;

}ISP_RSO_X_COEF_GR_tu;



//ISP_RSO_Y_COEF_GR
/*Description: Y coeff. for GR channel
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t y_coef_gr :18;
        /* 
        Y slant offset coefficient in fixpoint 6.12 signed (2's complement) representation for GR Bayer channel.*/
    }ISP_RSO_Y_COEF_GR_ts;

}ISP_RSO_Y_COEF_GR_tu;



//ISP_RSO_DC_TERM_RR
/*Description: DC Term for RR channel
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t dc_term_rr :12;
        /* 
        DC offset term for RR Bayer channel.*/
    }ISP_RSO_DC_TERM_RR_ts;

}ISP_RSO_DC_TERM_RR_tu;



//ISP_RSO_X_COEF_RR
/*Description: X coeff. for RR channel
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t x_coef_rr :18;
        /* 
        X slant offset coefficient in fixpoint 6.12 signed (2's complement) representation for RR Bayer channel.*/
    }ISP_RSO_X_COEF_RR_ts;

}ISP_RSO_X_COEF_RR_tu;



//ISP_RSO_Y_COEF_RR
/*Description: Y coeff. for RR channel
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t y_coef_rr :18;
        /* 
        Y slant offset coefficient in fixpoint 6.12 signed (2's complement) representation for RR Bayer channel.*/
    }ISP_RSO_Y_COEF_RR_ts;

}ISP_RSO_Y_COEF_RR_tu;



//ISP_RSO_DC_TERM_BB
/*Description: DC Term for BB channel
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t dc_term_bb :12;
        /* 
        DC offset term for BB Bayer channel.*/
    }ISP_RSO_DC_TERM_BB_ts;

}ISP_RSO_DC_TERM_BB_tu;



//ISP_RSO_X_COEF_BB
/*Description: X coeff. for BB channel
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t x_coef_bb :18;
        /* 
        X slant offset coefficient in fixpoint 6.12 signed (2's complement) representation for BB Bayer channel.*/
    }ISP_RSO_X_COEF_BB_ts;

}ISP_RSO_X_COEF_BB_tu;



//ISP_RSO_Y_COEF_BB
/*Description: Y coeff. for BB channel
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t y_coef_bb :18;
        /* 
        Y slant offset coefficient in fixpoint 6.12 signed (2's complement) representation for BB Bayer channel.*/
    }ISP_RSO_Y_COEF_BB_ts;

}ISP_RSO_Y_COEF_BB_tu;



//ISP_RSO_DC_TERM_GB
/*Description: DC Term for GB channel
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t dc_term_gb :12;
        /* 
        DC offset term for GB Bayer channel.*/
    }ISP_RSO_DC_TERM_GB_ts;

}ISP_RSO_DC_TERM_GB_tu;



//ISP_RSO_X_COEF_GB
/*Description: X coeff. for GB channel
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t x_coef_gb :18;
        /* 
        X slant offset coefficient in fixpoint 6.12 signed (2's complement) representation for GB Bayer channel.*/
    }ISP_RSO_X_COEF_GB_ts;

}ISP_RSO_X_COEF_GB_tu;



//ISP_RSO_Y_COEF_GB
/*Description: Y coeff. for GB channel
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t y_coef_gb :18;
        /* 
        Y slant offset coefficient in fixpoint 6.12 signed (2's complement) representation for GB Bayer channel.*/
    }ISP_RSO_Y_COEF_GB_ts;

}ISP_RSO_Y_COEF_GB_tu;



//ISP_RSO_X_SLANT_ORIGIN
/*Description: X slant origin
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_slant_origin :13;
        /* 
        X co-ordinate of slant origin used as a reference for computing slant coefficient.
        0 represents the left edge of input frame.*/
    }ISP_RSO_X_SLANT_ORIGIN_ts;

}ISP_RSO_X_SLANT_ORIGIN_tu;



//ISP_RSO_Y_SLANT_ORIGIN
/*Description: Y slant origin
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t y_slant_origin :13;
        /* 
        Y co-ordinate of slant origin used as a reference for computing slant coefficient.
        0 represents the top edge of input frame.*/
    }ISP_RSO_Y_SLANT_ORIGIN_ts;

}ISP_RSO_Y_SLANT_ORIGIN_tu;

typedef struct
{
    ISP_RSO_SLANT_CTRL_tu ISP_RSO_SLANT_CTRL;
    ISP_RSO_DC_TERM_GR_tu ISP_RSO_DC_TERM_GR;
    ISP_RSO_X_COEF_GR_tu ISP_RSO_X_COEF_GR;
    ISP_RSO_Y_COEF_GR_tu ISP_RSO_Y_COEF_GR;
    ISP_RSO_DC_TERM_RR_tu ISP_RSO_DC_TERM_RR;
    ISP_RSO_X_COEF_RR_tu ISP_RSO_X_COEF_RR;
    ISP_RSO_Y_COEF_RR_tu ISP_RSO_Y_COEF_RR;
    ISP_RSO_DC_TERM_BB_tu ISP_RSO_DC_TERM_BB;
    ISP_RSO_X_COEF_BB_tu ISP_RSO_X_COEF_BB;
    ISP_RSO_Y_COEF_BB_tu ISP_RSO_Y_COEF_BB;
    ISP_RSO_DC_TERM_GB_tu ISP_RSO_DC_TERM_GB;
    ISP_RSO_X_COEF_GB_tu ISP_RSO_X_COEF_GB;
    ISP_RSO_Y_COEF_GB_tu ISP_RSO_Y_COEF_GB;
    ISP_RSO_X_SLANT_ORIGIN_tu ISP_RSO_X_SLANT_ORIGIN;
    ISP_RSO_Y_SLANT_ORIGIN_tu ISP_RSO_Y_SLANT_ORIGIN;
}ISP_RSO_IP_ts;




//ISP_RSO_SLANT_CTRL


#define Get_ISP_RSO_ISP_RSO_SLANT_CTRL_rso_en() p_ISP_RSO_IP->ISP_RSO_SLANT_CTRL.ISP_RSO_SLANT_CTRL_ts.rso_en
#define Is_ISP_RSO_ISP_RSO_SLANT_CTRL_rso_en_DISABLE() (p_ISP_RSO_IP->ISP_RSO_SLANT_CTRL.ISP_RSO_SLANT_CTRL_ts.rso_en == rso_en_DISABLE)
#define Set_ISP_RSO_ISP_RSO_SLANT_CTRL_rso_en__DISABLE() (p_ISP_RSO_IP->ISP_RSO_SLANT_CTRL.ISP_RSO_SLANT_CTRL_ts.rso_en = rso_en_DISABLE)
#define rso_en_DISABLE 0x0    //Disable RSO module
#define Is_ISP_RSO_ISP_RSO_SLANT_CTRL_rso_en_ENABLE() (p_ISP_RSO_IP->ISP_RSO_SLANT_CTRL.ISP_RSO_SLANT_CTRL_ts.rso_en == rso_en_ENABLE)
#define Set_ISP_RSO_ISP_RSO_SLANT_CTRL_rso_en__ENABLE() (p_ISP_RSO_IP->ISP_RSO_SLANT_CTRL.ISP_RSO_SLANT_CTRL_ts.rso_en = rso_en_ENABLE)
#define rso_en_ENABLE 0x1    //Enable RSO module
#define Set_ISP_RSO_ISP_RSO_SLANT_CTRL(rso_en) (p_ISP_RSO_IP->ISP_RSO_SLANT_CTRL.word = (uint32_t)rso_en<<0)
#define Get_ISP_RSO_ISP_RSO_SLANT_CTRL() p_ISP_RSO_IP->ISP_RSO_SLANT_CTRL.word
#define Set_ISP_RSO_ISP_RSO_SLANT_CTRL_word(x) (p_ISP_RSO_IP->ISP_RSO_SLANT_CTRL.word = x)


//ISP_RSO_DC_TERM_GR


#define Get_ISP_RSO_ISP_RSO_DC_TERM_GR_dc_term_gr() p_ISP_RSO_IP->ISP_RSO_DC_TERM_GR.ISP_RSO_DC_TERM_GR_ts.dc_term_gr
#define Set_ISP_RSO_ISP_RSO_DC_TERM_GR_dc_term_gr(x) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_GR.ISP_RSO_DC_TERM_GR_ts.dc_term_gr = x)
#define Set_ISP_RSO_ISP_RSO_DC_TERM_GR(dc_term_gr) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_GR.word = (uint32_t)dc_term_gr<<0)
#define Get_ISP_RSO_ISP_RSO_DC_TERM_GR() p_ISP_RSO_IP->ISP_RSO_DC_TERM_GR.word
#define Set_ISP_RSO_ISP_RSO_DC_TERM_GR_word(x) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_GR.word = x)


//ISP_RSO_X_COEF_GR


#define Get_ISP_RSO_ISP_RSO_X_COEF_GR_x_coef_gr() p_ISP_RSO_IP->ISP_RSO_X_COEF_GR.ISP_RSO_X_COEF_GR_ts.x_coef_gr
#define Set_ISP_RSO_ISP_RSO_X_COEF_GR_x_coef_gr(x) (p_ISP_RSO_IP->ISP_RSO_X_COEF_GR.ISP_RSO_X_COEF_GR_ts.x_coef_gr = x)
#define Set_ISP_RSO_ISP_RSO_X_COEF_GR(x_coef_gr) (p_ISP_RSO_IP->ISP_RSO_X_COEF_GR.word = (uint32_t)x_coef_gr<<0)
#define Get_ISP_RSO_ISP_RSO_X_COEF_GR() p_ISP_RSO_IP->ISP_RSO_X_COEF_GR.word
#define Set_ISP_RSO_ISP_RSO_X_COEF_GR_word(x) (p_ISP_RSO_IP->ISP_RSO_X_COEF_GR.word = x)


//ISP_RSO_Y_COEF_GR


#define Get_ISP_RSO_ISP_RSO_Y_COEF_GR_y_coef_gr() p_ISP_RSO_IP->ISP_RSO_Y_COEF_GR.ISP_RSO_Y_COEF_GR_ts.y_coef_gr
#define Set_ISP_RSO_ISP_RSO_Y_COEF_GR_y_coef_gr(x) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_GR.ISP_RSO_Y_COEF_GR_ts.y_coef_gr = x)
#define Set_ISP_RSO_ISP_RSO_Y_COEF_GR(y_coef_gr) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_GR.word = (uint32_t)y_coef_gr<<0)
#define Get_ISP_RSO_ISP_RSO_Y_COEF_GR() p_ISP_RSO_IP->ISP_RSO_Y_COEF_GR.word
#define Set_ISP_RSO_ISP_RSO_Y_COEF_GR_word(x) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_GR.word = x)


//ISP_RSO_DC_TERM_RR


#define Get_ISP_RSO_ISP_RSO_DC_TERM_RR_dc_term_rr() p_ISP_RSO_IP->ISP_RSO_DC_TERM_RR.ISP_RSO_DC_TERM_RR_ts.dc_term_rr
#define Set_ISP_RSO_ISP_RSO_DC_TERM_RR_dc_term_rr(x) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_RR.ISP_RSO_DC_TERM_RR_ts.dc_term_rr = x)
#define Set_ISP_RSO_ISP_RSO_DC_TERM_RR(dc_term_rr) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_RR.word = (uint32_t)dc_term_rr<<0)
#define Get_ISP_RSO_ISP_RSO_DC_TERM_RR() p_ISP_RSO_IP->ISP_RSO_DC_TERM_RR.word
#define Set_ISP_RSO_ISP_RSO_DC_TERM_RR_word(x) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_RR.word = x)


//ISP_RSO_X_COEF_RR


#define Get_ISP_RSO_ISP_RSO_X_COEF_RR_x_coef_rr() p_ISP_RSO_IP->ISP_RSO_X_COEF_RR.ISP_RSO_X_COEF_RR_ts.x_coef_rr
#define Set_ISP_RSO_ISP_RSO_X_COEF_RR_x_coef_rr(x) (p_ISP_RSO_IP->ISP_RSO_X_COEF_RR.ISP_RSO_X_COEF_RR_ts.x_coef_rr = x)
#define Set_ISP_RSO_ISP_RSO_X_COEF_RR(x_coef_rr) (p_ISP_RSO_IP->ISP_RSO_X_COEF_RR.word = (uint32_t)x_coef_rr<<0)
#define Get_ISP_RSO_ISP_RSO_X_COEF_RR() p_ISP_RSO_IP->ISP_RSO_X_COEF_RR.word
#define Set_ISP_RSO_ISP_RSO_X_COEF_RR_word(x) (p_ISP_RSO_IP->ISP_RSO_X_COEF_RR.word = x)


//ISP_RSO_Y_COEF_RR


#define Get_ISP_RSO_ISP_RSO_Y_COEF_RR_y_coef_rr() p_ISP_RSO_IP->ISP_RSO_Y_COEF_RR.ISP_RSO_Y_COEF_RR_ts.y_coef_rr
#define Set_ISP_RSO_ISP_RSO_Y_COEF_RR_y_coef_rr(x) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_RR.ISP_RSO_Y_COEF_RR_ts.y_coef_rr = x)
#define Set_ISP_RSO_ISP_RSO_Y_COEF_RR(y_coef_rr) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_RR.word = (uint32_t)y_coef_rr<<0)
#define Get_ISP_RSO_ISP_RSO_Y_COEF_RR() p_ISP_RSO_IP->ISP_RSO_Y_COEF_RR.word
#define Set_ISP_RSO_ISP_RSO_Y_COEF_RR_word(x) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_RR.word = x)


//ISP_RSO_DC_TERM_BB


#define Get_ISP_RSO_ISP_RSO_DC_TERM_BB_dc_term_bb() p_ISP_RSO_IP->ISP_RSO_DC_TERM_BB.ISP_RSO_DC_TERM_BB_ts.dc_term_bb
#define Set_ISP_RSO_ISP_RSO_DC_TERM_BB_dc_term_bb(x) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_BB.ISP_RSO_DC_TERM_BB_ts.dc_term_bb = x)
#define Set_ISP_RSO_ISP_RSO_DC_TERM_BB(dc_term_bb) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_BB.word = (uint32_t)dc_term_bb<<0)
#define Get_ISP_RSO_ISP_RSO_DC_TERM_BB() p_ISP_RSO_IP->ISP_RSO_DC_TERM_BB.word
#define Set_ISP_RSO_ISP_RSO_DC_TERM_BB_word(x) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_BB.word = x)


//ISP_RSO_X_COEF_BB


#define Get_ISP_RSO_ISP_RSO_X_COEF_BB_x_coef_bb() p_ISP_RSO_IP->ISP_RSO_X_COEF_BB.ISP_RSO_X_COEF_BB_ts.x_coef_bb
#define Set_ISP_RSO_ISP_RSO_X_COEF_BB_x_coef_bb(x) (p_ISP_RSO_IP->ISP_RSO_X_COEF_BB.ISP_RSO_X_COEF_BB_ts.x_coef_bb = x)
#define Set_ISP_RSO_ISP_RSO_X_COEF_BB(x_coef_bb) (p_ISP_RSO_IP->ISP_RSO_X_COEF_BB.word = (uint32_t)x_coef_bb<<0)
#define Get_ISP_RSO_ISP_RSO_X_COEF_BB() p_ISP_RSO_IP->ISP_RSO_X_COEF_BB.word
#define Set_ISP_RSO_ISP_RSO_X_COEF_BB_word(x) (p_ISP_RSO_IP->ISP_RSO_X_COEF_BB.word = x)


//ISP_RSO_Y_COEF_BB


#define Get_ISP_RSO_ISP_RSO_Y_COEF_BB_y_coef_bb() p_ISP_RSO_IP->ISP_RSO_Y_COEF_BB.ISP_RSO_Y_COEF_BB_ts.y_coef_bb
#define Set_ISP_RSO_ISP_RSO_Y_COEF_BB_y_coef_bb(x) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_BB.ISP_RSO_Y_COEF_BB_ts.y_coef_bb = x)
#define Set_ISP_RSO_ISP_RSO_Y_COEF_BB(y_coef_bb) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_BB.word = (uint32_t)y_coef_bb<<0)
#define Get_ISP_RSO_ISP_RSO_Y_COEF_BB() p_ISP_RSO_IP->ISP_RSO_Y_COEF_BB.word
#define Set_ISP_RSO_ISP_RSO_Y_COEF_BB_word(x) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_BB.word = x)


//ISP_RSO_DC_TERM_GB


#define Get_ISP_RSO_ISP_RSO_DC_TERM_GB_dc_term_gb() p_ISP_RSO_IP->ISP_RSO_DC_TERM_GB.ISP_RSO_DC_TERM_GB_ts.dc_term_gb
#define Set_ISP_RSO_ISP_RSO_DC_TERM_GB_dc_term_gb(x) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_GB.ISP_RSO_DC_TERM_GB_ts.dc_term_gb = x)
#define Set_ISP_RSO_ISP_RSO_DC_TERM_GB(dc_term_gb) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_GB.word = (uint32_t)dc_term_gb<<0)
#define Get_ISP_RSO_ISP_RSO_DC_TERM_GB() p_ISP_RSO_IP->ISP_RSO_DC_TERM_GB.word
#define Set_ISP_RSO_ISP_RSO_DC_TERM_GB_word(x) (p_ISP_RSO_IP->ISP_RSO_DC_TERM_GB.word = x)


//ISP_RSO_X_COEF_GB


#define Get_ISP_RSO_ISP_RSO_X_COEF_GB_x_coef_gb() p_ISP_RSO_IP->ISP_RSO_X_COEF_GB.ISP_RSO_X_COEF_GB_ts.x_coef_gb
#define Set_ISP_RSO_ISP_RSO_X_COEF_GB_x_coef_gb(x) (p_ISP_RSO_IP->ISP_RSO_X_COEF_GB.ISP_RSO_X_COEF_GB_ts.x_coef_gb = x)
#define Set_ISP_RSO_ISP_RSO_X_COEF_GB(x_coef_gb) (p_ISP_RSO_IP->ISP_RSO_X_COEF_GB.word = (uint32_t)x_coef_gb<<0)
#define Get_ISP_RSO_ISP_RSO_X_COEF_GB() p_ISP_RSO_IP->ISP_RSO_X_COEF_GB.word
#define Set_ISP_RSO_ISP_RSO_X_COEF_GB_word(x) (p_ISP_RSO_IP->ISP_RSO_X_COEF_GB.word = x)


//ISP_RSO_Y_COEF_GB


#define Get_ISP_RSO_ISP_RSO_Y_COEF_GB_y_coef_gb() p_ISP_RSO_IP->ISP_RSO_Y_COEF_GB.ISP_RSO_Y_COEF_GB_ts.y_coef_gb
#define Set_ISP_RSO_ISP_RSO_Y_COEF_GB_y_coef_gb(x) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_GB.ISP_RSO_Y_COEF_GB_ts.y_coef_gb = x)
#define Set_ISP_RSO_ISP_RSO_Y_COEF_GB(y_coef_gb) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_GB.word = (uint32_t)y_coef_gb<<0)
#define Get_ISP_RSO_ISP_RSO_Y_COEF_GB() p_ISP_RSO_IP->ISP_RSO_Y_COEF_GB.word
#define Set_ISP_RSO_ISP_RSO_Y_COEF_GB_word(x) (p_ISP_RSO_IP->ISP_RSO_Y_COEF_GB.word = x)


//ISP_RSO_X_SLANT_ORIGIN


#define Get_ISP_RSO_ISP_RSO_X_SLANT_ORIGIN_x_slant_origin() p_ISP_RSO_IP->ISP_RSO_X_SLANT_ORIGIN.ISP_RSO_X_SLANT_ORIGIN_ts.x_slant_origin
#define Set_ISP_RSO_ISP_RSO_X_SLANT_ORIGIN_x_slant_origin(x) (p_ISP_RSO_IP->ISP_RSO_X_SLANT_ORIGIN.ISP_RSO_X_SLANT_ORIGIN_ts.x_slant_origin = x)
#define Set_ISP_RSO_ISP_RSO_X_SLANT_ORIGIN(x_slant_origin) (p_ISP_RSO_IP->ISP_RSO_X_SLANT_ORIGIN.word = (uint32_t)x_slant_origin<<0)
#define Get_ISP_RSO_ISP_RSO_X_SLANT_ORIGIN() p_ISP_RSO_IP->ISP_RSO_X_SLANT_ORIGIN.word
#define Set_ISP_RSO_ISP_RSO_X_SLANT_ORIGIN_word(x) (p_ISP_RSO_IP->ISP_RSO_X_SLANT_ORIGIN.word = x)


//ISP_RSO_Y_SLANT_ORIGIN


#define Get_ISP_RSO_ISP_RSO_Y_SLANT_ORIGIN_y_slant_origin() p_ISP_RSO_IP->ISP_RSO_Y_SLANT_ORIGIN.ISP_RSO_Y_SLANT_ORIGIN_ts.y_slant_origin
#define Set_ISP_RSO_ISP_RSO_Y_SLANT_ORIGIN_y_slant_origin(x) (p_ISP_RSO_IP->ISP_RSO_Y_SLANT_ORIGIN.ISP_RSO_Y_SLANT_ORIGIN_ts.y_slant_origin = x)
#define Set_ISP_RSO_ISP_RSO_Y_SLANT_ORIGIN(y_slant_origin) (p_ISP_RSO_IP->ISP_RSO_Y_SLANT_ORIGIN.word = (uint16_t)y_slant_origin<<0)
#define Get_ISP_RSO_ISP_RSO_Y_SLANT_ORIGIN() p_ISP_RSO_IP->ISP_RSO_Y_SLANT_ORIGIN.word
#define Set_ISP_RSO_ISP_RSO_Y_SLANT_ORIGIN_word(x) (p_ISP_RSO_IP->ISP_RSO_Y_SLANT_ORIGIN.word = x)

//ISP_FLEXTF_LINEAR_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable flextf module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* flextf is not under a soft reset*/
    }ISP_FLEXTF_LINEAR_ENABLE_ts;

}ISP_FLEXTF_LINEAR_ENABLE_tu;



//ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR
/*Description: Last Index element for interpolation of Green / Green in Red channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_green_gir;
        /* last indexed element for interpolation
        in bayer configuration : Green in Redcolor channel.
        in rgb configuration : Green color channel*/
    }ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR_ts;

}ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR_tu;



//ISP_FLEXTF_LINEAR_LAST_ELT_RED
/*Description: Last Index element for interpolation of Red channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_red;
        /* last indexed element for interpolation*/
    }ISP_FLEXTF_LINEAR_LAST_ELT_RED_ts;

}ISP_FLEXTF_LINEAR_LAST_ELT_RED_tu;



//ISP_FLEXTF_LINEAR_LAST_ELT_BLUE
/*Description: Last Index element for interpolation of Blue channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_blue;
        /* last indexed element for interpolation*/
    }ISP_FLEXTF_LINEAR_LAST_ELT_BLUE_ts;

}ISP_FLEXTF_LINEAR_LAST_ELT_BLUE_tu;



//ISP_FLEXTF_LINEAR_LAST_ELT_GIB
/*Description: Last Index element for interpolation of Green in Blue channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_gib;
        /* last indexed element for interpolation
        in bayer configuration, Green in Blue color channel.
        in rgb configuration, this register is ignored*/
    }ISP_FLEXTF_LINEAR_LAST_ELT_GIB_ts;

}ISP_FLEXTF_LINEAR_LAST_ELT_GIB_tu;



//ISP_FLEXTF_LINEAR_PIXELIN_SHIFT
/*Description: Pixel Input Value is right shifted by index in the range [0:5].
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint8_t pixel_shift :3;
        /* index value of the right shift*/
    }ISP_FLEXTF_LINEAR_PIXELIN_SHIFT_ts;

}ISP_FLEXTF_LINEAR_PIXELIN_SHIFT_tu;

typedef struct
{
    ISP_FLEXTF_LINEAR_ENABLE_tu ISP_FLEXTF_LINEAR_ENABLE;
    ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR_tu ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR;
    ISP_FLEXTF_LINEAR_LAST_ELT_RED_tu ISP_FLEXTF_LINEAR_LAST_ELT_RED;
    ISP_FLEXTF_LINEAR_LAST_ELT_BLUE_tu ISP_FLEXTF_LINEAR_LAST_ELT_BLUE;
    ISP_FLEXTF_LINEAR_LAST_ELT_GIB_tu ISP_FLEXTF_LINEAR_LAST_ELT_GIB;
    ISP_FLEXTF_LINEAR_PIXELIN_SHIFT_tu ISP_FLEXTF_LINEAR_PIXELIN_SHIFT;
}ISP_FLEXTF_LINEAR_IP_ts;




//ISP_FLEXTF_LINEAR_ENABLE


#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE_enable() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.ISP_FLEXTF_LINEAR_ENABLE_ts.enable
#define Is_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE_enable_DISABLE() (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.ISP_FLEXTF_LINEAR_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE_enable__DISABLE() (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.ISP_FLEXTF_LINEAR_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable flextf module
#define Is_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE_enable_ENABLE() (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.ISP_FLEXTF_LINEAR_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE_enable__ENABLE() (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.ISP_FLEXTF_LINEAR_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable flextf module


#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE_soft_reset() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.ISP_FLEXTF_LINEAR_ENABLE_ts.soft_reset
#define Is_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE_soft_reset_B_0x0() (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.ISP_FLEXTF_LINEAR_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE_soft_reset__B_0x0() (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.ISP_FLEXTF_LINEAR_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //flextf is not under a soft reset
#define Is_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE_soft_reset_B_0x1() (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.ISP_FLEXTF_LINEAR_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE_soft_reset__B_0x1() (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.ISP_FLEXTF_LINEAR_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //flextf is under a soft reset
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE(enable,soft_reset) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.word
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_ENABLE_word(x) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_ENABLE.word = x)


//ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR


#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR_last_elt_green_gir() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR.ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR_ts.last_elt_green_gir
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR_last_elt_green_gir(x) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR.ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR_ts.last_elt_green_gir = x)
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR(last_elt_green_gir) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR.word = (uint32_t)last_elt_green_gir<<0)
#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR.word
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR_word(x) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_GREEN_GIR.word = x)


//ISP_FLEXTF_LINEAR_LAST_ELT_RED


#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_RED_last_elt_red() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_RED.ISP_FLEXTF_LINEAR_LAST_ELT_RED_ts.last_elt_red
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_RED_last_elt_red(x) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_RED.ISP_FLEXTF_LINEAR_LAST_ELT_RED_ts.last_elt_red = x)
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_RED(last_elt_red) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_RED.word = (uint32_t)last_elt_red<<0)
#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_RED() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_RED.word
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_RED_word(x) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_RED.word = x)


//ISP_FLEXTF_LINEAR_LAST_ELT_BLUE


#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_BLUE_last_elt_blue() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_BLUE.ISP_FLEXTF_LINEAR_LAST_ELT_BLUE_ts.last_elt_blue
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_BLUE_last_elt_blue(x) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_BLUE.ISP_FLEXTF_LINEAR_LAST_ELT_BLUE_ts.last_elt_blue = x)
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_BLUE(last_elt_blue) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_BLUE.word = (uint32_t)last_elt_blue<<0)
#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_BLUE() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_BLUE.word
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_BLUE_word(x) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_BLUE.word = x)


//ISP_FLEXTF_LINEAR_LAST_ELT_GIB


#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_GIB_last_elt_gib() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_GIB.ISP_FLEXTF_LINEAR_LAST_ELT_GIB_ts.last_elt_gib
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_GIB_last_elt_gib(x) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_GIB.ISP_FLEXTF_LINEAR_LAST_ELT_GIB_ts.last_elt_gib = x)
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_GIB(last_elt_gib) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_GIB.word = (uint32_t)last_elt_gib<<0)
#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_GIB() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_GIB.word
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_LAST_ELT_GIB_word(x) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_LAST_ELT_GIB.word = x)


//ISP_FLEXTF_LINEAR_PIXELIN_SHIFT


#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_PIXELIN_SHIFT_pixel_shift() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_PIXELIN_SHIFT.ISP_FLEXTF_LINEAR_PIXELIN_SHIFT_ts.pixel_shift
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_PIXELIN_SHIFT_pixel_shift(x) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_PIXELIN_SHIFT.ISP_FLEXTF_LINEAR_PIXELIN_SHIFT_ts.pixel_shift = x)
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_PIXELIN_SHIFT(pixel_shift) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_PIXELIN_SHIFT.word = (uint16_t)pixel_shift<<0)
#define Get_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_PIXELIN_SHIFT() p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_PIXELIN_SHIFT.word
#define Set_ISP_FLEXTF_LINEAR_ISP_FLEXTF_LINEAR_PIXELIN_SHIFT_word(x) (p_ISP_FLEXTF_LINEAR_IP->ISP_FLEXTF_LINEAR_PIXELIN_SHIFT.word = x)

//ISP_GRIDIRON_ENABLE
/*Description: Gridiron Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable_gridiron :1;
        /* Disable Gridiron module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* gridiron normal function*/
    }ISP_GRIDIRON_ENABLE_ts;

}ISP_GRIDIRON_ENABLE_tu;



//ISP_GRIDIRON_CTRL
/*Description: Gridiron Control Register
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t loggridpitch :4;
        /* 
        log of gridpitch used for current sensor. Range: integers in the range [4, LOGGRIDPITCH_M]*/
        uint8_t reserved0 :4;
        uint8_t mem_init :1;
        /* Normal operation - data are read from referrence RAMs to algorithm*/
        uint8_t reserved1 :7;
        uint8_t en_cast0 :1;
        /* Disable Cast 0*/
        uint8_t en_cast1 :1;
        /* Disable Cast 1*/
        uint8_t en_cast2 :1;
        /* Disable Cast 2*/
        uint8_t en_cast3 :1;
        /* Disable Cast 3*/
        uint8_t reserved2 :4;
        uint8_t super_sensitive :1;
        /* Normal gain*/
    }ISP_GRIDIRON_CTRL_ts;

}ISP_GRIDIRON_CTRL_tu;



//ISP_GRIDIRON_CR_START
/*Description: Sensor crop start (H & V)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t cr_h_start;
        /* 
        sensor horizontal crop start address (has to be even)*/
        uint16_t cr_v_start;
        /* 
        sensor vertical crop start address (has to be even)*/
    }ISP_GRIDIRON_CR_START_ts;

}ISP_GRIDIRON_CR_START_tu;



//ISP_GRIDIRON_IM_SIZE
/*Description: Sensor image sizes (H & V)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t im_h_size;
        /* 
        sensor horizontal scaled image size.*/
        uint16_t im_v_size;
        /* 
        sensor vertical scaled image size.*/
    }ISP_GRIDIRON_IM_SIZE_ts;

}ISP_GRIDIRON_IM_SIZE_tu;



//ISP_GRIDIRON_SENSOR_SIZE
/*Description: Sensor H-size
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t sensor_h_size;
        /* 
        sensor h resolution.*/
    }ISP_GRIDIRON_SENSOR_SIZE_ts;

}ISP_GRIDIRON_SENSOR_SIZE_tu;



//ISP_GRIDIRON_SCALE
/*Description: Sensor scale (H & V)
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t hscale :12;
        /* 
        sensor horizontal scale value.*/
        uint8_t reserved0 :4;
        uint16_t vscale :12;
        /* 
        sensor vertical scale value.*/
    }ISP_GRIDIRON_SCALE_ts;

}ISP_GRIDIRON_SCALE_tu;



//ISP_GRIDIRON_LIVE_CAST_PHASE
/*Description: Live Cast phase
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t fphase;
        /* 
        phase of live cast. Range: 0 to [(2**loggridpitch)-1]*/
    }ISP_GRIDIRON_LIVE_CAST_PHASE_ts;

}ISP_GRIDIRON_LIVE_CAST_PHASE_tu;



//ISP_GRIDIRON_PIX_ORDER
/*Description: Pixel order of the frame
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t hor_flip :1;
        /* IDP input data is not horizontally flipped*/
        uint8_t ver_flip :1;
        /* IDP input data is not vertically flipped*/
        uint8_t wr_pix_order :1;
        /* Pixel order not written thru T1. IP tries to extract the value from IDP stream.*/
    }ISP_GRIDIRON_PIX_ORDER_ts;

}ISP_GRIDIRON_PIX_ORDER_tu;

typedef struct
{
    ISP_GRIDIRON_ENABLE_tu ISP_GRIDIRON_ENABLE;
    ISP_GRIDIRON_CTRL_tu ISP_GRIDIRON_CTRL;
    ISP_GRIDIRON_CR_START_tu ISP_GRIDIRON_CR_START;
    ISP_GRIDIRON_IM_SIZE_tu ISP_GRIDIRON_IM_SIZE;
    ISP_GRIDIRON_SENSOR_SIZE_tu ISP_GRIDIRON_SENSOR_SIZE;
    ISP_GRIDIRON_SCALE_tu ISP_GRIDIRON_SCALE;
    ISP_GRIDIRON_LIVE_CAST_PHASE_tu ISP_GRIDIRON_LIVE_CAST_PHASE;
    ISP_GRIDIRON_PIX_ORDER_tu ISP_GRIDIRON_PIX_ORDER;
}ISP_GRIDIRON_IP_ts;




//ISP_GRIDIRON_ENABLE


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE_enable_gridiron() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.ISP_GRIDIRON_ENABLE_ts.enable_gridiron
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE_enable_gridiron_DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.ISP_GRIDIRON_ENABLE_ts.enable_gridiron == enable_gridiron_DISABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE_enable_gridiron__DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.ISP_GRIDIRON_ENABLE_ts.enable_gridiron = enable_gridiron_DISABLE)
#define enable_gridiron_DISABLE 0x0    //Disable Gridiron module
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE_enable_gridiron_ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.ISP_GRIDIRON_ENABLE_ts.enable_gridiron == enable_gridiron_ENABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE_enable_gridiron__ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.ISP_GRIDIRON_ENABLE_ts.enable_gridiron = enable_gridiron_ENABLE)
#define enable_gridiron_ENABLE 0x1    //Enable Gridiron module


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE_soft_reset() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.ISP_GRIDIRON_ENABLE_ts.soft_reset
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE_soft_reset_INACTIVE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.ISP_GRIDIRON_ENABLE_ts.soft_reset == soft_reset_INACTIVE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE_soft_reset__INACTIVE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.ISP_GRIDIRON_ENABLE_ts.soft_reset = soft_reset_INACTIVE)
#define soft_reset_INACTIVE 0x0    //gridiron normal function
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE_soft_reset_ACTIVE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.ISP_GRIDIRON_ENABLE_ts.soft_reset == soft_reset_ACTIVE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE_soft_reset__ACTIVE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.ISP_GRIDIRON_ENABLE_ts.soft_reset = soft_reset_ACTIVE)
#define soft_reset_ACTIVE 0x1    //resets algorithm block
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE(enable_gridiron,soft_reset) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.word = (uint32_t)enable_gridiron<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.word
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_ENABLE_word(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_ENABLE.word = x)


//ISP_GRIDIRON_CTRL


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_loggridpitch() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.loggridpitch
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_loggridpitch(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.loggridpitch = x)


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_mem_init() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.mem_init
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_mem_init_B_0x0() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.mem_init == mem_init_B_0x0)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_mem_init__B_0x0() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.mem_init = mem_init_B_0x0)
#define mem_init_B_0x0 0x0    //Normal operation - data are read from referrence RAMs to algorithm
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_mem_init_B_0x1() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.mem_init == mem_init_B_0x1)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_mem_init__B_0x1() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.mem_init = mem_init_B_0x1)
#define mem_init_B_0x1 0x1    //Memory initialization phase - data are read/written from/to referrence RAMs through T1 bus


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast0() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast0
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast0_DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast0 == en_cast0_DISABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast0__DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast0 = en_cast0_DISABLE)
#define en_cast0_DISABLE 0x0    //Disable Cast 0
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast0_ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast0 == en_cast0_ENABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast0__ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast0 = en_cast0_ENABLE)
#define en_cast0_ENABLE 0x1    //Enable Cast 0


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast1() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast1
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast1_DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast1 == en_cast1_DISABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast1__DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast1 = en_cast1_DISABLE)
#define en_cast1_DISABLE 0x0    //Disable Cast 1
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast1_ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast1 == en_cast1_ENABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast1__ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast1 = en_cast1_ENABLE)
#define en_cast1_ENABLE 0x1    //Enable Cast 1


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast2() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast2
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast2_DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast2 == en_cast2_DISABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast2__DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast2 = en_cast2_DISABLE)
#define en_cast2_DISABLE 0x0    //Disable Cast 2
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast2_ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast2 == en_cast2_ENABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast2__ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast2 = en_cast2_ENABLE)
#define en_cast2_ENABLE 0x1    //Enable Cast 2


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast3() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast3
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast3_DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast3 == en_cast3_DISABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast3__DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast3 = en_cast3_DISABLE)
#define en_cast3_DISABLE 0x0    //Disable Cast 3
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast3_ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast3 == en_cast3_ENABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_en_cast3__ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.en_cast3 = en_cast3_ENABLE)
#define en_cast3_ENABLE 0x1    //Enable Cast 3


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_super_sensitive() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.super_sensitive
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_super_sensitive_NORMAL() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.super_sensitive == super_sensitive_NORMAL)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_super_sensitive__NORMAL() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.super_sensitive = super_sensitive_NORMAL)
#define super_sensitive_NORMAL 0x0    //Normal gain
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_super_sensitive_SUPERSENSITIVE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.super_sensitive == super_sensitive_SUPERSENSITIVE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_super_sensitive__SUPERSENSITIVE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.ISP_GRIDIRON_CTRL_ts.super_sensitive = super_sensitive_SUPERSENSITIVE)
#define super_sensitive_SUPERSENSITIVE 0x1    //Enable 2x log gain
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL(loggridpitch,mem_init,en_cast0,en_cast1,en_cast2,en_cast3,super_sensitive) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.word = (uint32_t)loggridpitch<<0 | (uint32_t)mem_init<<8 | (uint32_t)en_cast0<<16 | (uint32_t)en_cast1<<17 | (uint32_t)en_cast2<<18 | (uint32_t)en_cast3<<19 | (uint32_t)super_sensitive<<24)
#define Get_ISP_GRIDIRON_ISP_GRIDIRON_CTRL() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.word
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CTRL_word(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CTRL.word = x)


//ISP_GRIDIRON_CR_START


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_CR_START_cr_h_start() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CR_START.ISP_GRIDIRON_CR_START_ts.cr_h_start
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CR_START_cr_h_start(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CR_START.ISP_GRIDIRON_CR_START_ts.cr_h_start = x)


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_CR_START_cr_v_start() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CR_START.ISP_GRIDIRON_CR_START_ts.cr_v_start
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CR_START_cr_v_start(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CR_START.ISP_GRIDIRON_CR_START_ts.cr_v_start = x)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CR_START(cr_h_start,cr_v_start) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CR_START.word = (uint32_t)cr_h_start<<0 | (uint32_t)cr_v_start<<16)
#define Get_ISP_GRIDIRON_ISP_GRIDIRON_CR_START() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CR_START.word
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_CR_START_word(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_CR_START.word = x)


//ISP_GRIDIRON_IM_SIZE


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_IM_SIZE_im_h_size() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_IM_SIZE.ISP_GRIDIRON_IM_SIZE_ts.im_h_size
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_IM_SIZE_im_h_size(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_IM_SIZE.ISP_GRIDIRON_IM_SIZE_ts.im_h_size = x)


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_IM_SIZE_im_v_size() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_IM_SIZE.ISP_GRIDIRON_IM_SIZE_ts.im_v_size
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_IM_SIZE_im_v_size(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_IM_SIZE.ISP_GRIDIRON_IM_SIZE_ts.im_v_size = x)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_IM_SIZE(im_h_size,im_v_size) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_IM_SIZE.word = (uint32_t)im_h_size<<0 | (uint32_t)im_v_size<<16)
#define Get_ISP_GRIDIRON_ISP_GRIDIRON_IM_SIZE() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_IM_SIZE.word
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_IM_SIZE_word(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_IM_SIZE.word = x)


//ISP_GRIDIRON_SENSOR_SIZE


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_SENSOR_SIZE_sensor_h_size() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SENSOR_SIZE.ISP_GRIDIRON_SENSOR_SIZE_ts.sensor_h_size
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_SENSOR_SIZE_sensor_h_size(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SENSOR_SIZE.ISP_GRIDIRON_SENSOR_SIZE_ts.sensor_h_size = x)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_SENSOR_SIZE(sensor_h_size) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SENSOR_SIZE.word = (uint32_t)sensor_h_size<<0)
#define Get_ISP_GRIDIRON_ISP_GRIDIRON_SENSOR_SIZE() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SENSOR_SIZE.word
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_SENSOR_SIZE_word(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SENSOR_SIZE.word = x)


//ISP_GRIDIRON_SCALE


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_SCALE_hscale() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SCALE.ISP_GRIDIRON_SCALE_ts.hscale
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_SCALE_hscale(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SCALE.ISP_GRIDIRON_SCALE_ts.hscale = x)


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_SCALE_vscale() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SCALE.ISP_GRIDIRON_SCALE_ts.vscale
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_SCALE_vscale(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SCALE.ISP_GRIDIRON_SCALE_ts.vscale = x)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_SCALE(hscale,vscale) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SCALE.word = (uint32_t)hscale<<0 | (uint32_t)vscale<<16)
#define Get_ISP_GRIDIRON_ISP_GRIDIRON_SCALE() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SCALE.word
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_SCALE_word(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_SCALE.word = x)


//ISP_GRIDIRON_LIVE_CAST_PHASE


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_LIVE_CAST_PHASE_fphase() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_LIVE_CAST_PHASE.ISP_GRIDIRON_LIVE_CAST_PHASE_ts.fphase
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_LIVE_CAST_PHASE_fphase(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_LIVE_CAST_PHASE.ISP_GRIDIRON_LIVE_CAST_PHASE_ts.fphase = x)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_LIVE_CAST_PHASE(fphase) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_LIVE_CAST_PHASE.word = (uint32_t)fphase<<0)
#define Get_ISP_GRIDIRON_ISP_GRIDIRON_LIVE_CAST_PHASE() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_LIVE_CAST_PHASE.word
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_LIVE_CAST_PHASE_word(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_LIVE_CAST_PHASE.word = x)


//ISP_GRIDIRON_PIX_ORDER


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_hor_flip() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.hor_flip
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_hor_flip_DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.hor_flip == hor_flip_DISABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_hor_flip__DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.hor_flip = hor_flip_DISABLE)
#define hor_flip_DISABLE 0x0    //IDP input data is not horizontally flipped
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_hor_flip_ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.hor_flip == hor_flip_ENABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_hor_flip__ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.hor_flip = hor_flip_ENABLE)
#define hor_flip_ENABLE 0x1    //IDP input data is horizontally flipped


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_ver_flip() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.ver_flip
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_ver_flip_DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.ver_flip == ver_flip_DISABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_ver_flip__DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.ver_flip = ver_flip_DISABLE)
#define ver_flip_DISABLE 0x0    //IDP input data is not vertically flipped
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_ver_flip_ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.ver_flip == ver_flip_ENABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_ver_flip__ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.ver_flip = ver_flip_ENABLE)
#define ver_flip_ENABLE 0x1    //IDP input data is vertically flipped


#define Get_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_wr_pix_order() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.wr_pix_order
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_wr_pix_order_DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.wr_pix_order == wr_pix_order_DISABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_wr_pix_order__DISABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.wr_pix_order = wr_pix_order_DISABLE)
#define wr_pix_order_DISABLE 0x0    //Pixel order not written thru T1. IP tries to extract the value from IDP stream.
#define Is_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_wr_pix_order_ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.wr_pix_order == wr_pix_order_ENABLE)
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_wr_pix_order__ENABLE() (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.ISP_GRIDIRON_PIX_ORDER_ts.wr_pix_order = wr_pix_order_ENABLE)
#define wr_pix_order_ENABLE 0x1    //IP reads the pixel order from T1 register.
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER(hor_flip,ver_flip,wr_pix_order) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.word = (uint8_t)hor_flip<<0 | (uint8_t)ver_flip<<1 | (uint8_t)wr_pix_order<<2)
#define Get_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER() p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.word
#define Set_ISP_GRIDIRON_ISP_GRIDIRON_PIX_ORDER_word(x) (p_ISP_GRIDIRON_IP->ISP_GRIDIRON_PIX_ORDER.word = x)

//ISP_CHG_ENABLE
/*Description: Channel Gain Enable, and soft reset control

Enable bit is used to enable the gain function. If this is enabled unsigned gain will be applied in accordance with the block input parameters otherwise IDP data out will be the same as IDP data in. Soft reset bit will do a syncronous reset of all clocked process
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t chg_enable :1;
        /* Disable channel gain module*/
        uint8_t reserved0 :3;
        uint8_t chg_soft_reset :1;
        /* DISABLE_SOFT_RESET*/
    }ISP_CHG_ENABLE_ts;

}ISP_CHG_ENABLE_tu;



//ISP_CHG_SHADOW_COMPS
/*Description: Enable Shadowing of channel gain registers.

When asserted, gain coefficient inputs are not consumed by the gain logic until the start of the next frame.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t shadow_comps :1;
        /* Gain coefficient inputs are consumed immediatly*/
    }ISP_CHG_SHADOW_COMPS_ts;

}ISP_CHG_SHADOW_COMPS_tu;



//ISP_CHG_G1_COMP
/*Description: Green 1 Compensation Gain Coefficient

Unsigned green1 compensation is the gain applied to all pixels which are flagged with the Green1 colour code.

It is fixed at 12-bits and coded as fixpoint 4.8. It means pixel is multiplied by 12-bits register value, and the resulting value is then right shifted by 8.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t g1_comp :12;
        /* Green1 pixel gain coded as unsigned fixpoint 4.8
        [11:8] = decimal part
        [7:0] = fractionnal part (1 LSB = 1/256)*/
    }ISP_CHG_G1_COMP_ts;

}ISP_CHG_G1_COMP_tu;



//ISP_CHG_R_COMP
/*Description: Unsigned Red Compensation Gain Coefficient

Gain applied to all pixels which are flagged with the Red colour code.

It is fixed at 12-bits and coded as fixpoint 4.8. It means pixel is multiplied by 12-bits register value, and the resulting value is then right shifted by 8.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t r_comp :12;
        /* Red pixel gain coded as unsigned fixpoint 4.8
        [11:8] = decimal part
        [7:0] = fractionnal part (1 LSB = 1/256)*/
    }ISP_CHG_R_COMP_ts;

}ISP_CHG_R_COMP_tu;



//ISP_CHG_B_COMP
/*Description: Unsigned Blue Compensation Gain Coefficient

Gain applied to all pixels which are flagged with the blue colour code described below.

It is fixed at 12-bits and coded as fixpoint 4.8. It means pixel is multiplied by 12-bits register value, and the resulting value is then right shifted by 8.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t b_comp :12;
        /* Blue pixel gain coded as unsigned fixpoint 4.8
        [11:8] = decimal part
        [7:0] = fractionnal part (1 LSB = 1/256)*/
    }ISP_CHG_B_COMP_ts;

}ISP_CHG_B_COMP_tu;



//ISP_CHG_G2_COMP
/*Description: Green 2 Compensation Gain Coefficient

Unsigned green2 compensation is the gain applied to all pixels which are flagged with the Green2 colour code.

It is fixed at 12-bits and coded as fixpoint 4.8. It means pixel is multiplied by 12-bits register value, and the resulting value is then right shifted by 8.
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t g2_comp :12;
        /* Green2 pixel gain coded as unsigned fixpoint 4.8
        [11:8] = decimal part
        [7:0] = fractionnal part (1 LSB = 1/256)*/
    }ISP_CHG_G2_COMP_ts;

}ISP_CHG_G2_COMP_tu;

typedef struct
{
    ISP_CHG_ENABLE_tu ISP_CHG_ENABLE;
    ISP_CHG_SHADOW_COMPS_tu ISP_CHG_SHADOW_COMPS;
    ISP_CHG_G1_COMP_tu ISP_CHG_G1_COMP;
    ISP_CHG_R_COMP_tu ISP_CHG_R_COMP;
    ISP_CHG_B_COMP_tu ISP_CHG_B_COMP;
    ISP_CHG_G2_COMP_tu ISP_CHG_G2_COMP;
}ISP_CHG_IP_ts;




//ISP_CHG_ENABLE


#define Get_ISP_CHG_ISP_CHG_ENABLE_chg_enable() p_ISP_CHG_IP->ISP_CHG_ENABLE.ISP_CHG_ENABLE_ts.chg_enable
#define Is_ISP_CHG_ISP_CHG_ENABLE_chg_enable_DISABLE() (p_ISP_CHG_IP->ISP_CHG_ENABLE.ISP_CHG_ENABLE_ts.chg_enable == chg_enable_DISABLE)
#define Set_ISP_CHG_ISP_CHG_ENABLE_chg_enable__DISABLE() (p_ISP_CHG_IP->ISP_CHG_ENABLE.ISP_CHG_ENABLE_ts.chg_enable = chg_enable_DISABLE)
#define chg_enable_DISABLE 0x0    //Disable channel gain module
#define Is_ISP_CHG_ISP_CHG_ENABLE_chg_enable_ENABLE() (p_ISP_CHG_IP->ISP_CHG_ENABLE.ISP_CHG_ENABLE_ts.chg_enable == chg_enable_ENABLE)
#define Set_ISP_CHG_ISP_CHG_ENABLE_chg_enable__ENABLE() (p_ISP_CHG_IP->ISP_CHG_ENABLE.ISP_CHG_ENABLE_ts.chg_enable = chg_enable_ENABLE)
#define chg_enable_ENABLE 0x1    //Enable channel gain module


#define Get_ISP_CHG_ISP_CHG_ENABLE_chg_soft_reset() p_ISP_CHG_IP->ISP_CHG_ENABLE.ISP_CHG_ENABLE_ts.chg_soft_reset
#define Is_ISP_CHG_ISP_CHG_ENABLE_chg_soft_reset_DISABLE_SOFT_RESET() (p_ISP_CHG_IP->ISP_CHG_ENABLE.ISP_CHG_ENABLE_ts.chg_soft_reset == chg_soft_reset_DISABLE_SOFT_RESET)
#define Set_ISP_CHG_ISP_CHG_ENABLE_chg_soft_reset__DISABLE_SOFT_RESET() (p_ISP_CHG_IP->ISP_CHG_ENABLE.ISP_CHG_ENABLE_ts.chg_soft_reset = chg_soft_reset_DISABLE_SOFT_RESET)
#define chg_soft_reset_DISABLE_SOFT_RESET 0x0    //DISABLE_SOFT_RESET
#define Is_ISP_CHG_ISP_CHG_ENABLE_chg_soft_reset_ENABLE_SOFT_RESET() (p_ISP_CHG_IP->ISP_CHG_ENABLE.ISP_CHG_ENABLE_ts.chg_soft_reset == chg_soft_reset_ENABLE_SOFT_RESET)
#define Set_ISP_CHG_ISP_CHG_ENABLE_chg_soft_reset__ENABLE_SOFT_RESET() (p_ISP_CHG_IP->ISP_CHG_ENABLE.ISP_CHG_ENABLE_ts.chg_soft_reset = chg_soft_reset_ENABLE_SOFT_RESET)
#define chg_soft_reset_ENABLE_SOFT_RESET 0x1    //ENABLE_SOFT_RESET
#define Set_ISP_CHG_ISP_CHG_ENABLE(chg_enable,chg_soft_reset) (p_ISP_CHG_IP->ISP_CHG_ENABLE.word = (uint32_t)chg_enable<<0 | (uint32_t)chg_soft_reset<<4)
#define Get_ISP_CHG_ISP_CHG_ENABLE() p_ISP_CHG_IP->ISP_CHG_ENABLE.word
#define Set_ISP_CHG_ISP_CHG_ENABLE_word(x) (p_ISP_CHG_IP->ISP_CHG_ENABLE.word = x)


//ISP_CHG_SHADOW_COMPS


#define Get_ISP_CHG_ISP_CHG_SHADOW_COMPS_shadow_comps() p_ISP_CHG_IP->ISP_CHG_SHADOW_COMPS.ISP_CHG_SHADOW_COMPS_ts.shadow_comps
#define Is_ISP_CHG_ISP_CHG_SHADOW_COMPS_shadow_comps_DISABLE_SHADOW() (p_ISP_CHG_IP->ISP_CHG_SHADOW_COMPS.ISP_CHG_SHADOW_COMPS_ts.shadow_comps == shadow_comps_DISABLE_SHADOW)
#define Set_ISP_CHG_ISP_CHG_SHADOW_COMPS_shadow_comps__DISABLE_SHADOW() (p_ISP_CHG_IP->ISP_CHG_SHADOW_COMPS.ISP_CHG_SHADOW_COMPS_ts.shadow_comps = shadow_comps_DISABLE_SHADOW)
#define shadow_comps_DISABLE_SHADOW 0x0    //Gain coefficient inputs are consumed immediatly
#define Is_ISP_CHG_ISP_CHG_SHADOW_COMPS_shadow_comps_ENABLE_SHADOW() (p_ISP_CHG_IP->ISP_CHG_SHADOW_COMPS.ISP_CHG_SHADOW_COMPS_ts.shadow_comps == shadow_comps_ENABLE_SHADOW)
#define Set_ISP_CHG_ISP_CHG_SHADOW_COMPS_shadow_comps__ENABLE_SHADOW() (p_ISP_CHG_IP->ISP_CHG_SHADOW_COMPS.ISP_CHG_SHADOW_COMPS_ts.shadow_comps = shadow_comps_ENABLE_SHADOW)
#define shadow_comps_ENABLE_SHADOW 0x1    //Gain coefficient inputs are consumed at the beginning of the next frame
#define Set_ISP_CHG_ISP_CHG_SHADOW_COMPS(shadow_comps) (p_ISP_CHG_IP->ISP_CHG_SHADOW_COMPS.word = (uint32_t)shadow_comps<<0)
#define Get_ISP_CHG_ISP_CHG_SHADOW_COMPS() p_ISP_CHG_IP->ISP_CHG_SHADOW_COMPS.word
#define Set_ISP_CHG_ISP_CHG_SHADOW_COMPS_word(x) (p_ISP_CHG_IP->ISP_CHG_SHADOW_COMPS.word = x)


//ISP_CHG_G1_COMP


#define Get_ISP_CHG_ISP_CHG_G1_COMP_g1_comp() p_ISP_CHG_IP->ISP_CHG_G1_COMP.ISP_CHG_G1_COMP_ts.g1_comp
#define Set_ISP_CHG_ISP_CHG_G1_COMP_g1_comp(x) (p_ISP_CHG_IP->ISP_CHG_G1_COMP.ISP_CHG_G1_COMP_ts.g1_comp = x)
#define Set_ISP_CHG_ISP_CHG_G1_COMP(g1_comp) (p_ISP_CHG_IP->ISP_CHG_G1_COMP.word = (uint32_t)g1_comp<<0)
#define Get_ISP_CHG_ISP_CHG_G1_COMP() p_ISP_CHG_IP->ISP_CHG_G1_COMP.word
#define Set_ISP_CHG_ISP_CHG_G1_COMP_word(x) (p_ISP_CHG_IP->ISP_CHG_G1_COMP.word = x)


//ISP_CHG_R_COMP


#define Get_ISP_CHG_ISP_CHG_R_COMP_r_comp() p_ISP_CHG_IP->ISP_CHG_R_COMP.ISP_CHG_R_COMP_ts.r_comp
#define Set_ISP_CHG_ISP_CHG_R_COMP_r_comp(x) (p_ISP_CHG_IP->ISP_CHG_R_COMP.ISP_CHG_R_COMP_ts.r_comp = x)
#define Set_ISP_CHG_ISP_CHG_R_COMP(r_comp) (p_ISP_CHG_IP->ISP_CHG_R_COMP.word = (uint32_t)r_comp<<0)
#define Get_ISP_CHG_ISP_CHG_R_COMP() p_ISP_CHG_IP->ISP_CHG_R_COMP.word
#define Set_ISP_CHG_ISP_CHG_R_COMP_word(x) (p_ISP_CHG_IP->ISP_CHG_R_COMP.word = x)


//ISP_CHG_B_COMP


#define Get_ISP_CHG_ISP_CHG_B_COMP_b_comp() p_ISP_CHG_IP->ISP_CHG_B_COMP.ISP_CHG_B_COMP_ts.b_comp
#define Set_ISP_CHG_ISP_CHG_B_COMP_b_comp(x) (p_ISP_CHG_IP->ISP_CHG_B_COMP.ISP_CHG_B_COMP_ts.b_comp = x)
#define Set_ISP_CHG_ISP_CHG_B_COMP(b_comp) (p_ISP_CHG_IP->ISP_CHG_B_COMP.word = (uint32_t)b_comp<<0)
#define Get_ISP_CHG_ISP_CHG_B_COMP() p_ISP_CHG_IP->ISP_CHG_B_COMP.word
#define Set_ISP_CHG_ISP_CHG_B_COMP_word(x) (p_ISP_CHG_IP->ISP_CHG_B_COMP.word = x)


//ISP_CHG_G2_COMP


#define Get_ISP_CHG_ISP_CHG_G2_COMP_g2_comp() p_ISP_CHG_IP->ISP_CHG_G2_COMP.ISP_CHG_G2_COMP_ts.g2_comp
#define Set_ISP_CHG_ISP_CHG_G2_COMP_g2_comp(x) (p_ISP_CHG_IP->ISP_CHG_G2_COMP.ISP_CHG_G2_COMP_ts.g2_comp = x)
#define Set_ISP_CHG_ISP_CHG_G2_COMP(g2_comp) (p_ISP_CHG_IP->ISP_CHG_G2_COMP.word = (uint16_t)g2_comp<<0)
#define Get_ISP_CHG_ISP_CHG_G2_COMP() p_ISP_CHG_IP->ISP_CHG_G2_COMP.word
#define Set_ISP_CHG_ISP_CHG_G2_COMP_word(x) (p_ISP_CHG_IP->ISP_CHG_G2_COMP.word = x)

//ISP_SNAIL_SCORPIO_ENABLE
/*Description: Enable configuration register. Soft reset register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t snailnorec_enable :1;
        /* Disable snailnorec module*/
        uint8_t reserved0 :3;
        uint8_t snailnorec_soft_reset :1;
        /* SOFT_RESET_DISABLE*/
    }ISP_SNAIL_SCORPIO_ENABLE_ts;

}ISP_SNAIL_SCORPIO_ENABLE_tu;

typedef struct
{
    ISP_SNAIL_SCORPIO_ENABLE_tu ISP_SNAIL_SCORPIO_ENABLE;
}ISP_SNAIL_SCORPIO_IP_ts;




//ISP_SNAIL_SCORPIO_ENABLE


#define Get_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE_snailnorec_enable() p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.ISP_SNAIL_SCORPIO_ENABLE_ts.snailnorec_enable
#define Is_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE_snailnorec_enable_DISABLE() (p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.ISP_SNAIL_SCORPIO_ENABLE_ts.snailnorec_enable == snailnorec_enable_DISABLE)
#define Set_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE_snailnorec_enable__DISABLE() (p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.ISP_SNAIL_SCORPIO_ENABLE_ts.snailnorec_enable = snailnorec_enable_DISABLE)
#define snailnorec_enable_DISABLE 0x0    //Disable snailnorec module
#define Is_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE_snailnorec_enable_ENABLE() (p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.ISP_SNAIL_SCORPIO_ENABLE_ts.snailnorec_enable == snailnorec_enable_ENABLE)
#define Set_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE_snailnorec_enable__ENABLE() (p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.ISP_SNAIL_SCORPIO_ENABLE_ts.snailnorec_enable = snailnorec_enable_ENABLE)
#define snailnorec_enable_ENABLE 0x1    //Enable snailnorec module


#define Get_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE_snailnorec_soft_reset() p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.ISP_SNAIL_SCORPIO_ENABLE_ts.snailnorec_soft_reset
#define Is_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE_snailnorec_soft_reset_SOFT_RESET_DISABLE() (p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.ISP_SNAIL_SCORPIO_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define Set_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE_snailnorec_soft_reset__SOFT_RESET_DISABLE() (p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.ISP_SNAIL_SCORPIO_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define snailnorec_soft_reset_SOFT_RESET_DISABLE 0x0    //SOFT_RESET_DISABLE
#define Is_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE_snailnorec_soft_reset_SOFT_RESET_ENABLE() (p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.ISP_SNAIL_SCORPIO_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define Set_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE_snailnorec_soft_reset__SOFT_RESET_ENABLE() (p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.ISP_SNAIL_SCORPIO_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define snailnorec_soft_reset_SOFT_RESET_ENABLE 0x1    //SOFT_RESET_ENABLE
#define Set_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE(snailnorec_enable,snailnorec_soft_reset) (p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.word = (uint8_t)snailnorec_enable<<0 | (uint8_t)snailnorec_soft_reset<<4)
#define Get_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE() p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.word
#define Set_ISP_SNAIL_SCORPIO_ISP_SNAIL_SCORPIO_ENABLE_word(x) (p_ISP_SNAIL_SCORPIO_IP->ISP_SNAIL_SCORPIO_ENABLE.word = x)

//ISP_SCORPIO_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t scorpio_enable_req :1;
        /* Disable Scorpio module*/
        uint8_t scorpio_enable_status :1;
    }ISP_SCORPIO_ENABLE_ts;

}ISP_SCORPIO_ENABLE_tu;



//ISP_SCORPIO_CONTROL
/*Description: Control scorpio module
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t scorpio_soft_reset :1;
        /* Disable soft reset*/
    }ISP_SCORPIO_CONTROL_ts;

}ISP_SCORPIO_CONTROL_tu;



//ISP_SCORPIO_CORING_LVL_REQ
/*Description: scorpio_coring_lvl_req controls the Nyquist Coring Level input to the Scorpio block

It cancels row-to-row variation in pixel response between odd/even lines.

Default is zero i.e. Scorpio disabled. SGS Comment: The maximum swing at Nyqusit which Scorpio can remove. Default 8 is suitable for low-level RRV (row-row variation), and is like a threshold of visibility of Scorpio artefacts. We sometimes need higher settings, I ve used up to 24. This is sensor-dependent mostly, maybe no damping needed. Set to 8 or above to enable (max value is 255).
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t scorpio_coring_level_req;
    }ISP_SCORPIO_CORING_LVL_REQ_ts;

}ISP_SCORPIO_CORING_LVL_REQ_tu;



//ISP_SCORPIO_CORING_LVL_STATUS
/*Description: Returns the status of the scorpio coring level value for the local register bank (re-timed to the SOF input linetype).
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t scorpio_coring_level_status;
    }ISP_SCORPIO_CORING_LVL_STATUS_ts;

}ISP_SCORPIO_CORING_LVL_STATUS_tu;

typedef struct
{
    ISP_SCORPIO_ENABLE_tu ISP_SCORPIO_ENABLE;
    ISP_SCORPIO_CONTROL_tu ISP_SCORPIO_CONTROL;
    ISP_SCORPIO_CORING_LVL_REQ_tu ISP_SCORPIO_CORING_LVL_REQ;
    ISP_SCORPIO_CORING_LVL_STATUS_tu ISP_SCORPIO_CORING_LVL_STATUS;
}ISP_SCORPIO_IP_ts;




//ISP_SCORPIO_ENABLE


#define Get_ISP_SCORPIO_ISP_SCORPIO_ENABLE_scorpio_enable_req() p_ISP_SCORPIO_IP->ISP_SCORPIO_ENABLE.ISP_SCORPIO_ENABLE_ts.scorpio_enable_req
#define Is_ISP_SCORPIO_ISP_SCORPIO_ENABLE_scorpio_enable_req_DISABLE() (p_ISP_SCORPIO_IP->ISP_SCORPIO_ENABLE.ISP_SCORPIO_ENABLE_ts.scorpio_enable_req == scorpio_enable_req_DISABLE)
#define Set_ISP_SCORPIO_ISP_SCORPIO_ENABLE_scorpio_enable_req__DISABLE() (p_ISP_SCORPIO_IP->ISP_SCORPIO_ENABLE.ISP_SCORPIO_ENABLE_ts.scorpio_enable_req = scorpio_enable_req_DISABLE)
#define scorpio_enable_req_DISABLE 0x0    //Disable Scorpio module
#define Is_ISP_SCORPIO_ISP_SCORPIO_ENABLE_scorpio_enable_req_ENABLE() (p_ISP_SCORPIO_IP->ISP_SCORPIO_ENABLE.ISP_SCORPIO_ENABLE_ts.scorpio_enable_req == scorpio_enable_req_ENABLE)
#define Set_ISP_SCORPIO_ISP_SCORPIO_ENABLE_scorpio_enable_req__ENABLE() (p_ISP_SCORPIO_IP->ISP_SCORPIO_ENABLE.ISP_SCORPIO_ENABLE_ts.scorpio_enable_req = scorpio_enable_req_ENABLE)
#define scorpio_enable_req_ENABLE 0x1    //Enable Scorpio module


#define Get_ISP_SCORPIO_ISP_SCORPIO_ENABLE_scorpio_enable_status() p_ISP_SCORPIO_IP->ISP_SCORPIO_ENABLE.ISP_SCORPIO_ENABLE_ts.scorpio_enable_status
#define Set_ISP_SCORPIO_ISP_SCORPIO_ENABLE(scorpio_enable_req) (p_ISP_SCORPIO_IP->ISP_SCORPIO_ENABLE.word = (uint32_t)scorpio_enable_req<<0)
#define Get_ISP_SCORPIO_ISP_SCORPIO_ENABLE() p_ISP_SCORPIO_IP->ISP_SCORPIO_ENABLE.word
#define Set_ISP_SCORPIO_ISP_SCORPIO_ENABLE_word(x) (p_ISP_SCORPIO_IP->ISP_SCORPIO_ENABLE.word = x)


//ISP_SCORPIO_CONTROL


#define Get_ISP_SCORPIO_ISP_SCORPIO_CONTROL_scorpio_soft_reset() p_ISP_SCORPIO_IP->ISP_SCORPIO_CONTROL.ISP_SCORPIO_CONTROL_ts.scorpio_soft_reset
#define Is_ISP_SCORPIO_ISP_SCORPIO_CONTROL_scorpio_soft_reset_DISABLE() (p_ISP_SCORPIO_IP->ISP_SCORPIO_CONTROL.ISP_SCORPIO_CONTROL_ts.scorpio_soft_reset == scorpio_soft_reset_DISABLE)
#define Set_ISP_SCORPIO_ISP_SCORPIO_CONTROL_scorpio_soft_reset__DISABLE() (p_ISP_SCORPIO_IP->ISP_SCORPIO_CONTROL.ISP_SCORPIO_CONTROL_ts.scorpio_soft_reset = scorpio_soft_reset_DISABLE)
#define scorpio_soft_reset_DISABLE 0x0    //Disable soft reset
#define Is_ISP_SCORPIO_ISP_SCORPIO_CONTROL_scorpio_soft_reset_ENABLE() (p_ISP_SCORPIO_IP->ISP_SCORPIO_CONTROL.ISP_SCORPIO_CONTROL_ts.scorpio_soft_reset == scorpio_soft_reset_ENABLE)
#define Set_ISP_SCORPIO_ISP_SCORPIO_CONTROL_scorpio_soft_reset__ENABLE() (p_ISP_SCORPIO_IP->ISP_SCORPIO_CONTROL.ISP_SCORPIO_CONTROL_ts.scorpio_soft_reset = scorpio_soft_reset_ENABLE)
#define scorpio_soft_reset_ENABLE 0x1    //Enable soft reset
#define Set_ISP_SCORPIO_ISP_SCORPIO_CONTROL(scorpio_soft_reset) (p_ISP_SCORPIO_IP->ISP_SCORPIO_CONTROL.word = (uint32_t)scorpio_soft_reset<<0)
#define Get_ISP_SCORPIO_ISP_SCORPIO_CONTROL() p_ISP_SCORPIO_IP->ISP_SCORPIO_CONTROL.word
#define Set_ISP_SCORPIO_ISP_SCORPIO_CONTROL_word(x) (p_ISP_SCORPIO_IP->ISP_SCORPIO_CONTROL.word = x)


//ISP_SCORPIO_CORING_LVL_REQ


#define Get_ISP_SCORPIO_ISP_SCORPIO_CORING_LVL_REQ_scorpio_coring_level_req() p_ISP_SCORPIO_IP->ISP_SCORPIO_CORING_LVL_REQ.ISP_SCORPIO_CORING_LVL_REQ_ts.scorpio_coring_level_req
#define Set_ISP_SCORPIO_ISP_SCORPIO_CORING_LVL_REQ_scorpio_coring_level_req(x) (p_ISP_SCORPIO_IP->ISP_SCORPIO_CORING_LVL_REQ.ISP_SCORPIO_CORING_LVL_REQ_ts.scorpio_coring_level_req = x)
#define Set_ISP_SCORPIO_ISP_SCORPIO_CORING_LVL_REQ(scorpio_coring_level_req) (p_ISP_SCORPIO_IP->ISP_SCORPIO_CORING_LVL_REQ.word = (uint32_t)scorpio_coring_level_req<<0)
#define Get_ISP_SCORPIO_ISP_SCORPIO_CORING_LVL_REQ() p_ISP_SCORPIO_IP->ISP_SCORPIO_CORING_LVL_REQ.word
#define Set_ISP_SCORPIO_ISP_SCORPIO_CORING_LVL_REQ_word(x) (p_ISP_SCORPIO_IP->ISP_SCORPIO_CORING_LVL_REQ.word = x)


//ISP_SCORPIO_CORING_LVL_STATUS


#define Get_ISP_SCORPIO_ISP_SCORPIO_CORING_LVL_STATUS_scorpio_coring_level_status() p_ISP_SCORPIO_IP->ISP_SCORPIO_CORING_LVL_STATUS.ISP_SCORPIO_CORING_LVL_STATUS_ts.scorpio_coring_level_status
#define Get_ISP_SCORPIO_ISP_SCORPIO_CORING_LVL_STATUS() p_ISP_SCORPIO_IP->ISP_SCORPIO_CORING_LVL_STATUS.word

//ISP_SNAIL_DUSTER_ENABLE
/*Description: Enable configuration register. Soft reset register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t snailnorec_enable :1;
        /* Disable snailnorec module*/
        uint8_t reserved0 :3;
        uint8_t snailnorec_soft_reset :1;
        /* SOFT_RESET_DISABLE*/
    }ISP_SNAIL_DUSTER_ENABLE_ts;

}ISP_SNAIL_DUSTER_ENABLE_tu;

typedef struct
{
    ISP_SNAIL_DUSTER_ENABLE_tu ISP_SNAIL_DUSTER_ENABLE;
}ISP_SNAIL_DUSTER_IP_ts;




//ISP_SNAIL_DUSTER_ENABLE


#define Get_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE_snailnorec_enable() p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.ISP_SNAIL_DUSTER_ENABLE_ts.snailnorec_enable
#define Is_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE_snailnorec_enable_DISABLE() (p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.ISP_SNAIL_DUSTER_ENABLE_ts.snailnorec_enable == snailnorec_enable_DISABLE)
#define Set_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE_snailnorec_enable__DISABLE() (p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.ISP_SNAIL_DUSTER_ENABLE_ts.snailnorec_enable = snailnorec_enable_DISABLE)
#define snailnorec_enable_DISABLE 0x0    //Disable snailnorec module
#define Is_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE_snailnorec_enable_ENABLE() (p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.ISP_SNAIL_DUSTER_ENABLE_ts.snailnorec_enable == snailnorec_enable_ENABLE)
#define Set_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE_snailnorec_enable__ENABLE() (p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.ISP_SNAIL_DUSTER_ENABLE_ts.snailnorec_enable = snailnorec_enable_ENABLE)
#define snailnorec_enable_ENABLE 0x1    //Enable snailnorec module


#define Get_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE_snailnorec_soft_reset() p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.ISP_SNAIL_DUSTER_ENABLE_ts.snailnorec_soft_reset
#define Is_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE_snailnorec_soft_reset_SOFT_RESET_DISABLE() (p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.ISP_SNAIL_DUSTER_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define Set_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE_snailnorec_soft_reset__SOFT_RESET_DISABLE() (p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.ISP_SNAIL_DUSTER_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define snailnorec_soft_reset_SOFT_RESET_DISABLE 0x0    //SOFT_RESET_DISABLE
#define Is_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE_snailnorec_soft_reset_SOFT_RESET_ENABLE() (p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.ISP_SNAIL_DUSTER_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define Set_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE_snailnorec_soft_reset__SOFT_RESET_ENABLE() (p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.ISP_SNAIL_DUSTER_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define snailnorec_soft_reset_SOFT_RESET_ENABLE 0x1    //SOFT_RESET_ENABLE
#define Set_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE(snailnorec_enable,snailnorec_soft_reset) (p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.word = (uint8_t)snailnorec_enable<<0 | (uint8_t)snailnorec_soft_reset<<4)
#define Get_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE() p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.word
#define Set_ISP_SNAIL_DUSTER_ISP_SNAIL_DUSTER_ENABLE_word(x) (p_ISP_SNAIL_DUSTER_IP->ISP_SNAIL_DUSTER_ENABLE.word = x)

//ISP_BAYER_STORE_POST_GAIN_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_BAYER_STORE_POST_GAIN_ENABLE_ts;

}ISP_BAYER_STORE_POST_GAIN_ENABLE_tu;



//ISP_BAYER_STORE_POST_GAIN_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_BAYER_STORE_POST_GAIN_SELECT_ts;

}ISP_BAYER_STORE_POST_GAIN_SELECT_tu;

typedef struct
{
    ISP_BAYER_STORE_POST_GAIN_ENABLE_tu ISP_BAYER_STORE_POST_GAIN_ENABLE;
    ISP_BAYER_STORE_POST_GAIN_SELECT_tu ISP_BAYER_STORE_POST_GAIN_SELECT;
}ISP_BAYER_STORE_POST_GAIN_IP_ts;




//ISP_BAYER_STORE_POST_GAIN_ENABLE


#define Get_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE_mux2to1_enable() p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.ISP_BAYER_STORE_POST_GAIN_ENABLE_ts.mux2to1_enable
#define Is_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE_mux2to1_enable_DISABLE() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.ISP_BAYER_STORE_POST_GAIN_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE_mux2to1_enable__DISABLE() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.ISP_BAYER_STORE_POST_GAIN_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE_mux2to1_enable_ENABLE() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.ISP_BAYER_STORE_POST_GAIN_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE_mux2to1_enable__ENABLE() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.ISP_BAYER_STORE_POST_GAIN_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE_mux2to1_soft_reset() p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.ISP_BAYER_STORE_POST_GAIN_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.ISP_BAYER_STORE_POST_GAIN_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.ISP_BAYER_STORE_POST_GAIN_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.ISP_BAYER_STORE_POST_GAIN_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.ISP_BAYER_STORE_POST_GAIN_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE() p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.word
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_ENABLE_word(x) (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_ENABLE.word = x)


//ISP_BAYER_STORE_POST_GAIN_SELECT


#define Get_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT_mux2to1_select() p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.ISP_BAYER_STORE_POST_GAIN_SELECT_ts.mux2to1_select
#define Is_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT_mux2to1_select_IDP0() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.ISP_BAYER_STORE_POST_GAIN_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT_mux2to1_select__IDP0() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.ISP_BAYER_STORE_POST_GAIN_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT_mux2to1_select_IDP1() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.ISP_BAYER_STORE_POST_GAIN_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT_mux2to1_select__IDP1() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.ISP_BAYER_STORE_POST_GAIN_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT_mux2to1_shadow_en() p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.ISP_BAYER_STORE_POST_GAIN_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.ISP_BAYER_STORE_POST_GAIN_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.ISP_BAYER_STORE_POST_GAIN_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.ISP_BAYER_STORE_POST_GAIN_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.ISP_BAYER_STORE_POST_GAIN_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT() p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.word
#define Set_ISP_BAYER_STORE_POST_GAIN_ISP_BAYER_STORE_POST_GAIN_SELECT_word(x) (p_ISP_BAYER_STORE_POST_GAIN_IP->ISP_BAYER_STORE_POST_GAIN_SELECT.word = x)

//ISP_ITPOINT_RE_IN_ENABLE
/*Description: itpoint Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable itpoint module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* itpoint functions normally*/
    }ISP_ITPOINT_RE_IN_ENABLE_ts;

}ISP_ITPOINT_RE_IN_ENABLE_tu;



//ISP_ITPOINT_RE_IN_PIX_POS
/*Description: itpoint pixel position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_pos :13;
        /* 
        position of pixel for interrupt generation*/
    }ISP_ITPOINT_RE_IN_PIX_POS_ts;

}ISP_ITPOINT_RE_IN_PIX_POS_tu;



//ISP_ITPOINT_RE_IN_LINE_POS
/*Description: itpoint line position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_pos :13;
        /* 
        position of linefor interrupt generation*/
    }ISP_ITPOINT_RE_IN_LINE_POS_ts;

}ISP_ITPOINT_RE_IN_LINE_POS_tu;



//ISP_ITPOINT_RE_IN_PIX_CNT
/*Description: current position of pixel for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_cnt :13;
        /* 
        current x position of pixel for the frame.For (X,Y) where X is image width, Y is image height, image first pix postion will be 1, last line position will be X. Programming X= 0 is invalid*/
    }ISP_ITPOINT_RE_IN_PIX_CNT_ts;

}ISP_ITPOINT_RE_IN_PIX_CNT_tu;



//ISP_ITPOINT_RE_IN_LINE_CNT
/*Description: current position of line for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_cnt :13;
        /* 
        current y position of linefor the frame.For (X,Y) where X is image width, Y is image height, image first line position will be 1, last line position will be Y. Programming Y = 0 is invalid.*/
    }ISP_ITPOINT_RE_IN_LINE_CNT_ts;

}ISP_ITPOINT_RE_IN_LINE_CNT_tu;



//ISP_ITPOINT_RE_IN_FRAME_CNT
/*Description: itpoint frame count
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t frame_cnt;
        /* 
        frame counter for counting number of frame being passed through this module.*/
    }ISP_ITPOINT_RE_IN_FRAME_CNT_ts;

}ISP_ITPOINT_RE_IN_FRAME_CNT_tu;



//ISP_ITPOINT_RE_IN_DFV
/*Description: itpointDesign for Verification register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* 
        this bit is used to enable the pulsed interrupts*/
        uint8_t dfv_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
    }ISP_ITPOINT_RE_IN_DFV_ts;

}ISP_ITPOINT_RE_IN_DFV_tu;

typedef struct
{
    ISP_ITPOINT_RE_IN_ENABLE_tu ISP_ITPOINT_RE_IN_ENABLE;
    ISP_ITPOINT_RE_IN_PIX_POS_tu ISP_ITPOINT_RE_IN_PIX_POS;
    ISP_ITPOINT_RE_IN_LINE_POS_tu ISP_ITPOINT_RE_IN_LINE_POS;
    ISP_ITPOINT_RE_IN_PIX_CNT_tu ISP_ITPOINT_RE_IN_PIX_CNT;
    ISP_ITPOINT_RE_IN_LINE_CNT_tu ISP_ITPOINT_RE_IN_LINE_CNT;
    ISP_ITPOINT_RE_IN_FRAME_CNT_tu ISP_ITPOINT_RE_IN_FRAME_CNT;
    ISP_ITPOINT_RE_IN_DFV_tu ISP_ITPOINT_RE_IN_DFV;
}ISP_ITPOINT_RE_IN_IP_ts;




//ISP_ITPOINT_RE_IN_ENABLE


#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE_enable() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.ISP_ITPOINT_RE_IN_ENABLE_ts.enable
#define Is_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE_enable_DISABLE() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.ISP_ITPOINT_RE_IN_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE_enable__DISABLE() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.ISP_ITPOINT_RE_IN_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable itpoint module
#define Is_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE_enable_ENABLE() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.ISP_ITPOINT_RE_IN_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE_enable__ENABLE() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.ISP_ITPOINT_RE_IN_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable itpoint module


#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE_soft_reset() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.ISP_ITPOINT_RE_IN_ENABLE_ts.soft_reset
#define Is_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE_soft_reset_B_0x0() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.ISP_ITPOINT_RE_IN_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE_soft_reset__B_0x0() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.ISP_ITPOINT_RE_IN_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //itpoint functions normally
#define Is_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE_soft_reset_B_0x1() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.ISP_ITPOINT_RE_IN_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE_soft_reset__B_0x1() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.ISP_ITPOINT_RE_IN_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //All outputs are assigned reset value (And, as soon as soft_reset is again made 0, it switches to normal functional mode waiting for start of frame)
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE(enable,soft_reset) (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.word
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_ENABLE_word(x) (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_ENABLE.word = x)


//ISP_ITPOINT_RE_IN_PIX_POS


#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_PIX_POS_pix_pos() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_PIX_POS.ISP_ITPOINT_RE_IN_PIX_POS_ts.pix_pos
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_PIX_POS_pix_pos(x) (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_PIX_POS.ISP_ITPOINT_RE_IN_PIX_POS_ts.pix_pos = x)
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_PIX_POS(pix_pos) (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_PIX_POS.word = (uint32_t)pix_pos<<0)
#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_PIX_POS() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_PIX_POS.word
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_PIX_POS_word(x) (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_PIX_POS.word = x)


//ISP_ITPOINT_RE_IN_LINE_POS


#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_LINE_POS_line_pos() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_LINE_POS.ISP_ITPOINT_RE_IN_LINE_POS_ts.line_pos
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_LINE_POS_line_pos(x) (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_LINE_POS.ISP_ITPOINT_RE_IN_LINE_POS_ts.line_pos = x)
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_LINE_POS(line_pos) (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_LINE_POS.word = (uint32_t)line_pos<<0)
#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_LINE_POS() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_LINE_POS.word
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_LINE_POS_word(x) (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_LINE_POS.word = x)


//ISP_ITPOINT_RE_IN_PIX_CNT


#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_PIX_CNT_pix_cnt() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_PIX_CNT.ISP_ITPOINT_RE_IN_PIX_CNT_ts.pix_cnt
#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_PIX_CNT() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_PIX_CNT.word


//ISP_ITPOINT_RE_IN_LINE_CNT


#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_LINE_CNT_line_cnt() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_LINE_CNT.ISP_ITPOINT_RE_IN_LINE_CNT_ts.line_cnt
#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_LINE_CNT() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_LINE_CNT.word


//ISP_ITPOINT_RE_IN_FRAME_CNT


#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_FRAME_CNT_frame_cnt() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_FRAME_CNT.ISP_ITPOINT_RE_IN_FRAME_CNT_ts.frame_cnt
#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_FRAME_CNT() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_FRAME_CNT.word


//ISP_ITPOINT_RE_IN_DFV


#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_DFV_dfv_enable() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_DFV.ISP_ITPOINT_RE_IN_DFV_ts.dfv_enable
#define Is_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_DFV_dfv_enable_DISABLE() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_DFV.ISP_ITPOINT_RE_IN_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_DFV_dfv_enable__DISABLE() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_DFV.ISP_ITPOINT_RE_IN_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable
#define Is_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_DFV_dfv_enable_ENABLE() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_DFV.ISP_ITPOINT_RE_IN_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_DFV_dfv_enable__ENABLE() (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_DFV.ISP_ITPOINT_RE_IN_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable


#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_DFV_dfv_interrupt_ctrl() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_DFV.ISP_ITPOINT_RE_IN_DFV_ts.dfv_interrupt_ctrl
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_DFV_dfv_interrupt_ctrl(x) (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_DFV.ISP_ITPOINT_RE_IN_DFV_ts.dfv_interrupt_ctrl = x)
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_DFV(dfv_enable,dfv_interrupt_ctrl) (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_DFV.word = (uint8_t)dfv_enable<<0 | (uint8_t)dfv_interrupt_ctrl<<1)
#define Get_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_DFV() p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_DFV.word
#define Set_ISP_ITPOINT_RE_IN_ISP_ITPOINT_RE_IN_DFV_word(x) (p_ISP_ITPOINT_RE_IN_IP->ISP_ITPOINT_RE_IN_DFV.word = x)

//ISP_ITPOINT_POST_GAIN_ENABLE
/*Description: itpoint Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable itpoint module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* itpoint functions normally*/
    }ISP_ITPOINT_POST_GAIN_ENABLE_ts;

}ISP_ITPOINT_POST_GAIN_ENABLE_tu;



//ISP_ITPOINT_POST_GAIN_PIX_POS
/*Description: itpoint pixel position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_pos :13;
        /* 
        position of pixel for interrupt generation*/
    }ISP_ITPOINT_POST_GAIN_PIX_POS_ts;

}ISP_ITPOINT_POST_GAIN_PIX_POS_tu;



//ISP_ITPOINT_POST_GAIN_LINE_POS
/*Description: itpoint line position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_pos :13;
        /* 
        position of linefor interrupt generation*/
    }ISP_ITPOINT_POST_GAIN_LINE_POS_ts;

}ISP_ITPOINT_POST_GAIN_LINE_POS_tu;



//ISP_ITPOINT_POST_GAIN_PIX_CNT
/*Description: current position of pixel for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_cnt :13;
        /* 
        current x position of pixel for the frame.For (X,Y) where X is image width, Y is image height, image first pix postion will be 1, last line position will be X. Programming X= 0 is invalid*/
    }ISP_ITPOINT_POST_GAIN_PIX_CNT_ts;

}ISP_ITPOINT_POST_GAIN_PIX_CNT_tu;



//ISP_ITPOINT_POST_GAIN_LINE_CNT
/*Description: current position of line for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_cnt :13;
        /* 
        current y position of linefor the frame.For (X,Y) where X is image width, Y is image height, image first line position will be 1, last line position will be Y. Programming Y = 0 is invalid.*/
    }ISP_ITPOINT_POST_GAIN_LINE_CNT_ts;

}ISP_ITPOINT_POST_GAIN_LINE_CNT_tu;



//ISP_ITPOINT_POST_GAIN_FRAME_CNT
/*Description: itpoint frame count
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t frame_cnt;
        /* 
        frame counter for counting number of frame being passed through this module.*/
    }ISP_ITPOINT_POST_GAIN_FRAME_CNT_ts;

}ISP_ITPOINT_POST_GAIN_FRAME_CNT_tu;



//ISP_ITPOINT_POST_GAIN_DFV
/*Description: itpointDesign for Verification register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* 
        this bit is used to enable the pulsed interrupts*/
        uint8_t dfv_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
    }ISP_ITPOINT_POST_GAIN_DFV_ts;

}ISP_ITPOINT_POST_GAIN_DFV_tu;

typedef struct
{
    ISP_ITPOINT_POST_GAIN_ENABLE_tu ISP_ITPOINT_POST_GAIN_ENABLE;
    ISP_ITPOINT_POST_GAIN_PIX_POS_tu ISP_ITPOINT_POST_GAIN_PIX_POS;
    ISP_ITPOINT_POST_GAIN_LINE_POS_tu ISP_ITPOINT_POST_GAIN_LINE_POS;
    ISP_ITPOINT_POST_GAIN_PIX_CNT_tu ISP_ITPOINT_POST_GAIN_PIX_CNT;
    ISP_ITPOINT_POST_GAIN_LINE_CNT_tu ISP_ITPOINT_POST_GAIN_LINE_CNT;
    ISP_ITPOINT_POST_GAIN_FRAME_CNT_tu ISP_ITPOINT_POST_GAIN_FRAME_CNT;
    ISP_ITPOINT_POST_GAIN_DFV_tu ISP_ITPOINT_POST_GAIN_DFV;
}ISP_ITPOINT_POST_GAIN_IP_ts;




//ISP_ITPOINT_POST_GAIN_ENABLE


#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE_enable() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.ISP_ITPOINT_POST_GAIN_ENABLE_ts.enable
#define Is_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE_enable_DISABLE() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.ISP_ITPOINT_POST_GAIN_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE_enable__DISABLE() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.ISP_ITPOINT_POST_GAIN_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable itpoint module
#define Is_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE_enable_ENABLE() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.ISP_ITPOINT_POST_GAIN_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE_enable__ENABLE() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.ISP_ITPOINT_POST_GAIN_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable itpoint module


#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE_soft_reset() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.ISP_ITPOINT_POST_GAIN_ENABLE_ts.soft_reset
#define Is_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE_soft_reset_B_0x0() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.ISP_ITPOINT_POST_GAIN_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE_soft_reset__B_0x0() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.ISP_ITPOINT_POST_GAIN_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //itpoint functions normally
#define Is_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE_soft_reset_B_0x1() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.ISP_ITPOINT_POST_GAIN_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE_soft_reset__B_0x1() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.ISP_ITPOINT_POST_GAIN_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //All outputs are assigned reset value (And, as soon as soft_reset is again made 0, it switches to normal functional mode waiting for start of frame)
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE(enable,soft_reset) (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.word
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_ENABLE_word(x) (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_ENABLE.word = x)


//ISP_ITPOINT_POST_GAIN_PIX_POS


#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_PIX_POS_pix_pos() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_PIX_POS.ISP_ITPOINT_POST_GAIN_PIX_POS_ts.pix_pos
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_PIX_POS_pix_pos(x) (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_PIX_POS.ISP_ITPOINT_POST_GAIN_PIX_POS_ts.pix_pos = x)
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_PIX_POS(pix_pos) (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_PIX_POS.word = (uint32_t)pix_pos<<0)
#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_PIX_POS() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_PIX_POS.word
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_PIX_POS_word(x) (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_PIX_POS.word = x)


//ISP_ITPOINT_POST_GAIN_LINE_POS


#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_LINE_POS_line_pos() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_LINE_POS.ISP_ITPOINT_POST_GAIN_LINE_POS_ts.line_pos
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_LINE_POS_line_pos(x) (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_LINE_POS.ISP_ITPOINT_POST_GAIN_LINE_POS_ts.line_pos = x)
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_LINE_POS(line_pos) (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_LINE_POS.word = (uint32_t)line_pos<<0)
#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_LINE_POS() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_LINE_POS.word
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_LINE_POS_word(x) (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_LINE_POS.word = x)


//ISP_ITPOINT_POST_GAIN_PIX_CNT


#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_PIX_CNT_pix_cnt() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_PIX_CNT.ISP_ITPOINT_POST_GAIN_PIX_CNT_ts.pix_cnt
#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_PIX_CNT() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_PIX_CNT.word


//ISP_ITPOINT_POST_GAIN_LINE_CNT


#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_LINE_CNT_line_cnt() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_LINE_CNT.ISP_ITPOINT_POST_GAIN_LINE_CNT_ts.line_cnt
#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_LINE_CNT() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_LINE_CNT.word


//ISP_ITPOINT_POST_GAIN_FRAME_CNT


#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_FRAME_CNT_frame_cnt() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_FRAME_CNT.ISP_ITPOINT_POST_GAIN_FRAME_CNT_ts.frame_cnt
#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_FRAME_CNT() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_FRAME_CNT.word


//ISP_ITPOINT_POST_GAIN_DFV


#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_DFV_dfv_enable() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_DFV.ISP_ITPOINT_POST_GAIN_DFV_ts.dfv_enable
#define Is_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_DFV_dfv_enable_DISABLE() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_DFV.ISP_ITPOINT_POST_GAIN_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_DFV_dfv_enable__DISABLE() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_DFV.ISP_ITPOINT_POST_GAIN_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable
#define Is_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_DFV_dfv_enable_ENABLE() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_DFV.ISP_ITPOINT_POST_GAIN_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_DFV_dfv_enable__ENABLE() (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_DFV.ISP_ITPOINT_POST_GAIN_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable


#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_DFV_dfv_interrupt_ctrl() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_DFV.ISP_ITPOINT_POST_GAIN_DFV_ts.dfv_interrupt_ctrl
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_DFV_dfv_interrupt_ctrl(x) (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_DFV.ISP_ITPOINT_POST_GAIN_DFV_ts.dfv_interrupt_ctrl = x)
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_DFV(dfv_enable,dfv_interrupt_ctrl) (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_DFV.word = (uint8_t)dfv_enable<<0 | (uint8_t)dfv_interrupt_ctrl<<1)
#define Get_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_DFV() p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_DFV.word
#define Set_ISP_ITPOINT_POST_GAIN_ISP_ITPOINT_POST_GAIN_DFV_word(x) (p_ISP_ITPOINT_POST_GAIN_IP->ISP_ITPOINT_POST_GAIN_DFV.word = x)

//ISP_ITPOINT_RE_OUT_STORE_ENABLE
/*Description: itpoint Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable itpoint module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* itpoint functions normally*/
    }ISP_ITPOINT_RE_OUT_STORE_ENABLE_ts;

}ISP_ITPOINT_RE_OUT_STORE_ENABLE_tu;



//ISP_ITPOINT_RE_OUT_STORE_PIX_POS
/*Description: itpoint pixel position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_pos :13;
        /* 
        position of pixel for interrupt generation*/
    }ISP_ITPOINT_RE_OUT_STORE_PIX_POS_ts;

}ISP_ITPOINT_RE_OUT_STORE_PIX_POS_tu;



//ISP_ITPOINT_RE_OUT_STORE_LINE_POS
/*Description: itpoint line position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_pos :13;
        /* 
        position of linefor interrupt generation*/
    }ISP_ITPOINT_RE_OUT_STORE_LINE_POS_ts;

}ISP_ITPOINT_RE_OUT_STORE_LINE_POS_tu;



//ISP_ITPOINT_RE_OUT_STORE_PIX_CNT
/*Description: current position of pixel for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_cnt :13;
        /* 
        current x position of pixel for the frame.For (X,Y) where X is image width, Y is image height, image first pix postion will be 1, last line position will be X. Programming X= 0 is invalid*/
    }ISP_ITPOINT_RE_OUT_STORE_PIX_CNT_ts;

}ISP_ITPOINT_RE_OUT_STORE_PIX_CNT_tu;



//ISP_ITPOINT_RE_OUT_STORE_LINE_CNT
/*Description: current position of line for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_cnt :13;
        /* 
        current y position of linefor the frame.For (X,Y) where X is image width, Y is image height, image first line position will be 1, last line position will be Y. Programming Y = 0 is invalid.*/
    }ISP_ITPOINT_RE_OUT_STORE_LINE_CNT_ts;

}ISP_ITPOINT_RE_OUT_STORE_LINE_CNT_tu;



//ISP_ITPOINT_RE_OUT_STORE_FRAME_CNT
/*Description: itpoint frame count
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t frame_cnt;
        /* 
        frame counter for counting number of frame being passed through this module.*/
    }ISP_ITPOINT_RE_OUT_STORE_FRAME_CNT_ts;

}ISP_ITPOINT_RE_OUT_STORE_FRAME_CNT_tu;



//ISP_ITPOINT_RE_OUT_STORE_DFV
/*Description: itpointDesign for Verification register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* 
        this bit is used to enable the pulsed interrupts*/
        uint8_t dfv_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
    }ISP_ITPOINT_RE_OUT_STORE_DFV_ts;

}ISP_ITPOINT_RE_OUT_STORE_DFV_tu;

typedef struct
{
    ISP_ITPOINT_RE_OUT_STORE_ENABLE_tu ISP_ITPOINT_RE_OUT_STORE_ENABLE;
    ISP_ITPOINT_RE_OUT_STORE_PIX_POS_tu ISP_ITPOINT_RE_OUT_STORE_PIX_POS;
    ISP_ITPOINT_RE_OUT_STORE_LINE_POS_tu ISP_ITPOINT_RE_OUT_STORE_LINE_POS;
    ISP_ITPOINT_RE_OUT_STORE_PIX_CNT_tu ISP_ITPOINT_RE_OUT_STORE_PIX_CNT;
    ISP_ITPOINT_RE_OUT_STORE_LINE_CNT_tu ISP_ITPOINT_RE_OUT_STORE_LINE_CNT;
    ISP_ITPOINT_RE_OUT_STORE_FRAME_CNT_tu ISP_ITPOINT_RE_OUT_STORE_FRAME_CNT;
    ISP_ITPOINT_RE_OUT_STORE_DFV_tu ISP_ITPOINT_RE_OUT_STORE_DFV;
}ISP_ITPOINT_RE_OUT_STORE_IP_ts;




//ISP_ITPOINT_RE_OUT_STORE_ENABLE


#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE_enable() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.ISP_ITPOINT_RE_OUT_STORE_ENABLE_ts.enable
#define Is_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE_enable_DISABLE() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.ISP_ITPOINT_RE_OUT_STORE_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE_enable__DISABLE() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.ISP_ITPOINT_RE_OUT_STORE_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable itpoint module
#define Is_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE_enable_ENABLE() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.ISP_ITPOINT_RE_OUT_STORE_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE_enable__ENABLE() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.ISP_ITPOINT_RE_OUT_STORE_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable itpoint module


#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE_soft_reset() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.ISP_ITPOINT_RE_OUT_STORE_ENABLE_ts.soft_reset
#define Is_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE_soft_reset_B_0x0() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.ISP_ITPOINT_RE_OUT_STORE_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE_soft_reset__B_0x0() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.ISP_ITPOINT_RE_OUT_STORE_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //itpoint functions normally
#define Is_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE_soft_reset_B_0x1() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.ISP_ITPOINT_RE_OUT_STORE_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE_soft_reset__B_0x1() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.ISP_ITPOINT_RE_OUT_STORE_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //All outputs are assigned reset value (And, as soon as soft_reset is again made 0, it switches to normal functional mode waiting for start of frame)
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE(enable,soft_reset) (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.word
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_ENABLE_word(x) (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_ENABLE.word = x)


//ISP_ITPOINT_RE_OUT_STORE_PIX_POS


#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_PIX_POS_pix_pos() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_PIX_POS.ISP_ITPOINT_RE_OUT_STORE_PIX_POS_ts.pix_pos
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_PIX_POS_pix_pos(x) (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_PIX_POS.ISP_ITPOINT_RE_OUT_STORE_PIX_POS_ts.pix_pos = x)
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_PIX_POS(pix_pos) (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_PIX_POS.word = (uint32_t)pix_pos<<0)
#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_PIX_POS() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_PIX_POS.word
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_PIX_POS_word(x) (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_PIX_POS.word = x)


//ISP_ITPOINT_RE_OUT_STORE_LINE_POS


#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_LINE_POS_line_pos() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_LINE_POS.ISP_ITPOINT_RE_OUT_STORE_LINE_POS_ts.line_pos
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_LINE_POS_line_pos(x) (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_LINE_POS.ISP_ITPOINT_RE_OUT_STORE_LINE_POS_ts.line_pos = x)
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_LINE_POS(line_pos) (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_LINE_POS.word = (uint32_t)line_pos<<0)
#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_LINE_POS() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_LINE_POS.word
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_LINE_POS_word(x) (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_LINE_POS.word = x)


//ISP_ITPOINT_RE_OUT_STORE_PIX_CNT


#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_PIX_CNT_pix_cnt() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_PIX_CNT.ISP_ITPOINT_RE_OUT_STORE_PIX_CNT_ts.pix_cnt
#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_PIX_CNT() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_PIX_CNT.word


//ISP_ITPOINT_RE_OUT_STORE_LINE_CNT


#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_LINE_CNT_line_cnt() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_LINE_CNT.ISP_ITPOINT_RE_OUT_STORE_LINE_CNT_ts.line_cnt
#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_LINE_CNT() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_LINE_CNT.word


//ISP_ITPOINT_RE_OUT_STORE_FRAME_CNT


#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_FRAME_CNT_frame_cnt() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_FRAME_CNT.ISP_ITPOINT_RE_OUT_STORE_FRAME_CNT_ts.frame_cnt
#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_FRAME_CNT() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_FRAME_CNT.word


//ISP_ITPOINT_RE_OUT_STORE_DFV


#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_DFV_dfv_enable() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_DFV.ISP_ITPOINT_RE_OUT_STORE_DFV_ts.dfv_enable
#define Is_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_DFV_dfv_enable_DISABLE() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_DFV.ISP_ITPOINT_RE_OUT_STORE_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_DFV_dfv_enable__DISABLE() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_DFV.ISP_ITPOINT_RE_OUT_STORE_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable
#define Is_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_DFV_dfv_enable_ENABLE() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_DFV.ISP_ITPOINT_RE_OUT_STORE_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_DFV_dfv_enable__ENABLE() (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_DFV.ISP_ITPOINT_RE_OUT_STORE_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable


#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_DFV_dfv_interrupt_ctrl() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_DFV.ISP_ITPOINT_RE_OUT_STORE_DFV_ts.dfv_interrupt_ctrl
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_DFV_dfv_interrupt_ctrl(x) (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_DFV.ISP_ITPOINT_RE_OUT_STORE_DFV_ts.dfv_interrupt_ctrl = x)
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_DFV(dfv_enable,dfv_interrupt_ctrl) (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_DFV.word = (uint8_t)dfv_enable<<0 | (uint8_t)dfv_interrupt_ctrl<<1)
#define Get_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_DFV() p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_DFV.word
#define Set_ISP_ITPOINT_RE_OUT_STORE_ISP_ITPOINT_RE_OUT_STORE_DFV_word(x) (p_ISP_ITPOINT_RE_OUT_STORE_IP->ISP_ITPOINT_RE_OUT_STORE_DFV.word = x)

//ISP_DUSTER_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_enable :1;
        /* Disable duster module*/
        uint8_t reserved0 :3;
        uint8_t duster_soft_reset :1;
    }ISP_DUSTER_ENABLE_ts;

}ISP_DUSTER_ENABLE_tu;



//ISP_DUSTER_DFV
/*Description: Design for verification register, use to verify interrupt
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_dfv_enable :1;
        /* Disable DFV for duster filter*/
        uint8_t duster_dfv_interrupt_ctrl :1;
        /* 
        When the register value change, interrupt is set to activ*/
    }ISP_DUSTER_DFV_ts;

}ISP_DUSTER_DFV_tu;



//ISP_DUSTER_SCYT_RANK_HI
/*Description: Scythe rank for the high population
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_scyt_rank_hi :3;
        /* controls the ranking of high population attributed to the Scythe filter.*/
    }ISP_DUSTER_SCYT_RANK_HI_ts;

}ISP_DUSTER_SCYT_RANK_HI_tu;



//ISP_DUSTER_SCYT_RANK_LO
/*Description: Scythe rank for the low population
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_scyt_rank_lo :3;
        /* controls the ranking of low population attributed to the Scythe filter.*/
    }ISP_DUSTER_SCYT_RANK_LO_ts;

}ISP_DUSTER_SCYT_RANK_LO_tu;



//ISP_DUSTER_SCYT_SMOOTH_HI
/*Description: Scythe smooth control for the high population

Linear interpolation of the 2 high values selected from rank, adding a smooth control, pushing the central pixel closer to the median value.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_scyt_smooth_hi :4;
        /* Linear interpolation of the 2 high values selected from rank.*/
    }ISP_DUSTER_SCYT_SMOOTH_HI_ts;

}ISP_DUSTER_SCYT_SMOOTH_HI_tu;



//ISP_DUSTER_SCYT_SMOOTH_LO
/*Description: Scythe smooth control for the low population

Linear interpolation of the 2 low values selected from rank, adding a smooth control, pushing the central pixel closer to the median value.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_scyt_smooth_lo :4;
        /* Linear interpolation of the 2 high values selected from rank.*/
    }ISP_DUSTER_SCYT_SMOOTH_LO_ts;

}ISP_DUSTER_SCYT_SMOOTH_LO_tu;



//ISP_DUSTER_BYPASS_CTRL
/*Description: Ring correction control
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t duster_rc_bypass :1;
        /* Bypass Ring Corrector*/
        uint8_t duster_cc_bypass :1;
        /* Bypass Central Corrector*/
        uint8_t duster_detect_cc_bypass :1;
        /* Bypass Detection of defect Central Pixel*/
        uint8_t duster_defcor_bypass :1;
        /* Bypass deftect correction*/
        uint8_t duster_gaussian_bypass :1;
        /* Bypass gaussian filtering*/
        uint8_t duster_rc_use_simplified :1;
        /* RC Threshold as it is program in register bank*/
        uint8_t duster_rc_enablegrad :1;
        /* enable gradiant correction*/
        uint8_t reserved0 :1;
        uint8_t duster_scythe_mode :2;
        /* define scythe mode defect_map, force_scythe, bypass_scythe*/
    }ISP_DUSTER_BYPASS_CTRL_ts;

}ISP_DUSTER_BYPASS_CTRL_tu;



//ISP_DUSTER_CC_LOCAL_SIGMA_TH
/*Description: Noise level control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_cc_local_sigma_th;
    }ISP_DUSTER_CC_LOCAL_SIGMA_TH_ts;

}ISP_DUSTER_CC_LOCAL_SIGMA_TH_tu;



//ISP_DUSTER_RC_NORM_TH
/*Description: Ring Correction normalised threshold
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_rc_norm_th;
    }ISP_DUSTER_RC_NORM_TH_ts;

}ISP_DUSTER_RC_NORM_TH_tu;



//ISP_DUSTER_SIGMA_GAUSSIAN
/*Description: Gaussian filter control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_sigma_gaussian;
        /* Sigma applied on gaussian filter*/
    }ISP_DUSTER_SIGMA_GAUSSIAN_ts;

}ISP_DUSTER_SIGMA_GAUSSIAN_tu;



//ISP_DUSTER_GAUSSIAN_TH1
/*Description: CC block control

It is calculated by the firmware using the duster_cntr_wt signal.

duster_cc_sigma = (duster_cntr_wt_status * duster_frame_sigma) >> 1
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t DUSTER_GAUSSIAN_TH1 :12;
    }ISP_DUSTER_GAUSSIAN_TH1_ts;

}ISP_DUSTER_GAUSSIAN_TH1_tu;



//ISP_DUSTER_GAUSSIAN_TH2
/*Description: RC block control

It is calculated by the firmware using the duster_ring_wt signal.

duster_safe_threshold = (duster_ring_wt_status * duster_frame_sigma + 8) >> 4
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t DUSTER_GAUSSIAN_TH2 :12;
    }ISP_DUSTER_GAUSSIAN_TH2_ts;

}ISP_DUSTER_GAUSSIAN_TH2_tu;



//ISP_DUSTER_GAUSSIAN_TH3
/*Description: RC block control

It is calculated by the firmware using the duster_ring_wt signal.

duster_safe_threshold = (duster_ring_wt_status * duster_frame_sigma + 8) >> 4
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_gaussian_th3 :12;
    }ISP_DUSTER_GAUSSIAN_TH3_ts;

}ISP_DUSTER_GAUSSIAN_TH3_tu;



//ISP_DUSTER_S0
/*Description: sigma 0 - calculated in the host firmware

duster_s0 = duster_frame_sigma - 2

where duster_frame_sigma is calculated from the Noise Level Estimation parameters and previous duster_sx values.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_s0 :12;
    }ISP_DUSTER_S0_ts;

}ISP_DUSTER_S0_tu;



//ISP_DUSTER_S1
/*Description: sigma 1 - calculated in the host firmware

duster_s1 = duster_frame_sigma + 2

where duster_frame_sigma is calculated from the Noise Level Estimation parameters and previous duster_sx values.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_s1 :12;
    }ISP_DUSTER_S1_ts;

}ISP_DUSTER_S1_tu;



//ISP_DUSTER_S2
/*Description: sigma 2 - calculated in the host firmware

duster_s2 = (duster_frame_sigma + 2 ) * 3

where duster_frame_sigma is calculated from the Noise Level Estimation parameters and previous duster_sx values.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_s2 :12;
    }ISP_DUSTER_S2_ts;

}ISP_DUSTER_S2_tu;



//ISP_DUSTER_SIGMA_SAMPLES
/*Description: Sigma value
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_sigma_samples;
        /* return the sigma value*/
    }ISP_DUSTER_SIGMA_SAMPLES_ts;

}ISP_DUSTER_SIGMA_SAMPLES_tu;



//ISP_DUSTER_ZERO_SAMPLES
/*Description: ?
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_zero_samples;
    }ISP_DUSTER_ZERO_SAMPLES_ts;

}ISP_DUSTER_ZERO_SAMPLES_tu;



//ISP_DUSTER_NLE_HIST0
/*Description: Read of Noise Level Estimation channel 0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_nle_hist0;
    }ISP_DUSTER_NLE_HIST0_ts;

}ISP_DUSTER_NLE_HIST0_tu;



//ISP_DUSTER_NLE_HIST1
/*Description: Read of Noise Level Estimation channel 1
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_nle_hist1;
    }ISP_DUSTER_NLE_HIST1_ts;

}ISP_DUSTER_NLE_HIST1_tu;



//ISP_DUSTER_ENABLE_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_enable_status :1;
    }ISP_DUSTER_ENABLE_STATUS_ts;

}ISP_DUSTER_ENABLE_STATUS_tu;



//ISP_DUSTER_SCYT_RANK_HI_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_scyt_rank_hi_status :3;
    }ISP_DUSTER_SCYT_RANK_HI_STATUS_ts;

}ISP_DUSTER_SCYT_RANK_HI_STATUS_tu;



//ISP_DUSTER_SCYT_RANK_LO_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_scyt_rank_lo_status :3;
    }ISP_DUSTER_SCYT_RANK_LO_STATUS_ts;

}ISP_DUSTER_SCYT_RANK_LO_STATUS_tu;



//ISP_DUSTER_SCYT_SMOOTH_HI_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_scyt_smooth_hi_status :4;
    }ISP_DUSTER_SCYT_SMOOTH_HI_STATUS_ts;

}ISP_DUSTER_SCYT_SMOOTH_HI_STATUS_tu;



//ISP_DUSTER_SCYT_SMOOTH_LO_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_scyt_smooth_lo_status :4;
    }ISP_DUSTER_SCYT_SMOOTH_LO_STATUS_ts;

}ISP_DUSTER_SCYT_SMOOTH_LO_STATUS_tu;



//ISP_DUSTER_BYPASS_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_rc_bypass_status :1;
        uint8_t duster_cc_bypass_status :1;
        uint8_t duster_detect_cc_bypass_status :1;
        uint8_t duster_defcor_bypass_status :1;
        uint8_t duster_gaussian_bypass_status :1;
        uint8_t duster_rc_use_simplified_status :1;
        uint8_t duster_rc_enablegrad_status :1;
    }ISP_DUSTER_BYPASS_STATUS_ts;

}ISP_DUSTER_BYPASS_STATUS_tu;



//ISP_DUSTER_CC_LOCAL_SIGMA_TH_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_cc_local_sigma_th_status;
    }ISP_DUSTER_CC_LOCAL_SIGMA_TH_STATUS_ts;

}ISP_DUSTER_CC_LOCAL_SIGMA_TH_STATUS_tu;



//ISP_DUSTER_RC_NORM_TH_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_rc_norm_th_status;
    }ISP_DUSTER_RC_NORM_TH_STATUS_ts;

}ISP_DUSTER_RC_NORM_TH_STATUS_tu;



//ISP_DUSTER_SIGMA_GAUSSIAN_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t duster_sigma_gaussian_status;
    }ISP_DUSTER_SIGMA_GAUSSIAN_STATUS_ts;

}ISP_DUSTER_SIGMA_GAUSSIAN_STATUS_tu;



//ISP_DUSTER_GAUSSIAN_TH1_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t DUSTER_GAUSSIAN_TH1_status :12;
    }ISP_DUSTER_GAUSSIAN_TH1_STATUS_ts;

}ISP_DUSTER_GAUSSIAN_TH1_STATUS_tu;



//ISP_DUSTER_GAUSSIAN_TH2_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t DUSTER_GAUSSIAN_TH2_status :12;
    }ISP_DUSTER_GAUSSIAN_TH2_STATUS_ts;

}ISP_DUSTER_GAUSSIAN_TH2_STATUS_tu;



//ISP_DUSTER_GAUSSIAN_TH3_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_gaussian_th3_status :12;
    }ISP_DUSTER_GAUSSIAN_TH3_STATUS_ts;

}ISP_DUSTER_GAUSSIAN_TH3_STATUS_tu;



//ISP_DUSTER_S0_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_s0_status :12;
    }ISP_DUSTER_S0_STATUS_ts;

}ISP_DUSTER_S0_STATUS_tu;



//ISP_DUSTER_S1_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_s1_status :12;
    }ISP_DUSTER_S1_STATUS_ts;

}ISP_DUSTER_S1_STATUS_tu;



//ISP_DUSTER_S2_STATUS
/*Description: Read back status sampled on start of frame
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t duster_s2_status :12;
    }ISP_DUSTER_S2_STATUS_ts;

}ISP_DUSTER_S2_STATUS_tu;

typedef struct
{
    ISP_DUSTER_ENABLE_tu ISP_DUSTER_ENABLE;
    ISP_DUSTER_DFV_tu ISP_DUSTER_DFV;
    uint32_t pad_ISP_DUSTER_SCYT_RANK_HI;
    ISP_DUSTER_SCYT_RANK_HI_tu ISP_DUSTER_SCYT_RANK_HI;
    ISP_DUSTER_SCYT_RANK_LO_tu ISP_DUSTER_SCYT_RANK_LO;
    ISP_DUSTER_SCYT_SMOOTH_HI_tu ISP_DUSTER_SCYT_SMOOTH_HI;
    ISP_DUSTER_SCYT_SMOOTH_LO_tu ISP_DUSTER_SCYT_SMOOTH_LO;
    ISP_DUSTER_BYPASS_CTRL_tu ISP_DUSTER_BYPASS_CTRL;
    ISP_DUSTER_CC_LOCAL_SIGMA_TH_tu ISP_DUSTER_CC_LOCAL_SIGMA_TH;
    ISP_DUSTER_RC_NORM_TH_tu ISP_DUSTER_RC_NORM_TH;
    ISP_DUSTER_SIGMA_GAUSSIAN_tu ISP_DUSTER_SIGMA_GAUSSIAN;
    ISP_DUSTER_GAUSSIAN_TH1_tu ISP_DUSTER_GAUSSIAN_TH1;
    ISP_DUSTER_GAUSSIAN_TH2_tu ISP_DUSTER_GAUSSIAN_TH2;
    ISP_DUSTER_GAUSSIAN_TH3_tu ISP_DUSTER_GAUSSIAN_TH3;
    ISP_DUSTER_S0_tu ISP_DUSTER_S0;
    ISP_DUSTER_S1_tu ISP_DUSTER_S1;
    ISP_DUSTER_S2_tu ISP_DUSTER_S2;
    ISP_DUSTER_SIGMA_SAMPLES_tu ISP_DUSTER_SIGMA_SAMPLES;
    ISP_DUSTER_ZERO_SAMPLES_tu ISP_DUSTER_ZERO_SAMPLES;
    ISP_DUSTER_NLE_HIST0_tu ISP_DUSTER_NLE_HIST0;
    ISP_DUSTER_NLE_HIST1_tu ISP_DUSTER_NLE_HIST1;
    ISP_DUSTER_ENABLE_STATUS_tu ISP_DUSTER_ENABLE_STATUS;
    uint32_t pad_ISP_DUSTER_SCYT_RANK_HI_STATUS;
    ISP_DUSTER_SCYT_RANK_HI_STATUS_tu ISP_DUSTER_SCYT_RANK_HI_STATUS;
    ISP_DUSTER_SCYT_RANK_LO_STATUS_tu ISP_DUSTER_SCYT_RANK_LO_STATUS;
    ISP_DUSTER_SCYT_SMOOTH_HI_STATUS_tu ISP_DUSTER_SCYT_SMOOTH_HI_STATUS;
    ISP_DUSTER_SCYT_SMOOTH_LO_STATUS_tu ISP_DUSTER_SCYT_SMOOTH_LO_STATUS;
    ISP_DUSTER_BYPASS_STATUS_tu ISP_DUSTER_BYPASS_STATUS;
    ISP_DUSTER_CC_LOCAL_SIGMA_TH_STATUS_tu ISP_DUSTER_CC_LOCAL_SIGMA_TH_STATUS;
    ISP_DUSTER_RC_NORM_TH_STATUS_tu ISP_DUSTER_RC_NORM_TH_STATUS;
    ISP_DUSTER_SIGMA_GAUSSIAN_STATUS_tu ISP_DUSTER_SIGMA_GAUSSIAN_STATUS;
    ISP_DUSTER_GAUSSIAN_TH1_STATUS_tu ISP_DUSTER_GAUSSIAN_TH1_STATUS;
    ISP_DUSTER_GAUSSIAN_TH2_STATUS_tu ISP_DUSTER_GAUSSIAN_TH2_STATUS;
    ISP_DUSTER_GAUSSIAN_TH3_STATUS_tu ISP_DUSTER_GAUSSIAN_TH3_STATUS;
    ISP_DUSTER_S0_STATUS_tu ISP_DUSTER_S0_STATUS;
    ISP_DUSTER_S1_STATUS_tu ISP_DUSTER_S1_STATUS;
    ISP_DUSTER_S2_STATUS_tu ISP_DUSTER_S2_STATUS;
}ISP_DUSTER_IP_ts;




//ISP_DUSTER_ENABLE


#define Get_ISP_DUSTER_ISP_DUSTER_ENABLE_duster_enable() p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE.ISP_DUSTER_ENABLE_ts.duster_enable
#define Is_ISP_DUSTER_ISP_DUSTER_ENABLE_duster_enable_DISABLE() (p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE.ISP_DUSTER_ENABLE_ts.duster_enable == duster_enable_DISABLE)
#define Set_ISP_DUSTER_ISP_DUSTER_ENABLE_duster_enable__DISABLE() (p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE.ISP_DUSTER_ENABLE_ts.duster_enable = duster_enable_DISABLE)
#define duster_enable_DISABLE 0x0    //Disable duster module
#define Is_ISP_DUSTER_ISP_DUSTER_ENABLE_duster_enable_ENABLE() (p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE.ISP_DUSTER_ENABLE_ts.duster_enable == duster_enable_ENABLE)
#define Set_ISP_DUSTER_ISP_DUSTER_ENABLE_duster_enable__ENABLE() (p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE.ISP_DUSTER_ENABLE_ts.duster_enable = duster_enable_ENABLE)
#define duster_enable_ENABLE 0x1    //Enable duster module


#define Get_ISP_DUSTER_ISP_DUSTER_ENABLE_duster_soft_reset() p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE.ISP_DUSTER_ENABLE_ts.duster_soft_reset
#define Set_ISP_DUSTER_ISP_DUSTER_ENABLE_duster_soft_reset(x) (p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE.ISP_DUSTER_ENABLE_ts.duster_soft_reset = x)
#define Set_ISP_DUSTER_ISP_DUSTER_ENABLE(duster_enable,duster_soft_reset) (p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE.word = (uint32_t)duster_enable<<0 | (uint32_t)duster_soft_reset<<4)
#define Get_ISP_DUSTER_ISP_DUSTER_ENABLE() p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE.word
#define Set_ISP_DUSTER_ISP_DUSTER_ENABLE_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE.word = x)


//ISP_DUSTER_DFV


#define Get_ISP_DUSTER_ISP_DUSTER_DFV_duster_dfv_enable() p_ISP_DUSTER_IP->ISP_DUSTER_DFV.ISP_DUSTER_DFV_ts.duster_dfv_enable
#define Is_ISP_DUSTER_ISP_DUSTER_DFV_duster_dfv_enable_DISABLE() (p_ISP_DUSTER_IP->ISP_DUSTER_DFV.ISP_DUSTER_DFV_ts.duster_dfv_enable == duster_dfv_enable_DISABLE)
#define Set_ISP_DUSTER_ISP_DUSTER_DFV_duster_dfv_enable__DISABLE() (p_ISP_DUSTER_IP->ISP_DUSTER_DFV.ISP_DUSTER_DFV_ts.duster_dfv_enable = duster_dfv_enable_DISABLE)
#define duster_dfv_enable_DISABLE 0x0    //Disable DFV for duster filter
#define Is_ISP_DUSTER_ISP_DUSTER_DFV_duster_dfv_enable_ENABLE() (p_ISP_DUSTER_IP->ISP_DUSTER_DFV.ISP_DUSTER_DFV_ts.duster_dfv_enable == duster_dfv_enable_ENABLE)
#define Set_ISP_DUSTER_ISP_DUSTER_DFV_duster_dfv_enable__ENABLE() (p_ISP_DUSTER_IP->ISP_DUSTER_DFV.ISP_DUSTER_DFV_ts.duster_dfv_enable = duster_dfv_enable_ENABLE)
#define duster_dfv_enable_ENABLE 0x1    //Enable DFV for duster filter


#define Get_ISP_DUSTER_ISP_DUSTER_DFV_duster_dfv_interrupt_ctrl() p_ISP_DUSTER_IP->ISP_DUSTER_DFV.ISP_DUSTER_DFV_ts.duster_dfv_interrupt_ctrl
#define Set_ISP_DUSTER_ISP_DUSTER_DFV_duster_dfv_interrupt_ctrl(x) (p_ISP_DUSTER_IP->ISP_DUSTER_DFV.ISP_DUSTER_DFV_ts.duster_dfv_interrupt_ctrl = x)
#define Set_ISP_DUSTER_ISP_DUSTER_DFV(duster_dfv_enable,duster_dfv_interrupt_ctrl) (p_ISP_DUSTER_IP->ISP_DUSTER_DFV.word = (uint32_t)duster_dfv_enable<<0 | (uint32_t)duster_dfv_interrupt_ctrl<<1)
#define Get_ISP_DUSTER_ISP_DUSTER_DFV() p_ISP_DUSTER_IP->ISP_DUSTER_DFV.word
#define Set_ISP_DUSTER_ISP_DUSTER_DFV_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_DFV.word = x)


//ISP_DUSTER_SCYT_RANK_HI


#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_HI_duster_scyt_rank_hi() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_HI.ISP_DUSTER_SCYT_RANK_HI_ts.duster_scyt_rank_hi
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_HI_duster_scyt_rank_hi(x) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_HI.ISP_DUSTER_SCYT_RANK_HI_ts.duster_scyt_rank_hi = x)
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_HI(duster_scyt_rank_hi) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_HI.word = (uint32_t)duster_scyt_rank_hi<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_HI() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_HI.word
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_HI_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_HI.word = x)


//ISP_DUSTER_SCYT_RANK_LO


#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_LO_duster_scyt_rank_lo() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_LO.ISP_DUSTER_SCYT_RANK_LO_ts.duster_scyt_rank_lo
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_LO_duster_scyt_rank_lo(x) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_LO.ISP_DUSTER_SCYT_RANK_LO_ts.duster_scyt_rank_lo = x)
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_LO(duster_scyt_rank_lo) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_LO.word = (uint32_t)duster_scyt_rank_lo<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_LO() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_LO.word
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_LO_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_LO.word = x)


//ISP_DUSTER_SCYT_SMOOTH_HI


#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_HI_duster_scyt_smooth_hi() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_HI.ISP_DUSTER_SCYT_SMOOTH_HI_ts.duster_scyt_smooth_hi
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_HI_duster_scyt_smooth_hi(x) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_HI.ISP_DUSTER_SCYT_SMOOTH_HI_ts.duster_scyt_smooth_hi = x)
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_HI(duster_scyt_smooth_hi) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_HI.word = (uint32_t)duster_scyt_smooth_hi<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_HI() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_HI.word
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_HI_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_HI.word = x)


//ISP_DUSTER_SCYT_SMOOTH_LO


#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_LO_duster_scyt_smooth_lo() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_LO.ISP_DUSTER_SCYT_SMOOTH_LO_ts.duster_scyt_smooth_lo
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_LO_duster_scyt_smooth_lo(x) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_LO.ISP_DUSTER_SCYT_SMOOTH_LO_ts.duster_scyt_smooth_lo = x)
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_LO(duster_scyt_smooth_lo) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_LO.word = (uint32_t)duster_scyt_smooth_lo<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_LO() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_LO.word
#define Set_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_LO_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_LO.word = x)


//ISP_DUSTER_BYPASS_CTRL


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_rc_bypass() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_rc_bypass
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_rc_bypass(x) (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_rc_bypass = x)


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_cc_bypass() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_cc_bypass
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_cc_bypass(x) (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_cc_bypass = x)


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_detect_cc_bypass() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_detect_cc_bypass
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_detect_cc_bypass(x) (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_detect_cc_bypass = x)


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_defcor_bypass() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_defcor_bypass
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_defcor_bypass(x) (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_defcor_bypass = x)


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_gaussian_bypass() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_gaussian_bypass
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_gaussian_bypass(x) (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_gaussian_bypass = x)


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_rc_use_simplified() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_rc_use_simplified
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_rc_use_simplified(x) (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_rc_use_simplified = x)


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_rc_enablegrad() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_rc_enablegrad
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_rc_enablegrad(x) (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_rc_enablegrad = x)


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_scythe_mode() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_scythe_mode
#define Is_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_scythe_mode_SCYTHEMAP() (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_scythe_mode == duster_scythe_mode_SCYTHEMAP)
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_scythe_mode__SCYTHEMAP() (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_scythe_mode = duster_scythe_mode_SCYTHEMAP)
#define duster_scythe_mode_SCYTHEMAP 0x0    //Scythe is used with defect pixel mapped only
#define Is_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_scythe_mode_SCYTHEANDMAP() (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_scythe_mode == duster_scythe_mode_SCYTHEANDMAP)
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_scythe_mode__SCYTHEANDMAP() (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_scythe_mode = duster_scythe_mode_SCYTHEANDMAP)
#define duster_scythe_mode_SCYTHEANDMAP 0x1    //Scythe is used with defect pixel mapped and defect detected pixel
#define Is_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_scythe_mode_BYPASSSCYTHE() (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_scythe_mode == duster_scythe_mode_BYPASSSCYTHE)
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_scythe_mode__BYPASSSCYTHE() (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_scythe_mode = duster_scythe_mode_BYPASSSCYTHE)
#define duster_scythe_mode_BYPASSSCYTHE 0x2    //Scythe is bypassed
#define Is_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_scythe_mode_FORCESCYTHE() (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_scythe_mode == duster_scythe_mode_FORCESCYTHE)
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_duster_scythe_mode__FORCESCYTHE() (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.ISP_DUSTER_BYPASS_CTRL_ts.duster_scythe_mode = duster_scythe_mode_FORCESCYTHE)
#define duster_scythe_mode_FORCESCYTHE 0x3    //Scythe filter is always enable
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL(duster_rc_bypass,duster_cc_bypass,duster_detect_cc_bypass,duster_defcor_bypass,duster_gaussian_bypass,duster_rc_use_simplified,duster_rc_enablegrad,duster_scythe_mode) (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.word = (uint32_t)duster_rc_bypass<<0 | (uint32_t)duster_cc_bypass<<1 | (uint32_t)duster_detect_cc_bypass<<2 | (uint32_t)duster_defcor_bypass<<3 | (uint32_t)duster_gaussian_bypass<<4 | (uint32_t)duster_rc_use_simplified<<5 | (uint32_t)duster_rc_enablegrad<<6 | (uint32_t)duster_scythe_mode<<8)
#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.word
#define Set_ISP_DUSTER_ISP_DUSTER_BYPASS_CTRL_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_CTRL.word = x)


//ISP_DUSTER_CC_LOCAL_SIGMA_TH


#define Get_ISP_DUSTER_ISP_DUSTER_CC_LOCAL_SIGMA_TH_duster_cc_local_sigma_th() p_ISP_DUSTER_IP->ISP_DUSTER_CC_LOCAL_SIGMA_TH.ISP_DUSTER_CC_LOCAL_SIGMA_TH_ts.duster_cc_local_sigma_th
#define Set_ISP_DUSTER_ISP_DUSTER_CC_LOCAL_SIGMA_TH_duster_cc_local_sigma_th(x) (p_ISP_DUSTER_IP->ISP_DUSTER_CC_LOCAL_SIGMA_TH.ISP_DUSTER_CC_LOCAL_SIGMA_TH_ts.duster_cc_local_sigma_th = x)
#define Set_ISP_DUSTER_ISP_DUSTER_CC_LOCAL_SIGMA_TH(duster_cc_local_sigma_th) (p_ISP_DUSTER_IP->ISP_DUSTER_CC_LOCAL_SIGMA_TH.word = (uint32_t)duster_cc_local_sigma_th<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_CC_LOCAL_SIGMA_TH() p_ISP_DUSTER_IP->ISP_DUSTER_CC_LOCAL_SIGMA_TH.word
#define Set_ISP_DUSTER_ISP_DUSTER_CC_LOCAL_SIGMA_TH_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_CC_LOCAL_SIGMA_TH.word = x)


//ISP_DUSTER_RC_NORM_TH


#define Get_ISP_DUSTER_ISP_DUSTER_RC_NORM_TH_duster_rc_norm_th() p_ISP_DUSTER_IP->ISP_DUSTER_RC_NORM_TH.ISP_DUSTER_RC_NORM_TH_ts.duster_rc_norm_th
#define Set_ISP_DUSTER_ISP_DUSTER_RC_NORM_TH_duster_rc_norm_th(x) (p_ISP_DUSTER_IP->ISP_DUSTER_RC_NORM_TH.ISP_DUSTER_RC_NORM_TH_ts.duster_rc_norm_th = x)
#define Set_ISP_DUSTER_ISP_DUSTER_RC_NORM_TH(duster_rc_norm_th) (p_ISP_DUSTER_IP->ISP_DUSTER_RC_NORM_TH.word = (uint32_t)duster_rc_norm_th<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_RC_NORM_TH() p_ISP_DUSTER_IP->ISP_DUSTER_RC_NORM_TH.word
#define Set_ISP_DUSTER_ISP_DUSTER_RC_NORM_TH_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_RC_NORM_TH.word = x)


//ISP_DUSTER_SIGMA_GAUSSIAN


#define Get_ISP_DUSTER_ISP_DUSTER_SIGMA_GAUSSIAN_duster_sigma_gaussian() p_ISP_DUSTER_IP->ISP_DUSTER_SIGMA_GAUSSIAN.ISP_DUSTER_SIGMA_GAUSSIAN_ts.duster_sigma_gaussian
#define Set_ISP_DUSTER_ISP_DUSTER_SIGMA_GAUSSIAN_duster_sigma_gaussian(x) (p_ISP_DUSTER_IP->ISP_DUSTER_SIGMA_GAUSSIAN.ISP_DUSTER_SIGMA_GAUSSIAN_ts.duster_sigma_gaussian = x)
#define Set_ISP_DUSTER_ISP_DUSTER_SIGMA_GAUSSIAN(duster_sigma_gaussian) (p_ISP_DUSTER_IP->ISP_DUSTER_SIGMA_GAUSSIAN.word = (uint32_t)duster_sigma_gaussian<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_SIGMA_GAUSSIAN() p_ISP_DUSTER_IP->ISP_DUSTER_SIGMA_GAUSSIAN.word
#define Set_ISP_DUSTER_ISP_DUSTER_SIGMA_GAUSSIAN_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_SIGMA_GAUSSIAN.word = x)


//ISP_DUSTER_GAUSSIAN_TH1


#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH1_DUSTER_GAUSSIAN_TH1() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH1.ISP_DUSTER_GAUSSIAN_TH1_ts.DUSTER_GAUSSIAN_TH1
#define Set_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH1_DUSTER_GAUSSIAN_TH1(x) (p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH1.ISP_DUSTER_GAUSSIAN_TH1_ts.DUSTER_GAUSSIAN_TH1 = x)
#define Set_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH1(DUSTER_GAUSSIAN_TH1) (p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH1.word = (uint32_t)DUSTER_GAUSSIAN_TH1<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH1() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH1.word
#define Set_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH1_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH1.word = x)


//ISP_DUSTER_GAUSSIAN_TH2


#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH2_DUSTER_GAUSSIAN_TH2() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH2.ISP_DUSTER_GAUSSIAN_TH2_ts.DUSTER_GAUSSIAN_TH2
#define Set_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH2_DUSTER_GAUSSIAN_TH2(x) (p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH2.ISP_DUSTER_GAUSSIAN_TH2_ts.DUSTER_GAUSSIAN_TH2 = x)
#define Set_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH2(DUSTER_GAUSSIAN_TH2) (p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH2.word = (uint32_t)DUSTER_GAUSSIAN_TH2<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH2() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH2.word
#define Set_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH2_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH2.word = x)


//ISP_DUSTER_GAUSSIAN_TH3


#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH3_duster_gaussian_th3() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH3.ISP_DUSTER_GAUSSIAN_TH3_ts.duster_gaussian_th3
#define Set_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH3_duster_gaussian_th3(x) (p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH3.ISP_DUSTER_GAUSSIAN_TH3_ts.duster_gaussian_th3 = x)
#define Set_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH3(duster_gaussian_th3) (p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH3.word = (uint32_t)duster_gaussian_th3<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH3() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH3.word
#define Set_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH3_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH3.word = x)


//ISP_DUSTER_S0


#define Get_ISP_DUSTER_ISP_DUSTER_S0_duster_s0() p_ISP_DUSTER_IP->ISP_DUSTER_S0.ISP_DUSTER_S0_ts.duster_s0
#define Set_ISP_DUSTER_ISP_DUSTER_S0_duster_s0(x) (p_ISP_DUSTER_IP->ISP_DUSTER_S0.ISP_DUSTER_S0_ts.duster_s0 = x)
#define Set_ISP_DUSTER_ISP_DUSTER_S0(duster_s0) (p_ISP_DUSTER_IP->ISP_DUSTER_S0.word = (uint32_t)duster_s0<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_S0() p_ISP_DUSTER_IP->ISP_DUSTER_S0.word
#define Set_ISP_DUSTER_ISP_DUSTER_S0_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_S0.word = x)


//ISP_DUSTER_S1


#define Get_ISP_DUSTER_ISP_DUSTER_S1_duster_s1() p_ISP_DUSTER_IP->ISP_DUSTER_S1.ISP_DUSTER_S1_ts.duster_s1
#define Set_ISP_DUSTER_ISP_DUSTER_S1_duster_s1(x) (p_ISP_DUSTER_IP->ISP_DUSTER_S1.ISP_DUSTER_S1_ts.duster_s1 = x)
#define Set_ISP_DUSTER_ISP_DUSTER_S1(duster_s1) (p_ISP_DUSTER_IP->ISP_DUSTER_S1.word = (uint32_t)duster_s1<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_S1() p_ISP_DUSTER_IP->ISP_DUSTER_S1.word
#define Set_ISP_DUSTER_ISP_DUSTER_S1_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_S1.word = x)


//ISP_DUSTER_S2


#define Get_ISP_DUSTER_ISP_DUSTER_S2_duster_s2() p_ISP_DUSTER_IP->ISP_DUSTER_S2.ISP_DUSTER_S2_ts.duster_s2
#define Set_ISP_DUSTER_ISP_DUSTER_S2_duster_s2(x) (p_ISP_DUSTER_IP->ISP_DUSTER_S2.ISP_DUSTER_S2_ts.duster_s2 = x)
#define Set_ISP_DUSTER_ISP_DUSTER_S2(duster_s2) (p_ISP_DUSTER_IP->ISP_DUSTER_S2.word = (uint32_t)duster_s2<<0)
#define Get_ISP_DUSTER_ISP_DUSTER_S2() p_ISP_DUSTER_IP->ISP_DUSTER_S2.word
#define Set_ISP_DUSTER_ISP_DUSTER_S2_word(x) (p_ISP_DUSTER_IP->ISP_DUSTER_S2.word = x)


//ISP_DUSTER_SIGMA_SAMPLES


#define Get_ISP_DUSTER_ISP_DUSTER_SIGMA_SAMPLES_duster_sigma_samples() p_ISP_DUSTER_IP->ISP_DUSTER_SIGMA_SAMPLES.ISP_DUSTER_SIGMA_SAMPLES_ts.duster_sigma_samples
#define Get_ISP_DUSTER_ISP_DUSTER_SIGMA_SAMPLES() p_ISP_DUSTER_IP->ISP_DUSTER_SIGMA_SAMPLES.word


//ISP_DUSTER_ZERO_SAMPLES


#define Get_ISP_DUSTER_ISP_DUSTER_ZERO_SAMPLES_duster_zero_samples() p_ISP_DUSTER_IP->ISP_DUSTER_ZERO_SAMPLES.ISP_DUSTER_ZERO_SAMPLES_ts.duster_zero_samples
#define Get_ISP_DUSTER_ISP_DUSTER_ZERO_SAMPLES() p_ISP_DUSTER_IP->ISP_DUSTER_ZERO_SAMPLES.word


//ISP_DUSTER_NLE_HIST0


#define Get_ISP_DUSTER_ISP_DUSTER_NLE_HIST0_duster_nle_hist0() p_ISP_DUSTER_IP->ISP_DUSTER_NLE_HIST0.ISP_DUSTER_NLE_HIST0_ts.duster_nle_hist0
#define Get_ISP_DUSTER_ISP_DUSTER_NLE_HIST0() p_ISP_DUSTER_IP->ISP_DUSTER_NLE_HIST0.word


//ISP_DUSTER_NLE_HIST1


#define Get_ISP_DUSTER_ISP_DUSTER_NLE_HIST1_duster_nle_hist1() p_ISP_DUSTER_IP->ISP_DUSTER_NLE_HIST1.ISP_DUSTER_NLE_HIST1_ts.duster_nle_hist1
#define Get_ISP_DUSTER_ISP_DUSTER_NLE_HIST1() p_ISP_DUSTER_IP->ISP_DUSTER_NLE_HIST1.word


//ISP_DUSTER_ENABLE_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_ENABLE_STATUS_duster_enable_status() p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE_STATUS.ISP_DUSTER_ENABLE_STATUS_ts.duster_enable_status
#define Get_ISP_DUSTER_ISP_DUSTER_ENABLE_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_ENABLE_STATUS.word


//ISP_DUSTER_SCYT_RANK_HI_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_HI_STATUS_duster_scyt_rank_hi_status() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_HI_STATUS.ISP_DUSTER_SCYT_RANK_HI_STATUS_ts.duster_scyt_rank_hi_status
#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_HI_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_HI_STATUS.word


//ISP_DUSTER_SCYT_RANK_LO_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_LO_STATUS_duster_scyt_rank_lo_status() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_LO_STATUS.ISP_DUSTER_SCYT_RANK_LO_STATUS_ts.duster_scyt_rank_lo_status
#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_RANK_LO_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_RANK_LO_STATUS.word


//ISP_DUSTER_SCYT_SMOOTH_HI_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_HI_STATUS_duster_scyt_smooth_hi_status() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_HI_STATUS.ISP_DUSTER_SCYT_SMOOTH_HI_STATUS_ts.duster_scyt_smooth_hi_status
#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_HI_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_HI_STATUS.word


//ISP_DUSTER_SCYT_SMOOTH_LO_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_LO_STATUS_duster_scyt_smooth_lo_status() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_LO_STATUS.ISP_DUSTER_SCYT_SMOOTH_LO_STATUS_ts.duster_scyt_smooth_lo_status
#define Get_ISP_DUSTER_ISP_DUSTER_SCYT_SMOOTH_LO_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_SCYT_SMOOTH_LO_STATUS.word


//ISP_DUSTER_BYPASS_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_STATUS_duster_rc_bypass_status() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_STATUS.ISP_DUSTER_BYPASS_STATUS_ts.duster_rc_bypass_status


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_STATUS_duster_cc_bypass_status() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_STATUS.ISP_DUSTER_BYPASS_STATUS_ts.duster_cc_bypass_status


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_STATUS_duster_detect_cc_bypass_status() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_STATUS.ISP_DUSTER_BYPASS_STATUS_ts.duster_detect_cc_bypass_status


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_STATUS_duster_defcor_bypass_status() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_STATUS.ISP_DUSTER_BYPASS_STATUS_ts.duster_defcor_bypass_status


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_STATUS_duster_gaussian_bypass_status() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_STATUS.ISP_DUSTER_BYPASS_STATUS_ts.duster_gaussian_bypass_status


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_STATUS_duster_rc_use_simplified_status() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_STATUS.ISP_DUSTER_BYPASS_STATUS_ts.duster_rc_use_simplified_status


#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_STATUS_duster_rc_enablegrad_status() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_STATUS.ISP_DUSTER_BYPASS_STATUS_ts.duster_rc_enablegrad_status
#define Get_ISP_DUSTER_ISP_DUSTER_BYPASS_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_BYPASS_STATUS.word


//ISP_DUSTER_CC_LOCAL_SIGMA_TH_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_CC_LOCAL_SIGMA_TH_STATUS_duster_cc_local_sigma_th_status() p_ISP_DUSTER_IP->ISP_DUSTER_CC_LOCAL_SIGMA_TH_STATUS.ISP_DUSTER_CC_LOCAL_SIGMA_TH_STATUS_ts.duster_cc_local_sigma_th_status
#define Get_ISP_DUSTER_ISP_DUSTER_CC_LOCAL_SIGMA_TH_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_CC_LOCAL_SIGMA_TH_STATUS.word


//ISP_DUSTER_RC_NORM_TH_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_RC_NORM_TH_STATUS_duster_rc_norm_th_status() p_ISP_DUSTER_IP->ISP_DUSTER_RC_NORM_TH_STATUS.ISP_DUSTER_RC_NORM_TH_STATUS_ts.duster_rc_norm_th_status
#define Get_ISP_DUSTER_ISP_DUSTER_RC_NORM_TH_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_RC_NORM_TH_STATUS.word


//ISP_DUSTER_SIGMA_GAUSSIAN_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_SIGMA_GAUSSIAN_STATUS_duster_sigma_gaussian_status() p_ISP_DUSTER_IP->ISP_DUSTER_SIGMA_GAUSSIAN_STATUS.ISP_DUSTER_SIGMA_GAUSSIAN_STATUS_ts.duster_sigma_gaussian_status
#define Get_ISP_DUSTER_ISP_DUSTER_SIGMA_GAUSSIAN_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_SIGMA_GAUSSIAN_STATUS.word


//ISP_DUSTER_GAUSSIAN_TH1_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH1_STATUS_DUSTER_GAUSSIAN_TH1_status() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH1_STATUS.ISP_DUSTER_GAUSSIAN_TH1_STATUS_ts.DUSTER_GAUSSIAN_TH1_status
#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH1_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH1_STATUS.word


//ISP_DUSTER_GAUSSIAN_TH2_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH2_STATUS_DUSTER_GAUSSIAN_TH2_status() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH2_STATUS.ISP_DUSTER_GAUSSIAN_TH2_STATUS_ts.DUSTER_GAUSSIAN_TH2_status
#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH2_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH2_STATUS.word


//ISP_DUSTER_GAUSSIAN_TH3_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH3_STATUS_duster_gaussian_th3_status() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH3_STATUS.ISP_DUSTER_GAUSSIAN_TH3_STATUS_ts.duster_gaussian_th3_status
#define Get_ISP_DUSTER_ISP_DUSTER_GAUSSIAN_TH3_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_GAUSSIAN_TH3_STATUS.word


//ISP_DUSTER_S0_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_S0_STATUS_duster_s0_status() p_ISP_DUSTER_IP->ISP_DUSTER_S0_STATUS.ISP_DUSTER_S0_STATUS_ts.duster_s0_status
#define Get_ISP_DUSTER_ISP_DUSTER_S0_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_S0_STATUS.word


//ISP_DUSTER_S1_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_S1_STATUS_duster_s1_status() p_ISP_DUSTER_IP->ISP_DUSTER_S1_STATUS.ISP_DUSTER_S1_STATUS_ts.duster_s1_status
#define Get_ISP_DUSTER_ISP_DUSTER_S1_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_S1_STATUS.word


//ISP_DUSTER_S2_STATUS


#define Get_ISP_DUSTER_ISP_DUSTER_S2_STATUS_duster_s2_status() p_ISP_DUSTER_IP->ISP_DUSTER_S2_STATUS.ISP_DUSTER_S2_STATUS_ts.duster_s2_status
#define Get_ISP_DUSTER_ISP_DUSTER_S2_STATUS() p_ISP_DUSTER_IP->ISP_DUSTER_S2_STATUS.word

//ISP_SNAIL_BINNING_ENABLE
/*Description: Enable configuration register. Soft reset register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t snailnorec_enable :1;
        /* Disable snailnorec module*/
        uint8_t reserved0 :3;
        uint8_t snailnorec_soft_reset :1;
        /* SOFT_RESET_DISABLE*/
    }ISP_SNAIL_BINNING_ENABLE_ts;

}ISP_SNAIL_BINNING_ENABLE_tu;

typedef struct
{
    ISP_SNAIL_BINNING_ENABLE_tu ISP_SNAIL_BINNING_ENABLE;
}ISP_SNAIL_BINNING_IP_ts;




//ISP_SNAIL_BINNING_ENABLE


#define Get_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE_snailnorec_enable() p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.ISP_SNAIL_BINNING_ENABLE_ts.snailnorec_enable
#define Is_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE_snailnorec_enable_DISABLE() (p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.ISP_SNAIL_BINNING_ENABLE_ts.snailnorec_enable == snailnorec_enable_DISABLE)
#define Set_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE_snailnorec_enable__DISABLE() (p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.ISP_SNAIL_BINNING_ENABLE_ts.snailnorec_enable = snailnorec_enable_DISABLE)
#define snailnorec_enable_DISABLE 0x0    //Disable snailnorec module
#define Is_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE_snailnorec_enable_ENABLE() (p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.ISP_SNAIL_BINNING_ENABLE_ts.snailnorec_enable == snailnorec_enable_ENABLE)
#define Set_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE_snailnorec_enable__ENABLE() (p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.ISP_SNAIL_BINNING_ENABLE_ts.snailnorec_enable = snailnorec_enable_ENABLE)
#define snailnorec_enable_ENABLE 0x1    //Enable snailnorec module


#define Get_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE_snailnorec_soft_reset() p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.ISP_SNAIL_BINNING_ENABLE_ts.snailnorec_soft_reset
#define Is_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE_snailnorec_soft_reset_SOFT_RESET_DISABLE() (p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.ISP_SNAIL_BINNING_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define Set_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE_snailnorec_soft_reset__SOFT_RESET_DISABLE() (p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.ISP_SNAIL_BINNING_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define snailnorec_soft_reset_SOFT_RESET_DISABLE 0x0    //SOFT_RESET_DISABLE
#define Is_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE_snailnorec_soft_reset_SOFT_RESET_ENABLE() (p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.ISP_SNAIL_BINNING_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define Set_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE_snailnorec_soft_reset__SOFT_RESET_ENABLE() (p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.ISP_SNAIL_BINNING_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define snailnorec_soft_reset_SOFT_RESET_ENABLE 0x1    //SOFT_RESET_ENABLE
#define Set_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE(snailnorec_enable,snailnorec_soft_reset) (p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.word = (uint8_t)snailnorec_enable<<0 | (uint8_t)snailnorec_soft_reset<<4)
#define Get_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE() p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.word
#define Set_ISP_SNAIL_BINNING_ISP_SNAIL_BINNING_ENABLE_word(x) (p_ISP_SNAIL_BINNING_IP->ISP_SNAIL_BINNING_ENABLE.word = x)

//ISP_BINNING_REPAIR_ENABLE
/*Description: Enable configuration register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t binning_repair_enable :1;
        /* Disable binning repair module. Bypass this module.*/
    }ISP_BINNING_REPAIR_ENABLE_ts;

}ISP_BINNING_REPAIR_ENABLE_tu;



//ISP_BINNING_REPAIR_CONTROL
/*Description: This registers describes the control values of the IP.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t soft_reset :1;
        /* Usual behavior*/
        uint8_t reserved0 :3;
        uint8_t br_coef_hjog :1;
        /* Disables the horizontal jog of the filter coefficients*/
        uint8_t br_coef_vjog :1;
        /* Disables the vertical jog of the filter coefficients*/
    }ISP_BINNING_REPAIR_CONTROL_ts;

}ISP_BINNING_REPAIR_CONTROL_tu;



//ISP_BINNING_REPAIR_COEF00
/*Description: Top-left coefficient of the binning repair filter matrix.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t br_coef00;
        /* 
        if in binning by 2 mode, should be equal to 1
        if in binning by 4 mode, should be equal to 9
        */
    }ISP_BINNING_REPAIR_COEF00_ts;

}ISP_BINNING_REPAIR_COEF00_tu;



//ISP_BINNING_REPAIR_COEF01
/*Description: Top-right coefficient of the binning repair filter matrix.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t br_coef01;
        /* 
        if in binning by 2 mode, should be equal to 9
        if in binning by 4 mode, should be equal to 39
        */
    }ISP_BINNING_REPAIR_COEF01_ts;

}ISP_BINNING_REPAIR_COEF01_tu;



//ISP_BINNING_REPAIR_COEF10
/*Description: Bottom-left coefficient of the binning repair filter matrix.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t br_coef10;
        /* 
        if in binning by 2 mode, should be equal to 7
        if in binning by 4 mode, should be equal to 39
        */
    }ISP_BINNING_REPAIR_COEF10_ts;

}ISP_BINNING_REPAIR_COEF10_tu;



//ISP_BINNING_REPAIR_COEF11
/*Description: Bottom-right coefficient of the binning repair filter matrix.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t br_coef11;
        /* 
        if in binning by 2 mode, should be equal to 49
        if in binning by 4 mode, should be equal to 169
        */
    }ISP_BINNING_REPAIR_COEF11_ts;

}ISP_BINNING_REPAIR_COEF11_tu;



//ISP_BINNING_REPAIR_COEF_SFT
/*Description: Filter downshift value in the MAC operation.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t br_coef_sft :3;
        /* 
        if in binning by 2 mode, should be equal to 5
        if in binning by 4 mode, should be equal to 7
        */
    }ISP_BINNING_REPAIR_COEF_SFT_ts;

}ISP_BINNING_REPAIR_COEF_SFT_tu;

typedef struct
{
    ISP_BINNING_REPAIR_ENABLE_tu ISP_BINNING_REPAIR_ENABLE;
    ISP_BINNING_REPAIR_CONTROL_tu ISP_BINNING_REPAIR_CONTROL;
    ISP_BINNING_REPAIR_COEF00_tu ISP_BINNING_REPAIR_COEF00;
    ISP_BINNING_REPAIR_COEF01_tu ISP_BINNING_REPAIR_COEF01;
    ISP_BINNING_REPAIR_COEF10_tu ISP_BINNING_REPAIR_COEF10;
    ISP_BINNING_REPAIR_COEF11_tu ISP_BINNING_REPAIR_COEF11;
    ISP_BINNING_REPAIR_COEF_SFT_tu ISP_BINNING_REPAIR_COEF_SFT;
}ISP_BINNING_REPAIR_IP_ts;




//ISP_BINNING_REPAIR_ENABLE


#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_ENABLE_binning_repair_enable() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_ENABLE.ISP_BINNING_REPAIR_ENABLE_ts.binning_repair_enable
#define Is_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_ENABLE_binning_repair_enable_DISABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_ENABLE.ISP_BINNING_REPAIR_ENABLE_ts.binning_repair_enable == binning_repair_enable_DISABLE)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_ENABLE_binning_repair_enable__DISABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_ENABLE.ISP_BINNING_REPAIR_ENABLE_ts.binning_repair_enable = binning_repair_enable_DISABLE)
#define binning_repair_enable_DISABLE 0x0    //Disable binning repair module. Bypass this module.
#define Is_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_ENABLE_binning_repair_enable_ENABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_ENABLE.ISP_BINNING_REPAIR_ENABLE_ts.binning_repair_enable == binning_repair_enable_ENABLE)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_ENABLE_binning_repair_enable__ENABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_ENABLE.ISP_BINNING_REPAIR_ENABLE_ts.binning_repair_enable = binning_repair_enable_ENABLE)
#define binning_repair_enable_ENABLE 0x1    //Enable binning repair module
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_ENABLE(binning_repair_enable) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_ENABLE.word = (uint32_t)binning_repair_enable<<0)
#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_ENABLE() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_ENABLE.word
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_ENABLE_word(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_ENABLE.word = x)


//ISP_BINNING_REPAIR_CONTROL


#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_soft_reset() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.soft_reset
#define Is_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_soft_reset_DISABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.soft_reset == soft_reset_DISABLE)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_soft_reset__DISABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.soft_reset = soft_reset_DISABLE)
#define soft_reset_DISABLE 0x0    //Usual behavior
#define Is_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_soft_reset_ENABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.soft_reset == soft_reset_ENABLE)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_soft_reset__ENABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.soft_reset = soft_reset_ENABLE)
#define soft_reset_ENABLE 0x1    //Resets all the control flip-flops of the IP and re-initiates all the State Machines.


#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_br_coef_hjog() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.br_coef_hjog
#define Is_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_br_coef_hjog_DISABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.br_coef_hjog == br_coef_hjog_DISABLE)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_br_coef_hjog__DISABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.br_coef_hjog = br_coef_hjog_DISABLE)
#define br_coef_hjog_DISABLE 0x0    //Disables the horizontal jog of the filter coefficients
#define Is_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_br_coef_hjog_ENABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.br_coef_hjog == br_coef_hjog_ENABLE)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_br_coef_hjog__ENABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.br_coef_hjog = br_coef_hjog_ENABLE)
#define br_coef_hjog_ENABLE 0x1    //Enables the horizontal jog of the filter coefficients


#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_br_coef_vjog() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.br_coef_vjog
#define Is_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_br_coef_vjog_DISABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.br_coef_vjog == br_coef_vjog_DISABLE)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_br_coef_vjog__DISABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.br_coef_vjog = br_coef_vjog_DISABLE)
#define br_coef_vjog_DISABLE 0x0    //Disables the vertical jog of the filter coefficients
#define Is_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_br_coef_vjog_ENABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.br_coef_vjog == br_coef_vjog_ENABLE)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_br_coef_vjog__ENABLE() (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.ISP_BINNING_REPAIR_CONTROL_ts.br_coef_vjog = br_coef_vjog_ENABLE)
#define br_coef_vjog_ENABLE 0x1    //Enables the vertical jog of the filter coefficients
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL(soft_reset,br_coef_hjog,br_coef_vjog) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.word = (uint32_t)soft_reset<<0 | (uint32_t)br_coef_hjog<<4 | (uint32_t)br_coef_vjog<<5)
#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.word
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_CONTROL_word(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_CONTROL.word = x)


//ISP_BINNING_REPAIR_COEF00


#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF00_br_coef00() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF00.ISP_BINNING_REPAIR_COEF00_ts.br_coef00
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF00_br_coef00(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF00.ISP_BINNING_REPAIR_COEF00_ts.br_coef00 = x)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF00(br_coef00) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF00.word = (uint32_t)br_coef00<<0)
#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF00() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF00.word
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF00_word(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF00.word = x)


//ISP_BINNING_REPAIR_COEF01


#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF01_br_coef01() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF01.ISP_BINNING_REPAIR_COEF01_ts.br_coef01
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF01_br_coef01(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF01.ISP_BINNING_REPAIR_COEF01_ts.br_coef01 = x)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF01(br_coef01) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF01.word = (uint32_t)br_coef01<<0)
#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF01() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF01.word
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF01_word(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF01.word = x)


//ISP_BINNING_REPAIR_COEF10


#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF10_br_coef10() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF10.ISP_BINNING_REPAIR_COEF10_ts.br_coef10
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF10_br_coef10(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF10.ISP_BINNING_REPAIR_COEF10_ts.br_coef10 = x)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF10(br_coef10) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF10.word = (uint32_t)br_coef10<<0)
#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF10() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF10.word
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF10_word(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF10.word = x)


//ISP_BINNING_REPAIR_COEF11


#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF11_br_coef11() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF11.ISP_BINNING_REPAIR_COEF11_ts.br_coef11
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF11_br_coef11(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF11.ISP_BINNING_REPAIR_COEF11_ts.br_coef11 = x)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF11(br_coef11) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF11.word = (uint32_t)br_coef11<<0)
#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF11() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF11.word
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF11_word(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF11.word = x)


//ISP_BINNING_REPAIR_COEF_SFT


#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF_SFT_br_coef_sft() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF_SFT.ISP_BINNING_REPAIR_COEF_SFT_ts.br_coef_sft
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF_SFT_br_coef_sft(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF_SFT.ISP_BINNING_REPAIR_COEF_SFT_ts.br_coef_sft = x)
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF_SFT(br_coef_sft) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF_SFT.word = (uint8_t)br_coef_sft<<0)
#define Get_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF_SFT() p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF_SFT.word
#define Set_ISP_BINNING_REPAIR_ISP_BINNING_REPAIR_COEF_SFT_word(x) (p_ISP_BINNING_REPAIR_IP->ISP_BINNING_REPAIR_COEF_SFT.word = x)

//ISP_CROP_BAYER_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t crop_enable :1;
        /* Disable Crop module*/
        uint8_t reserved0 :3;
        uint8_t crop_soft_reset :1;
        /* cropper soft reset disable*/
    }ISP_CROP_BAYER_ENABLE_ts;

}ISP_CROP_BAYER_ENABLE_tu;



//ISP_CROP_BAYER_SOF_RETIMING
/*Description: Enable the retiming option of start of frame tag. With this option the line delay between SOF and ACTIV in output will be same as input.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t crop_sof_retiming :1;
        /* Disable the SOF retiming*/
    }ISP_CROP_BAYER_SOF_RETIMING_ts;

}ISP_CROP_BAYER_SOF_RETIMING_tu;



//ISP_CROP_BAYER_SHADOW_CROPS
/*Description: Enable shadow registers for H/V start and H/V size on START OF FRAME
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t crop_shadow_crops :1;
    }ISP_CROP_BAYER_SHADOW_CROPS_ts;

}ISP_CROP_BAYER_SHADOW_CROPS_tu;



//ISP_CROP_BAYER_H_START
/*Description: crop_h_start define the horizontal start point of the crop area.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_h_start :13;
    }ISP_CROP_BAYER_H_START_ts;

}ISP_CROP_BAYER_H_START_tu;



//ISP_CROP_BAYER_V_START
/*Description: crop_v_start define the vertical start point of the crop area
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_v_start :13;
    }ISP_CROP_BAYER_V_START_ts;

}ISP_CROP_BAYER_V_START_tu;



//ISP_CROP_BAYER_H_SIZE
/*Description: crop_v_size define the horizontal size of the crop area
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_h_size :13;
    }ISP_CROP_BAYER_H_SIZE_ts;

}ISP_CROP_BAYER_H_SIZE_tu;



//ISP_CROP_BAYER_V_SIZE
/*Description: crop_v_size define the vertical size of the crop area
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_v_size :13;
    }ISP_CROP_BAYER_V_SIZE_ts;

}ISP_CROP_BAYER_V_SIZE_tu;



//ISP_CROP_BAYER_IACTIVE_PIXS
/*Description: crop_iactive_pixs define the horizontal number of actives pixels in the input frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_iactive_pixs :13;
    }ISP_CROP_BAYER_IACTIVE_PIXS_ts;

}ISP_CROP_BAYER_IACTIVE_PIXS_tu;



//ISP_CROP_BAYER_IACTIVE_LINES
/*Description: crop_iactive_lines define the vertical number of lines in the input frame
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_iactive_lines :13;
    }ISP_CROP_BAYER_IACTIVE_LINES_ts;

}ISP_CROP_BAYER_IACTIVE_LINES_tu;

typedef struct
{
    ISP_CROP_BAYER_ENABLE_tu ISP_CROP_BAYER_ENABLE;
    ISP_CROP_BAYER_SOF_RETIMING_tu ISP_CROP_BAYER_SOF_RETIMING;
    ISP_CROP_BAYER_SHADOW_CROPS_tu ISP_CROP_BAYER_SHADOW_CROPS;
    ISP_CROP_BAYER_H_START_tu ISP_CROP_BAYER_H_START;
    ISP_CROP_BAYER_V_START_tu ISP_CROP_BAYER_V_START;
    ISP_CROP_BAYER_H_SIZE_tu ISP_CROP_BAYER_H_SIZE;
    ISP_CROP_BAYER_V_SIZE_tu ISP_CROP_BAYER_V_SIZE;
    ISP_CROP_BAYER_IACTIVE_PIXS_tu ISP_CROP_BAYER_IACTIVE_PIXS;
    ISP_CROP_BAYER_IACTIVE_LINES_tu ISP_CROP_BAYER_IACTIVE_LINES;
}ISP_CROP_BAYER_IP_ts;




//ISP_CROP_BAYER_ENABLE


#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE_crop_enable() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.ISP_CROP_BAYER_ENABLE_ts.crop_enable
#define Is_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE_crop_enable_DISABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.ISP_CROP_BAYER_ENABLE_ts.crop_enable == crop_enable_DISABLE)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE_crop_enable__DISABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.ISP_CROP_BAYER_ENABLE_ts.crop_enable = crop_enable_DISABLE)
#define crop_enable_DISABLE 0x0    //Disable Crop module
#define Is_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE_crop_enable_ENABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.ISP_CROP_BAYER_ENABLE_ts.crop_enable == crop_enable_ENABLE)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE_crop_enable__ENABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.ISP_CROP_BAYER_ENABLE_ts.crop_enable = crop_enable_ENABLE)
#define crop_enable_ENABLE 0x1    //Enable Cropmodule


#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE_crop_soft_reset() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.ISP_CROP_BAYER_ENABLE_ts.crop_soft_reset
#define Is_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE_crop_soft_reset_SOFT_RST_DISABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.ISP_CROP_BAYER_ENABLE_ts.crop_soft_reset == crop_soft_reset_SOFT_RST_DISABLE)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE_crop_soft_reset__SOFT_RST_DISABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.ISP_CROP_BAYER_ENABLE_ts.crop_soft_reset = crop_soft_reset_SOFT_RST_DISABLE)
#define crop_soft_reset_SOFT_RST_DISABLE 0x0    //cropper soft reset disable
#define Is_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE_crop_soft_reset_SOFT_RST_ENABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.ISP_CROP_BAYER_ENABLE_ts.crop_soft_reset == crop_soft_reset_SOFT_RST_ENABLE)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE_crop_soft_reset__SOFT_RST_ENABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.ISP_CROP_BAYER_ENABLE_ts.crop_soft_reset = crop_soft_reset_SOFT_RST_ENABLE)
#define crop_soft_reset_SOFT_RST_ENABLE 0x1    //cropper soft reset enable
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE(crop_enable,crop_soft_reset) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.word = (uint32_t)crop_enable<<0 | (uint32_t)crop_soft_reset<<4)
#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.word
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_ENABLE_word(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_ENABLE.word = x)


//ISP_CROP_BAYER_SOF_RETIMING


#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_SOF_RETIMING_crop_sof_retiming() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SOF_RETIMING.ISP_CROP_BAYER_SOF_RETIMING_ts.crop_sof_retiming
#define Is_ISP_CROP_BAYER_ISP_CROP_BAYER_SOF_RETIMING_crop_sof_retiming_DISABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SOF_RETIMING.ISP_CROP_BAYER_SOF_RETIMING_ts.crop_sof_retiming == crop_sof_retiming_DISABLE)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_SOF_RETIMING_crop_sof_retiming__DISABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SOF_RETIMING.ISP_CROP_BAYER_SOF_RETIMING_ts.crop_sof_retiming = crop_sof_retiming_DISABLE)
#define crop_sof_retiming_DISABLE 0x0    //Disable the SOF retiming
#define Is_ISP_CROP_BAYER_ISP_CROP_BAYER_SOF_RETIMING_crop_sof_retiming_ENABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SOF_RETIMING.ISP_CROP_BAYER_SOF_RETIMING_ts.crop_sof_retiming == crop_sof_retiming_ENABLE)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_SOF_RETIMING_crop_sof_retiming__ENABLE() (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SOF_RETIMING.ISP_CROP_BAYER_SOF_RETIMING_ts.crop_sof_retiming = crop_sof_retiming_ENABLE)
#define crop_sof_retiming_ENABLE 0x1    //Enable the SOF retiming
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_SOF_RETIMING(crop_sof_retiming) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SOF_RETIMING.word = (uint32_t)crop_sof_retiming<<0)
#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_SOF_RETIMING() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SOF_RETIMING.word
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_SOF_RETIMING_word(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SOF_RETIMING.word = x)


//ISP_CROP_BAYER_SHADOW_CROPS


#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_SHADOW_CROPS_crop_shadow_crops() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SHADOW_CROPS.ISP_CROP_BAYER_SHADOW_CROPS_ts.crop_shadow_crops
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_SHADOW_CROPS_crop_shadow_crops(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SHADOW_CROPS.ISP_CROP_BAYER_SHADOW_CROPS_ts.crop_shadow_crops = x)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_SHADOW_CROPS(crop_shadow_crops) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SHADOW_CROPS.word = (uint32_t)crop_shadow_crops<<0)
#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_SHADOW_CROPS() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SHADOW_CROPS.word
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_SHADOW_CROPS_word(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_SHADOW_CROPS.word = x)


//ISP_CROP_BAYER_H_START


#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_H_START_crop_h_start() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_H_START.ISP_CROP_BAYER_H_START_ts.crop_h_start
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_H_START_crop_h_start(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_H_START.ISP_CROP_BAYER_H_START_ts.crop_h_start = x)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_H_START(crop_h_start) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_H_START.word = (uint32_t)crop_h_start<<0)
#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_H_START() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_H_START.word
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_H_START_word(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_H_START.word = x)


//ISP_CROP_BAYER_V_START


#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_V_START_crop_v_start() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_V_START.ISP_CROP_BAYER_V_START_ts.crop_v_start
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_V_START_crop_v_start(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_V_START.ISP_CROP_BAYER_V_START_ts.crop_v_start = x)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_V_START(crop_v_start) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_V_START.word = (uint32_t)crop_v_start<<0)
#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_V_START() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_V_START.word
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_V_START_word(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_V_START.word = x)


//ISP_CROP_BAYER_H_SIZE


#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_H_SIZE_crop_h_size() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_H_SIZE.ISP_CROP_BAYER_H_SIZE_ts.crop_h_size
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_H_SIZE_crop_h_size(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_H_SIZE.ISP_CROP_BAYER_H_SIZE_ts.crop_h_size = x)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_H_SIZE(crop_h_size) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_H_SIZE.word = (uint32_t)crop_h_size<<0)
#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_H_SIZE() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_H_SIZE.word
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_H_SIZE_word(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_H_SIZE.word = x)


//ISP_CROP_BAYER_V_SIZE


#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_V_SIZE_crop_v_size() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_V_SIZE.ISP_CROP_BAYER_V_SIZE_ts.crop_v_size
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_V_SIZE_crop_v_size(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_V_SIZE.ISP_CROP_BAYER_V_SIZE_ts.crop_v_size = x)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_V_SIZE(crop_v_size) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_V_SIZE.word = (uint32_t)crop_v_size<<0)
#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_V_SIZE() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_V_SIZE.word
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_V_SIZE_word(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_V_SIZE.word = x)


//ISP_CROP_BAYER_IACTIVE_PIXS


#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_IACTIVE_PIXS_crop_iactive_pixs() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_IACTIVE_PIXS.ISP_CROP_BAYER_IACTIVE_PIXS_ts.crop_iactive_pixs
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_IACTIVE_PIXS_crop_iactive_pixs(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_IACTIVE_PIXS.ISP_CROP_BAYER_IACTIVE_PIXS_ts.crop_iactive_pixs = x)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_IACTIVE_PIXS(crop_iactive_pixs) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_IACTIVE_PIXS.word = (uint32_t)crop_iactive_pixs<<0)
#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_IACTIVE_PIXS() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_IACTIVE_PIXS.word
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_IACTIVE_PIXS_word(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_IACTIVE_PIXS.word = x)


//ISP_CROP_BAYER_IACTIVE_LINES


#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_IACTIVE_LINES_crop_iactive_lines() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_IACTIVE_LINES.ISP_CROP_BAYER_IACTIVE_LINES_ts.crop_iactive_lines
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_IACTIVE_LINES_crop_iactive_lines(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_IACTIVE_LINES.ISP_CROP_BAYER_IACTIVE_LINES_ts.crop_iactive_lines = x)
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_IACTIVE_LINES(crop_iactive_lines) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_IACTIVE_LINES.word = (uint16_t)crop_iactive_lines<<0)
#define Get_ISP_CROP_BAYER_ISP_CROP_BAYER_IACTIVE_LINES() p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_IACTIVE_LINES.word
#define Set_ISP_CROP_BAYER_ISP_CROP_BAYER_IACTIVE_LINES_word(x) (p_ISP_CROP_BAYER_IP->ISP_CROP_BAYER_IACTIVE_LINES.word = x)

//ISP_BAYER_STORE_RE_OUT_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_BAYER_STORE_RE_OUT_ENABLE_ts;

}ISP_BAYER_STORE_RE_OUT_ENABLE_tu;



//ISP_BAYER_STORE_RE_OUT_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_BAYER_STORE_RE_OUT_SELECT_ts;

}ISP_BAYER_STORE_RE_OUT_SELECT_tu;

typedef struct
{
    ISP_BAYER_STORE_RE_OUT_ENABLE_tu ISP_BAYER_STORE_RE_OUT_ENABLE;
    ISP_BAYER_STORE_RE_OUT_SELECT_tu ISP_BAYER_STORE_RE_OUT_SELECT;
}ISP_BAYER_STORE_RE_OUT_IP_ts;




//ISP_BAYER_STORE_RE_OUT_ENABLE


#define Get_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE_mux2to1_enable() p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.ISP_BAYER_STORE_RE_OUT_ENABLE_ts.mux2to1_enable
#define Is_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE_mux2to1_enable_DISABLE() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.ISP_BAYER_STORE_RE_OUT_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE_mux2to1_enable__DISABLE() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.ISP_BAYER_STORE_RE_OUT_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE_mux2to1_enable_ENABLE() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.ISP_BAYER_STORE_RE_OUT_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE_mux2to1_enable__ENABLE() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.ISP_BAYER_STORE_RE_OUT_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE_mux2to1_soft_reset() p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.ISP_BAYER_STORE_RE_OUT_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.ISP_BAYER_STORE_RE_OUT_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.ISP_BAYER_STORE_RE_OUT_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.ISP_BAYER_STORE_RE_OUT_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.ISP_BAYER_STORE_RE_OUT_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE() p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.word
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_ENABLE_word(x) (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_ENABLE.word = x)


//ISP_BAYER_STORE_RE_OUT_SELECT


#define Get_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT_mux2to1_select() p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.ISP_BAYER_STORE_RE_OUT_SELECT_ts.mux2to1_select
#define Is_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT_mux2to1_select_IDP0() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.ISP_BAYER_STORE_RE_OUT_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT_mux2to1_select__IDP0() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.ISP_BAYER_STORE_RE_OUT_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT_mux2to1_select_IDP1() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.ISP_BAYER_STORE_RE_OUT_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT_mux2to1_select__IDP1() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.ISP_BAYER_STORE_RE_OUT_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT_mux2to1_shadow_en() p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.ISP_BAYER_STORE_RE_OUT_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.ISP_BAYER_STORE_RE_OUT_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.ISP_BAYER_STORE_RE_OUT_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.ISP_BAYER_STORE_RE_OUT_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.ISP_BAYER_STORE_RE_OUT_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT() p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.word
#define Set_ISP_BAYER_STORE_RE_OUT_ISP_BAYER_STORE_RE_OUT_SELECT_word(x) (p_ISP_BAYER_STORE_RE_OUT_IP->ISP_BAYER_STORE_RE_OUT_SELECT.word = x)

//ISP_SNAIL_BABYLON_ENABLE
/*Description: Enable configuration register. Soft reset register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t snailnorec_enable :1;
        /* Disable snailnorec module*/
        uint8_t reserved0 :3;
        uint8_t snailnorec_soft_reset :1;
        /* SOFT_RESET_DISABLE*/
    }ISP_SNAIL_BABYLON_ENABLE_ts;

}ISP_SNAIL_BABYLON_ENABLE_tu;

typedef struct
{
    ISP_SNAIL_BABYLON_ENABLE_tu ISP_SNAIL_BABYLON_ENABLE;
}ISP_SNAIL_BABYLON_IP_ts;




//ISP_SNAIL_BABYLON_ENABLE


#define Get_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE_snailnorec_enable() p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.ISP_SNAIL_BABYLON_ENABLE_ts.snailnorec_enable
#define Is_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE_snailnorec_enable_DISABLE() (p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.ISP_SNAIL_BABYLON_ENABLE_ts.snailnorec_enable == snailnorec_enable_DISABLE)
#define Set_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE_snailnorec_enable__DISABLE() (p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.ISP_SNAIL_BABYLON_ENABLE_ts.snailnorec_enable = snailnorec_enable_DISABLE)
#define snailnorec_enable_DISABLE 0x0    //Disable snailnorec module
#define Is_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE_snailnorec_enable_ENABLE() (p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.ISP_SNAIL_BABYLON_ENABLE_ts.snailnorec_enable == snailnorec_enable_ENABLE)
#define Set_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE_snailnorec_enable__ENABLE() (p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.ISP_SNAIL_BABYLON_ENABLE_ts.snailnorec_enable = snailnorec_enable_ENABLE)
#define snailnorec_enable_ENABLE 0x1    //Enable snailnorec module


#define Get_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE_snailnorec_soft_reset() p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.ISP_SNAIL_BABYLON_ENABLE_ts.snailnorec_soft_reset
#define Is_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE_snailnorec_soft_reset_SOFT_RESET_DISABLE() (p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.ISP_SNAIL_BABYLON_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define Set_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE_snailnorec_soft_reset__SOFT_RESET_DISABLE() (p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.ISP_SNAIL_BABYLON_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define snailnorec_soft_reset_SOFT_RESET_DISABLE 0x0    //SOFT_RESET_DISABLE
#define Is_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE_snailnorec_soft_reset_SOFT_RESET_ENABLE() (p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.ISP_SNAIL_BABYLON_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define Set_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE_snailnorec_soft_reset__SOFT_RESET_ENABLE() (p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.ISP_SNAIL_BABYLON_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define snailnorec_soft_reset_SOFT_RESET_ENABLE 0x1    //SOFT_RESET_ENABLE
#define Set_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE(snailnorec_enable,snailnorec_soft_reset) (p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.word = (uint8_t)snailnorec_enable<<0 | (uint8_t)snailnorec_soft_reset<<4)
#define Get_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE() p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.word
#define Set_ISP_SNAIL_BABYLON_ISP_SNAIL_BABYLON_ENABLE_word(x) (p_ISP_SNAIL_BABYLON_IP->ISP_SNAIL_BABYLON_ENABLE.word = x)

//ISP_BABYLON_ENABLE
/*Description: Babylon Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable_babylon :1;
        /* Disable Babylon module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* Babylon functions normally*/
    }ISP_BABYLON_ENABLE_ts;

}ISP_BABYLON_ENABLE_tu;



//ISP_BABYLON_ZIPPERKILL
/*Description: Trade-off between text preservation and zipper artifact removal
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t zipperkill :4;
        /* 
        Higher values of zipperkill will reduce zipper artifacts, but will also degrade text quality*/
    }ISP_BABYLON_ZIPPERKILL_ts;

}ISP_BABYLON_ZIPPERKILL_tu;



//ISP_BABYLON_FLAT_TH
/*Description: De-emphasise directional filtering by increasing likelihood of detecting flat region
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t flat_th;
        /* 
        Higher values de-emphasise directional filtering by increasing likelihood of detecting flat region*/
    }ISP_BABYLON_FLAT_TH_ts;

}ISP_BABYLON_FLAT_TH_tu;

typedef struct
{
    ISP_BABYLON_ENABLE_tu ISP_BABYLON_ENABLE;
    ISP_BABYLON_ZIPPERKILL_tu ISP_BABYLON_ZIPPERKILL;
    ISP_BABYLON_FLAT_TH_tu ISP_BABYLON_FLAT_TH;
}ISP_BABYLON_IP_ts;




//ISP_BABYLON_ENABLE


#define Get_ISP_BABYLON_ISP_BABYLON_ENABLE_enable_babylon() p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.ISP_BABYLON_ENABLE_ts.enable_babylon
#define Is_ISP_BABYLON_ISP_BABYLON_ENABLE_enable_babylon_DISABLE() (p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.ISP_BABYLON_ENABLE_ts.enable_babylon == enable_babylon_DISABLE)
#define Set_ISP_BABYLON_ISP_BABYLON_ENABLE_enable_babylon__DISABLE() (p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.ISP_BABYLON_ENABLE_ts.enable_babylon = enable_babylon_DISABLE)
#define enable_babylon_DISABLE 0x0    //Disable Babylon module
#define Is_ISP_BABYLON_ISP_BABYLON_ENABLE_enable_babylon_ENABLE() (p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.ISP_BABYLON_ENABLE_ts.enable_babylon == enable_babylon_ENABLE)
#define Set_ISP_BABYLON_ISP_BABYLON_ENABLE_enable_babylon__ENABLE() (p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.ISP_BABYLON_ENABLE_ts.enable_babylon = enable_babylon_ENABLE)
#define enable_babylon_ENABLE 0x1    //Enable babylon module


#define Get_ISP_BABYLON_ISP_BABYLON_ENABLE_soft_reset() p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.ISP_BABYLON_ENABLE_ts.soft_reset
#define Is_ISP_BABYLON_ISP_BABYLON_ENABLE_soft_reset_B_0x0() (p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.ISP_BABYLON_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_BABYLON_ISP_BABYLON_ENABLE_soft_reset__B_0x0() (p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.ISP_BABYLON_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //Babylon functions normally
#define Is_ISP_BABYLON_ISP_BABYLON_ENABLE_soft_reset_B_0x1() (p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.ISP_BABYLON_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_BABYLON_ISP_BABYLON_ENABLE_soft_reset__B_0x1() (p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.ISP_BABYLON_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //All outputs are assigned reset value (And, as soon as soft_reset is again made 0, it switches to normal functional mode without waiting for start of frame)
#define Set_ISP_BABYLON_ISP_BABYLON_ENABLE(enable_babylon,soft_reset) (p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.word = (uint32_t)enable_babylon<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_BABYLON_ISP_BABYLON_ENABLE() p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.word
#define Set_ISP_BABYLON_ISP_BABYLON_ENABLE_word(x) (p_ISP_BABYLON_IP->ISP_BABYLON_ENABLE.word = x)


//ISP_BABYLON_ZIPPERKILL


#define Get_ISP_BABYLON_ISP_BABYLON_ZIPPERKILL_zipperkill() p_ISP_BABYLON_IP->ISP_BABYLON_ZIPPERKILL.ISP_BABYLON_ZIPPERKILL_ts.zipperkill
#define Set_ISP_BABYLON_ISP_BABYLON_ZIPPERKILL_zipperkill(x) (p_ISP_BABYLON_IP->ISP_BABYLON_ZIPPERKILL.ISP_BABYLON_ZIPPERKILL_ts.zipperkill = x)
#define Set_ISP_BABYLON_ISP_BABYLON_ZIPPERKILL(zipperkill) (p_ISP_BABYLON_IP->ISP_BABYLON_ZIPPERKILL.word = (uint32_t)zipperkill<<0)
#define Get_ISP_BABYLON_ISP_BABYLON_ZIPPERKILL() p_ISP_BABYLON_IP->ISP_BABYLON_ZIPPERKILL.word
#define Set_ISP_BABYLON_ISP_BABYLON_ZIPPERKILL_word(x) (p_ISP_BABYLON_IP->ISP_BABYLON_ZIPPERKILL.word = x)


//ISP_BABYLON_FLAT_TH


#define Get_ISP_BABYLON_ISP_BABYLON_FLAT_TH_flat_th() p_ISP_BABYLON_IP->ISP_BABYLON_FLAT_TH.ISP_BABYLON_FLAT_TH_ts.flat_th
#define Set_ISP_BABYLON_ISP_BABYLON_FLAT_TH_flat_th(x) (p_ISP_BABYLON_IP->ISP_BABYLON_FLAT_TH.ISP_BABYLON_FLAT_TH_ts.flat_th = x)
#define Set_ISP_BABYLON_ISP_BABYLON_FLAT_TH(flat_th) (p_ISP_BABYLON_IP->ISP_BABYLON_FLAT_TH.word = (uint8_t)flat_th<<0)
#define Get_ISP_BABYLON_ISP_BABYLON_FLAT_TH() p_ISP_BABYLON_IP->ISP_BABYLON_FLAT_TH.word
#define Set_ISP_BABYLON_ISP_BABYLON_FLAT_TH_word(x) (p_ISP_BABYLON_IP->ISP_BABYLON_FLAT_TH.word = x)



//ISP_MOZART_ENABLE
/*Description:
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable_mozart :1;
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /// This structure enables/disables and does a soft reset
    }ISP_MOZART_ENABLE_ts;

}ISP_MOZART_ENABLE_tu;

typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t status_version :4;
        uint8_t status_state :4;
        uint8_t        patch_version;
        uint8_t        minor_version;
        uint8_t        major_version;
        /// This structure gives the version of the DMCE ip
    }ISP_MOZART_VERSION_ts;

}ISP_MOZART_VERSION_tu;



//ISP_MOZART_CHROMA_AA
/*Description: Chroma anti-alias promoter
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t chroma_anti_aliasing:6;
/* Desc TBD*/
    } ISP_MOZART_CHROMA_AA_ts;

} ISP_MOZART_CHROMA_AA_tu;



//ISP_MOZART_M_SB_PEAKER
/*Description: Mid sub band peaker
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t m_sb_peaker :10;
/*         Desc TBD*/
    } ISP_MOZART_M_SB_PEAKER_ts;

} ISP_MOZART_M_SB_PEAKER_tu;



//ISP_MOZART_H_SB_PEAKER
/*Description: High sub-band peaker
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t h_sb_peaker :10;
/* Desc TBD*/
    } ISP_MOZART_H_SB_PEAKER_ts;

}ISP_MOZART_H_SB_PEAKER_tu;


typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t m_sb_coring_gain;
        /// This structure sets mid subband coring gain.
    }ISP_MOZART_M_SB_CORING_GAIN_ts;

}ISP_MOZART_M_SB_CORING_GAIN_tu;



//ISP_MOZART_H_SB_CORING_GAIN
/*Description: High sub-band coring gain
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t h_sb_coring_gain;
        /// This structure sets high subband coring gain.
    }  ISP_MOZART_H_SB_CORING_GAIN_ts;

}  ISP_MOZART_H_SB_CORING_GAIN_tu;



//ISP_MOZART_SB_CORING_MIN
/*Description: Minimum sub-band coring level
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint16_t sb_coring_min;
        /// This structure sets minimum coring gain.
    } ISP_MOZART_SB_CORING_MIN_ts;

} ISP_MOZART_SB_CORING_MIN_tu;




//ISP_MOZART_COLOR_GAIN
/*Description: Color gain (saturation)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t luma_gain;
        /// This structure sets Luminance gain.
    } ISP_MOZART_LUMA_GAIN_ts;
}  ISP_MOZART_LUMA_GAIN_tu;




//ISP_MOZART_LUMA_GAIN
/*Description: Luma gain (brightness)
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t color_gain;
        /// This structure sets chroma gain.
    } ISP_MOZART_COLOR_GAIN_ts;
} ISP_MOZART_COLOR_GAIN_tu;


typedef struct
{
    ISP_MOZART_ENABLE_tu ISP_MOZART_ENABLE;
    ISP_MOZART_VERSION_tu  ISP_MOZART_VERSION;
    ISP_MOZART_CHROMA_AA_tu  ISP_MOZART_CHROMA_AA;
    ISP_MOZART_M_SB_PEAKER_tu  ISP_MOZART_M_SB_PEAKER;
    ISP_MOZART_H_SB_PEAKER_tu    ISP_MOZART_H_SB_PEAKER;
    ISP_MOZART_M_SB_CORING_GAIN_tu    ISP_MOZART_M_SB_CORING_GAIN;
    ISP_MOZART_H_SB_CORING_GAIN_tu    ISP_MOZART_H_SB_CORING_GAIN;
    ISP_MOZART_SB_CORING_MIN_tu     ISP_MOZART_SB_CORING_MIN;
    ISP_MOZART_COLOR_GAIN_tu    ISP_MOZART_COLOR_GAIN;
    ISP_MOZART_LUMA_GAIN_tu    ISP_MOZART_LUMA_GAIN;
}ISP_MOZART_IP_ts;

//#define <Get/Set/Is ## ModuleName ## RegisterName ## bitfield()>

#define Get_ISP_MOZART_ISP_MOZART_ENABLE_enable_mozart() p_ISP_MOZART_IP->ISP_MOZART_ENABLE.ISP_MOZART_ENABLE_ts.enable_mozart
#define Is_ISP_MOZART_ISP_MOZART_ENABLE_enable_mozart_DISABLE() (p_ISP_MOZART_IP->ISP_MOZART_ENABLE.ISP_MOZART_ENABLE_ts.enable_mozart == enable_mozart_DISABLE)
#define Set_ISP_MOZART_ISP_MOZART_ENABLE_enable_mozart_DISABLE() (p_ISP_MOZART_IP->ISP_MOZART_ENABLE.ISP_MOZART_ENABLE_ts.enable_mozart = enable_mozart_DISABLE)
#define enable_mozart_DISABLE 0x0    //Disable Babylon module
#define Is_ISP_MOZART_ISP_MOZART_ENABLE_enable_mozart_ENABLE() (p_ISP_MOZART_IP->ISP_MOZART_ENABLE.ISP_MOZART_ENABLE_ts.enable_mozart == enable_mozart_ENABLE)
#define Set_ISP_MOZART_ISP_MOZART_ENABLE_enable_mozart_ENABLE() (p_ISP_MOZART_IP->ISP_MOZART_ENABLE.ISP_MOZART_ENABLE_ts.enable_mozart = enable_mozart_ENABLE)
#define enable_mozart_ENABLE 0x1    //Enable mozart module


#define Get_ISP_MOZART_ISP_MOZART_ENABLE_soft_reset() p_ISP_MOZART_IP->ISP_MOZART_ENABLE.ISP_MOZART_ENABLE_ts.soft_reset
#define Is_ISP_MOZART_ISP_MOZART_ENABLE_soft_reset_B_0x0() (p_ISP_MOZART_IP->ISP_MOZART_ENABLE.ISP_MOZART_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_MOZART_ISP_MOZART_ENABLE_soft_reset__B_0x0() (p_ISP_MOZART_IP->ISP_MOZART_ENABLE.ISP_MOZART_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //Mozart functions normally
#define Is_ISP_MOZART_ISP_MOZART_ENABLE_soft_reset_B_0x1() (p_ISP_MOZART_IP->ISP_MOZART_ENABLE.ISP_MOZART_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_MOZART_ISP_MOZART_ENABLE_soft_reset__B_0x1() (p_ISP_MOZART_IP->ISP_MOZART_ENABLE.ISP_MOZART_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //All outputs are assigned reset value (And, as soon as soft_reset is again made 0, it switches to normal functional mode without waiting for start of frame)
#define Set_ISP_MOZART_ISP_MOZART_ENABLE(enable_mozart,soft_reset) (p_ISP_MOZART_IP->ISP_MOZART_ENABLE.word = (uint32_t)enable_mozart<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_MOZART_ISP_MOZART_ENABLE()    p_ISP_MOZART_IP->ISP_MOZART_ENABLE.word
#define Set_ISP_MOZART_ISP_MOZART_ENABLE_word(x) (p_ISP_MOZART_IP->ISP_MOZART_ENABLE.word = x)


//ISP_MOZART_VERSION


#define Get_ISP_MOZART_ISP_MOZART_VERSION_status_version() p_ISP_MOZART_IP->ISP_MOZART_VERSION.ISP_MOZART_VERSION_ts.status_version


#define Get_ISP_MOZART_ISP_MOZART_VERSION_status_state() p_ISP_MOZART_IP->ISP_MOZART_VERSION.ISP_MOZART_VERSION_ts.status_state


#define Get_ISP_MOZART_ISP_MOZART_VERSION_patch_version() p_ISP_MOZART_IP->ISP_MOZART_VERSION.ISP_MOZART_VERSION_ts.patch_version


#define Get_ISP_MOZART_ISP_MOZART_VERSION_minor_version() p_ISP_MOZART_IP->ISP_MOZART_VERSION.ISP_MOZART_VERSION_ts.minor_version


#define Get_ISP_MOZART_ISP_MOZART_VERSION_major_version() p_ISP_MOZART_IP->ISP_MOZART_VERSION.ISP_MOZART_VERSION_ts.major_version
#define Get_ISP_MOZART_ISP_MOZART_VERSION_word() p_ISP_MOZART_IP->ISP_MOZART_VERSION.word
//add get version for whole word



//ISP_MOZART_CHROMA_AA


#define Get_ISP_MOZART_ISP_MOZART_CHROMA_AA_chroma_aa_promoter() p_ISP_MOZART_IP->ISP_MOZART_CHROMA_AA.ISP_MOZART_CHROMA_AA_ts.chroma_aa_promoter
#define Set_ISP_MOZART_ISP_MOZART_CHROMA_AA_chroma_aa_promoter(x) (p_ISP_MOZART_IP->ISP_MOZART_CHROMA_AA.ISP_MOZART_CHROMA_AA_ts.chroma_aa_promoter = x)
#define Set_ISP_MOZART_ISP_MOZART_CHROMA_AA(chroma_aa_promoter) (p_ISP_MOZART_IP->ISP_MOZART_CHROMA_AA.word = (uint32_t)chroma_aa_promoter<<0)
#define Get_ISP_MOZART_ISP_MOZART_CHROMA_AA() p_ISP_MOZART_IP->ISP_MOZART_CHROMA_AA.word
#define Set_ISP_MOZART_ISP_MOZART_CHROMA_AA_word(x) (p_ISP_MOZART_IP->ISP_MOZART_CHROMA_AA.word = x)
#define Get_ISP_MOZART_ISP_MOZART_CHROMA_AA_chroma_anti_aliasing() p_ISP_MOZART_IP->ISP_MOZART_CHROMA_AA.SP_MOZART_CHROMA_AA_ts.chroma_anti_aliasing
#define Set_ISP_MOZART_ISP_MOZART_CHROMA_AA_chroma_anti_aliasing(chroma_aa) (p_ISP_MOZART_IP->ISP_MOZART_CHROMA_AA.ISP_MOZART_CHROMA_AA_ts.chroma_anti_aliasing = (0x3f & chroma_aa))
//#define Set_ISP_MOZART_ISP_MOZART_ENABLE_word(x) (p_ISP_MOZART_IP->ISP_MOZART_ENABLE.word = x)

//ISP_MOZART_M_SB_PEAKER

#define Get_ISP_MOZART_ISP_MOZART_M_SB_PEAKER_m_sb_peaker() p_ISP_MOZART_IP->ISP_MOZART_M_SB_PEAKER.ISP_MOZART_M_SB_PEAKER_ts.m_sb_peaker
#define Set_ISP_MOZART_ISP_MOZART_M_SB_PEAKER_m_sb_peaker(mid_sb_peaker) (p_ISP_MOZART_IP->ISP_MOZART_M_SB_PEAKER.ISP_MOZART_M_SB_PEAKER_ts.m_sb_peaker = (0x2ff & mid_sb_peaker))
#define Set_ISP_MOZART_ISP_MOZART_M_SB_PEAKER(m_sb_peaker) (p_ISP_MOZART_IP->ISP_MOZART_M_SB_PEAKER.word = (uint32_t)m_sb_peaker<<0)
#define Get_ISP_MOZART_ISP_MOZART_M_SB_PEAKER() p_ISP_MOZART_IP->ISP_MOZART_M_SB_PEAKER.word
#define Set_ISP_MOZART_ISP_MOZART_M_SB_PEAKER_word(x) (p_ISP_MOZART_IP->ISP_MOZART_M_SB_PEAKER.word = x)


//ISP_MOZART_H_SB_PEAKER

#define Get_ISP_MOZART_ISP_MOZART_H_SB_PEAKER_h_sb_peaker() p_ISP_MOZART_IP->ISP_MOZART_H_SB_PEAKER.ISP_MOZART_H_SB_PEAKER_ts.h_sb_peaker
#define Set_ISP_MOZART_ISP_MOZART_H_SB_PEAKER_h_sb_peaker(high_sb_peaker) (p_ISP_MOZART_IP->ISP_MOZART_H_SB_PEAKER.ISP_MOZART_H_SB_PEAKER_ts.h_sb_peaker = (0x2ff & high_sb_peaker))
#define Set_ISP_MOZART_ISP_MOZART_H_SB_PEAKER(h_sb_peaker) (p_ISP_MOZART_IP->ISP_MOZART_H_SB_PEAKER.word = (uint32_t)h_sb_peaker<<0)
#define Get_ISP_MOZART_ISP_MOZART_H_SB_PEAKER() p_ISP_MOZART_IP->ISP_MOZART_H_SB_PEAKER.word
#define Set_ISP_MOZART_ISP_MOZART_H_SB_PEAKER_word(x) (p_ISP_MOZART_IP->ISP_MOZART_H_SB_PEAKER.word = x)


//ISP_MOZART_M_SB_CORING_GAIN

#define Get_ISP_MOZART_ISP_MOZART_M_SB_CORING_GAIN_m_sb_coring_gain() p_ISP_MOZART_IP->ISP_MOZART_M_SB_CORING_GAIN.ISP_MOZART_M_SB_CORING_GAIN_ts.m_sb_coring_gain
#define Set_ISP_MOZART_ISP_MOZART_M_SB_CORING_GAIN_m_sb_coring_gain(mid_sb_coring_gain) (p_ISP_MOZART_IP->ISP_MOZART_M_SB_CORING_GAIN.ISP_MOZART_M_SB_CORING_GAIN_ts.m_sb_coring_gain = (0x2ff & mid_sb_coring_gain))
#define Set_ISP_MOZART_ISP_MOZART_M_SB_CORING_GAIN(m_sb_coring_gain) (p_ISP_MOZART_IP->ISP_MOZART_M_SB_CORING_GAIN.word = (uint32_t)m_sb_coring_gain<<0)
#define Get_ISP_MOZART_ISP_MOZART_M_SB_CORING_GAIN() p_ISP_MOZART_IP->ISP_MOZART_M_SB_CORING_GAIN.word
#define Set_ISP_MOZART_ISP_MOZART_M_SB_CORING_GAIN_word(x) (p_ISP_MOZART_IP->ISP_MOZART_M_SB_CORING_GAIN.word = x)


//ISP_MOZART_H_SB_CORING_GAIN

#define Get_ISP_MOZART_ISP_MOZART_H_SB_CORING_GAIN_h_sb_coring_gain() p_ISP_MOZART_IP->ISP_MOZART_H_SB_CORING_GAIN.ISP_MOZART_H_SB_CORING_GAIN_ts.h_sb_coring_gain
#define Set_ISP_MOZART_ISP_MOZART_H_SB_CORING_GAIN_h_sb_coring_gain(high_sb_coring_gain) (p_ISP_MOZART_IP->ISP_MOZART_H_SB_CORING_GAIN.ISP_MOZART_H_SB_CORING_GAIN_ts.h_sb_coring_gain = (0x2ff & high_sb_coring_gain))
#define Set_ISP_MOZART_ISP_MOZART_H_SB_CORING_GAIN(h_sb_coring_gain) (p_ISP_MOZART_IP->ISP_MOZART_H_SB_CORING_GAIN.word = (uint32_t)h_sb_coring_gain<<0)
#define Get_ISP_MOZART_ISP_MOZART_H_SB_CORING_GAIN() p_ISP_MOZART_IP->ISP_MOZART_H_SB_CORING_GAIN.word
#define Set_ISP_MOZART_ISP_MOZART_H_SB_CORING_GAIN_word(x) (p_ISP_MOZART_IP->ISP_MOZART_H_SB_CORING_GAIN.word = x)

//ISP_MOZART_SB_CORING_MIN


#define Get_ISP_MOZART_ISP_MOZART_SB_CORING_MIN_sb_coring_min() p_ISP_MOZART_IP->ISP_MOZART_SB_CORING_MIN.ISP_MOZART_SB_CORING_MIN_ts.sb_coring_min
#define Set_ISP_MOZART_ISP_MOZART_SB_CORING_MIN_sb_coring_min(sb_coring_min_1) (p_ISP_MOZART_IP->ISP_MOZART_SB_CORING_MIN.ISP_MOZART_SB_CORING_MIN_ts.sb_coring_min =  (sb_coring_min_1))
#define Set_ISP_MOZART_ISP_MOZART_SB_CORING_MIN(sb_coring_min) (p_ISP_MOZART_IP->ISP_MOZART_SB_CORING_MIN.word = (uint32_t)sb_coring_min<<0)
#define Get_ISP_MOZART_ISP_MOZART_SB_CORING_MIN() p_ISP_MOZART_IP->ISP_MOZART_SB_CORING_MIN.word
#define Set_ISP_MOZART_ISP_MOZART_SB_CORING_MIN_word(x) (p_ISP_MOZART_IP->ISP_MOZART_SB_CORING_MIN.word = x)


//ISP_MOZART_COLOR_GAIN

#define Get_ISP_MOZART_ISP_MOZART_COLOR_GAIN_color_gain() p_ISP_MOZART_IP->ISP_MOZART_COLOR_GAIN.ISP_MOZART_COLOR_GAIN_ts.color_gain
#define Set_ISP_MOZART_ISP_MOZART_COLOR_GAIN_color_gain(color_gain_1) (p_ISP_MOZART_IP->ISP_MOZART_COLOR_GAIN.ISP_MOZART_COLOR_GAIN_ts.color_gain = color_gain_1)
#define Set_ISP_MOZART_ISP_MOZART_COLOR_GAIN(color_gain) (p_ISP_MOZART_IP->ISP_MOZART_COLOR_GAIN.word = (uint32_t)color_gain<<0)
#define Get_ISP_MOZART_ISP_MOZART_COLOR_GAIN() p_ISP_MOZART_IP->ISP_MOZART_COLOR_GAIN.word
#define Set_ISP_MOZART_ISP_MOZART_COLOR_GAIN_word(x) (p_ISP_MOZART_IP->ISP_MOZART_COLOR_GAIN.word = x)

//ISP_MOZART_LUMA_GAIN


#define Get_ISP_MOZART_ISP_MOZART_LUMA_GAIN_luma_gain() p_ISP_MOZART_IP->ISP_MOZART_LUMA_GAIN.ISP_MOZART_LUMA_GAIN_ts.luma_gain
#define Set_ISP_MOZART_ISP_MOZART_LUMA_GAIN_luma_gain(luma_gain_1) (p_ISP_MOZART_IP->ISP_MOZART_LUMA_GAIN.ISP_MOZART_LUMA_GAIN_ts.luma_gain = luma_gain_1)
#define Set_ISP_MOZART_ISP_MOZART_LUMA_GAIN(luma_gain) (p_ISP_MOZART_IP->ISP_MOZART_LUMA_GAIN.word = (uint8_t)luma_gain<<0)
#define Get_ISP_MOZART_ISP_MOZART_LUMA_GAIN() p_ISP_MOZART_IP->ISP_MOZART_LUMA_GAIN.word
#define Set_ISP_MOZART_ISP_MOZART_LUMA_GAIN_word(x) (p_ISP_MOZART_IP->ISP_MOZART_LUMA_GAIN.word = x)

//ISP_DMCE_BAYER_LOAD_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_DMCE_BAYER_LOAD_ENABLE_ts;

}ISP_DMCE_BAYER_LOAD_ENABLE_tu;



//ISP_DMCE_BAYER_LOAD_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_DMCE_BAYER_LOAD_SELECT_ts;

}ISP_DMCE_BAYER_LOAD_SELECT_tu;

typedef struct
{
    ISP_DMCE_BAYER_LOAD_ENABLE_tu ISP_DMCE_BAYER_LOAD_ENABLE;
    ISP_DMCE_BAYER_LOAD_SELECT_tu ISP_DMCE_BAYER_LOAD_SELECT;
}ISP_DMCE_BAYER_LOAD_IP_ts;




//ISP_DMCE_BAYER_LOAD_ENABLE


#define Get_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE_mux2to1_enable() p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.ISP_DMCE_BAYER_LOAD_ENABLE_ts.mux2to1_enable
#define Is_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE_mux2to1_enable_DISABLE() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.ISP_DMCE_BAYER_LOAD_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE_mux2to1_enable__DISABLE() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.ISP_DMCE_BAYER_LOAD_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE_mux2to1_enable_ENABLE() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.ISP_DMCE_BAYER_LOAD_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE_mux2to1_enable__ENABLE() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.ISP_DMCE_BAYER_LOAD_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE_mux2to1_soft_reset() p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.ISP_DMCE_BAYER_LOAD_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.ISP_DMCE_BAYER_LOAD_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.ISP_DMCE_BAYER_LOAD_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.ISP_DMCE_BAYER_LOAD_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.ISP_DMCE_BAYER_LOAD_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE() p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.word
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_ENABLE_word(x) (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_ENABLE.word = x)


//ISP_DMCE_BAYER_LOAD_SELECT


#define Get_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT_mux2to1_select() p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.ISP_DMCE_BAYER_LOAD_SELECT_ts.mux2to1_select
#define Is_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT_mux2to1_select_IDP0() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.ISP_DMCE_BAYER_LOAD_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT_mux2to1_select__IDP0() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.ISP_DMCE_BAYER_LOAD_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT_mux2to1_select_IDP1() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.ISP_DMCE_BAYER_LOAD_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT_mux2to1_select__IDP1() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.ISP_DMCE_BAYER_LOAD_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT_mux2to1_shadow_en() p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.ISP_DMCE_BAYER_LOAD_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.ISP_DMCE_BAYER_LOAD_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.ISP_DMCE_BAYER_LOAD_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.ISP_DMCE_BAYER_LOAD_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.ISP_DMCE_BAYER_LOAD_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT() p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.word
#define Set_ISP_DMCE_BAYER_LOAD_ISP_DMCE_BAYER_LOAD_SELECT_word(x) (p_ISP_DMCE_BAYER_LOAD_IP->ISP_DMCE_BAYER_LOAD_SELECT.word = x)

//ISP_DMCE_RGB_LOAD_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_DMCE_RGB_LOAD_ENABLE_ts;

}ISP_DMCE_RGB_LOAD_ENABLE_tu;



//ISP_DMCE_RGB_LOAD_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_DMCE_RGB_LOAD_SELECT_ts;

}ISP_DMCE_RGB_LOAD_SELECT_tu;

typedef struct
{
    ISP_DMCE_RGB_LOAD_ENABLE_tu ISP_DMCE_RGB_LOAD_ENABLE;
    ISP_DMCE_RGB_LOAD_SELECT_tu ISP_DMCE_RGB_LOAD_SELECT;
}ISP_DMCE_RGB_LOAD_IP_ts;




//ISP_DMCE_RGB_LOAD_ENABLE


#define Get_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE_mux2to1_enable() p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.ISP_DMCE_RGB_LOAD_ENABLE_ts.mux2to1_enable
#define Is_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE_mux2to1_enable_DISABLE() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.ISP_DMCE_RGB_LOAD_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE_mux2to1_enable__DISABLE() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.ISP_DMCE_RGB_LOAD_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE_mux2to1_enable_ENABLE() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.ISP_DMCE_RGB_LOAD_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE_mux2to1_enable__ENABLE() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.ISP_DMCE_RGB_LOAD_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE_mux2to1_soft_reset() p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.ISP_DMCE_RGB_LOAD_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.ISP_DMCE_RGB_LOAD_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.ISP_DMCE_RGB_LOAD_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.ISP_DMCE_RGB_LOAD_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.ISP_DMCE_RGB_LOAD_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE() p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.word
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_ENABLE_word(x) (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_ENABLE.word = x)


//ISP_DMCE_RGB_LOAD_SELECT


#define Get_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT_mux2to1_select() p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.ISP_DMCE_RGB_LOAD_SELECT_ts.mux2to1_select
#define Is_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT_mux2to1_select_IDP0() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.ISP_DMCE_RGB_LOAD_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT_mux2to1_select__IDP0() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.ISP_DMCE_RGB_LOAD_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT_mux2to1_select_IDP1() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.ISP_DMCE_RGB_LOAD_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT_mux2to1_select__IDP1() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.ISP_DMCE_RGB_LOAD_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT_mux2to1_shadow_en() p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.ISP_DMCE_RGB_LOAD_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.ISP_DMCE_RGB_LOAD_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.ISP_DMCE_RGB_LOAD_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.ISP_DMCE_RGB_LOAD_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.ISP_DMCE_RGB_LOAD_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT() p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.word
#define Set_ISP_DMCE_RGB_LOAD_ISP_DMCE_RGB_LOAD_SELECT_word(x) (p_ISP_DMCE_RGB_LOAD_IP->ISP_DMCE_RGB_LOAD_SELECT.word = x)

//ISP_DMCE_RGB_STORE_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_DMCE_RGB_STORE_ENABLE_ts;

}ISP_DMCE_RGB_STORE_ENABLE_tu;



//ISP_DMCE_RGB_STORE_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_DMCE_RGB_STORE_SELECT_ts;

}ISP_DMCE_RGB_STORE_SELECT_tu;

typedef struct
{
    ISP_DMCE_RGB_STORE_ENABLE_tu ISP_DMCE_RGB_STORE_ENABLE;
    ISP_DMCE_RGB_STORE_SELECT_tu ISP_DMCE_RGB_STORE_SELECT;
}ISP_DMCE_RGB_STORE_IP_ts;




//ISP_DMCE_RGB_STORE_ENABLE


#define Get_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE_mux2to1_enable() p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.ISP_DMCE_RGB_STORE_ENABLE_ts.mux2to1_enable
#define Is_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE_mux2to1_enable_DISABLE() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.ISP_DMCE_RGB_STORE_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE_mux2to1_enable__DISABLE() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.ISP_DMCE_RGB_STORE_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE_mux2to1_enable_ENABLE() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.ISP_DMCE_RGB_STORE_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE_mux2to1_enable__ENABLE() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.ISP_DMCE_RGB_STORE_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE_mux2to1_soft_reset() p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.ISP_DMCE_RGB_STORE_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.ISP_DMCE_RGB_STORE_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.ISP_DMCE_RGB_STORE_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.ISP_DMCE_RGB_STORE_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.ISP_DMCE_RGB_STORE_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE() p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.word
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_ENABLE_word(x) (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_ENABLE.word = x)


//ISP_DMCE_RGB_STORE_SELECT


#define Get_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT_mux2to1_select() p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.ISP_DMCE_RGB_STORE_SELECT_ts.mux2to1_select
#define Is_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT_mux2to1_select_IDP0() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.ISP_DMCE_RGB_STORE_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT_mux2to1_select__IDP0() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.ISP_DMCE_RGB_STORE_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT_mux2to1_select_IDP1() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.ISP_DMCE_RGB_STORE_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT_mux2to1_select__IDP1() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.ISP_DMCE_RGB_STORE_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT_mux2to1_shadow_en() p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.ISP_DMCE_RGB_STORE_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.ISP_DMCE_RGB_STORE_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.ISP_DMCE_RGB_STORE_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.ISP_DMCE_RGB_STORE_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.ISP_DMCE_RGB_STORE_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT() p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.word
#define Set_ISP_DMCE_RGB_STORE_ISP_DMCE_RGB_STORE_SELECT_word(x) (p_ISP_DMCE_RGB_STORE_IP->ISP_DMCE_RGB_STORE_SELECT.word = x)

//ISP_CHANNELMERGE_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t channel_merge_enable :1;
        /* Disable channel_merge module*/
        uint8_t reserved0 :3;
        uint8_t channel_merge_soft_reset :1;
    }ISP_CHANNELMERGE_ENABLE_ts;

}ISP_CHANNELMERGE_ENABLE_tu;



//ISP_CHANNELMERGE_HSIZE
/*Description: Indicate to hardware how many pixel will be received by line
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t channel_merge_hsize :14;
    }ISP_CHANNELMERGE_HSIZE_ts;

}ISP_CHANNELMERGE_HSIZE_tu;

typedef struct
{
    ISP_CHANNELMERGE_ENABLE_tu ISP_CHANNELMERGE_ENABLE;
    ISP_CHANNELMERGE_HSIZE_tu ISP_CHANNELMERGE_HSIZE;
}ISP_CHANNELMERGE_IP_ts;




//ISP_CHANNELMERGE_ENABLE


#define Get_ISP_CHANNELMERGE_ISP_CHANNELMERGE_ENABLE_channel_merge_enable() p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_ENABLE.ISP_CHANNELMERGE_ENABLE_ts.channel_merge_enable
#define Is_ISP_CHANNELMERGE_ISP_CHANNELMERGE_ENABLE_channel_merge_enable_DISABLE() (p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_ENABLE.ISP_CHANNELMERGE_ENABLE_ts.channel_merge_enable == channel_merge_enable_DISABLE)
#define Set_ISP_CHANNELMERGE_ISP_CHANNELMERGE_ENABLE_channel_merge_enable__DISABLE() (p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_ENABLE.ISP_CHANNELMERGE_ENABLE_ts.channel_merge_enable = channel_merge_enable_DISABLE)
#define channel_merge_enable_DISABLE 0x0    //Disable channel_merge module
#define Is_ISP_CHANNELMERGE_ISP_CHANNELMERGE_ENABLE_channel_merge_enable_ENABLE() (p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_ENABLE.ISP_CHANNELMERGE_ENABLE_ts.channel_merge_enable == channel_merge_enable_ENABLE)
#define Set_ISP_CHANNELMERGE_ISP_CHANNELMERGE_ENABLE_channel_merge_enable__ENABLE() (p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_ENABLE.ISP_CHANNELMERGE_ENABLE_ts.channel_merge_enable = channel_merge_enable_ENABLE)
#define channel_merge_enable_ENABLE 0x1    //Enable channel_merge module


#define Get_ISP_CHANNELMERGE_ISP_CHANNELMERGE_ENABLE_channel_merge_soft_reset() p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_ENABLE.ISP_CHANNELMERGE_ENABLE_ts.channel_merge_soft_reset
#define Set_ISP_CHANNELMERGE_ISP_CHANNELMERGE_ENABLE_channel_merge_soft_reset(x) (p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_ENABLE.ISP_CHANNELMERGE_ENABLE_ts.channel_merge_soft_reset = x)
#define Set_ISP_CHANNELMERGE_ISP_CHANNELMERGE_ENABLE(channel_merge_enable,channel_merge_soft_reset) (p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_ENABLE.word = (uint32_t)channel_merge_enable<<0 | (uint32_t)channel_merge_soft_reset<<4)
#define Get_ISP_CHANNELMERGE_ISP_CHANNELMERGE_ENABLE() p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_ENABLE.word
#define Set_ISP_CHANNELMERGE_ISP_CHANNELMERGE_ENABLE_word(x) (p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_ENABLE.word = x)


//ISP_CHANNELMERGE_HSIZE


#define Get_ISP_CHANNELMERGE_ISP_CHANNELMERGE_HSIZE_channel_merge_hsize() p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_HSIZE.ISP_CHANNELMERGE_HSIZE_ts.channel_merge_hsize
#define Set_ISP_CHANNELMERGE_ISP_CHANNELMERGE_HSIZE_channel_merge_hsize(x) (p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_HSIZE.ISP_CHANNELMERGE_HSIZE_ts.channel_merge_hsize = x)
#define Set_ISP_CHANNELMERGE_ISP_CHANNELMERGE_HSIZE(channel_merge_hsize) (p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_HSIZE.word = (uint16_t)channel_merge_hsize<<0)
#define Get_ISP_CHANNELMERGE_ISP_CHANNELMERGE_HSIZE() p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_HSIZE.word
#define Set_ISP_CHANNELMERGE_ISP_CHANNELMERGE_HSIZE_word(x) (p_ISP_CHANNELMERGE_IP->ISP_CHANNELMERGE_HSIZE.word = x)

//ISP_DMCE_MUX_DEMOSAIC_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_DMCE_MUX_DEMOSAIC_ENABLE_ts;

}ISP_DMCE_MUX_DEMOSAIC_ENABLE_tu;



//ISP_DMCE_MUX_DEMOSAIC_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_DMCE_MUX_DEMOSAIC_SELECT_ts;

}ISP_DMCE_MUX_DEMOSAIC_SELECT_tu;

typedef struct
{
    ISP_DMCE_MUX_DEMOSAIC_ENABLE_tu ISP_DMCE_MUX_DEMOSAIC_ENABLE;
    ISP_DMCE_MUX_DEMOSAIC_SELECT_tu ISP_DMCE_MUX_DEMOSAIC_SELECT;
}ISP_DMCE_MUX_DEMOSAIC_IP_ts;




//ISP_DMCE_MUX_DEMOSAIC_ENABLE


#define Get_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE_mux2to1_enable() p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.ISP_DMCE_MUX_DEMOSAIC_ENABLE_ts.mux2to1_enable
#define Is_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE_mux2to1_enable_DISABLE() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.ISP_DMCE_MUX_DEMOSAIC_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE_mux2to1_enable__DISABLE() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.ISP_DMCE_MUX_DEMOSAIC_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE_mux2to1_enable_ENABLE() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.ISP_DMCE_MUX_DEMOSAIC_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE_mux2to1_enable__ENABLE() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.ISP_DMCE_MUX_DEMOSAIC_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE_mux2to1_soft_reset() p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.ISP_DMCE_MUX_DEMOSAIC_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.ISP_DMCE_MUX_DEMOSAIC_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.ISP_DMCE_MUX_DEMOSAIC_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.ISP_DMCE_MUX_DEMOSAIC_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.ISP_DMCE_MUX_DEMOSAIC_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE() p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.word
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_ENABLE_word(x) (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_ENABLE.word = x)


//ISP_DMCE_MUX_DEMOSAIC_SELECT


#define Get_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT_mux2to1_select() p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.ISP_DMCE_MUX_DEMOSAIC_SELECT_ts.mux2to1_select
#define Is_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT_mux2to1_select_IDP0() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.ISP_DMCE_MUX_DEMOSAIC_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT_mux2to1_select__IDP0() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.ISP_DMCE_MUX_DEMOSAIC_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT_mux2to1_select_IDP1() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.ISP_DMCE_MUX_DEMOSAIC_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT_mux2to1_select__IDP1() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.ISP_DMCE_MUX_DEMOSAIC_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT_mux2to1_shadow_en() p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.ISP_DMCE_MUX_DEMOSAIC_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.ISP_DMCE_MUX_DEMOSAIC_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.ISP_DMCE_MUX_DEMOSAIC_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.ISP_DMCE_MUX_DEMOSAIC_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.ISP_DMCE_MUX_DEMOSAIC_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT() p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.word
#define Set_ISP_DMCE_MUX_DEMOSAIC_ISP_DMCE_MUX_DEMOSAIC_SELECT_word(x) (p_ISP_DMCE_MUX_DEMOSAIC_IP->ISP_DMCE_MUX_DEMOSAIC_SELECT.word = x)

//ISP_LINE_BURSTY_ELIM_ENABLE
/*Description: line_blk_elim Control Register. When the module is disable, is mean clk from-end and clock Back-end have the same frequency whith different phase only, so data are transfert from input to output with simple asyncronous mecanism
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t line_blk_elim_enable :1;
        /* Disable line_blk_elim module*/
        uint8_t reserved0 :3;
        uint8_t line_blk_elim_soft_reset :1;
        /* Disable line_blk_elim_soft_reset module*/
    }ISP_LINE_BURSTY_ELIM_ENABLE_ts;

}ISP_LINE_BURSTY_ELIM_ENABLE_tu;



//ISP_LINE_BURSTY_ELIM_DFV
/*Description: Design for verification register, use to verify interrupt.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t line_blk_elim_dfv_enable :1;
        /* Disable DFV for Line Blanking Elimination module*/
        uint8_t line_blk_elim_dfv_interrupt_ctrl :1;
        /* When the register value change, interrupt is set to activ*/
    }ISP_LINE_BURSTY_ELIM_DFV_ts;

}ISP_LINE_BURSTY_ELIM_DFV_tu;



//ISP_LINE_BURSTY_ELIM_H_SIZE
/*Description: H-size control register. When clk_0 and clk_1 are different, hsize have to program by firmware to inform the read out state machine where is the last data into lines.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_blk_elim_h_size :14;
        /* Horizontal size.*/
    }ISP_LINE_BURSTY_ELIM_H_SIZE_ts;

}ISP_LINE_BURSTY_ELIM_H_SIZE_tu;



//ISP_LINE_BURSTY_ELIM_READ_START
/*Description: Define the value of memory address index to start reading data to output transfert
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t line_blk_elim_read_start :14;
        /* Memory index to start reading.Minimum value must be 8*/
    }ISP_LINE_BURSTY_ELIM_READ_START_ts;

}ISP_LINE_BURSTY_ELIM_READ_START_tu;

typedef struct
{
    ISP_LINE_BURSTY_ELIM_ENABLE_tu ISP_LINE_BURSTY_ELIM_ENABLE;
    ISP_LINE_BURSTY_ELIM_DFV_tu ISP_LINE_BURSTY_ELIM_DFV;
    ISP_LINE_BURSTY_ELIM_H_SIZE_tu ISP_LINE_BURSTY_ELIM_H_SIZE;
    ISP_LINE_BURSTY_ELIM_READ_START_tu ISP_LINE_BURSTY_ELIM_READ_START;
}ISP_LINE_BURSTY_ELIM_IP_ts;




//ISP_LINE_BURSTY_ELIM_ENABLE


#define Get_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE_line_blk_elim_enable() p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.ISP_LINE_BURSTY_ELIM_ENABLE_ts.line_blk_elim_enable
#define Is_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE_line_blk_elim_enable_DISABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.ISP_LINE_BURSTY_ELIM_ENABLE_ts.line_blk_elim_enable == line_blk_elim_enable_DISABLE)
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE_line_blk_elim_enable__DISABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.ISP_LINE_BURSTY_ELIM_ENABLE_ts.line_blk_elim_enable = line_blk_elim_enable_DISABLE)
#define line_blk_elim_enable_DISABLE 0x0    //Disable line_blk_elim module
#define Is_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE_line_blk_elim_enable_ENABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.ISP_LINE_BURSTY_ELIM_ENABLE_ts.line_blk_elim_enable == line_blk_elim_enable_ENABLE)
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE_line_blk_elim_enable__ENABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.ISP_LINE_BURSTY_ELIM_ENABLE_ts.line_blk_elim_enable = line_blk_elim_enable_ENABLE)
#define line_blk_elim_enable_ENABLE 0x1    //Enable line_blk_elim module


#define Get_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE_line_blk_elim_soft_reset() p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.ISP_LINE_BURSTY_ELIM_ENABLE_ts.line_blk_elim_soft_reset
#define Is_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE_line_blk_elim_soft_reset_DISABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.ISP_LINE_BURSTY_ELIM_ENABLE_ts.line_blk_elim_soft_reset == line_blk_elim_soft_reset_DISABLE)
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE_line_blk_elim_soft_reset__DISABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.ISP_LINE_BURSTY_ELIM_ENABLE_ts.line_blk_elim_soft_reset = line_blk_elim_soft_reset_DISABLE)
#define line_blk_elim_soft_reset_DISABLE 0x0    //Disable line_blk_elim_soft_reset module
#define Is_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE_line_blk_elim_soft_reset_ENABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.ISP_LINE_BURSTY_ELIM_ENABLE_ts.line_blk_elim_soft_reset == line_blk_elim_soft_reset_ENABLE)
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE_line_blk_elim_soft_reset__ENABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.ISP_LINE_BURSTY_ELIM_ENABLE_ts.line_blk_elim_soft_reset = line_blk_elim_soft_reset_ENABLE)
#define line_blk_elim_soft_reset_ENABLE 0x1    //Enable line_blk_elim_soft_reset module
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE(line_blk_elim_enable,line_blk_elim_soft_reset) (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.word = (uint32_t)line_blk_elim_enable<<0 | (uint32_t)line_blk_elim_soft_reset<<4)
#define Get_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE() p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.word
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_ENABLE_word(x) (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_ENABLE.word = x)


//ISP_LINE_BURSTY_ELIM_DFV


#define Get_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_DFV_line_blk_elim_dfv_enable() p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_DFV.ISP_LINE_BURSTY_ELIM_DFV_ts.line_blk_elim_dfv_enable
#define Is_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_DFV_line_blk_elim_dfv_enable_DISABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_DFV.ISP_LINE_BURSTY_ELIM_DFV_ts.line_blk_elim_dfv_enable == line_blk_elim_dfv_enable_DISABLE)
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_DFV_line_blk_elim_dfv_enable__DISABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_DFV.ISP_LINE_BURSTY_ELIM_DFV_ts.line_blk_elim_dfv_enable = line_blk_elim_dfv_enable_DISABLE)
#define line_blk_elim_dfv_enable_DISABLE 0x0    //Disable DFV for Line Blanking Elimination module
#define Is_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_DFV_line_blk_elim_dfv_enable_ENABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_DFV.ISP_LINE_BURSTY_ELIM_DFV_ts.line_blk_elim_dfv_enable == line_blk_elim_dfv_enable_ENABLE)
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_DFV_line_blk_elim_dfv_enable__ENABLE() (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_DFV.ISP_LINE_BURSTY_ELIM_DFV_ts.line_blk_elim_dfv_enable = line_blk_elim_dfv_enable_ENABLE)
#define line_blk_elim_dfv_enable_ENABLE 0x1    //Enable DFV for Line Blanking Elimination module


#define Get_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_DFV_line_blk_elim_dfv_interrupt_ctrl() p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_DFV.ISP_LINE_BURSTY_ELIM_DFV_ts.line_blk_elim_dfv_interrupt_ctrl
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_DFV_line_blk_elim_dfv_interrupt_ctrl(x) (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_DFV.ISP_LINE_BURSTY_ELIM_DFV_ts.line_blk_elim_dfv_interrupt_ctrl = x)
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_DFV(line_blk_elim_dfv_enable,line_blk_elim_dfv_interrupt_ctrl) (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_DFV.word = (uint32_t)line_blk_elim_dfv_enable<<0 | (uint32_t)line_blk_elim_dfv_interrupt_ctrl<<1)
#define Get_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_DFV() p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_DFV.word
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_DFV_word(x) (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_DFV.word = x)


//ISP_LINE_BURSTY_ELIM_H_SIZE


#define Get_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_H_SIZE_line_blk_elim_h_size() p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_H_SIZE.ISP_LINE_BURSTY_ELIM_H_SIZE_ts.line_blk_elim_h_size
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_H_SIZE_line_blk_elim_h_size(x) (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_H_SIZE.ISP_LINE_BURSTY_ELIM_H_SIZE_ts.line_blk_elim_h_size = x)
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_H_SIZE(line_blk_elim_h_size) (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_H_SIZE.word = (uint32_t)line_blk_elim_h_size<<0)
#define Get_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_H_SIZE() p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_H_SIZE.word
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_H_SIZE_word(x) (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_H_SIZE.word = x)


//ISP_LINE_BURSTY_ELIM_READ_START


#define Get_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_READ_START_line_blk_elim_read_start() p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_READ_START.ISP_LINE_BURSTY_ELIM_READ_START_ts.line_blk_elim_read_start
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_READ_START_line_blk_elim_read_start(x) (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_READ_START.ISP_LINE_BURSTY_ELIM_READ_START_ts.line_blk_elim_read_start = x)
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_READ_START(line_blk_elim_read_start) (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_READ_START.word = (uint16_t)line_blk_elim_read_start<<0)
#define Get_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_READ_START() p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_READ_START.word
#define Set_ISP_LINE_BURSTY_ELIM_ISP_LINE_BURSTY_ELIM_READ_START_word(x) (p_ISP_LINE_BURSTY_ELIM_IP->ISP_LINE_BURSTY_ELIM_READ_START.word = x)

//ISP_CE0_IDP_GATE_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE0_IDP_GATE_ENABLE_ts;

}ISP_CE0_IDP_GATE_ENABLE_tu;



//ISP_CE0_IDP_GATE_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE0_IDP_GATE_SELECT_ts;

}ISP_CE0_IDP_GATE_SELECT_tu;

typedef struct
{
    ISP_CE0_IDP_GATE_ENABLE_tu ISP_CE0_IDP_GATE_ENABLE;
    ISP_CE0_IDP_GATE_SELECT_tu ISP_CE0_IDP_GATE_SELECT;
}ISP_CE0_IDP_GATE_IP_ts;




//ISP_CE0_IDP_GATE_ENABLE


#define Get_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE_mux2to1_enable() p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.ISP_CE0_IDP_GATE_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.ISP_CE0_IDP_GATE_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.ISP_CE0_IDP_GATE_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.ISP_CE0_IDP_GATE_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.ISP_CE0_IDP_GATE_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE_mux2to1_soft_reset() p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.ISP_CE0_IDP_GATE_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.ISP_CE0_IDP_GATE_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.ISP_CE0_IDP_GATE_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.ISP_CE0_IDP_GATE_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.ISP_CE0_IDP_GATE_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE() p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.word
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_ENABLE_word(x) (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_ENABLE.word = x)


//ISP_CE0_IDP_GATE_SELECT


#define Get_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT_mux2to1_select() p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.ISP_CE0_IDP_GATE_SELECT_ts.mux2to1_select
#define Is_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT_mux2to1_select_IDP0() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.ISP_CE0_IDP_GATE_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT_mux2to1_select__IDP0() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.ISP_CE0_IDP_GATE_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT_mux2to1_select_IDP1() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.ISP_CE0_IDP_GATE_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT_mux2to1_select__IDP1() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.ISP_CE0_IDP_GATE_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT_mux2to1_shadow_en() p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.ISP_CE0_IDP_GATE_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.ISP_CE0_IDP_GATE_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.ISP_CE0_IDP_GATE_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.ISP_CE0_IDP_GATE_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.ISP_CE0_IDP_GATE_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT() p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.word
#define Set_ISP_CE0_IDP_GATE_ISP_CE0_IDP_GATE_SELECT_word(x) (p_ISP_CE0_IDP_GATE_IP->ISP_CE0_IDP_GATE_SELECT.word = x)

//ISP_CE0_CROP_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t crop_enable :1;
        /* Disable Crop module*/
        uint8_t reserved0 :3;
        uint8_t crop_soft_reset :1;
        /* cropper soft reset disable*/
    }ISP_CE0_CROP_ENABLE_ts;

}ISP_CE0_CROP_ENABLE_tu;



//ISP_CE0_CROP_SOF_RETIMING
/*Description: Enable the retiming option of start of frame tag. With this option the line delay between SOF and ACTIV in output will be same as input.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t crop_sof_retiming :1;
        /* Disable the SOF retiming*/
    }ISP_CE0_CROP_SOF_RETIMING_ts;

}ISP_CE0_CROP_SOF_RETIMING_tu;



//ISP_CE0_CROP_SHADOW_CROPS
/*Description: Enable shadow registers for H/V start and H/V size on START OF FRAME
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t crop_shadow_crops :1;
    }ISP_CE0_CROP_SHADOW_CROPS_ts;

}ISP_CE0_CROP_SHADOW_CROPS_tu;



//ISP_CE0_CROP_H_START
/*Description: crop_h_start define the horizontal start point of the crop area.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_h_start :13;
    }ISP_CE0_CROP_H_START_ts;

}ISP_CE0_CROP_H_START_tu;



//ISP_CE0_CROP_V_START
/*Description: crop_v_start define the vertical start point of the crop area
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_v_start :13;
    }ISP_CE0_CROP_V_START_ts;

}ISP_CE0_CROP_V_START_tu;



//ISP_CE0_CROP_H_SIZE
/*Description: crop_v_size define the horizontal size of the crop area
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_h_size :13;
    }ISP_CE0_CROP_H_SIZE_ts;

}ISP_CE0_CROP_H_SIZE_tu;



//ISP_CE0_CROP_V_SIZE
/*Description: crop_v_size define the vertical size of the crop area
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_v_size :13;
    }ISP_CE0_CROP_V_SIZE_ts;

}ISP_CE0_CROP_V_SIZE_tu;



//ISP_CE0_CROP_IACTIVE_PIXS
/*Description: crop_iactive_pixs define the horizontal number of actives pixels in the input frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_iactive_pixs :13;
    }ISP_CE0_CROP_IACTIVE_PIXS_ts;

}ISP_CE0_CROP_IACTIVE_PIXS_tu;



//ISP_CE0_CROP_IACTIVE_LINES
/*Description: crop_iactive_lines define the vertical number of lines in the input frame
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_iactive_lines :13;
    }ISP_CE0_CROP_IACTIVE_LINES_ts;

}ISP_CE0_CROP_IACTIVE_LINES_tu;

typedef struct
{
    ISP_CE0_CROP_ENABLE_tu ISP_CE0_CROP_ENABLE;
    ISP_CE0_CROP_SOF_RETIMING_tu ISP_CE0_CROP_SOF_RETIMING;
    ISP_CE0_CROP_SHADOW_CROPS_tu ISP_CE0_CROP_SHADOW_CROPS;
    ISP_CE0_CROP_H_START_tu ISP_CE0_CROP_H_START;
    ISP_CE0_CROP_V_START_tu ISP_CE0_CROP_V_START;
    ISP_CE0_CROP_H_SIZE_tu ISP_CE0_CROP_H_SIZE;
    ISP_CE0_CROP_V_SIZE_tu ISP_CE0_CROP_V_SIZE;
    ISP_CE0_CROP_IACTIVE_PIXS_tu ISP_CE0_CROP_IACTIVE_PIXS;
    ISP_CE0_CROP_IACTIVE_LINES_tu ISP_CE0_CROP_IACTIVE_LINES;
}ISP_CE0_CROP_IP_ts;




//ISP_CE0_CROP_ENABLE


#define Get_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE_crop_enable() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.ISP_CE0_CROP_ENABLE_ts.crop_enable
#define Is_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE_crop_enable_DISABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.ISP_CE0_CROP_ENABLE_ts.crop_enable == crop_enable_DISABLE)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE_crop_enable__DISABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.ISP_CE0_CROP_ENABLE_ts.crop_enable = crop_enable_DISABLE)
#define crop_enable_DISABLE 0x0    //Disable Crop module
#define Is_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE_crop_enable_ENABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.ISP_CE0_CROP_ENABLE_ts.crop_enable == crop_enable_ENABLE)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE_crop_enable__ENABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.ISP_CE0_CROP_ENABLE_ts.crop_enable = crop_enable_ENABLE)
#define crop_enable_ENABLE 0x1    //Enable Cropmodule


#define Get_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE_crop_soft_reset() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.ISP_CE0_CROP_ENABLE_ts.crop_soft_reset
#define Is_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE_crop_soft_reset_SOFT_RST_DISABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.ISP_CE0_CROP_ENABLE_ts.crop_soft_reset == crop_soft_reset_SOFT_RST_DISABLE)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE_crop_soft_reset__SOFT_RST_DISABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.ISP_CE0_CROP_ENABLE_ts.crop_soft_reset = crop_soft_reset_SOFT_RST_DISABLE)
#define crop_soft_reset_SOFT_RST_DISABLE 0x0    //cropper soft reset disable
#define Is_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE_crop_soft_reset_SOFT_RST_ENABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.ISP_CE0_CROP_ENABLE_ts.crop_soft_reset == crop_soft_reset_SOFT_RST_ENABLE)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE_crop_soft_reset__SOFT_RST_ENABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.ISP_CE0_CROP_ENABLE_ts.crop_soft_reset = crop_soft_reset_SOFT_RST_ENABLE)
#define crop_soft_reset_SOFT_RST_ENABLE 0x1    //cropper soft reset enable
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE(crop_enable,crop_soft_reset) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.word = (uint32_t)crop_enable<<0 | (uint32_t)crop_soft_reset<<4)
#define Get_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.word
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_ENABLE_word(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_ENABLE.word = x)


//ISP_CE0_CROP_SOF_RETIMING


#define Get_ISP_CE0_CROP_ISP_CE0_CROP_SOF_RETIMING_crop_sof_retiming() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SOF_RETIMING.ISP_CE0_CROP_SOF_RETIMING_ts.crop_sof_retiming
#define Is_ISP_CE0_CROP_ISP_CE0_CROP_SOF_RETIMING_crop_sof_retiming_DISABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SOF_RETIMING.ISP_CE0_CROP_SOF_RETIMING_ts.crop_sof_retiming == crop_sof_retiming_DISABLE)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_SOF_RETIMING_crop_sof_retiming__DISABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SOF_RETIMING.ISP_CE0_CROP_SOF_RETIMING_ts.crop_sof_retiming = crop_sof_retiming_DISABLE)
#define crop_sof_retiming_DISABLE 0x0    //Disable the SOF retiming
#define Is_ISP_CE0_CROP_ISP_CE0_CROP_SOF_RETIMING_crop_sof_retiming_ENABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SOF_RETIMING.ISP_CE0_CROP_SOF_RETIMING_ts.crop_sof_retiming == crop_sof_retiming_ENABLE)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_SOF_RETIMING_crop_sof_retiming__ENABLE() (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SOF_RETIMING.ISP_CE0_CROP_SOF_RETIMING_ts.crop_sof_retiming = crop_sof_retiming_ENABLE)
#define crop_sof_retiming_ENABLE 0x1    //Enable the SOF retiming
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_SOF_RETIMING(crop_sof_retiming) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SOF_RETIMING.word = (uint32_t)crop_sof_retiming<<0)
#define Get_ISP_CE0_CROP_ISP_CE0_CROP_SOF_RETIMING() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SOF_RETIMING.word
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_SOF_RETIMING_word(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SOF_RETIMING.word = x)


//ISP_CE0_CROP_SHADOW_CROPS


#define Get_ISP_CE0_CROP_ISP_CE0_CROP_SHADOW_CROPS_crop_shadow_crops() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SHADOW_CROPS.ISP_CE0_CROP_SHADOW_CROPS_ts.crop_shadow_crops
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_SHADOW_CROPS_crop_shadow_crops(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SHADOW_CROPS.ISP_CE0_CROP_SHADOW_CROPS_ts.crop_shadow_crops = x)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_SHADOW_CROPS(crop_shadow_crops) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SHADOW_CROPS.word = (uint32_t)crop_shadow_crops<<0)
#define Get_ISP_CE0_CROP_ISP_CE0_CROP_SHADOW_CROPS() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SHADOW_CROPS.word
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_SHADOW_CROPS_word(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_SHADOW_CROPS.word = x)


//ISP_CE0_CROP_H_START


#define Get_ISP_CE0_CROP_ISP_CE0_CROP_H_START_crop_h_start() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_H_START.ISP_CE0_CROP_H_START_ts.crop_h_start
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_H_START_crop_h_start(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_H_START.ISP_CE0_CROP_H_START_ts.crop_h_start = x)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_H_START(crop_h_start) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_H_START.word = (uint32_t)crop_h_start<<0)
#define Get_ISP_CE0_CROP_ISP_CE0_CROP_H_START() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_H_START.word
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_H_START_word(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_H_START.word = x)


//ISP_CE0_CROP_V_START


#define Get_ISP_CE0_CROP_ISP_CE0_CROP_V_START_crop_v_start() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_V_START.ISP_CE0_CROP_V_START_ts.crop_v_start
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_V_START_crop_v_start(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_V_START.ISP_CE0_CROP_V_START_ts.crop_v_start = x)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_V_START(crop_v_start) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_V_START.word = (uint32_t)crop_v_start<<0)
#define Get_ISP_CE0_CROP_ISP_CE0_CROP_V_START() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_V_START.word
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_V_START_word(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_V_START.word = x)


//ISP_CE0_CROP_H_SIZE


#define Get_ISP_CE0_CROP_ISP_CE0_CROP_H_SIZE_crop_h_size() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_H_SIZE.ISP_CE0_CROP_H_SIZE_ts.crop_h_size
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_H_SIZE_crop_h_size(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_H_SIZE.ISP_CE0_CROP_H_SIZE_ts.crop_h_size = x)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_H_SIZE(crop_h_size) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_H_SIZE.word = (uint32_t)crop_h_size<<0)
#define Get_ISP_CE0_CROP_ISP_CE0_CROP_H_SIZE() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_H_SIZE.word
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_H_SIZE_word(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_H_SIZE.word = x)


//ISP_CE0_CROP_V_SIZE


#define Get_ISP_CE0_CROP_ISP_CE0_CROP_V_SIZE_crop_v_size() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_V_SIZE.ISP_CE0_CROP_V_SIZE_ts.crop_v_size
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_V_SIZE_crop_v_size(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_V_SIZE.ISP_CE0_CROP_V_SIZE_ts.crop_v_size = x)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_V_SIZE(crop_v_size) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_V_SIZE.word = (uint32_t)crop_v_size<<0)
#define Get_ISP_CE0_CROP_ISP_CE0_CROP_V_SIZE() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_V_SIZE.word
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_V_SIZE_word(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_V_SIZE.word = x)


//ISP_CE0_CROP_IACTIVE_PIXS


#define Get_ISP_CE0_CROP_ISP_CE0_CROP_IACTIVE_PIXS_crop_iactive_pixs() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_IACTIVE_PIXS.ISP_CE0_CROP_IACTIVE_PIXS_ts.crop_iactive_pixs
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_IACTIVE_PIXS_crop_iactive_pixs(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_IACTIVE_PIXS.ISP_CE0_CROP_IACTIVE_PIXS_ts.crop_iactive_pixs = x)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_IACTIVE_PIXS(crop_iactive_pixs) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_IACTIVE_PIXS.word = (uint32_t)crop_iactive_pixs<<0)
#define Get_ISP_CE0_CROP_ISP_CE0_CROP_IACTIVE_PIXS() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_IACTIVE_PIXS.word
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_IACTIVE_PIXS_word(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_IACTIVE_PIXS.word = x)


//ISP_CE0_CROP_IACTIVE_LINES


#define Get_ISP_CE0_CROP_ISP_CE0_CROP_IACTIVE_LINES_crop_iactive_lines() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_IACTIVE_LINES.ISP_CE0_CROP_IACTIVE_LINES_ts.crop_iactive_lines
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_IACTIVE_LINES_crop_iactive_lines(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_IACTIVE_LINES.ISP_CE0_CROP_IACTIVE_LINES_ts.crop_iactive_lines = x)
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_IACTIVE_LINES(crop_iactive_lines) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_IACTIVE_LINES.word = (uint16_t)crop_iactive_lines<<0)
#define Get_ISP_CE0_CROP_ISP_CE0_CROP_IACTIVE_LINES() p_ISP_CE0_CROP_IP->ISP_CE0_CROP_IACTIVE_LINES.word
#define Set_ISP_CE0_CROP_ISP_CE0_CROP_IACTIVE_LINES_word(x) (p_ISP_CE0_CROP_IP->ISP_CE0_CROP_IACTIVE_LINES.word = x)

//ISP_CE0_RADIAL_ADSOC_PK_ENABLE
/*Description: Adsoc enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ADSOC_ENABLE :1;
        /* . This signal is set low at reset*/
    }ISP_CE0_RADIAL_ADSOC_PK_ENABLE_ts;

}ISP_CE0_RADIAL_ADSOC_PK_ENABLE_tu;



//ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN
/*Description: Adsoc adaptive sharpening
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ADSOC_ADAPTIVE_SHARPENING :1;
        /* . This signal is set low at reset*/
    }ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_ts;

}ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_tu;



//ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL
/*Description: Adsoc coring level
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ADSOC_CORING_LEVEL :6;
    }ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL_ts;

}ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL_tu;



//ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL
/*Description: Adsoc overshoot control
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t ADSOC_OSHOOT_GAIN_BRIGHT :5;
        /* - MSB = disable oshoot control, bottom 4 bits provide a fractional fade out of overshoot*/
        uint8_t reserved0 :3;
        uint8_t ADSOC_OSHOOT_GAIN_DARK :5;
        /* - MSB = disable oshoot control, bottom 4 bits provide a fractional fade out of overshoot*/
    }ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_ts;

}ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_tu;



//ISP_CE0_RADIAL_ADSOC_PK_EFFECTS
/*Description: Adsoc special effects
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t ADSOC_EMBOSS_SELECT :3;
        uint8_t reserved0 :5;
        uint8_t ADSOC_FLIPPER :2;
        uint8_t reserved1 :6;
        uint8_t ADSOC_GREYBACK :2;
    }ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ts;

}ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_tu;



//ISP_CE0_RADIAL_ADSOC_PK_GAIN
/*Description: Adsoc gain
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t ADSOC_GAIN;
    }ISP_CE0_RADIAL_ADSOC_PK_GAIN_ts;

}ISP_CE0_RADIAL_ADSOC_PK_GAIN_tu;

typedef struct
{
    ISP_CE0_RADIAL_ADSOC_PK_ENABLE_tu ISP_CE0_RADIAL_ADSOC_PK_ENABLE;
    ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_tu ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN;
    ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL_tu ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL;
    ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_tu ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL;
    ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_tu ISP_CE0_RADIAL_ADSOC_PK_EFFECTS;
    ISP_CE0_RADIAL_ADSOC_PK_GAIN_tu ISP_CE0_RADIAL_ADSOC_PK_GAIN;
}ISP_CE0_RADIAL_ADSOC_PK_IP_ts;




//ISP_CE0_RADIAL_ADSOC_PK_ENABLE


#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ENABLE_ADSOC_ENABLE() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ENABLE.ISP_CE0_RADIAL_ADSOC_PK_ENABLE_ts.ADSOC_ENABLE
#define Is_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ENABLE_ADSOC_ENABLE_DISABLE() (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ENABLE.ISP_CE0_RADIAL_ADSOC_PK_ENABLE_ts.ADSOC_ENABLE == ADSOC_ENABLE_DISABLE)
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ENABLE_ADSOC_ENABLE__DISABLE() (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ENABLE.ISP_CE0_RADIAL_ADSOC_PK_ENABLE_ts.ADSOC_ENABLE = ADSOC_ENABLE_DISABLE)
#define ADSOC_ENABLE_DISABLE 0x0    //Disable adsoc
#define Is_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ENABLE_ADSOC_ENABLE_ENABLE() (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ENABLE.ISP_CE0_RADIAL_ADSOC_PK_ENABLE_ts.ADSOC_ENABLE == ADSOC_ENABLE_ENABLE)
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ENABLE_ADSOC_ENABLE__ENABLE() (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ENABLE.ISP_CE0_RADIAL_ADSOC_PK_ENABLE_ts.ADSOC_ENABLE = ADSOC_ENABLE_ENABLE)
#define ADSOC_ENABLE_ENABLE 0x1    //Enable adsoc
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ENABLE(ADSOC_ENABLE) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ENABLE.word = (uint32_t)ADSOC_ENABLE<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ENABLE() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ENABLE.word
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ENABLE_word(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ENABLE.word = x)


//ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN


#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_ADSOC_ADAPTIVE_SHARPENING() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN.ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_ts.ADSOC_ADAPTIVE_SHARPENING
#define Is_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_ADSOC_ADAPTIVE_SHARPENING_DISABLE() (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN.ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_ts.ADSOC_ADAPTIVE_SHARPENING == ADSOC_ADAPTIVE_SHARPENING_DISABLE)
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_ADSOC_ADAPTIVE_SHARPENING__DISABLE() (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN.ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_ts.ADSOC_ADAPTIVE_SHARPENING = ADSOC_ADAPTIVE_SHARPENING_DISABLE)
#define ADSOC_ADAPTIVE_SHARPENING_DISABLE 0x0    //Disable adsoc adaptive sharpening
#define Is_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_ADSOC_ADAPTIVE_SHARPENING_ENABLE() (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN.ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_ts.ADSOC_ADAPTIVE_SHARPENING == ADSOC_ADAPTIVE_SHARPENING_ENABLE)
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_ADSOC_ADAPTIVE_SHARPENING__ENABLE() (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN.ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_ts.ADSOC_ADAPTIVE_SHARPENING = ADSOC_ADAPTIVE_SHARPENING_ENABLE)
#define ADSOC_ADAPTIVE_SHARPENING_ENABLE 0x1    //Enable adsoc adaptive sharpening
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN(ADSOC_ADAPTIVE_SHARPENING) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN.word = (uint32_t)ADSOC_ADAPTIVE_SHARPENING<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN.word
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN_word(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_ADSHARP_EN.word = x)


//ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL


#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL_ADSOC_CORING_LEVEL() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL.ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL_ts.ADSOC_CORING_LEVEL
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL_ADSOC_CORING_LEVEL(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL.ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL_ts.ADSOC_CORING_LEVEL = x)
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL(ADSOC_CORING_LEVEL) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL.word = (uint32_t)ADSOC_CORING_LEVEL<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL.word
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL_word(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_CORING_LEVEL.word = x)


//ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL


#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_ADSOC_OSHOOT_GAIN_BRIGHT() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL.ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_ts.ADSOC_OSHOOT_GAIN_BRIGHT
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_ADSOC_OSHOOT_GAIN_BRIGHT(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL.ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_ts.ADSOC_OSHOOT_GAIN_BRIGHT = x)


#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_ADSOC_OSHOOT_GAIN_DARK() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL.ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_ts.ADSOC_OSHOOT_GAIN_DARK
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_ADSOC_OSHOOT_GAIN_DARK(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL.ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_ts.ADSOC_OSHOOT_GAIN_DARK = x)
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL(ADSOC_OSHOOT_GAIN_BRIGHT,ADSOC_OSHOOT_GAIN_DARK) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL.word = (uint32_t)ADSOC_OSHOOT_GAIN_BRIGHT<<0 | (uint32_t)ADSOC_OSHOOT_GAIN_DARK<<8)
#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL.word
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL_word(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_OSHOOT_CTRL.word = x)


//ISP_CE0_RADIAL_ADSOC_PK_EFFECTS


#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ADSOC_EMBOSS_SELECT() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_EFFECTS.ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_EMBOSS_SELECT
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ADSOC_EMBOSS_SELECT(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_EFFECTS.ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_EMBOSS_SELECT = x)


#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ADSOC_FLIPPER() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_EFFECTS.ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_FLIPPER
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ADSOC_FLIPPER(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_EFFECTS.ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_FLIPPER = x)


#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ADSOC_GREYBACK() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_EFFECTS.ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_GREYBACK
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ADSOC_GREYBACK(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_EFFECTS.ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_GREYBACK = x)
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_EFFECTS(ADSOC_EMBOSS_SELECT,ADSOC_FLIPPER,ADSOC_GREYBACK) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_EFFECTS.word = (uint32_t)ADSOC_EMBOSS_SELECT<<0 | (uint32_t)ADSOC_FLIPPER<<8 | (uint32_t)ADSOC_GREYBACK<<16)
#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_EFFECTS() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_EFFECTS.word
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_EFFECTS_word(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_EFFECTS.word = x)


//ISP_CE0_RADIAL_ADSOC_PK_GAIN


#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_GAIN_ADSOC_GAIN() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_GAIN.ISP_CE0_RADIAL_ADSOC_PK_GAIN_ts.ADSOC_GAIN
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_GAIN_ADSOC_GAIN(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_GAIN.ISP_CE0_RADIAL_ADSOC_PK_GAIN_ts.ADSOC_GAIN = x)
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_GAIN(ADSOC_GAIN) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_GAIN.word = (uint8_t)ADSOC_GAIN<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_GAIN() p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_GAIN.word
#define Set_ISP_CE0_RADIAL_ADSOC_PK_ISP_CE0_RADIAL_ADSOC_PK_GAIN_word(x) (p_ISP_CE0_RADIAL_ADSOC_PK_IP->ISP_CE0_RADIAL_ADSOC_PK_GAIN.word = x)

//ISP_CE0_RADIAL_ADSOC_RP_ENABLE
/*Description: Radial Peaking Control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rdpk_enable :1;
        /* Disable Radial Peaking module*/
    }ISP_CE0_RADIAL_ADSOC_RP_ENABLE_ts;

}ISP_CE0_RADIAL_ADSOC_RP_ENABLE_tu;



//ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0
/*Description: Radial Peaking Polynomial Coefficient 0
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rdpk_qvec0;
        /* coef of polynomial in power of 2*/
    }ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0_ts;

}ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0_tu;



//ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1
/*Description: Radial Peaking Polynomial coef 1
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rdpk_qvec1;
        /* coef of polynomial in power of four*/
    }ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1_ts;

}ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1_tu;



//ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT
/*Description: Radial Peaking polynomial shift
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rdpk_cof_shift :4;
        /* Polynomes shift*/
    }ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT_ts;

}ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT_tu;



//ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT
/*Description: Radial Peaking Gain Shift
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rdpk_out_shift :4;
        /* radial peaking gain shift*/
    }ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT_ts;

}ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT_tu;



//ISP_CE0_RADIAL_ADSOC_RP_UNITY
/*Description: Radial Peaking Unity
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rdpk_unity :9;
        /* Radial peaking modulation on lens centre*/
    }ISP_CE0_RADIAL_ADSOC_RP_UNITY_ts;

}ISP_CE0_RADIAL_ADSOC_RP_UNITY_tu;



//ISP_CE0_RADIAL_ADSOC_RP_HOFFSET
/*Description: Radial Peaking Horizontal Coordinate of lens centre
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rdpk_hoffset :14;
        /* signed relative horizontal coordinate of lens centre*/
    }ISP_CE0_RADIAL_ADSOC_RP_HOFFSET_ts;

}ISP_CE0_RADIAL_ADSOC_RP_HOFFSET_tu;



//ISP_CE0_RADIAL_ADSOC_RP_VOFFSET
/*Description: Radial Peaking Vertical Coordinate of lens centre
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rdpk_voffset :14;
        /* signed relative vertical coordinate of lens centre*/
    }ISP_CE0_RADIAL_ADSOC_RP_VOFFSET_ts;

}ISP_CE0_RADIAL_ADSOC_RP_VOFFSET_tu;



//ISP_CE0_RADIAL_ADSOC_RP_SCALE_X
/*Description: Radial Peaking Scaling Factor X
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rdpk_scaling_factor_x;
        /* radial peaking horizontal scaling factor*/
    }ISP_CE0_RADIAL_ADSOC_RP_SCALE_X_ts;

}ISP_CE0_RADIAL_ADSOC_RP_SCALE_X_tu;



//ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y
/*Description: Radial Peaking Scaling Factor Y
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t rdpk_scaling_factor_y;
        /* radial peaking vertical scaling factor*/
    }ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y_ts;

}ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y_tu;

typedef struct
{
    ISP_CE0_RADIAL_ADSOC_RP_ENABLE_tu ISP_CE0_RADIAL_ADSOC_RP_ENABLE;
    ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0_tu ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0;
    ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1_tu ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1;
    ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT_tu ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT;
    ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT_tu ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT;
    ISP_CE0_RADIAL_ADSOC_RP_UNITY_tu ISP_CE0_RADIAL_ADSOC_RP_UNITY;
    ISP_CE0_RADIAL_ADSOC_RP_HOFFSET_tu ISP_CE0_RADIAL_ADSOC_RP_HOFFSET;
    ISP_CE0_RADIAL_ADSOC_RP_VOFFSET_tu ISP_CE0_RADIAL_ADSOC_RP_VOFFSET;
    ISP_CE0_RADIAL_ADSOC_RP_SCALE_X_tu ISP_CE0_RADIAL_ADSOC_RP_SCALE_X;
    ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y_tu ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y;
}ISP_CE0_RADIAL_ADSOC_RP_IP_ts;




//ISP_CE0_RADIAL_ADSOC_RP_ENABLE


#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_ENABLE_rdpk_enable() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_ENABLE.ISP_CE0_RADIAL_ADSOC_RP_ENABLE_ts.rdpk_enable
#define Is_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_ENABLE_rdpk_enable_DISABLE() (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_ENABLE.ISP_CE0_RADIAL_ADSOC_RP_ENABLE_ts.rdpk_enable == rdpk_enable_DISABLE)
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_ENABLE_rdpk_enable__DISABLE() (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_ENABLE.ISP_CE0_RADIAL_ADSOC_RP_ENABLE_ts.rdpk_enable = rdpk_enable_DISABLE)
#define rdpk_enable_DISABLE 0x0    //Disable Radial Peaking module
#define Is_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_ENABLE_rdpk_enable_ENABLE() (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_ENABLE.ISP_CE0_RADIAL_ADSOC_RP_ENABLE_ts.rdpk_enable == rdpk_enable_ENABLE)
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_ENABLE_rdpk_enable__ENABLE() (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_ENABLE.ISP_CE0_RADIAL_ADSOC_RP_ENABLE_ts.rdpk_enable = rdpk_enable_ENABLE)
#define rdpk_enable_ENABLE 0x1    //Enable Radial Peaking module
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_ENABLE(rdpk_enable) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_ENABLE.word = (uint32_t)rdpk_enable<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_ENABLE() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_ENABLE.word
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_ENABLE_word(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_ENABLE.word = x)


//ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0


#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0_rdpk_qvec0() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0.ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0_ts.rdpk_qvec0
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0_rdpk_qvec0(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0.ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0_ts.rdpk_qvec0 = x)
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0(rdpk_qvec0) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0.word = (uint32_t)rdpk_qvec0<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0.word
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0_word(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF0.word = x)


//ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1


#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1_rdpk_qvec1() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1.ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1_ts.rdpk_qvec1
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1_rdpk_qvec1(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1.ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1_ts.rdpk_qvec1 = x)
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1(rdpk_qvec1) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1.word = (uint32_t)rdpk_qvec1<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1.word
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1_word(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_POLYCOEF1.word = x)


//ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT


#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT_rdpk_cof_shift() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT.ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT_ts.rdpk_cof_shift
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT_rdpk_cof_shift(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT.ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT_ts.rdpk_cof_shift = x)
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT(rdpk_cof_shift) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT.word = (uint32_t)rdpk_cof_shift<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT.word
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT_word(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_COF_SHIFT.word = x)


//ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT


#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT_rdpk_out_shift() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT.ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT_ts.rdpk_out_shift
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT_rdpk_out_shift(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT.ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT_ts.rdpk_out_shift = x)
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT(rdpk_out_shift) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT.word = (uint32_t)rdpk_out_shift<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT.word
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT_word(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_OUT_SHIFT.word = x)


//ISP_CE0_RADIAL_ADSOC_RP_UNITY


#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_UNITY_rdpk_unity() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_UNITY.ISP_CE0_RADIAL_ADSOC_RP_UNITY_ts.rdpk_unity
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_UNITY_rdpk_unity(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_UNITY.ISP_CE0_RADIAL_ADSOC_RP_UNITY_ts.rdpk_unity = x)
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_UNITY(rdpk_unity) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_UNITY.word = (uint32_t)rdpk_unity<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_UNITY() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_UNITY.word
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_UNITY_word(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_UNITY.word = x)


//ISP_CE0_RADIAL_ADSOC_RP_HOFFSET


#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_HOFFSET_rdpk_hoffset() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_HOFFSET.ISP_CE0_RADIAL_ADSOC_RP_HOFFSET_ts.rdpk_hoffset
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_HOFFSET_rdpk_hoffset(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_HOFFSET.ISP_CE0_RADIAL_ADSOC_RP_HOFFSET_ts.rdpk_hoffset = x)
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_HOFFSET(rdpk_hoffset) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_HOFFSET.word = (uint32_t)rdpk_hoffset<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_HOFFSET() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_HOFFSET.word
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_HOFFSET_word(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_HOFFSET.word = x)


//ISP_CE0_RADIAL_ADSOC_RP_VOFFSET


#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_VOFFSET_rdpk_voffset() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_VOFFSET.ISP_CE0_RADIAL_ADSOC_RP_VOFFSET_ts.rdpk_voffset
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_VOFFSET_rdpk_voffset(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_VOFFSET.ISP_CE0_RADIAL_ADSOC_RP_VOFFSET_ts.rdpk_voffset = x)
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_VOFFSET(rdpk_voffset) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_VOFFSET.word = (uint32_t)rdpk_voffset<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_VOFFSET() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_VOFFSET.word
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_VOFFSET_word(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_VOFFSET.word = x)


//ISP_CE0_RADIAL_ADSOC_RP_SCALE_X


#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_SCALE_X_rdpk_scaling_factor_x() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_SCALE_X.ISP_CE0_RADIAL_ADSOC_RP_SCALE_X_ts.rdpk_scaling_factor_x
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_SCALE_X_rdpk_scaling_factor_x(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_SCALE_X.ISP_CE0_RADIAL_ADSOC_RP_SCALE_X_ts.rdpk_scaling_factor_x = x)
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_SCALE_X(rdpk_scaling_factor_x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_SCALE_X.word = (uint32_t)rdpk_scaling_factor_x<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_SCALE_X() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_SCALE_X.word
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_SCALE_X_word(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_SCALE_X.word = x)


//ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y


#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y_rdpk_scaling_factor_y() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y.ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y_ts.rdpk_scaling_factor_y
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y_rdpk_scaling_factor_y(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y.ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y_ts.rdpk_scaling_factor_y = x)
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y(rdpk_scaling_factor_y) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y.word = (uint16_t)rdpk_scaling_factor_y<<0)
#define Get_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y() p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y.word
#define Set_ISP_CE0_RADIAL_ADSOC_RP_ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y_word(x) (p_ISP_CE0_RADIAL_ADSOC_RP_IP->ISP_CE0_RADIAL_ADSOC_RP_SCALE_Y.word = x)

//ISP_CE0_MUX_GPS_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE0_MUX_GPS_ENABLE_ts;

}ISP_CE0_MUX_GPS_ENABLE_tu;



//ISP_CE0_MUX_GPS_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE0_MUX_GPS_SELECT_ts;

}ISP_CE0_MUX_GPS_SELECT_tu;

typedef struct
{
    ISP_CE0_MUX_GPS_ENABLE_tu ISP_CE0_MUX_GPS_ENABLE;
    ISP_CE0_MUX_GPS_SELECT_tu ISP_CE0_MUX_GPS_SELECT;
}ISP_CE0_MUX_GPS_IP_ts;




//ISP_CE0_MUX_GPS_ENABLE


#define Get_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE_mux2to1_enable() p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.ISP_CE0_MUX_GPS_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.ISP_CE0_MUX_GPS_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.ISP_CE0_MUX_GPS_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.ISP_CE0_MUX_GPS_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.ISP_CE0_MUX_GPS_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE_mux2to1_soft_reset() p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.ISP_CE0_MUX_GPS_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.ISP_CE0_MUX_GPS_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.ISP_CE0_MUX_GPS_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.ISP_CE0_MUX_GPS_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.ISP_CE0_MUX_GPS_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE() p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.word
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_ENABLE_word(x) (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_ENABLE.word = x)


//ISP_CE0_MUX_GPS_SELECT


#define Get_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT_mux2to1_select() p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.ISP_CE0_MUX_GPS_SELECT_ts.mux2to1_select
#define Is_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT_mux2to1_select_IDP0() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.ISP_CE0_MUX_GPS_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT_mux2to1_select__IDP0() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.ISP_CE0_MUX_GPS_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT_mux2to1_select_IDP1() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.ISP_CE0_MUX_GPS_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT_mux2to1_select__IDP1() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.ISP_CE0_MUX_GPS_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT_mux2to1_shadow_en() p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.ISP_CE0_MUX_GPS_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.ISP_CE0_MUX_GPS_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.ISP_CE0_MUX_GPS_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.ISP_CE0_MUX_GPS_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.ISP_CE0_MUX_GPS_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT() p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.word
#define Set_ISP_CE0_MUX_GPS_ISP_CE0_MUX_GPS_SELECT_word(x) (p_ISP_CE0_MUX_GPS_IP->ISP_CE0_MUX_GPS_SELECT.word = x)

//ISP_CE0_MUX_SHARP_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE0_MUX_SHARP_ENABLE_ts;

}ISP_CE0_MUX_SHARP_ENABLE_tu;



//ISP_CE0_MUX_SHARP_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE0_MUX_SHARP_SELECT_ts;

}ISP_CE0_MUX_SHARP_SELECT_tu;

typedef struct
{
    ISP_CE0_MUX_SHARP_ENABLE_tu ISP_CE0_MUX_SHARP_ENABLE;
    ISP_CE0_MUX_SHARP_SELECT_tu ISP_CE0_MUX_SHARP_SELECT;
}ISP_CE0_MUX_SHARP_IP_ts;




//ISP_CE0_MUX_SHARP_ENABLE


#define Get_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE_mux2to1_enable() p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.ISP_CE0_MUX_SHARP_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.ISP_CE0_MUX_SHARP_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.ISP_CE0_MUX_SHARP_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.ISP_CE0_MUX_SHARP_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.ISP_CE0_MUX_SHARP_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE_mux2to1_soft_reset() p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.ISP_CE0_MUX_SHARP_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.ISP_CE0_MUX_SHARP_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.ISP_CE0_MUX_SHARP_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.ISP_CE0_MUX_SHARP_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.ISP_CE0_MUX_SHARP_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE() p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.word
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_ENABLE_word(x) (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_ENABLE.word = x)


//ISP_CE0_MUX_SHARP_SELECT


#define Get_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT_mux2to1_select() p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.ISP_CE0_MUX_SHARP_SELECT_ts.mux2to1_select
#define Is_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT_mux2to1_select_IDP0() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.ISP_CE0_MUX_SHARP_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT_mux2to1_select__IDP0() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.ISP_CE0_MUX_SHARP_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT_mux2to1_select_IDP1() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.ISP_CE0_MUX_SHARP_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT_mux2to1_select__IDP1() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.ISP_CE0_MUX_SHARP_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT_mux2to1_shadow_en() p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.ISP_CE0_MUX_SHARP_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.ISP_CE0_MUX_SHARP_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.ISP_CE0_MUX_SHARP_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.ISP_CE0_MUX_SHARP_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.ISP_CE0_MUX_SHARP_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT() p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.word
#define Set_ISP_CE0_MUX_SHARP_ISP_CE0_MUX_SHARP_SELECT_word(x) (p_ISP_CE0_MUX_SHARP_IP->ISP_CE0_MUX_SHARP_SELECT.word = x)

//ISP_CE0_MUX_UNSHARP_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE0_MUX_UNSHARP_ENABLE_ts;

}ISP_CE0_MUX_UNSHARP_ENABLE_tu;



//ISP_CE0_MUX_UNSHARP_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE0_MUX_UNSHARP_SELECT_ts;

}ISP_CE0_MUX_UNSHARP_SELECT_tu;

typedef struct
{
    ISP_CE0_MUX_UNSHARP_ENABLE_tu ISP_CE0_MUX_UNSHARP_ENABLE;
    ISP_CE0_MUX_UNSHARP_SELECT_tu ISP_CE0_MUX_UNSHARP_SELECT;
}ISP_CE0_MUX_UNSHARP_IP_ts;




//ISP_CE0_MUX_UNSHARP_ENABLE


#define Get_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE_mux2to1_enable() p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.ISP_CE0_MUX_UNSHARP_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.ISP_CE0_MUX_UNSHARP_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.ISP_CE0_MUX_UNSHARP_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.ISP_CE0_MUX_UNSHARP_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.ISP_CE0_MUX_UNSHARP_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE_mux2to1_soft_reset() p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.ISP_CE0_MUX_UNSHARP_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.ISP_CE0_MUX_UNSHARP_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.ISP_CE0_MUX_UNSHARP_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.ISP_CE0_MUX_UNSHARP_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.ISP_CE0_MUX_UNSHARP_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE() p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.word
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_ENABLE_word(x) (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_ENABLE.word = x)


//ISP_CE0_MUX_UNSHARP_SELECT


#define Get_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT_mux2to1_select() p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.ISP_CE0_MUX_UNSHARP_SELECT_ts.mux2to1_select
#define Is_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT_mux2to1_select_IDP0() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.ISP_CE0_MUX_UNSHARP_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT_mux2to1_select__IDP0() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.ISP_CE0_MUX_UNSHARP_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT_mux2to1_select_IDP1() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.ISP_CE0_MUX_UNSHARP_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT_mux2to1_select__IDP1() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.ISP_CE0_MUX_UNSHARP_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT_mux2to1_shadow_en() p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.ISP_CE0_MUX_UNSHARP_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.ISP_CE0_MUX_UNSHARP_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.ISP_CE0_MUX_UNSHARP_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.ISP_CE0_MUX_UNSHARP_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.ISP_CE0_MUX_UNSHARP_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT() p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.word
#define Set_ISP_CE0_MUX_UNSHARP_ISP_CE0_MUX_UNSHARP_SELECT_word(x) (p_ISP_CE0_MUX_UNSHARP_IP->ISP_CE0_MUX_UNSHARP_SELECT.word = x)

//ISP_CE0_FLEXTF_SHARP_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable flextf module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* flextf is not under a soft reset*/
    }ISP_CE0_FLEXTF_SHARP_ENABLE_ts;

}ISP_CE0_FLEXTF_SHARP_ENABLE_tu;



//ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR
/*Description: Last Index element for interpolation of Green / Green in Red channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_green_gir;
        /* last indexed element for interpolation
        in bayer configuration : Green in Redcolor channel.
        in rgb configuration : Green color channel*/
    }ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_ts;

}ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_tu;



//ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED
/*Description: Last Index element for interpolation of Red channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_red;
        /* last indexed element for interpolation*/
    }ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED_ts;

}ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED_tu;



//ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE
/*Description: Last Index element for interpolation of Blue channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_blue;
        /* last indexed element for interpolation*/
    }ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE_ts;

}ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE_tu;



//ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB
/*Description: Last Index element for interpolation of Green in Blue channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_gib;
        /* last indexed element for interpolation
        in bayer configuration, Green in Blue color channel.
        in rgb configuration, this register is ignored*/
    }ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB_ts;

}ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB_tu;



//ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT
/*Description: Pixel Input Value is right shifted by index in the range [0:5].
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint8_t pixel_shift :3;
        /* index value of the right shift*/
    }ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT_ts;

}ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT_tu;

typedef struct
{
    ISP_CE0_FLEXTF_SHARP_ENABLE_tu ISP_CE0_FLEXTF_SHARP_ENABLE;
    ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_tu ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR;
    ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED_tu ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED;
    ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE_tu ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE;
    ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB_tu ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB;
    ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT_tu ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT;
}ISP_CE0_FLEXTF_SHARP_IP_ts;




//ISP_CE0_FLEXTF_SHARP_ENABLE


#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE_enable() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.ISP_CE0_FLEXTF_SHARP_ENABLE_ts.enable
#define Is_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE_enable_DISABLE() (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.ISP_CE0_FLEXTF_SHARP_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE_enable__DISABLE() (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.ISP_CE0_FLEXTF_SHARP_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable flextf module
#define Is_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE_enable_ENABLE() (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.ISP_CE0_FLEXTF_SHARP_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE_enable__ENABLE() (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.ISP_CE0_FLEXTF_SHARP_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable flextf module


#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE_soft_reset() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.ISP_CE0_FLEXTF_SHARP_ENABLE_ts.soft_reset
#define Is_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE_soft_reset_B_0x0() (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.ISP_CE0_FLEXTF_SHARP_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE_soft_reset__B_0x0() (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.ISP_CE0_FLEXTF_SHARP_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //flextf is not under a soft reset
#define Is_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE_soft_reset_B_0x1() (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.ISP_CE0_FLEXTF_SHARP_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE_soft_reset__B_0x1() (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.ISP_CE0_FLEXTF_SHARP_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //flextf is under a soft reset
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE(enable,soft_reset) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.word
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_ENABLE_word(x) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_ENABLE.word = x)


//ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR


#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_last_elt_green_gir() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR.ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_ts.last_elt_green_gir
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_last_elt_green_gir(x) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR.ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_ts.last_elt_green_gir = x)
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR(last_elt_green_gir) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR.word = (uint32_t)last_elt_green_gir<<0)
#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR.word
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_word(x) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_GREEN_GIR.word = x)


//ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED


#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED_last_elt_red() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED.ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED_ts.last_elt_red
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED_last_elt_red(x) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED.ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED_ts.last_elt_red = x)
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED(last_elt_red) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED.word = (uint32_t)last_elt_red<<0)
#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED.word
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED_word(x) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_RED.word = x)


//ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE


#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE_last_elt_blue() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE.ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE_ts.last_elt_blue
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE_last_elt_blue(x) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE.ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE_ts.last_elt_blue = x)
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE(last_elt_blue) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE.word = (uint32_t)last_elt_blue<<0)
#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE.word
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE_word(x) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_BLUE.word = x)


//ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB


#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB_last_elt_gib() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB.ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB_ts.last_elt_gib
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB_last_elt_gib(x) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB.ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB_ts.last_elt_gib = x)
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB(last_elt_gib) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB.word = (uint32_t)last_elt_gib<<0)
#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB.word
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB_word(x) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_LAST_ELT_GIB.word = x)


//ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT


#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT_pixel_shift() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT.ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT_ts.pixel_shift
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT_pixel_shift(x) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT.ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT_ts.pixel_shift = x)
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT(pixel_shift) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT.word = (uint16_t)pixel_shift<<0)
#define Get_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT() p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT.word
#define Set_ISP_CE0_FLEXTF_SHARP_ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT_word(x) (p_ISP_CE0_FLEXTF_SHARP_IP->ISP_CE0_FLEXTF_SHARP_PIXELIN_SHIFT.word = x)

//ISP_CE0_FLEXTF_UNSHARP_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable flextf module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* flextf is not under a soft reset*/
    }ISP_CE0_FLEXTF_UNSHARP_ENABLE_ts;

}ISP_CE0_FLEXTF_UNSHARP_ENABLE_tu;



//ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR
/*Description: Last Index element for interpolation of Green / Green in Red channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_green_gir;
        /* last indexed element for interpolation
        in bayer configuration : Green in Redcolor channel.
        in rgb configuration : Green color channel*/
    }ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_ts;

}ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_tu;



//ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED
/*Description: Last Index element for interpolation of Red channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_red;
        /* last indexed element for interpolation*/
    }ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED_ts;

}ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED_tu;



//ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE
/*Description: Last Index element for interpolation of Blue channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_blue;
        /* last indexed element for interpolation*/
    }ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE_ts;

}ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE_tu;



//ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB
/*Description: Last Index element for interpolation of Green in Blue channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_gib;
        /* last indexed element for interpolation
        in bayer configuration, Green in Blue color channel.
        in rgb configuration, this register is ignored*/
    }ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB_ts;

}ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB_tu;



//ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT
/*Description: Pixel Input Value is right shifted by index in the range [0:5].
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint8_t pixel_shift :3;
        /* index value of the right shift*/
    }ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT_ts;

}ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT_tu;

typedef struct
{
    ISP_CE0_FLEXTF_UNSHARP_ENABLE_tu ISP_CE0_FLEXTF_UNSHARP_ENABLE;
    ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_tu ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR;
    ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED_tu ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED;
    ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE_tu ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE;
    ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB_tu ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB;
    ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT_tu ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT;
}ISP_CE0_FLEXTF_UNSHARP_IP_ts;




//ISP_CE0_FLEXTF_UNSHARP_ENABLE


#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE_enable() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.ISP_CE0_FLEXTF_UNSHARP_ENABLE_ts.enable
#define Is_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE_enable_DISABLE() (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.ISP_CE0_FLEXTF_UNSHARP_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE_enable__DISABLE() (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.ISP_CE0_FLEXTF_UNSHARP_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable flextf module
#define Is_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE_enable_ENABLE() (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.ISP_CE0_FLEXTF_UNSHARP_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE_enable__ENABLE() (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.ISP_CE0_FLEXTF_UNSHARP_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable flextf module


#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE_soft_reset() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.ISP_CE0_FLEXTF_UNSHARP_ENABLE_ts.soft_reset
#define Is_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE_soft_reset_B_0x0() (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.ISP_CE0_FLEXTF_UNSHARP_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE_soft_reset__B_0x0() (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.ISP_CE0_FLEXTF_UNSHARP_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //flextf is not under a soft reset
#define Is_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE_soft_reset_B_0x1() (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.ISP_CE0_FLEXTF_UNSHARP_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE_soft_reset__B_0x1() (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.ISP_CE0_FLEXTF_UNSHARP_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //flextf is under a soft reset
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE(enable,soft_reset) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.word
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_ENABLE_word(x) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_ENABLE.word = x)


//ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR


#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_last_elt_green_gir() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR.ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_ts.last_elt_green_gir
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_last_elt_green_gir(x) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR.ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_ts.last_elt_green_gir = x)
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR(last_elt_green_gir) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR.word = (uint32_t)last_elt_green_gir<<0)
#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR.word
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_word(x) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR.word = x)


//ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED


#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED_last_elt_red() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED.ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED_ts.last_elt_red
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED_last_elt_red(x) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED.ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED_ts.last_elt_red = x)
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED(last_elt_red) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED.word = (uint32_t)last_elt_red<<0)
#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED.word
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED_word(x) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_RED.word = x)


//ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE


#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE_last_elt_blue() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE.ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE_ts.last_elt_blue
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE_last_elt_blue(x) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE.ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE_ts.last_elt_blue = x)
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE(last_elt_blue) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE.word = (uint32_t)last_elt_blue<<0)
#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE.word
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE_word(x) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_BLUE.word = x)


//ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB


#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB_last_elt_gib() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB.ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB_ts.last_elt_gib
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB_last_elt_gib(x) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB.ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB_ts.last_elt_gib = x)
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB(last_elt_gib) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB.word = (uint32_t)last_elt_gib<<0)
#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB.word
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB_word(x) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_LAST_ELT_GIB.word = x)


//ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT


#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT_pixel_shift() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT.ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT_ts.pixel_shift
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT_pixel_shift(x) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT.ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT_ts.pixel_shift = x)
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT(pixel_shift) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT.word = (uint16_t)pixel_shift<<0)
#define Get_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT() p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT.word
#define Set_ISP_CE0_FLEXTF_UNSHARP_ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT_word(x) (p_ISP_CE0_FLEXTF_UNSHARP_IP->ISP_CE0_FLEXTF_UNSHARP_PIXELIN_SHIFT.word = x)

//ISP_CE0_MUX_MATRIX_ADSOC_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_ts;

}ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_tu;



//ISP_CE0_MUX_MATRIX_ADSOC_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE0_MUX_MATRIX_ADSOC_SELECT_ts;

}ISP_CE0_MUX_MATRIX_ADSOC_SELECT_tu;

typedef struct
{
    ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_tu ISP_CE0_MUX_MATRIX_ADSOC_ENABLE;
    ISP_CE0_MUX_MATRIX_ADSOC_SELECT_tu ISP_CE0_MUX_MATRIX_ADSOC_SELECT;
}ISP_CE0_MUX_MATRIX_ADSOC_IP_ts;




//ISP_CE0_MUX_MATRIX_ADSOC_ENABLE


#define Get_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_mux2to1_enable() p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_mux2to1_soft_reset() p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE() p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.word
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_ENABLE_word(x) (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_ENABLE.word = x)


//ISP_CE0_MUX_MATRIX_ADSOC_SELECT


#define Get_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT_mux2to1_select() p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.ISP_CE0_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_select
#define Is_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT_mux2to1_select_IDP0() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.ISP_CE0_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT_mux2to1_select__IDP0() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.ISP_CE0_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT_mux2to1_select_IDP1() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.ISP_CE0_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT_mux2to1_select__IDP1() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.ISP_CE0_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT_mux2to1_shadow_en() p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.ISP_CE0_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.ISP_CE0_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.ISP_CE0_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.ISP_CE0_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.ISP_CE0_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT() p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.word
#define Set_ISP_CE0_MUX_MATRIX_ADSOC_ISP_CE0_MUX_MATRIX_ADSOC_SELECT_word(x) (p_ISP_CE0_MUX_MATRIX_ADSOC_IP->ISP_CE0_MUX_MATRIX_ADSOC_SELECT.word = x)

//ISP_CE0_SNAIL0_ADSOC_ENABLE
/*Description: Enable configuration register. Soft reset register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t snailnorec_enable :1;
        /* Disable snailnorec module*/
        uint8_t reserved0 :3;
        uint8_t snailnorec_soft_reset :1;
        /* SOFT_RESET_DISABLE*/
    }ISP_CE0_SNAIL0_ADSOC_ENABLE_ts;

}ISP_CE0_SNAIL0_ADSOC_ENABLE_tu;

typedef struct
{
    ISP_CE0_SNAIL0_ADSOC_ENABLE_tu ISP_CE0_SNAIL0_ADSOC_ENABLE;
}ISP_CE0_SNAIL0_ADSOC_IP_ts;




//ISP_CE0_SNAIL0_ADSOC_ENABLE


#define Get_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE_snailnorec_enable() p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.ISP_CE0_SNAIL0_ADSOC_ENABLE_ts.snailnorec_enable
#define Is_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE_snailnorec_enable_DISABLE() (p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.ISP_CE0_SNAIL0_ADSOC_ENABLE_ts.snailnorec_enable == snailnorec_enable_DISABLE)
#define Set_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE_snailnorec_enable__DISABLE() (p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.ISP_CE0_SNAIL0_ADSOC_ENABLE_ts.snailnorec_enable = snailnorec_enable_DISABLE)
#define snailnorec_enable_DISABLE 0x0    //Disable snailnorec module
#define Is_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE_snailnorec_enable_ENABLE() (p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.ISP_CE0_SNAIL0_ADSOC_ENABLE_ts.snailnorec_enable == snailnorec_enable_ENABLE)
#define Set_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE_snailnorec_enable__ENABLE() (p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.ISP_CE0_SNAIL0_ADSOC_ENABLE_ts.snailnorec_enable = snailnorec_enable_ENABLE)
#define snailnorec_enable_ENABLE 0x1    //Enable snailnorec module


#define Get_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE_snailnorec_soft_reset() p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.ISP_CE0_SNAIL0_ADSOC_ENABLE_ts.snailnorec_soft_reset
#define Is_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE_snailnorec_soft_reset_SOFT_RESET_DISABLE() (p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.ISP_CE0_SNAIL0_ADSOC_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define Set_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE_snailnorec_soft_reset__SOFT_RESET_DISABLE() (p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.ISP_CE0_SNAIL0_ADSOC_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define snailnorec_soft_reset_SOFT_RESET_DISABLE 0x0    //SOFT_RESET_DISABLE
#define Is_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE_snailnorec_soft_reset_SOFT_RESET_ENABLE() (p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.ISP_CE0_SNAIL0_ADSOC_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define Set_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE_snailnorec_soft_reset__SOFT_RESET_ENABLE() (p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.ISP_CE0_SNAIL0_ADSOC_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define snailnorec_soft_reset_SOFT_RESET_ENABLE 0x1    //SOFT_RESET_ENABLE
#define Set_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE(snailnorec_enable,snailnorec_soft_reset) (p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.word = (uint8_t)snailnorec_enable<<0 | (uint8_t)snailnorec_soft_reset<<4)
#define Get_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE() p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.word
#define Set_ISP_CE0_SNAIL0_ADSOC_ISP_CE0_SNAIL0_ADSOC_ENABLE_word(x) (p_ISP_CE0_SNAIL0_ADSOC_IP->ISP_CE0_SNAIL0_ADSOC_ENABLE.word = x)

//ISP_CE0_SNAIL1_ADSOC_ENABLE
/*Description: Enable configuration register. Soft reset register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t snailnorec_enable :1;
        /* Disable snailnorec module*/
        uint8_t reserved0 :3;
        uint8_t snailnorec_soft_reset :1;
        /* SOFT_RESET_DISABLE*/
    }ISP_CE0_SNAIL1_ADSOC_ENABLE_ts;

}ISP_CE0_SNAIL1_ADSOC_ENABLE_tu;

typedef struct
{
    ISP_CE0_SNAIL1_ADSOC_ENABLE_tu ISP_CE0_SNAIL1_ADSOC_ENABLE;
}ISP_CE0_SNAIL1_ADSOC_IP_ts;




//ISP_CE0_SNAIL1_ADSOC_ENABLE


#define Get_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE_snailnorec_enable() p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.ISP_CE0_SNAIL1_ADSOC_ENABLE_ts.snailnorec_enable
#define Is_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE_snailnorec_enable_DISABLE() (p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.ISP_CE0_SNAIL1_ADSOC_ENABLE_ts.snailnorec_enable == snailnorec_enable_DISABLE)
#define Set_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE_snailnorec_enable__DISABLE() (p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.ISP_CE0_SNAIL1_ADSOC_ENABLE_ts.snailnorec_enable = snailnorec_enable_DISABLE)
#define snailnorec_enable_DISABLE 0x0    //Disable snailnorec module
#define Is_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE_snailnorec_enable_ENABLE() (p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.ISP_CE0_SNAIL1_ADSOC_ENABLE_ts.snailnorec_enable == snailnorec_enable_ENABLE)
#define Set_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE_snailnorec_enable__ENABLE() (p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.ISP_CE0_SNAIL1_ADSOC_ENABLE_ts.snailnorec_enable = snailnorec_enable_ENABLE)
#define snailnorec_enable_ENABLE 0x1    //Enable snailnorec module


#define Get_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE_snailnorec_soft_reset() p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.ISP_CE0_SNAIL1_ADSOC_ENABLE_ts.snailnorec_soft_reset
#define Is_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE_snailnorec_soft_reset_SOFT_RESET_DISABLE() (p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.ISP_CE0_SNAIL1_ADSOC_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define Set_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE_snailnorec_soft_reset__SOFT_RESET_DISABLE() (p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.ISP_CE0_SNAIL1_ADSOC_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define snailnorec_soft_reset_SOFT_RESET_DISABLE 0x0    //SOFT_RESET_DISABLE
#define Is_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE_snailnorec_soft_reset_SOFT_RESET_ENABLE() (p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.ISP_CE0_SNAIL1_ADSOC_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define Set_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE_snailnorec_soft_reset__SOFT_RESET_ENABLE() (p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.ISP_CE0_SNAIL1_ADSOC_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define snailnorec_soft_reset_SOFT_RESET_ENABLE 0x1    //SOFT_RESET_ENABLE
#define Set_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE(snailnorec_enable,snailnorec_soft_reset) (p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.word = (uint8_t)snailnorec_enable<<0 | (uint8_t)snailnorec_soft_reset<<4)
#define Get_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE() p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.word
#define Set_ISP_CE0_SNAIL1_ADSOC_ISP_CE0_SNAIL1_ADSOC_ENABLE_word(x) (p_ISP_CE0_SNAIL1_ADSOC_IP->ISP_CE0_SNAIL1_ADSOC_ENABLE.word = x)

//ISP_CE0_MATRIX_ENABLE
/*Description: Matrix Control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable Matrix module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* Soft reset deasserted*/
    }ISP_CE0_MATRIX_ENABLE_ts;

}ISP_CE0_MATRIX_ENABLE_tu;



//ISP_CE0_MATRIX_RCOF00
/*Description: On-diagonal Matrix coefficient (0,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof00;
        /* Matrix Coefficient (0,0).*/
    }ISP_CE0_MATRIX_RCOF00_ts;

}ISP_CE0_MATRIX_RCOF00_tu;



//ISP_CE0_MATRIX_RCOF01
/*Description: Off-diagonal Matrix coefficient (0,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof01;
        /* Matrix Coefficient (0,1).*/
    }ISP_CE0_MATRIX_RCOF01_ts;

}ISP_CE0_MATRIX_RCOF01_tu;



//ISP_CE0_MATRIX_RCOF02
/*Description: Off-diagonal Matrix coefficient (0,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof02;
        /* Matrix Coefficient (0,2).*/
    }ISP_CE0_MATRIX_RCOF02_ts;

}ISP_CE0_MATRIX_RCOF02_tu;



//ISP_CE0_MATRIX_RCOF10
/*Description: Off-diagonal Matrix coefficient (1,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof10;
        /* Matrix Coefficient (1,0).*/
    }ISP_CE0_MATRIX_RCOF10_ts;

}ISP_CE0_MATRIX_RCOF10_tu;



//ISP_CE0_MATRIX_RCOF11
/*Description: On-diagonal Matrix coefficient (1,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof11;
        /* Matrix Coefficient (1,1).*/
    }ISP_CE0_MATRIX_RCOF11_ts;

}ISP_CE0_MATRIX_RCOF11_tu;



//ISP_CE0_MATRIX_RCOF12
/*Description: Off-diagonal Matrix coefficient (1,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof12;
        /* Matrix Coefficient (1,2).*/
    }ISP_CE0_MATRIX_RCOF12_ts;

}ISP_CE0_MATRIX_RCOF12_tu;



//ISP_CE0_MATRIX_RCOF20
/*Description: Off-diagonal Matrix coefficient (2,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof20;
        /* Matrix Coefficient (2,0).*/
    }ISP_CE0_MATRIX_RCOF20_ts;

}ISP_CE0_MATRIX_RCOF20_tu;



//ISP_CE0_MATRIX_RCOF21
/*Description: Off-diagonal Matrix coefficient (2,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof21;
        /* Matrix Coefficient (2,1).*/
    }ISP_CE0_MATRIX_RCOF21_ts;

}ISP_CE0_MATRIX_RCOF21_tu;



//ISP_CE0_MATRIX_RCOF22
/*Description: On-diagonal Matrix coefficient (2,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof22;
        /* Matrix Coefficient (2,2).*/
    }ISP_CE0_MATRIX_RCOF22_ts;

}ISP_CE0_MATRIX_RCOF22_tu;



//ISP_CE0_MATRIX_R_OFFSET
/*Description: Offset for R data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t r_offset :13;
        /* offset for R data*/
    }ISP_CE0_MATRIX_R_OFFSET_ts;

}ISP_CE0_MATRIX_R_OFFSET_tu;



//ISP_CE0_MATRIX_G_OFFSET
/*Description: Offset for G data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t g_offset :13;
        /* offset for G data*/
    }ISP_CE0_MATRIX_G_OFFSET_ts;

}ISP_CE0_MATRIX_G_OFFSET_tu;



//ISP_CE0_MATRIX_B_OFFSET
/*Description: Offset for B data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit































Synthesis Results
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t b_offset :13;
        /* offset for B data*/
    }ISP_CE0_MATRIX_B_OFFSET_ts;

}ISP_CE0_MATRIX_B_OFFSET_tu;

typedef struct
{
    ISP_CE0_MATRIX_ENABLE_tu ISP_CE0_MATRIX_ENABLE;
    ISP_CE0_MATRIX_RCOF00_tu ISP_CE0_MATRIX_RCOF00;
    ISP_CE0_MATRIX_RCOF01_tu ISP_CE0_MATRIX_RCOF01;
    ISP_CE0_MATRIX_RCOF02_tu ISP_CE0_MATRIX_RCOF02;
    ISP_CE0_MATRIX_RCOF10_tu ISP_CE0_MATRIX_RCOF10;
    ISP_CE0_MATRIX_RCOF11_tu ISP_CE0_MATRIX_RCOF11;
    ISP_CE0_MATRIX_RCOF12_tu ISP_CE0_MATRIX_RCOF12;
    ISP_CE0_MATRIX_RCOF20_tu ISP_CE0_MATRIX_RCOF20;
    ISP_CE0_MATRIX_RCOF21_tu ISP_CE0_MATRIX_RCOF21;
    ISP_CE0_MATRIX_RCOF22_tu ISP_CE0_MATRIX_RCOF22;
    ISP_CE0_MATRIX_R_OFFSET_tu ISP_CE0_MATRIX_R_OFFSET;
    ISP_CE0_MATRIX_G_OFFSET_tu ISP_CE0_MATRIX_G_OFFSET;
    ISP_CE0_MATRIX_B_OFFSET_tu ISP_CE0_MATRIX_B_OFFSET;
}ISP_CE0_MATRIX_IP_ts;




//ISP_CE0_MATRIX_ENABLE


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE_enable() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.ISP_CE0_MATRIX_ENABLE_ts.enable
#define Is_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE_enable_DISABLE() (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.ISP_CE0_MATRIX_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE_enable__DISABLE() (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.ISP_CE0_MATRIX_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable Matrix module
#define Is_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE_enable_ENABLE() (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.ISP_CE0_MATRIX_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE_enable__ENABLE() (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.ISP_CE0_MATRIX_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable Matrix module


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE_soft_reset() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.ISP_CE0_MATRIX_ENABLE_ts.soft_reset
#define Is_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE_soft_reset_DISABLE() (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.ISP_CE0_MATRIX_ENABLE_ts.soft_reset == soft_reset_DISABLE)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE_soft_reset__DISABLE() (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.ISP_CE0_MATRIX_ENABLE_ts.soft_reset = soft_reset_DISABLE)
#define soft_reset_DISABLE 0x0    //Soft reset deasserted
#define Is_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE_soft_reset_ENABLE() (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.ISP_CE0_MATRIX_ENABLE_ts.soft_reset == soft_reset_ENABLE)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE_soft_reset__ENABLE() (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.ISP_CE0_MATRIX_ENABLE_ts.soft_reset = soft_reset_ENABLE)
#define soft_reset_ENABLE 0x1    //Soft reset asserted
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE(enable,soft_reset) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_ENABLE_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_ENABLE.word = x)


//ISP_CE0_MATRIX_RCOF00


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF00_rcof00() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF00.ISP_CE0_MATRIX_RCOF00_ts.rcof00
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF00_rcof00(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF00.ISP_CE0_MATRIX_RCOF00_ts.rcof00 = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF00(rcof00) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF00.word = (uint32_t)rcof00<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF00() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF00.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF00_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF00.word = x)


//ISP_CE0_MATRIX_RCOF01


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF01_rcof01() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF01.ISP_CE0_MATRIX_RCOF01_ts.rcof01
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF01_rcof01(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF01.ISP_CE0_MATRIX_RCOF01_ts.rcof01 = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF01(rcof01) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF01.word = (uint32_t)rcof01<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF01() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF01.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF01_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF01.word = x)


//ISP_CE0_MATRIX_RCOF02


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF02_rcof02() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF02.ISP_CE0_MATRIX_RCOF02_ts.rcof02
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF02_rcof02(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF02.ISP_CE0_MATRIX_RCOF02_ts.rcof02 = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF02(rcof02) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF02.word = (uint32_t)rcof02<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF02() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF02.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF02_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF02.word = x)


//ISP_CE0_MATRIX_RCOF10


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF10_rcof10() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF10.ISP_CE0_MATRIX_RCOF10_ts.rcof10
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF10_rcof10(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF10.ISP_CE0_MATRIX_RCOF10_ts.rcof10 = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF10(rcof10) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF10.word = (uint32_t)rcof10<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF10() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF10.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF10_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF10.word = x)


//ISP_CE0_MATRIX_RCOF11


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF11_rcof11() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF11.ISP_CE0_MATRIX_RCOF11_ts.rcof11
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF11_rcof11(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF11.ISP_CE0_MATRIX_RCOF11_ts.rcof11 = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF11(rcof11) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF11.word = (uint32_t)rcof11<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF11() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF11.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF11_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF11.word = x)


//ISP_CE0_MATRIX_RCOF12


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF12_rcof12() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF12.ISP_CE0_MATRIX_RCOF12_ts.rcof12
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF12_rcof12(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF12.ISP_CE0_MATRIX_RCOF12_ts.rcof12 = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF12(rcof12) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF12.word = (uint32_t)rcof12<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF12() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF12.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF12_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF12.word = x)


//ISP_CE0_MATRIX_RCOF20


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF20_rcof20() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF20.ISP_CE0_MATRIX_RCOF20_ts.rcof20
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF20_rcof20(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF20.ISP_CE0_MATRIX_RCOF20_ts.rcof20 = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF20(rcof20) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF20.word = (uint32_t)rcof20<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF20() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF20.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF20_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF20.word = x)


//ISP_CE0_MATRIX_RCOF21


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF21_rcof21() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF21.ISP_CE0_MATRIX_RCOF21_ts.rcof21
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF21_rcof21(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF21.ISP_CE0_MATRIX_RCOF21_ts.rcof21 = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF21(rcof21) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF21.word = (uint32_t)rcof21<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF21() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF21.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF21_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF21.word = x)


//ISP_CE0_MATRIX_RCOF22


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF22_rcof22() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF22.ISP_CE0_MATRIX_RCOF22_ts.rcof22
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF22_rcof22(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF22.ISP_CE0_MATRIX_RCOF22_ts.rcof22 = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF22(rcof22) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF22.word = (uint32_t)rcof22<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF22() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF22.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_RCOF22_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_RCOF22.word = x)


//ISP_CE0_MATRIX_R_OFFSET


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_R_OFFSET_r_offset() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_R_OFFSET.ISP_CE0_MATRIX_R_OFFSET_ts.r_offset
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_R_OFFSET_r_offset(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_R_OFFSET.ISP_CE0_MATRIX_R_OFFSET_ts.r_offset = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_R_OFFSET(r_offset) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_R_OFFSET.word = (uint32_t)r_offset<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_R_OFFSET() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_R_OFFSET.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_R_OFFSET_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_R_OFFSET.word = x)


//ISP_CE0_MATRIX_G_OFFSET


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_G_OFFSET_g_offset() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_G_OFFSET.ISP_CE0_MATRIX_G_OFFSET_ts.g_offset
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_G_OFFSET_g_offset(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_G_OFFSET.ISP_CE0_MATRIX_G_OFFSET_ts.g_offset = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_G_OFFSET(g_offset) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_G_OFFSET.word = (uint32_t)g_offset<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_G_OFFSET() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_G_OFFSET.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_G_OFFSET_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_G_OFFSET.word = x)


//ISP_CE0_MATRIX_B_OFFSET


#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_B_OFFSET_b_offset() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_B_OFFSET.ISP_CE0_MATRIX_B_OFFSET_ts.b_offset
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_B_OFFSET_b_offset(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_B_OFFSET.ISP_CE0_MATRIX_B_OFFSET_ts.b_offset = x)
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_B_OFFSET(b_offset) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_B_OFFSET.word = (uint16_t)b_offset<<0)
#define Get_ISP_CE0_MATRIX_ISP_CE0_MATRIX_B_OFFSET() p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_B_OFFSET.word
#define Set_ISP_CE0_MATRIX_ISP_CE0_MATRIX_B_OFFSET_word(x) (p_ISP_CE0_MATRIX_IP->ISP_CE0_MATRIX_B_OFFSET.word = x)

//ISP_CE0_PIXDELAY_0_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t pix_delay_enable :1;
        /* Disable Pixel delay module*/
        uint8_t reserved0 :3;
        uint8_t pix_delay_soft_reset :1;
        /* pix_delay soft reset disable*/
    }ISP_CE0_PIXDELAY_0_ENABLE_ts;

}ISP_CE0_PIXDELAY_0_ENABLE_tu;

typedef struct
{
    ISP_CE0_PIXDELAY_0_ENABLE_tu ISP_CE0_PIXDELAY_0_ENABLE;
}ISP_CE0_PIXDELAY_0_IP_ts;




//ISP_CE0_PIXDELAY_0_ENABLE


#define Get_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE_pix_delay_enable() p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.ISP_CE0_PIXDELAY_0_ENABLE_ts.pix_delay_enable
#define Is_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE_pix_delay_enable_DISABLE() (p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.ISP_CE0_PIXDELAY_0_ENABLE_ts.pix_delay_enable == pix_delay_enable_DISABLE)
#define Set_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE_pix_delay_enable__DISABLE() (p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.ISP_CE0_PIXDELAY_0_ENABLE_ts.pix_delay_enable = pix_delay_enable_DISABLE)
#define pix_delay_enable_DISABLE 0x0    //Disable Pixel delay module
#define Is_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE_pix_delay_enable_ENABLE() (p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.ISP_CE0_PIXDELAY_0_ENABLE_ts.pix_delay_enable == pix_delay_enable_ENABLE)
#define Set_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE_pix_delay_enable__ENABLE() (p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.ISP_CE0_PIXDELAY_0_ENABLE_ts.pix_delay_enable = pix_delay_enable_ENABLE)
#define pix_delay_enable_ENABLE 0x1    //Enable Pixel delay module


#define Get_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE_pix_delay_soft_reset() p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.ISP_CE0_PIXDELAY_0_ENABLE_ts.pix_delay_soft_reset
#define Is_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE_pix_delay_soft_reset_SOFT_RST_DISABLE() (p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.ISP_CE0_PIXDELAY_0_ENABLE_ts.pix_delay_soft_reset == pix_delay_soft_reset_SOFT_RST_DISABLE)
#define Set_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE_pix_delay_soft_reset__SOFT_RST_DISABLE() (p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.ISP_CE0_PIXDELAY_0_ENABLE_ts.pix_delay_soft_reset = pix_delay_soft_reset_SOFT_RST_DISABLE)
#define pix_delay_soft_reset_SOFT_RST_DISABLE 0x0    //pix_delay soft reset disable
#define Is_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE_pix_delay_soft_reset_SOFT_RST_ENABLE() (p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.ISP_CE0_PIXDELAY_0_ENABLE_ts.pix_delay_soft_reset == pix_delay_soft_reset_SOFT_RST_ENABLE)
#define Set_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE_pix_delay_soft_reset__SOFT_RST_ENABLE() (p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.ISP_CE0_PIXDELAY_0_ENABLE_ts.pix_delay_soft_reset = pix_delay_soft_reset_SOFT_RST_ENABLE)
#define pix_delay_soft_reset_SOFT_RST_ENABLE 0x1    //pix_delay soft reset enable
#define Set_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE(pix_delay_enable,pix_delay_soft_reset) (p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.word = (uint8_t)pix_delay_enable<<0 | (uint8_t)pix_delay_soft_reset<<4)
#define Get_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE() p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.word
#define Set_ISP_CE0_PIXDELAY_0_ISP_CE0_PIXDELAY_0_ENABLE_word(x) (p_ISP_CE0_PIXDELAY_0_IP->ISP_CE0_PIXDELAY_0_ENABLE.word = x)

//ISP_CE0_PIXDELAY_1_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t pix_delay_enable :1;
        /* Disable Pixel delay module*/
        uint8_t reserved0 :3;
        uint8_t pix_delay_soft_reset :1;
        /* pix_delay soft reset disable*/
    }ISP_CE0_PIXDELAY_1_ENABLE_ts;

}ISP_CE0_PIXDELAY_1_ENABLE_tu;

typedef struct
{
    ISP_CE0_PIXDELAY_1_ENABLE_tu ISP_CE0_PIXDELAY_1_ENABLE;
}ISP_CE0_PIXDELAY_1_IP_ts;




//ISP_CE0_PIXDELAY_1_ENABLE


#define Get_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE_pix_delay_enable() p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.ISP_CE0_PIXDELAY_1_ENABLE_ts.pix_delay_enable
#define Is_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE_pix_delay_enable_DISABLE() (p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.ISP_CE0_PIXDELAY_1_ENABLE_ts.pix_delay_enable == pix_delay_enable_DISABLE)
#define Set_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE_pix_delay_enable__DISABLE() (p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.ISP_CE0_PIXDELAY_1_ENABLE_ts.pix_delay_enable = pix_delay_enable_DISABLE)
#define pix_delay_enable_DISABLE 0x0    //Disable Pixel delay module
#define Is_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE_pix_delay_enable_ENABLE() (p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.ISP_CE0_PIXDELAY_1_ENABLE_ts.pix_delay_enable == pix_delay_enable_ENABLE)
#define Set_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE_pix_delay_enable__ENABLE() (p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.ISP_CE0_PIXDELAY_1_ENABLE_ts.pix_delay_enable = pix_delay_enable_ENABLE)
#define pix_delay_enable_ENABLE 0x1    //Enable Pixel delay module


#define Get_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE_pix_delay_soft_reset() p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.ISP_CE0_PIXDELAY_1_ENABLE_ts.pix_delay_soft_reset
#define Is_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE_pix_delay_soft_reset_SOFT_RST_DISABLE() (p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.ISP_CE0_PIXDELAY_1_ENABLE_ts.pix_delay_soft_reset == pix_delay_soft_reset_SOFT_RST_DISABLE)
#define Set_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE_pix_delay_soft_reset__SOFT_RST_DISABLE() (p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.ISP_CE0_PIXDELAY_1_ENABLE_ts.pix_delay_soft_reset = pix_delay_soft_reset_SOFT_RST_DISABLE)
#define pix_delay_soft_reset_SOFT_RST_DISABLE 0x0    //pix_delay soft reset disable
#define Is_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE_pix_delay_soft_reset_SOFT_RST_ENABLE() (p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.ISP_CE0_PIXDELAY_1_ENABLE_ts.pix_delay_soft_reset == pix_delay_soft_reset_SOFT_RST_ENABLE)
#define Set_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE_pix_delay_soft_reset__SOFT_RST_ENABLE() (p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.ISP_CE0_PIXDELAY_1_ENABLE_ts.pix_delay_soft_reset = pix_delay_soft_reset_SOFT_RST_ENABLE)
#define pix_delay_soft_reset_SOFT_RST_ENABLE 0x1    //pix_delay soft reset enable
#define Set_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE(pix_delay_enable,pix_delay_soft_reset) (p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.word = (uint8_t)pix_delay_enable<<0 | (uint8_t)pix_delay_soft_reset<<4)
#define Get_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE() p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.word
#define Set_ISP_CE0_PIXDELAY_1_ISP_CE0_PIXDELAY_1_ENABLE_word(x) (p_ISP_CE0_PIXDELAY_1_IP->ISP_CE0_PIXDELAY_1_ENABLE.word = x)

//ISP_CE0_SPECIALFX_SOL_ENABLE
/*Description: Solarization enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t sfx_sol_enable :1;
        /* Disable solarization*/
        uint8_t reserved0 :3;
        uint8_t sfx_soft_reset :1;
        /* DISABLE_SOFT_RESET*/
    }ISP_CE0_SPECIALFX_SOL_ENABLE_ts;

}ISP_CE0_SPECIALFX_SOL_ENABLE_tu;



//ISP_CE0_SPECIALFX_NEG_ENABLE
/*Description: Negative enable configuration register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t sfx_neg_enable :1;
        /* Disable negative*/
    }ISP_CE0_SPECIALFX_NEG_ENABLE_ts;

}ISP_CE0_SPECIALFX_NEG_ENABLE_tu;

typedef struct
{
    ISP_CE0_SPECIALFX_SOL_ENABLE_tu ISP_CE0_SPECIALFX_SOL_ENABLE;
    ISP_CE0_SPECIALFX_NEG_ENABLE_tu ISP_CE0_SPECIALFX_NEG_ENABLE;
}ISP_CE0_SPECIALFX_IP_ts;




//ISP_CE0_SPECIALFX_SOL_ENABLE


#define Get_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE_sfx_sol_enable() p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.ISP_CE0_SPECIALFX_SOL_ENABLE_ts.sfx_sol_enable
#define Is_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE_sfx_sol_enable_DISABLE_SOLAR() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.ISP_CE0_SPECIALFX_SOL_ENABLE_ts.sfx_sol_enable == sfx_sol_enable_DISABLE_SOLAR)
#define Set_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE_sfx_sol_enable__DISABLE_SOLAR() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.ISP_CE0_SPECIALFX_SOL_ENABLE_ts.sfx_sol_enable = sfx_sol_enable_DISABLE_SOLAR)
#define sfx_sol_enable_DISABLE_SOLAR 0x0    //Disable solarization
#define Is_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE_sfx_sol_enable_ENABLE_SOLAR() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.ISP_CE0_SPECIALFX_SOL_ENABLE_ts.sfx_sol_enable == sfx_sol_enable_ENABLE_SOLAR)
#define Set_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE_sfx_sol_enable__ENABLE_SOLAR() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.ISP_CE0_SPECIALFX_SOL_ENABLE_ts.sfx_sol_enable = sfx_sol_enable_ENABLE_SOLAR)
#define sfx_sol_enable_ENABLE_SOLAR 0x1    //Enable solarization


#define Get_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE_sfx_soft_reset() p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.ISP_CE0_SPECIALFX_SOL_ENABLE_ts.sfx_soft_reset
#define Is_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE_sfx_soft_reset_DISABLE_SOFT_RESET() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.ISP_CE0_SPECIALFX_SOL_ENABLE_ts.sfx_soft_reset == sfx_soft_reset_DISABLE_SOFT_RESET)
#define Set_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE_sfx_soft_reset__DISABLE_SOFT_RESET() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.ISP_CE0_SPECIALFX_SOL_ENABLE_ts.sfx_soft_reset = sfx_soft_reset_DISABLE_SOFT_RESET)
#define sfx_soft_reset_DISABLE_SOFT_RESET 0x0    //DISABLE_SOFT_RESET
#define Is_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE_sfx_soft_reset_ENABLE_SOFT_RESET() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.ISP_CE0_SPECIALFX_SOL_ENABLE_ts.sfx_soft_reset == sfx_soft_reset_ENABLE_SOFT_RESET)
#define Set_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE_sfx_soft_reset__ENABLE_SOFT_RESET() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.ISP_CE0_SPECIALFX_SOL_ENABLE_ts.sfx_soft_reset = sfx_soft_reset_ENABLE_SOFT_RESET)
#define sfx_soft_reset_ENABLE_SOFT_RESET 0x1    //ENABLE_SOFT_RESET
#define Set_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE(sfx_sol_enable,sfx_soft_reset) (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.word = (uint32_t)sfx_sol_enable<<0 | (uint32_t)sfx_soft_reset<<4)
#define Get_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE() p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.word
#define Set_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_SOL_ENABLE_word(x) (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_SOL_ENABLE.word = x)


//ISP_CE0_SPECIALFX_NEG_ENABLE


#define Get_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_NEG_ENABLE_sfx_neg_enable() p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_NEG_ENABLE.ISP_CE0_SPECIALFX_NEG_ENABLE_ts.sfx_neg_enable
#define Is_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_NEG_ENABLE_sfx_neg_enable_DISABLE_NEG() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_NEG_ENABLE.ISP_CE0_SPECIALFX_NEG_ENABLE_ts.sfx_neg_enable == sfx_neg_enable_DISABLE_NEG)
#define Set_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_NEG_ENABLE_sfx_neg_enable__DISABLE_NEG() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_NEG_ENABLE.ISP_CE0_SPECIALFX_NEG_ENABLE_ts.sfx_neg_enable = sfx_neg_enable_DISABLE_NEG)
#define sfx_neg_enable_DISABLE_NEG 0x0    //Disable negative
#define Is_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_NEG_ENABLE_sfx_neg_enable_ENABLE_NEG() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_NEG_ENABLE.ISP_CE0_SPECIALFX_NEG_ENABLE_ts.sfx_neg_enable == sfx_neg_enable_ENABLE_NEG)
#define Set_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_NEG_ENABLE_sfx_neg_enable__ENABLE_NEG() (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_NEG_ENABLE.ISP_CE0_SPECIALFX_NEG_ENABLE_ts.sfx_neg_enable = sfx_neg_enable_ENABLE_NEG)
#define sfx_neg_enable_ENABLE_NEG 0x1    //Enable negative
#define Set_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_NEG_ENABLE(sfx_neg_enable) (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_NEG_ENABLE.word = (uint8_t)sfx_neg_enable<<0)
#define Get_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_NEG_ENABLE() p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_NEG_ENABLE.word
#define Set_ISP_CE0_SPECIALFX_ISP_CE0_SPECIALFX_NEG_ENABLE_word(x) (p_ISP_CE0_SPECIALFX_IP->ISP_CE0_SPECIALFX_NEG_ENABLE.word = x)

//ISP_CE0_DITHER_ENABLE
/*Description: Dither enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable dither*/
    }ISP_CE0_DITHER_ENABLE_ts;

}ISP_CE0_DITHER_ENABLE_tu;



//ISP_CE0_DITHER_GREEN_BITS
/*Description: Dithering level for Green channel
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t iGbits :3;
        /* Level of dithering for Green channel. Correspond to the number of bit used for Green channel*/
    }ISP_CE0_DITHER_GREEN_BITS_ts;

}ISP_CE0_DITHER_GREEN_BITS_tu;



//ISP_CE0_DITHER_REDBLUE_BITS
/*Description: Dithering level for Red and Blue channels
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t iRBbits :3;
        /* Level of dithering for Red/Blue channels. Correspond to the number of bit used for Red/Blue channels*/
    }ISP_CE0_DITHER_REDBLUE_BITS_ts;

}ISP_CE0_DITHER_REDBLUE_BITS_tu;

typedef struct
{
    ISP_CE0_DITHER_ENABLE_tu ISP_CE0_DITHER_ENABLE;
    ISP_CE0_DITHER_GREEN_BITS_tu ISP_CE0_DITHER_GREEN_BITS;
    ISP_CE0_DITHER_REDBLUE_BITS_tu ISP_CE0_DITHER_REDBLUE_BITS;
}ISP_CE0_DITHER_IP_ts;




//ISP_CE0_DITHER_ENABLE


#define Get_ISP_CE0_DITHER_ISP_CE0_DITHER_ENABLE_enable() p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_ENABLE.ISP_CE0_DITHER_ENABLE_ts.enable
#define Is_ISP_CE0_DITHER_ISP_CE0_DITHER_ENABLE_enable_DISABLE() (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_ENABLE.ISP_CE0_DITHER_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE0_DITHER_ISP_CE0_DITHER_ENABLE_enable__DISABLE() (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_ENABLE.ISP_CE0_DITHER_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable dither
#define Is_ISP_CE0_DITHER_ISP_CE0_DITHER_ENABLE_enable_ENABLE() (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_ENABLE.ISP_CE0_DITHER_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE0_DITHER_ISP_CE0_DITHER_ENABLE_enable__ENABLE() (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_ENABLE.ISP_CE0_DITHER_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable dither
#define Set_ISP_CE0_DITHER_ISP_CE0_DITHER_ENABLE(enable) (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_ENABLE.word = (uint32_t)enable<<0)
#define Get_ISP_CE0_DITHER_ISP_CE0_DITHER_ENABLE() p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_ENABLE.word
#define Set_ISP_CE0_DITHER_ISP_CE0_DITHER_ENABLE_word(x) (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_ENABLE.word = x)


//ISP_CE0_DITHER_GREEN_BITS


#define Get_ISP_CE0_DITHER_ISP_CE0_DITHER_GREEN_BITS_iGbits() p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_GREEN_BITS.ISP_CE0_DITHER_GREEN_BITS_ts.iGbits
#define Set_ISP_CE0_DITHER_ISP_CE0_DITHER_GREEN_BITS_iGbits(x) (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_GREEN_BITS.ISP_CE0_DITHER_GREEN_BITS_ts.iGbits = x)
#define Set_ISP_CE0_DITHER_ISP_CE0_DITHER_GREEN_BITS(iGbits) (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_GREEN_BITS.word = (uint32_t)iGbits<<0)
#define Get_ISP_CE0_DITHER_ISP_CE0_DITHER_GREEN_BITS() p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_GREEN_BITS.word
#define Set_ISP_CE0_DITHER_ISP_CE0_DITHER_GREEN_BITS_word(x) (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_GREEN_BITS.word = x)


//ISP_CE0_DITHER_REDBLUE_BITS


#define Get_ISP_CE0_DITHER_ISP_CE0_DITHER_REDBLUE_BITS_iRBbits() p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_REDBLUE_BITS.ISP_CE0_DITHER_REDBLUE_BITS_ts.iRBbits
#define Set_ISP_CE0_DITHER_ISP_CE0_DITHER_REDBLUE_BITS_iRBbits(x) (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_REDBLUE_BITS.ISP_CE0_DITHER_REDBLUE_BITS_ts.iRBbits = x)
#define Set_ISP_CE0_DITHER_ISP_CE0_DITHER_REDBLUE_BITS(iRBbits) (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_REDBLUE_BITS.word = (uint8_t)iRBbits<<0)
#define Get_ISP_CE0_DITHER_ISP_CE0_DITHER_REDBLUE_BITS() p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_REDBLUE_BITS.word
#define Set_ISP_CE0_DITHER_ISP_CE0_DITHER_REDBLUE_BITS_word(x) (p_ISP_CE0_DITHER_IP->ISP_CE0_DITHER_REDBLUE_BITS.word = x)

//ISP_CE0_GPSSCALER_ENABLE
/*Description: Enable Horizontal and or Vertical scaling. Control the soft reset on full GPS state machine.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t h_gps_enable :1;
        /* 
        This bit is used to enable the horizontal scaling function. If this is enabled RGB horizontal scaling will be performed in accordance with parameters below otherwise IDP data out will be the same as IDP data in.*/
        uint8_t v_gps_enable :1;
        /* 
        This bit is used to enable the vertical scaling function. If this is enabled RGB vertical scaling will be performed in accordance with parameters below otherwise IDP data out will be the same as IDP data in.*/
        uint8_t reserved0 :2;
        uint8_t gps_soft_reset :1;
        /* Disable gps_soft_reset module*/
    }ISP_CE0_GPSSCALER_ENABLE_ts;

}ISP_CE0_GPSSCALER_ENABLE_tu;



//ISP_CE0_GPSSCALER_DOWNSCALING
/*Description: Enable dowscaling. If this bit is set to 1, the scaler will work in downscaling mode, else the scaler will work in up-scaling mode.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t gps_downscaling :1;
    }ISP_CE0_GPSSCALER_DOWNSCALING_ts;

}ISP_CE0_GPSSCALER_DOWNSCALING_tu;



//ISP_CE0_GPSSCALER_LR_BORD_PIXS
/*Description: Horizontal left and right border pixels is used to indicate with reference from the left and right hand side of the image which pixels are to be passed as borders.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t h_left_border_pixs;
        uint16_t h_right_border_pixs;
    }ISP_CE0_GPSSCALER_LR_BORD_PIXS_ts;

}ISP_CE0_GPSSCALER_LR_BORD_PIXS_tu;



//ISP_CE0_GPSSCALER_TB_BORD_LINES
/*Description: Vertical top and bottom border pixels is used to indicate with reference from the top and bottom hand side of the image which pixels are to be passed as borders.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t v_top_border_lines;
        uint16_t v_bottom_border_lines;
    }ISP_CE0_GPSSCALER_TB_BORD_LINES_ts;

}ISP_CE0_GPSSCALER_TB_BORD_LINES_tu;



//ISP_CE0_GPSSCALER_H_V_FIRTAPS
/*Description: Horizontal and vertical FIR taps is used to indicate how many taps are used in the FIR filter for the current frame.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t v_fir_taps;
        uint8_t h_fir_taps;
    }ISP_CE0_GPSSCALER_H_V_FIRTAPS_ts;

}ISP_CE0_GPSSCALER_H_V_FIRTAPS_tu;



//ISP_CE0_GPSSCALER_H_V_IPSIZES
/*Description: Horizontal and vertical input size provides the number of active pixels in the input frame.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t v_input_size;
        uint16_t h_input_size;
    }ISP_CE0_GPSSCALER_H_V_IPSIZES_ts;

}ISP_CE0_GPSSCALER_H_V_IPSIZES_tu;



//ISP_CE0_GPSSCALER_H_V_OPSIZES
/*Description: Horizontal and Vertical output size provides the number of active pixels in the output frame.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t v_input_size;
        uint16_t h_input_size;
    }ISP_CE0_GPSSCALER_H_V_OPSIZES_ts;

}ISP_CE0_GPSSCALER_H_V_OPSIZES_tu;



//ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS
/*Description: Horizontal and Vertical log physical polyphases gives the log2 number of physical polyphases which are stored in the coefficient register bank.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t v_log_phys_polys;
        uint8_t h_log_phys_polys;
    }ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_ts;

}ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_tu;



//ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY
/*Description: Horizontal and vertical kickoff delay provides the integer part of the starting phase delay.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t v_kickoff_delay;
        uint8_t h_kickoff_delay;
    }ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_ts;

}ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_tu;



//ISP_CE0_GPSSCALER_H_V_CROPFRAC
/*Description: Horizontal and vertical crop fraction provides the fractional part of the starting phase delay.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t v_crop_frac;
        uint16_t h_crop_frac;
    }ISP_CE0_GPSSCALER_H_V_CROPFRAC_ts;

}ISP_CE0_GPSSCALER_H_V_CROPFRAC_tu;



//ISP_CE0_GPSSCALER_H_V_STEPBULK
/*Description: Horizontal and vertical step bulk provides the integer part of the scaling ratio.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t v_step_bulk;
        uint8_t h_step_bulk;
    }ISP_CE0_GPSSCALER_H_V_STEPBULK_ts;

}ISP_CE0_GPSSCALER_H_V_STEPBULK_tu;



//ISP_CE0_GPSSCALER_H_V_STEPFRAC
/*Description: Horizontal and vertical step bulk provides the fractional part of the scaling ratio.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t v_step_frac;
        uint16_t h_step_frac;
    }ISP_CE0_GPSSCALER_H_V_STEPFRAC_ts;

}ISP_CE0_GPSSCALER_H_V_STEPFRAC_tu;



//ISP_CE0_GPSSCALER_HCOF_0_3
/*Description: Horizontal coefficients 0 to 3, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr3;
        uint8_t h_cof_set_wr2;
        uint8_t h_cof_set_wr1;
        uint8_t h_cof_set_wr0;
    }ISP_CE0_GPSSCALER_HCOF_0_3_ts;

}ISP_CE0_GPSSCALER_HCOF_0_3_tu;



//ISP_CE0_GPSSCALER_HCOF_4_7
/*Description: Horizontal coefficients 4 to 7, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr7;
        uint8_t h_cof_set_wr6;
        uint8_t h_cof_set_wr5;
        uint8_t h_cof_set_wr4;
    }ISP_CE0_GPSSCALER_HCOF_4_7_ts;

}ISP_CE0_GPSSCALER_HCOF_4_7_tu;



//ISP_CE0_GPSSCALER_HCOF_8_11
/*Description: Horizontal coefficients 8 to 11, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr11;
        uint8_t h_cof_set_wr10;
        uint8_t h_cof_set_wr9;
        uint8_t h_cof_set_wr8;
    }ISP_CE0_GPSSCALER_HCOF_8_11_ts;

}ISP_CE0_GPSSCALER_HCOF_8_11_tu;



//ISP_CE0_GPSSCALER_HCOF_12_15
/*Description: Horizontal coefficients 12 to 15, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr15;
        uint8_t h_cof_set_wr14;
        uint8_t h_cof_set_wr13;
        uint8_t h_cof_set_wr12;
    }ISP_CE0_GPSSCALER_HCOF_12_15_ts;

}ISP_CE0_GPSSCALER_HCOF_12_15_tu;



//ISP_CE0_GPSSCALER_HCOF_16_19
/*Description: Horizontal coefficients 16 to 19, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr19;
        uint8_t h_cof_set_wr18;
        uint8_t h_cof_set_wr17;
        uint8_t h_cof_set_wr16;
    }ISP_CE0_GPSSCALER_HCOF_16_19_ts;

}ISP_CE0_GPSSCALER_HCOF_16_19_tu;



//ISP_CE0_GPSSCALER_HCOF_20_23
/*Description: Horizontal coefficients 20 to 23, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr23;
        uint8_t h_cof_set_wr22;
        uint8_t h_cof_set_wr21;
        uint8_t h_cof_set_wr20;
    }ISP_CE0_GPSSCALER_HCOF_20_23_ts;

}ISP_CE0_GPSSCALER_HCOF_20_23_tu;



//ISP_CE0_GPSSCALER_HCOF_24_27
/*Description: Horizontal coefficients 24 to 27, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr27;
        uint8_t h_cof_set_wr26;
        uint8_t h_cof_set_wr25;
        uint8_t h_cof_set_wr24;
    }ISP_CE0_GPSSCALER_HCOF_24_27_ts;

}ISP_CE0_GPSSCALER_HCOF_24_27_tu;



//ISP_CE0_GPSSCALER_HCOF_28_31
/*Description: Horizontal coefficients 28 to 31, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr31;
        uint8_t h_cof_set_wr30;
        uint8_t h_cof_set_wr29;
        uint8_t h_cof_set_wr28;
    }ISP_CE0_GPSSCALER_HCOF_28_31_ts;

}ISP_CE0_GPSSCALER_HCOF_28_31_tu;



//ISP_CE0_GPSSCALER_HCOF_32_35
/*Description: Horizontal coefficients 32 to 35, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr35;
        uint8_t h_cof_set_wr34;
        uint8_t h_cof_set_wr33;
        uint8_t h_cof_set_wr32;
    }ISP_CE0_GPSSCALER_HCOF_32_35_ts;

}ISP_CE0_GPSSCALER_HCOF_32_35_tu;



//ISP_CE0_GPSSCALER_HCOF_36_39
/*Description: Horizontal coefficients 36 to 39, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr39;
        uint8_t h_cof_set_wr38;
        uint8_t h_cof_set_wr37;
        uint8_t h_cof_set_wr36;
    }ISP_CE0_GPSSCALER_HCOF_36_39_ts;

}ISP_CE0_GPSSCALER_HCOF_36_39_tu;



//ISP_CE0_GPSSCALER_HCOF_40_43
/*Description: Horizontal coefficients 40 to 43, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr43;
        uint8_t h_cof_set_wr42;
        uint8_t h_cof_set_wr41;
        uint8_t h_cof_set_wr40;
    }ISP_CE0_GPSSCALER_HCOF_40_43_ts;

}ISP_CE0_GPSSCALER_HCOF_40_43_tu;



//ISP_CE0_GPSSCALER_HCOF_44_47
/*Description: Horizontal coefficients 44 to 47, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr47;
        uint8_t h_cof_set_wr46;
        uint8_t h_cof_set_wr45;
        uint8_t h_cof_set_wr44;
    }ISP_CE0_GPSSCALER_HCOF_44_47_ts;

}ISP_CE0_GPSSCALER_HCOF_44_47_tu;



//ISP_CE0_GPSSCALER_HCOF_48_51
/*Description: Horizontal coefficients 48 to 51, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr51;
        uint8_t h_cof_set_wr50;
        uint8_t h_cof_set_wr49;
        uint8_t h_cof_set_wr48;
    }ISP_CE0_GPSSCALER_HCOF_48_51_ts;

}ISP_CE0_GPSSCALER_HCOF_48_51_tu;



//ISP_CE0_GPSSCALER_HCOF_52_55
/*Description: Horizontal coefficients 52 to 55, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr55;
        uint8_t h_cof_set_wr54;
        uint8_t h_cof_set_wr53;
        uint8_t h_cof_set_wr52;
    }ISP_CE0_GPSSCALER_HCOF_52_55_ts;

}ISP_CE0_GPSSCALER_HCOF_52_55_tu;



//ISP_CE0_GPSSCALER_HCOF_56_59
/*Description: Horizontal coefficients 56 to 59, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr59;
        uint8_t h_cof_set_wr58;
        uint8_t h_cof_set_wr57;
        uint8_t h_cof_set_wr56;
    }ISP_CE0_GPSSCALER_HCOF_56_59_ts;

}ISP_CE0_GPSSCALER_HCOF_56_59_tu;



//ISP_CE0_GPSSCALER_HCOF_60_63
/*Description: Horizontal coefficients 60 to 63, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr63;
        uint8_t h_cof_set_wr62;
        uint8_t h_cof_set_wr61;
        uint8_t h_cof_set_wr60;
    }ISP_CE0_GPSSCALER_HCOF_60_63_ts;

}ISP_CE0_GPSSCALER_HCOF_60_63_tu;



//ISP_CE0_GPSSCALER_VCOF_0_3
/*Description: Vertical coefficients 0 to 3, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr3;
        uint8_t v_cof_set_wr2;
        uint8_t v_cof_set_wr1;
        uint8_t v_cof_set_wr0;
    }ISP_CE0_GPSSCALER_VCOF_0_3_ts;

}ISP_CE0_GPSSCALER_VCOF_0_3_tu;



//ISP_CE0_GPSSCALER_VCOF_4_7
/*Description: Vertical coefficients 4 to 7, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr7;
        uint8_t v_cof_set_wr6;
        uint8_t v_cof_set_wr5;
        uint8_t v_cof_set_wr4;
    }ISP_CE0_GPSSCALER_VCOF_4_7_ts;

}ISP_CE0_GPSSCALER_VCOF_4_7_tu;



//ISP_CE0_GPSSCALER_VCOF_8_11
/*Description: Vertical coefficients 8 to 11, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr11;
        uint8_t v_cof_set_wr10;
        uint8_t v_cof_set_wr9;
        uint8_t v_cof_set_wr8;
    }ISP_CE0_GPSSCALER_VCOF_8_11_ts;

}ISP_CE0_GPSSCALER_VCOF_8_11_tu;



//ISP_CE0_GPSSCALER_VCOF_12_15
/*Description: Vertical coefficients 12 to 17, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr15;
        uint8_t v_cof_set_wr14;
        uint8_t v_cof_set_wr13;
        uint8_t v_cof_set_wr12;
    }ISP_CE0_GPSSCALER_VCOF_12_15_ts;

}ISP_CE0_GPSSCALER_VCOF_12_15_tu;



//ISP_CE0_GPSSCALER_VCOF_16_19
/*Description: Vertical coefficients 16 to 19, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr19;
        uint8_t v_cof_set_wr18;
        uint8_t v_cof_set_wr17;
        uint8_t v_cof_set_wr16;
    }ISP_CE0_GPSSCALER_VCOF_16_19_ts;

}ISP_CE0_GPSSCALER_VCOF_16_19_tu;



//ISP_CE0_GPSSCALER_VCOF_20_23
/*Description: Vertical coefficients 20 to 23, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr23;
        uint8_t v_cof_set_wr22;
        uint8_t v_cof_set_wr21;
        uint8_t v_cof_set_wr20;
    }ISP_CE0_GPSSCALER_VCOF_20_23_ts;

}ISP_CE0_GPSSCALER_VCOF_20_23_tu;



//ISP_CE0_GPSSCALER_VCOF_24_27
/*Description: Vertical coefficients 24 to 27, set is the parallel bus of vertical filter coefficients
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr27;
        uint8_t v_cof_set_wr26;
        uint8_t v_cof_set_wr25;
        uint8_t v_cof_set_wr24;
    }ISP_CE0_GPSSCALER_VCOF_24_27_ts;

}ISP_CE0_GPSSCALER_VCOF_24_27_tu;



//ISP_CE0_GPSSCALER_VCOF_28_31
/*Description: Vertical coefficients 28 to 31, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr31;
        uint8_t v_cof_set_wr30;
        uint8_t v_cof_set_wr29;
        uint8_t v_cof_set_wr28;
    }ISP_CE0_GPSSCALER_VCOF_28_31_ts;

}ISP_CE0_GPSSCALER_VCOF_28_31_tu;



//ISP_CE0_GPSSCALER_VCOF_32_35
/*Description: Vertical coefficients 32 to 35, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr35;
        uint8_t v_cof_set_wr34;
        uint8_t v_cof_set_wr33;
        uint8_t v_cof_set_wr32;
    }ISP_CE0_GPSSCALER_VCOF_32_35_ts;

}ISP_CE0_GPSSCALER_VCOF_32_35_tu;



//ISP_CE0_GPSSCALER_VCOF_36_39
/*Description: Vertical coefficients 36 to 39, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr39;
        uint8_t v_cof_set_wr38;
        uint8_t v_cof_set_wr37;
        uint8_t v_cof_set_wr36;
    }ISP_CE0_GPSSCALER_VCOF_36_39_ts;

}ISP_CE0_GPSSCALER_VCOF_36_39_tu;



//ISP_CE0_GPSSCALER_VCOF_40_43
/*Description: Vertical coefficients 40 to 43, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr43;
        uint8_t v_cof_set_wr42;
        uint8_t v_cof_set_wr41;
        uint8_t v_cof_set_wr40;
    }ISP_CE0_GPSSCALER_VCOF_40_43_ts;

}ISP_CE0_GPSSCALER_VCOF_40_43_tu;



//ISP_CE0_GPSSCALER_VCOF_44_47
/*Description: Vertical coefficients 44 to 47, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr47;
        uint8_t v_cof_set_wr46;
        uint8_t v_cof_set_wr45;
        uint8_t v_cof_set_wr44;
    }ISP_CE0_GPSSCALER_VCOF_44_47_ts;

}ISP_CE0_GPSSCALER_VCOF_44_47_tu;



//ISP_CE0_GPSSCALER_VCOF_48_51
/*Description: Vertical coefficients 48 to 51, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr51;
        uint8_t v_cof_set_wr50;
        uint8_t v_cof_set_wr49;
        uint8_t v_cof_set_wr48;
    }ISP_CE0_GPSSCALER_VCOF_48_51_ts;

}ISP_CE0_GPSSCALER_VCOF_48_51_tu;



//ISP_CE0_GPSSCALER_VCOF_52_55
/*Description: Vertical coefficients 52 to 55, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr55;
        uint8_t v_cof_set_wr54;
        uint8_t v_cof_set_wr53;
        uint8_t v_cof_set_wr52;
    }ISP_CE0_GPSSCALER_VCOF_52_55_ts;

}ISP_CE0_GPSSCALER_VCOF_52_55_tu;



//ISP_CE0_GPSSCALER_VCOF_56_59
/*Description: Vertical coefficients 56 to 59, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr59;
        uint8_t v_cof_set_wr58;
        uint8_t v_cof_set_wr57;
        uint8_t v_cof_set_wr56;
    }ISP_CE0_GPSSCALER_VCOF_56_59_ts;

}ISP_CE0_GPSSCALER_VCOF_56_59_tu;



//ISP_CE0_GPSSCALER_VCOF_60_63
/*Description: Vertical coefficients 60 to 63, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr63;
        uint8_t v_cof_set_wr62;
        uint8_t v_cof_set_wr61;
        uint8_t v_cof_set_wr60;
    }ISP_CE0_GPSSCALER_VCOF_60_63_ts;

}ISP_CE0_GPSSCALER_VCOF_60_63_tu;

typedef struct
{
    ISP_CE0_GPSSCALER_ENABLE_tu ISP_CE0_GPSSCALER_ENABLE;
    ISP_CE0_GPSSCALER_DOWNSCALING_tu ISP_CE0_GPSSCALER_DOWNSCALING;
    ISP_CE0_GPSSCALER_LR_BORD_PIXS_tu ISP_CE0_GPSSCALER_LR_BORD_PIXS;
    ISP_CE0_GPSSCALER_TB_BORD_LINES_tu ISP_CE0_GPSSCALER_TB_BORD_LINES;
    ISP_CE0_GPSSCALER_H_V_FIRTAPS_tu ISP_CE0_GPSSCALER_H_V_FIRTAPS;
    ISP_CE0_GPSSCALER_H_V_IPSIZES_tu ISP_CE0_GPSSCALER_H_V_IPSIZES;
    ISP_CE0_GPSSCALER_H_V_OPSIZES_tu ISP_CE0_GPSSCALER_H_V_OPSIZES;
    ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_tu ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS;
    ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_tu ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY;
    ISP_CE0_GPSSCALER_H_V_CROPFRAC_tu ISP_CE0_GPSSCALER_H_V_CROPFRAC;
    ISP_CE0_GPSSCALER_H_V_STEPBULK_tu ISP_CE0_GPSSCALER_H_V_STEPBULK;
    ISP_CE0_GPSSCALER_H_V_STEPFRAC_tu ISP_CE0_GPSSCALER_H_V_STEPFRAC;
    ISP_CE0_GPSSCALER_HCOF_0_3_tu ISP_CE0_GPSSCALER_HCOF_0_3;
    ISP_CE0_GPSSCALER_HCOF_4_7_tu ISP_CE0_GPSSCALER_HCOF_4_7;
    ISP_CE0_GPSSCALER_HCOF_8_11_tu ISP_CE0_GPSSCALER_HCOF_8_11;
    ISP_CE0_GPSSCALER_HCOF_12_15_tu ISP_CE0_GPSSCALER_HCOF_12_15;
    ISP_CE0_GPSSCALER_HCOF_16_19_tu ISP_CE0_GPSSCALER_HCOF_16_19;
    ISP_CE0_GPSSCALER_HCOF_20_23_tu ISP_CE0_GPSSCALER_HCOF_20_23;
    ISP_CE0_GPSSCALER_HCOF_24_27_tu ISP_CE0_GPSSCALER_HCOF_24_27;
    ISP_CE0_GPSSCALER_HCOF_28_31_tu ISP_CE0_GPSSCALER_HCOF_28_31;
    ISP_CE0_GPSSCALER_HCOF_32_35_tu ISP_CE0_GPSSCALER_HCOF_32_35;
    ISP_CE0_GPSSCALER_HCOF_36_39_tu ISP_CE0_GPSSCALER_HCOF_36_39;
    ISP_CE0_GPSSCALER_HCOF_40_43_tu ISP_CE0_GPSSCALER_HCOF_40_43;
    ISP_CE0_GPSSCALER_HCOF_44_47_tu ISP_CE0_GPSSCALER_HCOF_44_47;
    ISP_CE0_GPSSCALER_HCOF_48_51_tu ISP_CE0_GPSSCALER_HCOF_48_51;
    ISP_CE0_GPSSCALER_HCOF_52_55_tu ISP_CE0_GPSSCALER_HCOF_52_55;
    ISP_CE0_GPSSCALER_HCOF_56_59_tu ISP_CE0_GPSSCALER_HCOF_56_59;
    ISP_CE0_GPSSCALER_HCOF_60_63_tu ISP_CE0_GPSSCALER_HCOF_60_63;
    ISP_CE0_GPSSCALER_VCOF_0_3_tu ISP_CE0_GPSSCALER_VCOF_0_3;
    ISP_CE0_GPSSCALER_VCOF_4_7_tu ISP_CE0_GPSSCALER_VCOF_4_7;
    ISP_CE0_GPSSCALER_VCOF_8_11_tu ISP_CE0_GPSSCALER_VCOF_8_11;
    ISP_CE0_GPSSCALER_VCOF_12_15_tu ISP_CE0_GPSSCALER_VCOF_12_15;
    ISP_CE0_GPSSCALER_VCOF_16_19_tu ISP_CE0_GPSSCALER_VCOF_16_19;
    ISP_CE0_GPSSCALER_VCOF_20_23_tu ISP_CE0_GPSSCALER_VCOF_20_23;
    ISP_CE0_GPSSCALER_VCOF_24_27_tu ISP_CE0_GPSSCALER_VCOF_24_27;
    ISP_CE0_GPSSCALER_VCOF_28_31_tu ISP_CE0_GPSSCALER_VCOF_28_31;
    ISP_CE0_GPSSCALER_VCOF_32_35_tu ISP_CE0_GPSSCALER_VCOF_32_35;
    ISP_CE0_GPSSCALER_VCOF_36_39_tu ISP_CE0_GPSSCALER_VCOF_36_39;
    ISP_CE0_GPSSCALER_VCOF_40_43_tu ISP_CE0_GPSSCALER_VCOF_40_43;
    ISP_CE0_GPSSCALER_VCOF_44_47_tu ISP_CE0_GPSSCALER_VCOF_44_47;
    ISP_CE0_GPSSCALER_VCOF_48_51_tu ISP_CE0_GPSSCALER_VCOF_48_51;
    ISP_CE0_GPSSCALER_VCOF_52_55_tu ISP_CE0_GPSSCALER_VCOF_52_55;
    ISP_CE0_GPSSCALER_VCOF_56_59_tu ISP_CE0_GPSSCALER_VCOF_56_59;
    ISP_CE0_GPSSCALER_VCOF_60_63_tu ISP_CE0_GPSSCALER_VCOF_60_63;
}ISP_CE0_GPSSCALER_IP_ts;




//ISP_CE0_GPSSCALER_ENABLE


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_h_gps_enable() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.h_gps_enable
#define Is_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_h_gps_enable_DISABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.h_gps_enable == h_gps_enable_DISABLE)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_h_gps_enable__DISABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.h_gps_enable = h_gps_enable_DISABLE)
#define h_gps_enable_DISABLE 0x0    //Disable horizontal scaling
#define Is_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_h_gps_enable_ENABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.h_gps_enable == h_gps_enable_ENABLE)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_h_gps_enable__ENABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.h_gps_enable = h_gps_enable_ENABLE)
#define h_gps_enable_ENABLE 0x1    //Enable horizontal scaling


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_v_gps_enable() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.v_gps_enable
#define Is_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_v_gps_enable_DISABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.v_gps_enable == v_gps_enable_DISABLE)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_v_gps_enable__DISABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.v_gps_enable = v_gps_enable_DISABLE)
#define v_gps_enable_DISABLE 0x0    //Disable vertical scaling
#define Is_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_v_gps_enable_ENABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.v_gps_enable == v_gps_enable_ENABLE)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_v_gps_enable__ENABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.v_gps_enable = v_gps_enable_ENABLE)
#define v_gps_enable_ENABLE 0x1    //Enable vertical scaling


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_gps_soft_reset() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.gps_soft_reset
#define Is_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_gps_soft_reset_DISABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.gps_soft_reset == gps_soft_reset_DISABLE)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_gps_soft_reset__DISABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.gps_soft_reset = gps_soft_reset_DISABLE)
#define gps_soft_reset_DISABLE 0x0    //Disable gps_soft_reset module
#define Is_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_gps_soft_reset_ENABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.gps_soft_reset == gps_soft_reset_ENABLE)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_gps_soft_reset__ENABLE() (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.ISP_CE0_GPSSCALER_ENABLE_ts.gps_soft_reset = gps_soft_reset_ENABLE)
#define gps_soft_reset_ENABLE 0x1    //Enable gps_soft_reset module
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE(h_gps_enable,v_gps_enable,gps_soft_reset) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.word = (uint32_t)h_gps_enable<<0 | (uint32_t)v_gps_enable<<1 | (uint32_t)gps_soft_reset<<4)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_ENABLE_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_ENABLE.word = x)


//ISP_CE0_GPSSCALER_DOWNSCALING


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_DOWNSCALING_gps_downscaling() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_DOWNSCALING.ISP_CE0_GPSSCALER_DOWNSCALING_ts.gps_downscaling
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_DOWNSCALING_gps_downscaling(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_DOWNSCALING.ISP_CE0_GPSSCALER_DOWNSCALING_ts.gps_downscaling = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_DOWNSCALING(gps_downscaling) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_DOWNSCALING.word = (uint32_t)gps_downscaling<<0)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_DOWNSCALING() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_DOWNSCALING.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_DOWNSCALING_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_DOWNSCALING.word = x)


//ISP_CE0_GPSSCALER_LR_BORD_PIXS


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_LR_BORD_PIXS_h_left_border_pixs() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_LR_BORD_PIXS.ISP_CE0_GPSSCALER_LR_BORD_PIXS_ts.h_left_border_pixs
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_LR_BORD_PIXS_h_left_border_pixs(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_LR_BORD_PIXS.ISP_CE0_GPSSCALER_LR_BORD_PIXS_ts.h_left_border_pixs = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_LR_BORD_PIXS_h_right_border_pixs() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_LR_BORD_PIXS.ISP_CE0_GPSSCALER_LR_BORD_PIXS_ts.h_right_border_pixs
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_LR_BORD_PIXS_h_right_border_pixs(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_LR_BORD_PIXS.ISP_CE0_GPSSCALER_LR_BORD_PIXS_ts.h_right_border_pixs = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_LR_BORD_PIXS(h_left_border_pixs,h_right_border_pixs) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_LR_BORD_PIXS.word = (uint32_t)h_left_border_pixs<<0 | (uint32_t)h_right_border_pixs<<16)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_LR_BORD_PIXS() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_LR_BORD_PIXS.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_LR_BORD_PIXS_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_LR_BORD_PIXS.word = x)


//ISP_CE0_GPSSCALER_TB_BORD_LINES


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_TB_BORD_LINES_v_top_border_lines() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_TB_BORD_LINES.ISP_CE0_GPSSCALER_TB_BORD_LINES_ts.v_top_border_lines
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_TB_BORD_LINES_v_top_border_lines(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_TB_BORD_LINES.ISP_CE0_GPSSCALER_TB_BORD_LINES_ts.v_top_border_lines = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_TB_BORD_LINES_v_bottom_border_lines() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_TB_BORD_LINES.ISP_CE0_GPSSCALER_TB_BORD_LINES_ts.v_bottom_border_lines
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_TB_BORD_LINES_v_bottom_border_lines(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_TB_BORD_LINES.ISP_CE0_GPSSCALER_TB_BORD_LINES_ts.v_bottom_border_lines = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_TB_BORD_LINES(v_top_border_lines,v_bottom_border_lines) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_TB_BORD_LINES.word = (uint32_t)v_top_border_lines<<0 | (uint32_t)v_bottom_border_lines<<16)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_TB_BORD_LINES() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_TB_BORD_LINES.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_TB_BORD_LINES_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_TB_BORD_LINES.word = x)


//ISP_CE0_GPSSCALER_H_V_FIRTAPS


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_FIRTAPS_v_fir_taps() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_FIRTAPS.ISP_CE0_GPSSCALER_H_V_FIRTAPS_ts.v_fir_taps
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_FIRTAPS_v_fir_taps(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_FIRTAPS.ISP_CE0_GPSSCALER_H_V_FIRTAPS_ts.v_fir_taps = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_FIRTAPS_h_fir_taps() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_FIRTAPS.ISP_CE0_GPSSCALER_H_V_FIRTAPS_ts.h_fir_taps
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_FIRTAPS_h_fir_taps(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_FIRTAPS.ISP_CE0_GPSSCALER_H_V_FIRTAPS_ts.h_fir_taps = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_FIRTAPS(v_fir_taps,h_fir_taps) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_FIRTAPS.word = (uint32_t)v_fir_taps<<0 | (uint32_t)h_fir_taps<<8)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_FIRTAPS() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_FIRTAPS.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_FIRTAPS_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_FIRTAPS.word = x)


//ISP_CE0_GPSSCALER_H_V_IPSIZES


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_IPSIZES_v_input_size() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_IPSIZES.ISP_CE0_GPSSCALER_H_V_IPSIZES_ts.v_input_size
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_IPSIZES_v_input_size(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_IPSIZES.ISP_CE0_GPSSCALER_H_V_IPSIZES_ts.v_input_size = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_IPSIZES_h_input_size() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_IPSIZES.ISP_CE0_GPSSCALER_H_V_IPSIZES_ts.h_input_size
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_IPSIZES_h_input_size(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_IPSIZES.ISP_CE0_GPSSCALER_H_V_IPSIZES_ts.h_input_size = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_IPSIZES(v_input_size,h_input_size) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_IPSIZES.word = (uint32_t)v_input_size<<0 | (uint32_t)h_input_size<<16)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_IPSIZES() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_IPSIZES.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_IPSIZES_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_IPSIZES.word = x)


//ISP_CE0_GPSSCALER_H_V_OPSIZES


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_OPSIZES_v_input_size() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_OPSIZES.ISP_CE0_GPSSCALER_H_V_OPSIZES_ts.v_input_size
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_OPSIZES_v_input_size(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_OPSIZES.ISP_CE0_GPSSCALER_H_V_OPSIZES_ts.v_input_size = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_OPSIZES_h_input_size() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_OPSIZES.ISP_CE0_GPSSCALER_H_V_OPSIZES_ts.h_input_size
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_OPSIZES_h_input_size(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_OPSIZES.ISP_CE0_GPSSCALER_H_V_OPSIZES_ts.h_input_size = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_OPSIZES(v_input_size,h_input_size) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_OPSIZES.word = (uint32_t)v_input_size<<0 | (uint32_t)h_input_size<<16)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_OPSIZES() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_OPSIZES.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_OPSIZES_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_OPSIZES.word = x)


//ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_v_log_phys_polys() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS.ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_ts.v_log_phys_polys
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_v_log_phys_polys(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS.ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_ts.v_log_phys_polys = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_h_log_phys_polys() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS.ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_ts.h_log_phys_polys
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_h_log_phys_polys(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS.ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_ts.h_log_phys_polys = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS(v_log_phys_polys,h_log_phys_polys) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS.word = (uint32_t)v_log_phys_polys<<0 | (uint32_t)h_log_phys_polys<<8)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_LOGPHYSPOLYS.word = x)


//ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_v_kickoff_delay() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY.ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_ts.v_kickoff_delay
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_v_kickoff_delay(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY.ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_ts.v_kickoff_delay = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_h_kickoff_delay() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY.ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_ts.h_kickoff_delay
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_h_kickoff_delay(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY.ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_ts.h_kickoff_delay = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY(v_kickoff_delay,h_kickoff_delay) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY.word = (uint32_t)v_kickoff_delay<<0 | (uint32_t)h_kickoff_delay<<8)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_KICKOFF_DLY.word = x)


//ISP_CE0_GPSSCALER_H_V_CROPFRAC


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_CROPFRAC_v_crop_frac() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_CROPFRAC.ISP_CE0_GPSSCALER_H_V_CROPFRAC_ts.v_crop_frac
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_CROPFRAC_v_crop_frac(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_CROPFRAC.ISP_CE0_GPSSCALER_H_V_CROPFRAC_ts.v_crop_frac = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_CROPFRAC_h_crop_frac() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_CROPFRAC.ISP_CE0_GPSSCALER_H_V_CROPFRAC_ts.h_crop_frac
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_CROPFRAC_h_crop_frac(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_CROPFRAC.ISP_CE0_GPSSCALER_H_V_CROPFRAC_ts.h_crop_frac = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_CROPFRAC(v_crop_frac,h_crop_frac) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_CROPFRAC.word = (uint32_t)v_crop_frac<<0 | (uint32_t)h_crop_frac<<16)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_CROPFRAC() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_CROPFRAC.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_CROPFRAC_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_CROPFRAC.word = x)


//ISP_CE0_GPSSCALER_H_V_STEPBULK


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPBULK_v_step_bulk() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPBULK.ISP_CE0_GPSSCALER_H_V_STEPBULK_ts.v_step_bulk
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPBULK_v_step_bulk(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPBULK.ISP_CE0_GPSSCALER_H_V_STEPBULK_ts.v_step_bulk = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPBULK_h_step_bulk() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPBULK.ISP_CE0_GPSSCALER_H_V_STEPBULK_ts.h_step_bulk
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPBULK_h_step_bulk(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPBULK.ISP_CE0_GPSSCALER_H_V_STEPBULK_ts.h_step_bulk = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPBULK(v_step_bulk,h_step_bulk) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPBULK.word = (uint32_t)v_step_bulk<<0 | (uint32_t)h_step_bulk<<8)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPBULK() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPBULK.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPBULK_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPBULK.word = x)


//ISP_CE0_GPSSCALER_H_V_STEPFRAC


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPFRAC_v_step_frac() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPFRAC.ISP_CE0_GPSSCALER_H_V_STEPFRAC_ts.v_step_frac
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPFRAC_v_step_frac(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPFRAC.ISP_CE0_GPSSCALER_H_V_STEPFRAC_ts.v_step_frac = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPFRAC_h_step_frac() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPFRAC.ISP_CE0_GPSSCALER_H_V_STEPFRAC_ts.h_step_frac
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPFRAC_h_step_frac(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPFRAC.ISP_CE0_GPSSCALER_H_V_STEPFRAC_ts.h_step_frac = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPFRAC(v_step_frac,h_step_frac) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPFRAC.word = (uint32_t)v_step_frac<<0 | (uint32_t)h_step_frac<<16)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPFRAC() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPFRAC.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_H_V_STEPFRAC_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_H_V_STEPFRAC.word = x)


//ISP_CE0_GPSSCALER_HCOF_0_3


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_0_3_h_cof_set_wr3() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_0_3.ISP_CE0_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr3
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_0_3_h_cof_set_wr3(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_0_3.ISP_CE0_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr3 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_0_3_h_cof_set_wr2() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_0_3.ISP_CE0_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr2
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_0_3_h_cof_set_wr2(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_0_3.ISP_CE0_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr2 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_0_3_h_cof_set_wr1() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_0_3.ISP_CE0_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr1
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_0_3_h_cof_set_wr1(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_0_3.ISP_CE0_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr1 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_0_3_h_cof_set_wr0() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_0_3.ISP_CE0_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr0
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_0_3_h_cof_set_wr0(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_0_3.ISP_CE0_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr0 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_0_3(h_cof_set_wr3,h_cof_set_wr2,h_cof_set_wr1,h_cof_set_wr0) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_0_3.word = (uint32_t)h_cof_set_wr3<<0 | (uint32_t)h_cof_set_wr2<<8 | (uint32_t)h_cof_set_wr1<<16 | (uint32_t)h_cof_set_wr0<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_0_3() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_0_3.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_0_3_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_0_3.word = x)


//ISP_CE0_GPSSCALER_HCOF_4_7


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_4_7_h_cof_set_wr7() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_4_7.ISP_CE0_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr7
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_4_7_h_cof_set_wr7(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_4_7.ISP_CE0_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr7 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_4_7_h_cof_set_wr6() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_4_7.ISP_CE0_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr6
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_4_7_h_cof_set_wr6(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_4_7.ISP_CE0_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr6 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_4_7_h_cof_set_wr5() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_4_7.ISP_CE0_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr5
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_4_7_h_cof_set_wr5(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_4_7.ISP_CE0_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr5 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_4_7_h_cof_set_wr4() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_4_7.ISP_CE0_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr4
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_4_7_h_cof_set_wr4(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_4_7.ISP_CE0_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr4 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_4_7(h_cof_set_wr7,h_cof_set_wr6,h_cof_set_wr5,h_cof_set_wr4) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_4_7.word = (uint32_t)h_cof_set_wr7<<0 | (uint32_t)h_cof_set_wr6<<8 | (uint32_t)h_cof_set_wr5<<16 | (uint32_t)h_cof_set_wr4<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_4_7() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_4_7.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_4_7_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_4_7.word = x)


//ISP_CE0_GPSSCALER_HCOF_8_11


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_8_11_h_cof_set_wr11() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_8_11.ISP_CE0_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr11
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_8_11_h_cof_set_wr11(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_8_11.ISP_CE0_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr11 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_8_11_h_cof_set_wr10() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_8_11.ISP_CE0_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr10
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_8_11_h_cof_set_wr10(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_8_11.ISP_CE0_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr10 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_8_11_h_cof_set_wr9() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_8_11.ISP_CE0_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr9
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_8_11_h_cof_set_wr9(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_8_11.ISP_CE0_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr9 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_8_11_h_cof_set_wr8() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_8_11.ISP_CE0_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr8
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_8_11_h_cof_set_wr8(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_8_11.ISP_CE0_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr8 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_8_11(h_cof_set_wr11,h_cof_set_wr10,h_cof_set_wr9,h_cof_set_wr8) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_8_11.word = (uint32_t)h_cof_set_wr11<<0 | (uint32_t)h_cof_set_wr10<<8 | (uint32_t)h_cof_set_wr9<<16 | (uint32_t)h_cof_set_wr8<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_8_11() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_8_11.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_8_11_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_8_11.word = x)


//ISP_CE0_GPSSCALER_HCOF_12_15


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_12_15_h_cof_set_wr15() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_12_15.ISP_CE0_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr15
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_12_15_h_cof_set_wr15(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_12_15.ISP_CE0_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr15 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_12_15_h_cof_set_wr14() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_12_15.ISP_CE0_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr14
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_12_15_h_cof_set_wr14(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_12_15.ISP_CE0_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr14 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_12_15_h_cof_set_wr13() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_12_15.ISP_CE0_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr13
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_12_15_h_cof_set_wr13(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_12_15.ISP_CE0_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr13 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_12_15_h_cof_set_wr12() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_12_15.ISP_CE0_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr12
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_12_15_h_cof_set_wr12(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_12_15.ISP_CE0_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr12 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_12_15(h_cof_set_wr15,h_cof_set_wr14,h_cof_set_wr13,h_cof_set_wr12) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_12_15.word = (uint32_t)h_cof_set_wr15<<0 | (uint32_t)h_cof_set_wr14<<8 | (uint32_t)h_cof_set_wr13<<16 | (uint32_t)h_cof_set_wr12<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_12_15() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_12_15.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_12_15_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_12_15.word = x)


//ISP_CE0_GPSSCALER_HCOF_16_19


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_16_19_h_cof_set_wr19() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_16_19.ISP_CE0_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr19
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_16_19_h_cof_set_wr19(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_16_19.ISP_CE0_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr19 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_16_19_h_cof_set_wr18() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_16_19.ISP_CE0_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr18
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_16_19_h_cof_set_wr18(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_16_19.ISP_CE0_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr18 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_16_19_h_cof_set_wr17() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_16_19.ISP_CE0_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr17
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_16_19_h_cof_set_wr17(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_16_19.ISP_CE0_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr17 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_16_19_h_cof_set_wr16() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_16_19.ISP_CE0_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr16
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_16_19_h_cof_set_wr16(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_16_19.ISP_CE0_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr16 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_16_19(h_cof_set_wr19,h_cof_set_wr18,h_cof_set_wr17,h_cof_set_wr16) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_16_19.word = (uint32_t)h_cof_set_wr19<<0 | (uint32_t)h_cof_set_wr18<<8 | (uint32_t)h_cof_set_wr17<<16 | (uint32_t)h_cof_set_wr16<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_16_19() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_16_19.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_16_19_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_16_19.word = x)


//ISP_CE0_GPSSCALER_HCOF_20_23


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_20_23_h_cof_set_wr23() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_20_23.ISP_CE0_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr23
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_20_23_h_cof_set_wr23(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_20_23.ISP_CE0_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr23 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_20_23_h_cof_set_wr22() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_20_23.ISP_CE0_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr22
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_20_23_h_cof_set_wr22(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_20_23.ISP_CE0_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr22 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_20_23_h_cof_set_wr21() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_20_23.ISP_CE0_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr21
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_20_23_h_cof_set_wr21(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_20_23.ISP_CE0_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr21 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_20_23_h_cof_set_wr20() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_20_23.ISP_CE0_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr20
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_20_23_h_cof_set_wr20(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_20_23.ISP_CE0_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr20 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_20_23(h_cof_set_wr23,h_cof_set_wr22,h_cof_set_wr21,h_cof_set_wr20) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_20_23.word = (uint32_t)h_cof_set_wr23<<0 | (uint32_t)h_cof_set_wr22<<8 | (uint32_t)h_cof_set_wr21<<16 | (uint32_t)h_cof_set_wr20<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_20_23() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_20_23.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_20_23_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_20_23.word = x)


//ISP_CE0_GPSSCALER_HCOF_24_27


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_24_27_h_cof_set_wr27() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_24_27.ISP_CE0_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr27
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_24_27_h_cof_set_wr27(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_24_27.ISP_CE0_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr27 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_24_27_h_cof_set_wr26() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_24_27.ISP_CE0_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr26
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_24_27_h_cof_set_wr26(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_24_27.ISP_CE0_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr26 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_24_27_h_cof_set_wr25() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_24_27.ISP_CE0_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr25
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_24_27_h_cof_set_wr25(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_24_27.ISP_CE0_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr25 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_24_27_h_cof_set_wr24() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_24_27.ISP_CE0_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr24
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_24_27_h_cof_set_wr24(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_24_27.ISP_CE0_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr24 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_24_27(h_cof_set_wr27,h_cof_set_wr26,h_cof_set_wr25,h_cof_set_wr24) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_24_27.word = (uint32_t)h_cof_set_wr27<<0 | (uint32_t)h_cof_set_wr26<<8 | (uint32_t)h_cof_set_wr25<<16 | (uint32_t)h_cof_set_wr24<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_24_27() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_24_27.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_24_27_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_24_27.word = x)


//ISP_CE0_GPSSCALER_HCOF_28_31


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_28_31_h_cof_set_wr31() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_28_31.ISP_CE0_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr31
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_28_31_h_cof_set_wr31(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_28_31.ISP_CE0_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr31 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_28_31_h_cof_set_wr30() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_28_31.ISP_CE0_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr30
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_28_31_h_cof_set_wr30(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_28_31.ISP_CE0_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr30 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_28_31_h_cof_set_wr29() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_28_31.ISP_CE0_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr29
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_28_31_h_cof_set_wr29(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_28_31.ISP_CE0_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr29 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_28_31_h_cof_set_wr28() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_28_31.ISP_CE0_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr28
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_28_31_h_cof_set_wr28(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_28_31.ISP_CE0_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr28 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_28_31(h_cof_set_wr31,h_cof_set_wr30,h_cof_set_wr29,h_cof_set_wr28) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_28_31.word = (uint32_t)h_cof_set_wr31<<0 | (uint32_t)h_cof_set_wr30<<8 | (uint32_t)h_cof_set_wr29<<16 | (uint32_t)h_cof_set_wr28<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_28_31() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_28_31.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_28_31_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_28_31.word = x)


//ISP_CE0_GPSSCALER_HCOF_32_35


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_32_35_h_cof_set_wr35() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_32_35.ISP_CE0_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr35
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_32_35_h_cof_set_wr35(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_32_35.ISP_CE0_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr35 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_32_35_h_cof_set_wr34() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_32_35.ISP_CE0_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr34
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_32_35_h_cof_set_wr34(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_32_35.ISP_CE0_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr34 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_32_35_h_cof_set_wr33() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_32_35.ISP_CE0_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr33
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_32_35_h_cof_set_wr33(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_32_35.ISP_CE0_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr33 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_32_35_h_cof_set_wr32() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_32_35.ISP_CE0_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr32
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_32_35_h_cof_set_wr32(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_32_35.ISP_CE0_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr32 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_32_35(h_cof_set_wr35,h_cof_set_wr34,h_cof_set_wr33,h_cof_set_wr32) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_32_35.word = (uint32_t)h_cof_set_wr35<<0 | (uint32_t)h_cof_set_wr34<<8 | (uint32_t)h_cof_set_wr33<<16 | (uint32_t)h_cof_set_wr32<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_32_35() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_32_35.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_32_35_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_32_35.word = x)


//ISP_CE0_GPSSCALER_HCOF_36_39


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_36_39_h_cof_set_wr39() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_36_39.ISP_CE0_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr39
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_36_39_h_cof_set_wr39(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_36_39.ISP_CE0_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr39 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_36_39_h_cof_set_wr38() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_36_39.ISP_CE0_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr38
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_36_39_h_cof_set_wr38(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_36_39.ISP_CE0_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr38 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_36_39_h_cof_set_wr37() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_36_39.ISP_CE0_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr37
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_36_39_h_cof_set_wr37(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_36_39.ISP_CE0_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr37 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_36_39_h_cof_set_wr36() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_36_39.ISP_CE0_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr36
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_36_39_h_cof_set_wr36(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_36_39.ISP_CE0_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr36 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_36_39(h_cof_set_wr39,h_cof_set_wr38,h_cof_set_wr37,h_cof_set_wr36) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_36_39.word = (uint32_t)h_cof_set_wr39<<0 | (uint32_t)h_cof_set_wr38<<8 | (uint32_t)h_cof_set_wr37<<16 | (uint32_t)h_cof_set_wr36<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_36_39() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_36_39.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_36_39_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_36_39.word = x)


//ISP_CE0_GPSSCALER_HCOF_40_43


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_40_43_h_cof_set_wr43() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_40_43.ISP_CE0_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr43
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_40_43_h_cof_set_wr43(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_40_43.ISP_CE0_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr43 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_40_43_h_cof_set_wr42() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_40_43.ISP_CE0_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr42
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_40_43_h_cof_set_wr42(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_40_43.ISP_CE0_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr42 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_40_43_h_cof_set_wr41() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_40_43.ISP_CE0_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr41
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_40_43_h_cof_set_wr41(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_40_43.ISP_CE0_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr41 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_40_43_h_cof_set_wr40() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_40_43.ISP_CE0_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr40
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_40_43_h_cof_set_wr40(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_40_43.ISP_CE0_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr40 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_40_43(h_cof_set_wr43,h_cof_set_wr42,h_cof_set_wr41,h_cof_set_wr40) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_40_43.word = (uint32_t)h_cof_set_wr43<<0 | (uint32_t)h_cof_set_wr42<<8 | (uint32_t)h_cof_set_wr41<<16 | (uint32_t)h_cof_set_wr40<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_40_43() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_40_43.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_40_43_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_40_43.word = x)


//ISP_CE0_GPSSCALER_HCOF_44_47


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_44_47_h_cof_set_wr47() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_44_47.ISP_CE0_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr47
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_44_47_h_cof_set_wr47(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_44_47.ISP_CE0_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr47 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_44_47_h_cof_set_wr46() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_44_47.ISP_CE0_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr46
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_44_47_h_cof_set_wr46(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_44_47.ISP_CE0_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr46 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_44_47_h_cof_set_wr45() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_44_47.ISP_CE0_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr45
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_44_47_h_cof_set_wr45(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_44_47.ISP_CE0_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr45 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_44_47_h_cof_set_wr44() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_44_47.ISP_CE0_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr44
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_44_47_h_cof_set_wr44(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_44_47.ISP_CE0_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr44 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_44_47(h_cof_set_wr47,h_cof_set_wr46,h_cof_set_wr45,h_cof_set_wr44) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_44_47.word = (uint32_t)h_cof_set_wr47<<0 | (uint32_t)h_cof_set_wr46<<8 | (uint32_t)h_cof_set_wr45<<16 | (uint32_t)h_cof_set_wr44<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_44_47() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_44_47.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_44_47_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_44_47.word = x)


//ISP_CE0_GPSSCALER_HCOF_48_51


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_48_51_h_cof_set_wr51() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_48_51.ISP_CE0_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr51
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_48_51_h_cof_set_wr51(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_48_51.ISP_CE0_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr51 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_48_51_h_cof_set_wr50() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_48_51.ISP_CE0_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr50
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_48_51_h_cof_set_wr50(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_48_51.ISP_CE0_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr50 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_48_51_h_cof_set_wr49() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_48_51.ISP_CE0_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr49
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_48_51_h_cof_set_wr49(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_48_51.ISP_CE0_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr49 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_48_51_h_cof_set_wr48() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_48_51.ISP_CE0_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr48
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_48_51_h_cof_set_wr48(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_48_51.ISP_CE0_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr48 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_48_51(h_cof_set_wr51,h_cof_set_wr50,h_cof_set_wr49,h_cof_set_wr48) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_48_51.word = (uint32_t)h_cof_set_wr51<<0 | (uint32_t)h_cof_set_wr50<<8 | (uint32_t)h_cof_set_wr49<<16 | (uint32_t)h_cof_set_wr48<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_48_51() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_48_51.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_48_51_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_48_51.word = x)


//ISP_CE0_GPSSCALER_HCOF_52_55


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_52_55_h_cof_set_wr55() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_52_55.ISP_CE0_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr55
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_52_55_h_cof_set_wr55(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_52_55.ISP_CE0_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr55 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_52_55_h_cof_set_wr54() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_52_55.ISP_CE0_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr54
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_52_55_h_cof_set_wr54(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_52_55.ISP_CE0_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr54 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_52_55_h_cof_set_wr53() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_52_55.ISP_CE0_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr53
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_52_55_h_cof_set_wr53(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_52_55.ISP_CE0_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr53 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_52_55_h_cof_set_wr52() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_52_55.ISP_CE0_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr52
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_52_55_h_cof_set_wr52(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_52_55.ISP_CE0_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr52 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_52_55(h_cof_set_wr55,h_cof_set_wr54,h_cof_set_wr53,h_cof_set_wr52) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_52_55.word = (uint32_t)h_cof_set_wr55<<0 | (uint32_t)h_cof_set_wr54<<8 | (uint32_t)h_cof_set_wr53<<16 | (uint32_t)h_cof_set_wr52<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_52_55() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_52_55.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_52_55_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_52_55.word = x)


//ISP_CE0_GPSSCALER_HCOF_56_59


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_56_59_h_cof_set_wr59() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_56_59.ISP_CE0_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr59
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_56_59_h_cof_set_wr59(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_56_59.ISP_CE0_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr59 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_56_59_h_cof_set_wr58() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_56_59.ISP_CE0_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr58
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_56_59_h_cof_set_wr58(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_56_59.ISP_CE0_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr58 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_56_59_h_cof_set_wr57() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_56_59.ISP_CE0_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr57
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_56_59_h_cof_set_wr57(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_56_59.ISP_CE0_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr57 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_56_59_h_cof_set_wr56() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_56_59.ISP_CE0_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr56
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_56_59_h_cof_set_wr56(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_56_59.ISP_CE0_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr56 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_56_59(h_cof_set_wr59,h_cof_set_wr58,h_cof_set_wr57,h_cof_set_wr56) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_56_59.word = (uint32_t)h_cof_set_wr59<<0 | (uint32_t)h_cof_set_wr58<<8 | (uint32_t)h_cof_set_wr57<<16 | (uint32_t)h_cof_set_wr56<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_56_59() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_56_59.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_56_59_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_56_59.word = x)


//ISP_CE0_GPSSCALER_HCOF_60_63


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_60_63_h_cof_set_wr63() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_60_63.ISP_CE0_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr63
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_60_63_h_cof_set_wr63(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_60_63.ISP_CE0_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr63 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_60_63_h_cof_set_wr62() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_60_63.ISP_CE0_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr62
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_60_63_h_cof_set_wr62(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_60_63.ISP_CE0_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr62 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_60_63_h_cof_set_wr61() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_60_63.ISP_CE0_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr61
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_60_63_h_cof_set_wr61(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_60_63.ISP_CE0_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr61 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_60_63_h_cof_set_wr60() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_60_63.ISP_CE0_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr60
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_60_63_h_cof_set_wr60(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_60_63.ISP_CE0_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr60 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_60_63(h_cof_set_wr63,h_cof_set_wr62,h_cof_set_wr61,h_cof_set_wr60) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_60_63.word = (uint32_t)h_cof_set_wr63<<0 | (uint32_t)h_cof_set_wr62<<8 | (uint32_t)h_cof_set_wr61<<16 | (uint32_t)h_cof_set_wr60<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_60_63() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_60_63.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_HCOF_60_63_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_HCOF_60_63.word = x)


//ISP_CE0_GPSSCALER_VCOF_0_3


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_0_3_v_cof_set_wr3() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_0_3.ISP_CE0_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr3
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_0_3_v_cof_set_wr3(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_0_3.ISP_CE0_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr3 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_0_3_v_cof_set_wr2() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_0_3.ISP_CE0_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr2
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_0_3_v_cof_set_wr2(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_0_3.ISP_CE0_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr2 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_0_3_v_cof_set_wr1() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_0_3.ISP_CE0_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr1
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_0_3_v_cof_set_wr1(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_0_3.ISP_CE0_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr1 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_0_3_v_cof_set_wr0() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_0_3.ISP_CE0_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr0
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_0_3_v_cof_set_wr0(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_0_3.ISP_CE0_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr0 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_0_3(v_cof_set_wr3,v_cof_set_wr2,v_cof_set_wr1,v_cof_set_wr0) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_0_3.word = (uint32_t)v_cof_set_wr3<<0 | (uint32_t)v_cof_set_wr2<<8 | (uint32_t)v_cof_set_wr1<<16 | (uint32_t)v_cof_set_wr0<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_0_3() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_0_3.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_0_3_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_0_3.word = x)


//ISP_CE0_GPSSCALER_VCOF_4_7


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_4_7_v_cof_set_wr7() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_4_7.ISP_CE0_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr7
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_4_7_v_cof_set_wr7(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_4_7.ISP_CE0_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr7 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_4_7_v_cof_set_wr6() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_4_7.ISP_CE0_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr6
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_4_7_v_cof_set_wr6(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_4_7.ISP_CE0_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr6 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_4_7_v_cof_set_wr5() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_4_7.ISP_CE0_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr5
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_4_7_v_cof_set_wr5(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_4_7.ISP_CE0_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr5 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_4_7_v_cof_set_wr4() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_4_7.ISP_CE0_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr4
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_4_7_v_cof_set_wr4(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_4_7.ISP_CE0_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr4 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_4_7(v_cof_set_wr7,v_cof_set_wr6,v_cof_set_wr5,v_cof_set_wr4) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_4_7.word = (uint32_t)v_cof_set_wr7<<0 | (uint32_t)v_cof_set_wr6<<8 | (uint32_t)v_cof_set_wr5<<16 | (uint32_t)v_cof_set_wr4<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_4_7() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_4_7.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_4_7_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_4_7.word = x)


//ISP_CE0_GPSSCALER_VCOF_8_11


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_8_11_v_cof_set_wr11() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_8_11.ISP_CE0_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr11
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_8_11_v_cof_set_wr11(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_8_11.ISP_CE0_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr11 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_8_11_v_cof_set_wr10() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_8_11.ISP_CE0_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr10
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_8_11_v_cof_set_wr10(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_8_11.ISP_CE0_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr10 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_8_11_v_cof_set_wr9() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_8_11.ISP_CE0_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr9
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_8_11_v_cof_set_wr9(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_8_11.ISP_CE0_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr9 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_8_11_v_cof_set_wr8() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_8_11.ISP_CE0_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr8
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_8_11_v_cof_set_wr8(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_8_11.ISP_CE0_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr8 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_8_11(v_cof_set_wr11,v_cof_set_wr10,v_cof_set_wr9,v_cof_set_wr8) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_8_11.word = (uint32_t)v_cof_set_wr11<<0 | (uint32_t)v_cof_set_wr10<<8 | (uint32_t)v_cof_set_wr9<<16 | (uint32_t)v_cof_set_wr8<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_8_11() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_8_11.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_8_11_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_8_11.word = x)


//ISP_CE0_GPSSCALER_VCOF_12_15


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_12_15_v_cof_set_wr15() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_12_15.ISP_CE0_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr15
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_12_15_v_cof_set_wr15(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_12_15.ISP_CE0_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr15 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_12_15_v_cof_set_wr14() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_12_15.ISP_CE0_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr14
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_12_15_v_cof_set_wr14(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_12_15.ISP_CE0_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr14 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_12_15_v_cof_set_wr13() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_12_15.ISP_CE0_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr13
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_12_15_v_cof_set_wr13(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_12_15.ISP_CE0_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr13 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_12_15_v_cof_set_wr12() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_12_15.ISP_CE0_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr12
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_12_15_v_cof_set_wr12(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_12_15.ISP_CE0_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr12 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_12_15(v_cof_set_wr15,v_cof_set_wr14,v_cof_set_wr13,v_cof_set_wr12) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_12_15.word = (uint32_t)v_cof_set_wr15<<0 | (uint32_t)v_cof_set_wr14<<8 | (uint32_t)v_cof_set_wr13<<16 | (uint32_t)v_cof_set_wr12<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_12_15() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_12_15.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_12_15_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_12_15.word = x)


//ISP_CE0_GPSSCALER_VCOF_16_19


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_16_19_v_cof_set_wr19() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_16_19.ISP_CE0_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr19
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_16_19_v_cof_set_wr19(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_16_19.ISP_CE0_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr19 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_16_19_v_cof_set_wr18() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_16_19.ISP_CE0_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr18
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_16_19_v_cof_set_wr18(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_16_19.ISP_CE0_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr18 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_16_19_v_cof_set_wr17() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_16_19.ISP_CE0_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr17
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_16_19_v_cof_set_wr17(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_16_19.ISP_CE0_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr17 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_16_19_v_cof_set_wr16() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_16_19.ISP_CE0_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr16
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_16_19_v_cof_set_wr16(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_16_19.ISP_CE0_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr16 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_16_19(v_cof_set_wr19,v_cof_set_wr18,v_cof_set_wr17,v_cof_set_wr16) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_16_19.word = (uint32_t)v_cof_set_wr19<<0 | (uint32_t)v_cof_set_wr18<<8 | (uint32_t)v_cof_set_wr17<<16 | (uint32_t)v_cof_set_wr16<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_16_19() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_16_19.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_16_19_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_16_19.word = x)


//ISP_CE0_GPSSCALER_VCOF_20_23


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_20_23_v_cof_set_wr23() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_20_23.ISP_CE0_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr23
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_20_23_v_cof_set_wr23(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_20_23.ISP_CE0_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr23 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_20_23_v_cof_set_wr22() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_20_23.ISP_CE0_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr22
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_20_23_v_cof_set_wr22(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_20_23.ISP_CE0_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr22 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_20_23_v_cof_set_wr21() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_20_23.ISP_CE0_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr21
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_20_23_v_cof_set_wr21(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_20_23.ISP_CE0_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr21 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_20_23_v_cof_set_wr20() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_20_23.ISP_CE0_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr20
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_20_23_v_cof_set_wr20(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_20_23.ISP_CE0_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr20 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_20_23(v_cof_set_wr23,v_cof_set_wr22,v_cof_set_wr21,v_cof_set_wr20) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_20_23.word = (uint32_t)v_cof_set_wr23<<0 | (uint32_t)v_cof_set_wr22<<8 | (uint32_t)v_cof_set_wr21<<16 | (uint32_t)v_cof_set_wr20<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_20_23() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_20_23.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_20_23_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_20_23.word = x)


//ISP_CE0_GPSSCALER_VCOF_24_27


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_24_27_v_cof_set_wr27() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_24_27.ISP_CE0_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr27
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_24_27_v_cof_set_wr27(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_24_27.ISP_CE0_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr27 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_24_27_v_cof_set_wr26() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_24_27.ISP_CE0_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr26
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_24_27_v_cof_set_wr26(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_24_27.ISP_CE0_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr26 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_24_27_v_cof_set_wr25() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_24_27.ISP_CE0_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr25
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_24_27_v_cof_set_wr25(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_24_27.ISP_CE0_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr25 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_24_27_v_cof_set_wr24() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_24_27.ISP_CE0_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr24
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_24_27_v_cof_set_wr24(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_24_27.ISP_CE0_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr24 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_24_27(v_cof_set_wr27,v_cof_set_wr26,v_cof_set_wr25,v_cof_set_wr24) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_24_27.word = (uint32_t)v_cof_set_wr27<<0 | (uint32_t)v_cof_set_wr26<<8 | (uint32_t)v_cof_set_wr25<<16 | (uint32_t)v_cof_set_wr24<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_24_27() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_24_27.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_24_27_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_24_27.word = x)


//ISP_CE0_GPSSCALER_VCOF_28_31


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_28_31_v_cof_set_wr31() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_28_31.ISP_CE0_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr31
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_28_31_v_cof_set_wr31(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_28_31.ISP_CE0_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr31 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_28_31_v_cof_set_wr30() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_28_31.ISP_CE0_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr30
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_28_31_v_cof_set_wr30(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_28_31.ISP_CE0_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr30 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_28_31_v_cof_set_wr29() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_28_31.ISP_CE0_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr29
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_28_31_v_cof_set_wr29(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_28_31.ISP_CE0_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr29 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_28_31_v_cof_set_wr28() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_28_31.ISP_CE0_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr28
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_28_31_v_cof_set_wr28(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_28_31.ISP_CE0_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr28 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_28_31(v_cof_set_wr31,v_cof_set_wr30,v_cof_set_wr29,v_cof_set_wr28) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_28_31.word = (uint32_t)v_cof_set_wr31<<0 | (uint32_t)v_cof_set_wr30<<8 | (uint32_t)v_cof_set_wr29<<16 | (uint32_t)v_cof_set_wr28<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_28_31() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_28_31.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_28_31_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_28_31.word = x)


//ISP_CE0_GPSSCALER_VCOF_32_35


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_32_35_v_cof_set_wr35() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_32_35.ISP_CE0_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr35
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_32_35_v_cof_set_wr35(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_32_35.ISP_CE0_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr35 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_32_35_v_cof_set_wr34() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_32_35.ISP_CE0_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr34
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_32_35_v_cof_set_wr34(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_32_35.ISP_CE0_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr34 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_32_35_v_cof_set_wr33() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_32_35.ISP_CE0_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr33
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_32_35_v_cof_set_wr33(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_32_35.ISP_CE0_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr33 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_32_35_v_cof_set_wr32() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_32_35.ISP_CE0_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr32
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_32_35_v_cof_set_wr32(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_32_35.ISP_CE0_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr32 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_32_35(v_cof_set_wr35,v_cof_set_wr34,v_cof_set_wr33,v_cof_set_wr32) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_32_35.word = (uint32_t)v_cof_set_wr35<<0 | (uint32_t)v_cof_set_wr34<<8 | (uint32_t)v_cof_set_wr33<<16 | (uint32_t)v_cof_set_wr32<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_32_35() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_32_35.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_32_35_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_32_35.word = x)


//ISP_CE0_GPSSCALER_VCOF_36_39


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_36_39_v_cof_set_wr39() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_36_39.ISP_CE0_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr39
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_36_39_v_cof_set_wr39(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_36_39.ISP_CE0_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr39 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_36_39_v_cof_set_wr38() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_36_39.ISP_CE0_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr38
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_36_39_v_cof_set_wr38(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_36_39.ISP_CE0_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr38 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_36_39_v_cof_set_wr37() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_36_39.ISP_CE0_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr37
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_36_39_v_cof_set_wr37(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_36_39.ISP_CE0_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr37 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_36_39_v_cof_set_wr36() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_36_39.ISP_CE0_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr36
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_36_39_v_cof_set_wr36(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_36_39.ISP_CE0_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr36 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_36_39(v_cof_set_wr39,v_cof_set_wr38,v_cof_set_wr37,v_cof_set_wr36) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_36_39.word = (uint32_t)v_cof_set_wr39<<0 | (uint32_t)v_cof_set_wr38<<8 | (uint32_t)v_cof_set_wr37<<16 | (uint32_t)v_cof_set_wr36<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_36_39() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_36_39.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_36_39_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_36_39.word = x)


//ISP_CE0_GPSSCALER_VCOF_40_43


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_40_43_v_cof_set_wr43() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_40_43.ISP_CE0_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr43
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_40_43_v_cof_set_wr43(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_40_43.ISP_CE0_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr43 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_40_43_v_cof_set_wr42() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_40_43.ISP_CE0_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr42
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_40_43_v_cof_set_wr42(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_40_43.ISP_CE0_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr42 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_40_43_v_cof_set_wr41() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_40_43.ISP_CE0_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr41
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_40_43_v_cof_set_wr41(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_40_43.ISP_CE0_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr41 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_40_43_v_cof_set_wr40() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_40_43.ISP_CE0_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr40
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_40_43_v_cof_set_wr40(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_40_43.ISP_CE0_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr40 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_40_43(v_cof_set_wr43,v_cof_set_wr42,v_cof_set_wr41,v_cof_set_wr40) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_40_43.word = (uint32_t)v_cof_set_wr43<<0 | (uint32_t)v_cof_set_wr42<<8 | (uint32_t)v_cof_set_wr41<<16 | (uint32_t)v_cof_set_wr40<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_40_43() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_40_43.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_40_43_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_40_43.word = x)


//ISP_CE0_GPSSCALER_VCOF_44_47


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_44_47_v_cof_set_wr47() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_44_47.ISP_CE0_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr47
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_44_47_v_cof_set_wr47(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_44_47.ISP_CE0_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr47 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_44_47_v_cof_set_wr46() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_44_47.ISP_CE0_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr46
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_44_47_v_cof_set_wr46(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_44_47.ISP_CE0_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr46 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_44_47_v_cof_set_wr45() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_44_47.ISP_CE0_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr45
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_44_47_v_cof_set_wr45(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_44_47.ISP_CE0_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr45 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_44_47_v_cof_set_wr44() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_44_47.ISP_CE0_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr44
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_44_47_v_cof_set_wr44(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_44_47.ISP_CE0_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr44 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_44_47(v_cof_set_wr47,v_cof_set_wr46,v_cof_set_wr45,v_cof_set_wr44) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_44_47.word = (uint32_t)v_cof_set_wr47<<0 | (uint32_t)v_cof_set_wr46<<8 | (uint32_t)v_cof_set_wr45<<16 | (uint32_t)v_cof_set_wr44<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_44_47() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_44_47.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_44_47_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_44_47.word = x)


//ISP_CE0_GPSSCALER_VCOF_48_51


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_48_51_v_cof_set_wr51() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_48_51.ISP_CE0_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr51
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_48_51_v_cof_set_wr51(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_48_51.ISP_CE0_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr51 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_48_51_v_cof_set_wr50() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_48_51.ISP_CE0_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr50
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_48_51_v_cof_set_wr50(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_48_51.ISP_CE0_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr50 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_48_51_v_cof_set_wr49() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_48_51.ISP_CE0_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr49
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_48_51_v_cof_set_wr49(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_48_51.ISP_CE0_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr49 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_48_51_v_cof_set_wr48() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_48_51.ISP_CE0_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr48
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_48_51_v_cof_set_wr48(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_48_51.ISP_CE0_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr48 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_48_51(v_cof_set_wr51,v_cof_set_wr50,v_cof_set_wr49,v_cof_set_wr48) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_48_51.word = (uint32_t)v_cof_set_wr51<<0 | (uint32_t)v_cof_set_wr50<<8 | (uint32_t)v_cof_set_wr49<<16 | (uint32_t)v_cof_set_wr48<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_48_51() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_48_51.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_48_51_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_48_51.word = x)


//ISP_CE0_GPSSCALER_VCOF_52_55


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_52_55_v_cof_set_wr55() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_52_55.ISP_CE0_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr55
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_52_55_v_cof_set_wr55(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_52_55.ISP_CE0_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr55 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_52_55_v_cof_set_wr54() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_52_55.ISP_CE0_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr54
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_52_55_v_cof_set_wr54(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_52_55.ISP_CE0_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr54 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_52_55_v_cof_set_wr53() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_52_55.ISP_CE0_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr53
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_52_55_v_cof_set_wr53(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_52_55.ISP_CE0_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr53 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_52_55_v_cof_set_wr52() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_52_55.ISP_CE0_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr52
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_52_55_v_cof_set_wr52(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_52_55.ISP_CE0_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr52 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_52_55(v_cof_set_wr55,v_cof_set_wr54,v_cof_set_wr53,v_cof_set_wr52) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_52_55.word = (uint32_t)v_cof_set_wr55<<0 | (uint32_t)v_cof_set_wr54<<8 | (uint32_t)v_cof_set_wr53<<16 | (uint32_t)v_cof_set_wr52<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_52_55() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_52_55.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_52_55_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_52_55.word = x)


//ISP_CE0_GPSSCALER_VCOF_56_59


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_56_59_v_cof_set_wr59() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_56_59.ISP_CE0_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr59
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_56_59_v_cof_set_wr59(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_56_59.ISP_CE0_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr59 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_56_59_v_cof_set_wr58() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_56_59.ISP_CE0_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr58
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_56_59_v_cof_set_wr58(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_56_59.ISP_CE0_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr58 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_56_59_v_cof_set_wr57() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_56_59.ISP_CE0_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr57
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_56_59_v_cof_set_wr57(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_56_59.ISP_CE0_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr57 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_56_59_v_cof_set_wr56() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_56_59.ISP_CE0_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr56
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_56_59_v_cof_set_wr56(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_56_59.ISP_CE0_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr56 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_56_59(v_cof_set_wr59,v_cof_set_wr58,v_cof_set_wr57,v_cof_set_wr56) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_56_59.word = (uint32_t)v_cof_set_wr59<<0 | (uint32_t)v_cof_set_wr58<<8 | (uint32_t)v_cof_set_wr57<<16 | (uint32_t)v_cof_set_wr56<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_56_59() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_56_59.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_56_59_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_56_59.word = x)


//ISP_CE0_GPSSCALER_VCOF_60_63


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_60_63_v_cof_set_wr63() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_60_63.ISP_CE0_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr63
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_60_63_v_cof_set_wr63(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_60_63.ISP_CE0_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr63 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_60_63_v_cof_set_wr62() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_60_63.ISP_CE0_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr62
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_60_63_v_cof_set_wr62(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_60_63.ISP_CE0_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr62 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_60_63_v_cof_set_wr61() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_60_63.ISP_CE0_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr61
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_60_63_v_cof_set_wr61(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_60_63.ISP_CE0_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr61 = x)


#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_60_63_v_cof_set_wr60() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_60_63.ISP_CE0_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr60
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_60_63_v_cof_set_wr60(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_60_63.ISP_CE0_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr60 = x)
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_60_63(v_cof_set_wr63,v_cof_set_wr62,v_cof_set_wr61,v_cof_set_wr60) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_60_63.word = (uint32_t)v_cof_set_wr63<<0 | (uint32_t)v_cof_set_wr62<<8 | (uint32_t)v_cof_set_wr61<<16 | (uint32_t)v_cof_set_wr60<<24)
#define Get_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_60_63() p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_60_63.word
#define Set_ISP_CE0_GPSSCALER_ISP_CE0_GPSSCALER_VCOF_60_63_word(x) (p_ISP_CE0_GPSSCALER_IP->ISP_CE0_GPSSCALER_VCOF_60_63.word = x)

//ISP_CE0_CODER_ENABLE
/*Description: Coder Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable processing*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* Disable soft_reset*/
    }ISP_CE0_CODER_ENABLE_ts;

}ISP_CE0_CODER_ENABLE_tu;



//ISP_CE0_CODER_FORMAT
/*Description: Output format selection
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t yuv_format :3;
        /* Conversion mode selection*/
    }ISP_CE0_CODER_FORMAT_ts;

}ISP_CE0_CODER_FORMAT_tu;



//ISP_CE0_CODER_Y_COF00
/*Description: Matrix coefficient 00
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_y_cof00 :13;
        /* 
        Conversion matrix coefficient 00*/
    }ISP_CE0_CODER_Y_COF00_ts;

}ISP_CE0_CODER_Y_COF00_tu;



//ISP_CE0_CODER_Y_COF01
/*Description: Matrix coefficient 01
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_y_cof01 :13;
        /* 
        Conversion matrix coefficient 01*/
    }ISP_CE0_CODER_Y_COF01_ts;

}ISP_CE0_CODER_Y_COF01_tu;



//ISP_CE0_CODER_Y_COF02
/*Description: Matrix coefficient 02
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_y_cof02 :13;
        /* Conversion matrix coefficient 02*/
    }ISP_CE0_CODER_Y_COF02_ts;

}ISP_CE0_CODER_Y_COF02_tu;



//ISP_CE0_CODER_CB_COF10
/*Description: Matrix coefficient 10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cb_cof10 :13;
        /* Conversion matrix coefficient 10*/
    }ISP_CE0_CODER_CB_COF10_ts;

}ISP_CE0_CODER_CB_COF10_tu;



//ISP_CE0_CODER_CB_COF11
/*Description: Matrix coefficient 11
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cb_cof11 :13;
        /* Conversion matrix coefficient 11*/
    }ISP_CE0_CODER_CB_COF11_ts;

}ISP_CE0_CODER_CB_COF11_tu;



//ISP_CE0_CODER_CB_COF12
/*Description: Matrix coefficient 12
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cb_cof12 :13;
        /* Conversion matrix coefficient 12*/
    }ISP_CE0_CODER_CB_COF12_ts;

}ISP_CE0_CODER_CB_COF12_tu;



//ISP_CE0_CODER_CR_COF20
/*Description: Matrix coefficient 20
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cr_cof20 :13;
        /* Conversion matrix coefficient 20*/
    }ISP_CE0_CODER_CR_COF20_ts;

}ISP_CE0_CODER_CR_COF20_tu;



//ISP_CE0_CODER_CR_COF21
/*Description: Matrix coefficient 21
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cr_cof21 :13;
        /* Conversion matrix coefficient 21*/
    }ISP_CE0_CODER_CR_COF21_ts;

}ISP_CE0_CODER_CR_COF21_tu;



//ISP_CE0_CODER_CR_COF22
/*Description: Matrix coefficient 22
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cr_cof22 :13;
        /* Conversion matrix coefficient 22*/
    }ISP_CE0_CODER_CR_COF22_ts;

}ISP_CE0_CODER_CR_COF22_tu;



//ISP_CE0_CODER_YFLOOR
/*Description: Y data offset
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_yfloor :9;
        /* Y data floor*/
    }ISP_CE0_CODER_YFLOOR_ts;

}ISP_CE0_CODER_YFLOOR_tu;



//ISP_CE0_CODER_CBFLOOR
/*Description: Cb data offset
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cbfloor :9;
        /* Cb data floor*/
    }ISP_CE0_CODER_CBFLOOR_ts;

}ISP_CE0_CODER_CBFLOOR_tu;



//ISP_CE0_CODER_CRFLOOR
/*Description: Cr data Offset
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_crfloor :9;
        /* Cr data floor*/
    }ISP_CE0_CODER_CRFLOOR_ts;

}ISP_CE0_CODER_CRFLOOR_tu;



//ISP_CE0_CODER_CB_COLOUR_EFFECT
/*Description: Cb color effect
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t yuv_cb_colour_effect_lo :3;
        /* Cb negative color effect*/
        uint8_t reserved0 :5;
        uint8_t yuv_cb_colour_effect_hi :3;
        /* Cb positive color effect*/
    }ISP_CE0_CODER_CB_COLOUR_EFFECT_ts;

}ISP_CE0_CODER_CB_COLOUR_EFFECT_tu;



//ISP_CE0_CODER_CR_COLOUR_EFFECT
/*Description: Cr color effect
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t yuv_cr_colour_effect_lo :3;
        /* Cr negative color effect*/
        uint8_t reserved0 :5;
        uint8_t yuv_cr_colour_effect_hi :3;
        /* Cr positive color effect*/
    }ISP_CE0_CODER_CR_COLOUR_EFFECT_ts;

}ISP_CE0_CODER_CR_COLOUR_EFFECT_tu;



//ISP_CE0_CODER_CH0_MIN_CLIP
/*Description: Channel 0 minimum value
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch0_min_clip :12;
        /* channel 0 minimum value after matrix and offset*/
    }ISP_CE0_CODER_CH0_MIN_CLIP_ts;

}ISP_CE0_CODER_CH0_MIN_CLIP_tu;



//ISP_CE0_CODER_CH0_MAX_CLIP
/*Description: Channel 0 maximum value
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch0_max_clip :12;
        /* Channel 0 maximum value after matrix and offset*/
    }ISP_CE0_CODER_CH0_MAX_CLIP_ts;

}ISP_CE0_CODER_CH0_MAX_CLIP_tu;



//ISP_CE0_CODER_CH1_MIN_CLIP
/*Description: Channel 1 minimum value
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch1_min_clip :12;
        /* Channel 1 minimum value after matrix and offset*/
    }ISP_CE0_CODER_CH1_MIN_CLIP_ts;

}ISP_CE0_CODER_CH1_MIN_CLIP_tu;



//ISP_CE0_CODER_CH1_MAX_CLIP
/*Description: Channel 1 maximum clip values
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch1_max_clip :12;
        /* Channel 1 maximum value after matrix and offset*/
    }ISP_CE0_CODER_CH1_MAX_CLIP_ts;

}ISP_CE0_CODER_CH1_MAX_CLIP_tu;



//ISP_CE0_CODER_CH2_MIN_CLIP
/*Description: Channel 2 minimum clip values
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch2_min_clip :12;
        /* Channel 2 minimum value after matrix and offset*/
    }ISP_CE0_CODER_CH2_MIN_CLIP_ts;

}ISP_CE0_CODER_CH2_MIN_CLIP_tu;



//ISP_CE0_CODER_CH2_MAX_CLIP
/*Description: Channel 2 maximum value
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch2_max_clip :12;
        /* Channel 2 maximum value after matrix and offset*/
    }ISP_CE0_CODER_CH2_MAX_CLIP_ts;

}ISP_CE0_CODER_CH2_MAX_CLIP_tu;



//ISP_CE0_CODER_RAW_NONACTIVE
/*Description: Control for non active lines
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t yuv_raw_nonactive :1;
        /* Disable transmission of non-active lines to the output*/
    }ISP_CE0_CODER_RAW_NONACTIVE_ts;

}ISP_CE0_CODER_RAW_NONACTIVE_tu;

typedef struct
{
    ISP_CE0_CODER_ENABLE_tu ISP_CE0_CODER_ENABLE;
    ISP_CE0_CODER_FORMAT_tu ISP_CE0_CODER_FORMAT;
    ISP_CE0_CODER_Y_COF00_tu ISP_CE0_CODER_Y_COF00;
    ISP_CE0_CODER_Y_COF01_tu ISP_CE0_CODER_Y_COF01;
    ISP_CE0_CODER_Y_COF02_tu ISP_CE0_CODER_Y_COF02;
    ISP_CE0_CODER_CB_COF10_tu ISP_CE0_CODER_CB_COF10;
    ISP_CE0_CODER_CB_COF11_tu ISP_CE0_CODER_CB_COF11;
    ISP_CE0_CODER_CB_COF12_tu ISP_CE0_CODER_CB_COF12;
    ISP_CE0_CODER_CR_COF20_tu ISP_CE0_CODER_CR_COF20;
    ISP_CE0_CODER_CR_COF21_tu ISP_CE0_CODER_CR_COF21;
    ISP_CE0_CODER_CR_COF22_tu ISP_CE0_CODER_CR_COF22;
    ISP_CE0_CODER_YFLOOR_tu ISP_CE0_CODER_YFLOOR;
    ISP_CE0_CODER_CBFLOOR_tu ISP_CE0_CODER_CBFLOOR;
    ISP_CE0_CODER_CRFLOOR_tu ISP_CE0_CODER_CRFLOOR;
    ISP_CE0_CODER_CB_COLOUR_EFFECT_tu ISP_CE0_CODER_CB_COLOUR_EFFECT;
    ISP_CE0_CODER_CR_COLOUR_EFFECT_tu ISP_CE0_CODER_CR_COLOUR_EFFECT;
    ISP_CE0_CODER_CH0_MIN_CLIP_tu ISP_CE0_CODER_CH0_MIN_CLIP;
    ISP_CE0_CODER_CH0_MAX_CLIP_tu ISP_CE0_CODER_CH0_MAX_CLIP;
    ISP_CE0_CODER_CH1_MIN_CLIP_tu ISP_CE0_CODER_CH1_MIN_CLIP;
    ISP_CE0_CODER_CH1_MAX_CLIP_tu ISP_CE0_CODER_CH1_MAX_CLIP;
    ISP_CE0_CODER_CH2_MIN_CLIP_tu ISP_CE0_CODER_CH2_MIN_CLIP;
    ISP_CE0_CODER_CH2_MAX_CLIP_tu ISP_CE0_CODER_CH2_MAX_CLIP;
    ISP_CE0_CODER_RAW_NONACTIVE_tu ISP_CE0_CODER_RAW_NONACTIVE;
}ISP_CE0_CODER_IP_ts;




//ISP_CE0_CODER_ENABLE


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE_enable() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.ISP_CE0_CODER_ENABLE_ts.enable
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE_enable_DISABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.ISP_CE0_CODER_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE_enable__DISABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.ISP_CE0_CODER_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable processing
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE_enable_ENABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.ISP_CE0_CODER_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE_enable__ENABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.ISP_CE0_CODER_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable data processing


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE_soft_reset() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.ISP_CE0_CODER_ENABLE_ts.soft_reset
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE_soft_reset_DISABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.ISP_CE0_CODER_ENABLE_ts.soft_reset == soft_reset_DISABLE)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE_soft_reset__DISABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.ISP_CE0_CODER_ENABLE_ts.soft_reset = soft_reset_DISABLE)
#define soft_reset_DISABLE 0x0    //Disable soft_reset
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE_soft_reset_ENABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.ISP_CE0_CODER_ENABLE_ts.soft_reset == soft_reset_ENABLE)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE_soft_reset__ENABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.ISP_CE0_CODER_ENABLE_ts.soft_reset = soft_reset_ENABLE)
#define soft_reset_ENABLE 0x1    //Enable soft_reset <=> block is in reset
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE(enable,soft_reset) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_ENABLE_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_ENABLE.word = x)


//ISP_CE0_CODER_FORMAT


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format_B_0x0() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x0)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format__B_0x0() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x0)
#define yuv_format_B_0x0 0x0    //RGB peak. If YUVCODER_ENABLE[0] is not set, peaked IDP input is forwarded to the output
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format_B_0x1() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x1)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format__B_0x1() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x1)
#define yuv_format_B_0x1 0x1    //RGB unpeak. If YUVCODER_ENABLE[0] is not set, unpeaked IDP input is forwarded to the output
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format_B_0x2() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x2)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format__B_0x2() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x2)
#define yuv_format_B_0x2 0x2    //YUV 422
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format_B_0x3() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x3)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format__B_0x3() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x3)
#define yuv_format_B_0x3 0x3    //YUV 420. Chroma is filtered with 1-1 filter but vertical filter and decimation is not done.
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format_B_0x4() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x4)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format__B_0x4() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x4)
#define yuv_format_B_0x4 0x4    //Bayer (right shifted)
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format_B_0x5() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x5)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_yuv_format__B_0x5() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.ISP_CE0_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x5)
#define yuv_format_B_0x5 0x5    //Bayer (left shifted)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT(yuv_format) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.word = (uint32_t)yuv_format<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_FORMAT_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_FORMAT.word = x)


//ISP_CE0_CODER_Y_COF00


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF00_yuv_y_cof00() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF00.ISP_CE0_CODER_Y_COF00_ts.yuv_y_cof00
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF00_yuv_y_cof00(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF00.ISP_CE0_CODER_Y_COF00_ts.yuv_y_cof00 = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF00(yuv_y_cof00) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF00.word = (uint32_t)yuv_y_cof00<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF00() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF00.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF00_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF00.word = x)


//ISP_CE0_CODER_Y_COF01


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF01_yuv_y_cof01() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF01.ISP_CE0_CODER_Y_COF01_ts.yuv_y_cof01
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF01_yuv_y_cof01(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF01.ISP_CE0_CODER_Y_COF01_ts.yuv_y_cof01 = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF01(yuv_y_cof01) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF01.word = (uint32_t)yuv_y_cof01<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF01() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF01.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF01_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF01.word = x)


//ISP_CE0_CODER_Y_COF02


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF02_yuv_y_cof02() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF02.ISP_CE0_CODER_Y_COF02_ts.yuv_y_cof02
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF02_yuv_y_cof02(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF02.ISP_CE0_CODER_Y_COF02_ts.yuv_y_cof02 = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF02(yuv_y_cof02) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF02.word = (uint32_t)yuv_y_cof02<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF02() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF02.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_Y_COF02_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_Y_COF02.word = x)


//ISP_CE0_CODER_CB_COF10


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF10_yuv_cb_cof10() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF10.ISP_CE0_CODER_CB_COF10_ts.yuv_cb_cof10
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF10_yuv_cb_cof10(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF10.ISP_CE0_CODER_CB_COF10_ts.yuv_cb_cof10 = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF10(yuv_cb_cof10) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF10.word = (uint32_t)yuv_cb_cof10<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF10() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF10.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF10_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF10.word = x)


//ISP_CE0_CODER_CB_COF11


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF11_yuv_cb_cof11() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF11.ISP_CE0_CODER_CB_COF11_ts.yuv_cb_cof11
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF11_yuv_cb_cof11(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF11.ISP_CE0_CODER_CB_COF11_ts.yuv_cb_cof11 = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF11(yuv_cb_cof11) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF11.word = (uint32_t)yuv_cb_cof11<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF11() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF11.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF11_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF11.word = x)


//ISP_CE0_CODER_CB_COF12


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF12_yuv_cb_cof12() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF12.ISP_CE0_CODER_CB_COF12_ts.yuv_cb_cof12
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF12_yuv_cb_cof12(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF12.ISP_CE0_CODER_CB_COF12_ts.yuv_cb_cof12 = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF12(yuv_cb_cof12) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF12.word = (uint32_t)yuv_cb_cof12<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF12() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF12.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COF12_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COF12.word = x)


//ISP_CE0_CODER_CR_COF20


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF20_yuv_cr_cof20() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF20.ISP_CE0_CODER_CR_COF20_ts.yuv_cr_cof20
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF20_yuv_cr_cof20(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF20.ISP_CE0_CODER_CR_COF20_ts.yuv_cr_cof20 = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF20(yuv_cr_cof20) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF20.word = (uint32_t)yuv_cr_cof20<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF20() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF20.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF20_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF20.word = x)


//ISP_CE0_CODER_CR_COF21


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF21_yuv_cr_cof21() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF21.ISP_CE0_CODER_CR_COF21_ts.yuv_cr_cof21
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF21_yuv_cr_cof21(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF21.ISP_CE0_CODER_CR_COF21_ts.yuv_cr_cof21 = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF21(yuv_cr_cof21) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF21.word = (uint32_t)yuv_cr_cof21<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF21() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF21.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF21_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF21.word = x)


//ISP_CE0_CODER_CR_COF22


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF22_yuv_cr_cof22() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF22.ISP_CE0_CODER_CR_COF22_ts.yuv_cr_cof22
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF22_yuv_cr_cof22(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF22.ISP_CE0_CODER_CR_COF22_ts.yuv_cr_cof22 = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF22(yuv_cr_cof22) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF22.word = (uint32_t)yuv_cr_cof22<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF22() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF22.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COF22_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COF22.word = x)


//ISP_CE0_CODER_YFLOOR


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_YFLOOR_yuv_yfloor() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_YFLOOR.ISP_CE0_CODER_YFLOOR_ts.yuv_yfloor
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_YFLOOR_yuv_yfloor(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_YFLOOR.ISP_CE0_CODER_YFLOOR_ts.yuv_yfloor = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_YFLOOR(yuv_yfloor) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_YFLOOR.word = (uint32_t)yuv_yfloor<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_YFLOOR() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_YFLOOR.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_YFLOOR_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_YFLOOR.word = x)


//ISP_CE0_CODER_CBFLOOR


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CBFLOOR_yuv_cbfloor() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CBFLOOR.ISP_CE0_CODER_CBFLOOR_ts.yuv_cbfloor
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CBFLOOR_yuv_cbfloor(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CBFLOOR.ISP_CE0_CODER_CBFLOOR_ts.yuv_cbfloor = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CBFLOOR(yuv_cbfloor) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CBFLOOR.word = (uint32_t)yuv_cbfloor<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CBFLOOR() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CBFLOOR.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CBFLOOR_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CBFLOOR.word = x)


//ISP_CE0_CODER_CRFLOOR


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CRFLOOR_yuv_crfloor() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CRFLOOR.ISP_CE0_CODER_CRFLOOR_ts.yuv_crfloor
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CRFLOOR_yuv_crfloor(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CRFLOOR.ISP_CE0_CODER_CRFLOOR_ts.yuv_crfloor = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CRFLOOR(yuv_crfloor) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CRFLOOR.word = (uint32_t)yuv_crfloor<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CRFLOOR() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CRFLOOR.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CRFLOOR_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CRFLOOR.word = x)


//ISP_CE0_CODER_CB_COLOUR_EFFECT


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CB_COLOUR_EFFECT_yuv_cb_colour_effect_lo() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COLOUR_EFFECT.ISP_CE0_CODER_CB_COLOUR_EFFECT_ts.yuv_cb_colour_effect_lo
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COLOUR_EFFECT_yuv_cb_colour_effect_lo(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COLOUR_EFFECT.ISP_CE0_CODER_CB_COLOUR_EFFECT_ts.yuv_cb_colour_effect_lo = x)


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CB_COLOUR_EFFECT_yuv_cb_colour_effect_hi() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COLOUR_EFFECT.ISP_CE0_CODER_CB_COLOUR_EFFECT_ts.yuv_cb_colour_effect_hi
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COLOUR_EFFECT_yuv_cb_colour_effect_hi(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COLOUR_EFFECT.ISP_CE0_CODER_CB_COLOUR_EFFECT_ts.yuv_cb_colour_effect_hi = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COLOUR_EFFECT(yuv_cb_colour_effect_lo,yuv_cb_colour_effect_hi) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COLOUR_EFFECT.word = (uint32_t)yuv_cb_colour_effect_lo<<0 | (uint32_t)yuv_cb_colour_effect_hi<<8)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CB_COLOUR_EFFECT() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COLOUR_EFFECT.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CB_COLOUR_EFFECT_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CB_COLOUR_EFFECT.word = x)


//ISP_CE0_CODER_CR_COLOUR_EFFECT


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CR_COLOUR_EFFECT_yuv_cr_colour_effect_lo() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COLOUR_EFFECT.ISP_CE0_CODER_CR_COLOUR_EFFECT_ts.yuv_cr_colour_effect_lo
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COLOUR_EFFECT_yuv_cr_colour_effect_lo(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COLOUR_EFFECT.ISP_CE0_CODER_CR_COLOUR_EFFECT_ts.yuv_cr_colour_effect_lo = x)


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CR_COLOUR_EFFECT_yuv_cr_colour_effect_hi() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COLOUR_EFFECT.ISP_CE0_CODER_CR_COLOUR_EFFECT_ts.yuv_cr_colour_effect_hi
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COLOUR_EFFECT_yuv_cr_colour_effect_hi(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COLOUR_EFFECT.ISP_CE0_CODER_CR_COLOUR_EFFECT_ts.yuv_cr_colour_effect_hi = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COLOUR_EFFECT(yuv_cr_colour_effect_lo,yuv_cr_colour_effect_hi) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COLOUR_EFFECT.word = (uint32_t)yuv_cr_colour_effect_lo<<0 | (uint32_t)yuv_cr_colour_effect_hi<<8)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CR_COLOUR_EFFECT() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COLOUR_EFFECT.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CR_COLOUR_EFFECT_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CR_COLOUR_EFFECT.word = x)


//ISP_CE0_CODER_CH0_MIN_CLIP


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH0_MIN_CLIP_yuv_ch0_min_clip() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH0_MIN_CLIP.ISP_CE0_CODER_CH0_MIN_CLIP_ts.yuv_ch0_min_clip
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH0_MIN_CLIP_yuv_ch0_min_clip(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH0_MIN_CLIP.ISP_CE0_CODER_CH0_MIN_CLIP_ts.yuv_ch0_min_clip = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH0_MIN_CLIP(yuv_ch0_min_clip) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH0_MIN_CLIP.word = (uint32_t)yuv_ch0_min_clip<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH0_MIN_CLIP() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH0_MIN_CLIP.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH0_MIN_CLIP_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH0_MIN_CLIP.word = x)


//ISP_CE0_CODER_CH0_MAX_CLIP


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH0_MAX_CLIP_yuv_ch0_max_clip() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH0_MAX_CLIP.ISP_CE0_CODER_CH0_MAX_CLIP_ts.yuv_ch0_max_clip
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH0_MAX_CLIP_yuv_ch0_max_clip(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH0_MAX_CLIP.ISP_CE0_CODER_CH0_MAX_CLIP_ts.yuv_ch0_max_clip = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH0_MAX_CLIP(yuv_ch0_max_clip) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH0_MAX_CLIP.word = (uint32_t)yuv_ch0_max_clip<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH0_MAX_CLIP() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH0_MAX_CLIP.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH0_MAX_CLIP_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH0_MAX_CLIP.word = x)


//ISP_CE0_CODER_CH1_MIN_CLIP


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH1_MIN_CLIP_yuv_ch1_min_clip() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH1_MIN_CLIP.ISP_CE0_CODER_CH1_MIN_CLIP_ts.yuv_ch1_min_clip
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH1_MIN_CLIP_yuv_ch1_min_clip(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH1_MIN_CLIP.ISP_CE0_CODER_CH1_MIN_CLIP_ts.yuv_ch1_min_clip = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH1_MIN_CLIP(yuv_ch1_min_clip) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH1_MIN_CLIP.word = (uint32_t)yuv_ch1_min_clip<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH1_MIN_CLIP() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH1_MIN_CLIP.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH1_MIN_CLIP_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH1_MIN_CLIP.word = x)


//ISP_CE0_CODER_CH1_MAX_CLIP


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH1_MAX_CLIP_yuv_ch1_max_clip() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH1_MAX_CLIP.ISP_CE0_CODER_CH1_MAX_CLIP_ts.yuv_ch1_max_clip
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH1_MAX_CLIP_yuv_ch1_max_clip(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH1_MAX_CLIP.ISP_CE0_CODER_CH1_MAX_CLIP_ts.yuv_ch1_max_clip = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH1_MAX_CLIP(yuv_ch1_max_clip) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH1_MAX_CLIP.word = (uint32_t)yuv_ch1_max_clip<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH1_MAX_CLIP() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH1_MAX_CLIP.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH1_MAX_CLIP_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH1_MAX_CLIP.word = x)


//ISP_CE0_CODER_CH2_MIN_CLIP


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH2_MIN_CLIP_yuv_ch2_min_clip() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH2_MIN_CLIP.ISP_CE0_CODER_CH2_MIN_CLIP_ts.yuv_ch2_min_clip
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH2_MIN_CLIP_yuv_ch2_min_clip(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH2_MIN_CLIP.ISP_CE0_CODER_CH2_MIN_CLIP_ts.yuv_ch2_min_clip = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH2_MIN_CLIP(yuv_ch2_min_clip) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH2_MIN_CLIP.word = (uint32_t)yuv_ch2_min_clip<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH2_MIN_CLIP() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH2_MIN_CLIP.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH2_MIN_CLIP_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH2_MIN_CLIP.word = x)


//ISP_CE0_CODER_CH2_MAX_CLIP


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH2_MAX_CLIP_yuv_ch2_max_clip() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH2_MAX_CLIP.ISP_CE0_CODER_CH2_MAX_CLIP_ts.yuv_ch2_max_clip
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH2_MAX_CLIP_yuv_ch2_max_clip(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH2_MAX_CLIP.ISP_CE0_CODER_CH2_MAX_CLIP_ts.yuv_ch2_max_clip = x)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH2_MAX_CLIP(yuv_ch2_max_clip) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH2_MAX_CLIP.word = (uint32_t)yuv_ch2_max_clip<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_CH2_MAX_CLIP() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH2_MAX_CLIP.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_CH2_MAX_CLIP_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_CH2_MAX_CLIP.word = x)


//ISP_CE0_CODER_RAW_NONACTIVE


#define Get_ISP_CE0_CODER_ISP_CE0_CODER_RAW_NONACTIVE_yuv_raw_nonactive() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_RAW_NONACTIVE.ISP_CE0_CODER_RAW_NONACTIVE_ts.yuv_raw_nonactive
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_RAW_NONACTIVE_yuv_raw_nonactive_DISABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_RAW_NONACTIVE.ISP_CE0_CODER_RAW_NONACTIVE_ts.yuv_raw_nonactive == yuv_raw_nonactive_DISABLE)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_RAW_NONACTIVE_yuv_raw_nonactive__DISABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_RAW_NONACTIVE.ISP_CE0_CODER_RAW_NONACTIVE_ts.yuv_raw_nonactive = yuv_raw_nonactive_DISABLE)
#define yuv_raw_nonactive_DISABLE 0x0    //Disable transmission of non-active lines to the output
#define Is_ISP_CE0_CODER_ISP_CE0_CODER_RAW_NONACTIVE_yuv_raw_nonactive_ENABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_RAW_NONACTIVE.ISP_CE0_CODER_RAW_NONACTIVE_ts.yuv_raw_nonactive == yuv_raw_nonactive_ENABLE)
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_RAW_NONACTIVE_yuv_raw_nonactive__ENABLE() (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_RAW_NONACTIVE.ISP_CE0_CODER_RAW_NONACTIVE_ts.yuv_raw_nonactive = yuv_raw_nonactive_ENABLE)
#define yuv_raw_nonactive_ENABLE 0x1    //Enable non-active lines copy from input to output
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_RAW_NONACTIVE(yuv_raw_nonactive) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_RAW_NONACTIVE.word = (uint8_t)yuv_raw_nonactive<<0)
#define Get_ISP_CE0_CODER_ISP_CE0_CODER_RAW_NONACTIVE() p_ISP_CE0_CODER_IP->ISP_CE0_CODER_RAW_NONACTIVE.word
#define Set_ISP_CE0_CODER_ISP_CE0_CODER_RAW_NONACTIVE_word(x) (p_ISP_CE0_CODER_IP->ISP_CE0_CODER_RAW_NONACTIVE.word = x)

//ISP_OPF0_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable output formatter module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* (DISABLE SOFT RESET) IP is functional*/
    }ISP_OPF0_ENABLE_ts;

}ISP_OPF0_ENABLE_tu;



//ISP_OPF0_DFV
/*Description: Design for verification register, use to verify interrupt
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* Disable DFV for OPF filter*/
        uint8_t dfv_interrupt_ctrl :1;
        /* 
        When the register value change, interrupt is set to activ*/
    }ISP_OPF0_DFV_ts;

}ISP_OPF0_DFV_tu;



//ISP_OPF0_HSYNC_RISING
/*Description: Pixel clock period delay between first active pixel data and rising edge of hsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hsync_rising;
    }ISP_OPF0_HSYNC_RISING_ts;

}ISP_OPF0_HSYNC_RISING_tu;



//ISP_OPF0_HSYNC_FALLING
/*Description: Pixel clock period delay between first active pixel data and falling edge of hsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hsync_falling;
    }ISP_OPF0_HSYNC_FALLING_ts;

}ISP_OPF0_HSYNC_FALLING_tu;



//ISP_OPF0_VSYNC_RISING_FINE
/*Description: Pixel clock period delay between first active pixel data and rising edge of vsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_rising_fine;
    }ISP_OPF0_VSYNC_RISING_FINE_ts;

}ISP_OPF0_VSYNC_RISING_FINE_tu;



//ISP_OPF0_VSYNC_FALLING_FINE
/*Description: Pixel clock period delay between first active pixel data and falling edge of vsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_falling_fine;
    }ISP_OPF0_VSYNC_FALLING_FINE_ts;

}ISP_OPF0_VSYNC_FALLING_FINE_tu;



//ISP_OPF0_VSYNC_RISING_COARSE
/*Description: Delay between line zero (SOF) and vsync0 rising edge (in lines)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_rising_coarse;
    }ISP_OPF0_VSYNC_RISING_COARSE_ts;

}ISP_OPF0_VSYNC_RISING_COARSE_tu;



//ISP_OPF0_VSYNC_FALLING_COARSE
/*Description: Delay between line zero (SOF) and vsync0 falling edge (in lines)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_falling_coarse;
    }ISP_OPF0_VSYNC_FALLING_COARSE_ts;

}ISP_OPF0_VSYNC_FALLING_COARSE_tu;



//ISP_OPF0_HCROP_RISING
/*Description: Horizontal starting point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hcrop_rising;
    }ISP_OPF0_HCROP_RISING_ts;

}ISP_OPF0_HCROP_RISING_tu;



//ISP_OPF0_HCROP_FALLING
/*Description: Horizontal end point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hcrop_falling;
    }ISP_OPF0_HCROP_FALLING_ts;

}ISP_OPF0_HCROP_FALLING_tu;



//ISP_OPF0_VCROP_RISING_COARSE
/*Description: Vertical starting point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vcrop_rising_coarse;
    }ISP_OPF0_VCROP_RISING_COARSE_ts;

}ISP_OPF0_VCROP_RISING_COARSE_tu;



//ISP_OPF0_VCROP_FALLING_COARSE
/*Description: Vertical end point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vcrop_falling_coarse;
    }ISP_OPF0_VCROP_FALLING_COARSE_ts;

}ISP_OPF0_VCROP_FALLING_COARSE_tu;



//ISP_OPF0_CONTROL
/*Description: Output Formatter Control register
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t sync_based_pixvalid :1;
        /* Enable sync-based pix-valid output*/
        uint8_t toggle_pix_valid :1;
        /* Enable pix_valid toggle function*/
        uint8_t rgb_flip :3;
        /* Swap order of RGB bytes being output :*/
        uint8_t rgb_bit_flip :1;
        /* Swap order of bits with RGB byte :*/
        uint8_t embedded_code_en :1;
        /* Enable embedded code insertion*/
        uint8_t false_sync_code_protect_en :1;
        /* False sync code protection function*/
        uint8_t invert_hsync :1;
        /* Enable hsync0 inversion*/
        uint8_t invert_vsync :1;
        /* Enable Vsync0 inversion*/
        uint8_t idata_ch0_en :1;
        /* Enable/Disable corresponding channel output data*/
        uint8_t idata_ch1_en :1;
        /* Enable/Disable corresponding channel output data*/
        uint8_t idata_ch2_en :1;
        /* Enable/Disable corresponding channel output data*/
        uint8_t opf_output :3;
        /* Output Data Format :*/
        uint8_t rgb444_format :1;
        /* Packs RGB444 data to resemble RGB565*/
    }ISP_OPF0_CONTROL_ts;

}ISP_OPF0_CONTROL_tu;



//ISP_OPF0_PIXVALID_LTYPES
/*Description: Defines behaviour depending on line types.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t pixvalid_linetypes :6;
        /* Select line types for which pixvalid will be generated :
        bit0 - SOF
        bit1 - EOF
        bit2 - BLANK
        bit3 - BLACK
        bit4 - DARK
        bit5 - ACTIVE*/
        uint8_t eof_blank_only_en :1;
        /* Used to qualify blank lines at the end of frame (no other blank lines in frame are qualified).
        Bit2 of pixvalid_linetypes MUST be set if this register is to be used.*/
    }ISP_OPF0_PIXVALID_LTYPES_ts;

}ISP_OPF0_PIXVALID_LTYPES_tu;



//ISP_OPF0_YCBCR_FLIP
/*Description: Control Y/Cb/Cr output order
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t cbcr_flip :1;
        /* Flip Cb-Cr output sequence*/
        uint8_t y_cbcr_flip :1;
        /* Flip Y-Cb/Cr output sequence*/
    }ISP_OPF0_YCBCR_FLIP_ts;

}ISP_OPF0_YCBCR_FLIP_tu;



//ISP_OPF0_LAST_NONACT_LINE
/*Description: Line number of last non-active line before start of active region (assumes SOF=0)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_nonactive_line;
    }ISP_OPF0_LAST_NONACT_LINE_ts;

}ISP_OPF0_LAST_NONACT_LINE_tu;



//ISP_OPF0_HSYNC_RISING_STATUS
/*Description: Pixel clock period delay between first active pixel data and rising edge of hsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hsync_rising_status;
    }ISP_OPF0_HSYNC_RISING_STATUS_ts;

}ISP_OPF0_HSYNC_RISING_STATUS_tu;



//ISP_OPF0_HSYNC_FALLING_STATUS
/*Description: Pixel clock period delay between first active pixel data and falling edge of hsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hsync_falling_status;
    }ISP_OPF0_HSYNC_FALLING_STATUS_ts;

}ISP_OPF0_HSYNC_FALLING_STATUS_tu;



//ISP_OPF0_VSYNC_RISING_FINE_STATUS
/*Description: Pixel clock period delay between first active pixel data and rising edge of vsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_rising_fine_status;
    }ISP_OPF0_VSYNC_RISING_FINE_STATUS_ts;

}ISP_OPF0_VSYNC_RISING_FINE_STATUS_tu;



//ISP_OPF0_VSYNC_FALLING_FINE_STATUS
/*Description: Pixel clock period delay between first active pixel data and falling edge of vsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_falling_fine_status;
    }ISP_OPF0_VSYNC_FALLING_FINE_STATUS_ts;

}ISP_OPF0_VSYNC_FALLING_FINE_STATUS_tu;



//ISP_OPF0_VSYNC_RISING_COARSE_STATUS
/*Description: Delay between line zero (SOF) and vsync0 rising edge (in lines)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_rising_coarse_status;
    }ISP_OPF0_VSYNC_RISING_COARSE_STATUS_ts;

}ISP_OPF0_VSYNC_RISING_COARSE_STATUS_tu;



//ISP_OPF0_VSYNC_FALLING_COARSE_STATUS
/*Description: Delay between line zero (SOF) and vsync0 falling edge (in lines)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_falling_coarse_status;
    }ISP_OPF0_VSYNC_FALLING_COARSE_STATUS_ts;

}ISP_OPF0_VSYNC_FALLING_COARSE_STATUS_tu;



//ISP_OPF0_HCROP_RISING_STATUS
/*Description: Horizontal starting point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hcrop_rising_status;
    }ISP_OPF0_HCROP_RISING_STATUS_ts;

}ISP_OPF0_HCROP_RISING_STATUS_tu;



//ISP_OPF0_HCROP_FALLING_STATUS
/*Description: Horizontal end point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hcrop_falling_status;
    }ISP_OPF0_HCROP_FALLING_STATUS_ts;

}ISP_OPF0_HCROP_FALLING_STATUS_tu;



//ISP_OPF0_VCROP_RISING_COARSE_STATUS
/*Description: Vertical starting point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vcrop_rising_coarse_status;
    }ISP_OPF0_VCROP_RISING_COARSE_STATUS_ts;

}ISP_OPF0_VCROP_RISING_COARSE_STATUS_tu;



//ISP_OPF0_VCROP_FALLING_COARSE_STATUS
/*Description: Vertical end point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vcrop_falling_coarse_status;
    }ISP_OPF0_VCROP_FALLING_COARSE_STATUS_ts;

}ISP_OPF0_VCROP_FALLING_COARSE_STATUS_tu;



//ISP_OPF0_CONTROL_STATUS
/*Description: Output Formatter Control Status register
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t sync_based_pixvalid_status :1;
        /* Sync-based pix-valid Status*/
        uint8_t toggle_pix_valid_status :1;
        /* Pix_valid toggling status*/
        uint8_t rgb_flip_status :3;
        /* Current output order of RGB bytes :*/
        uint8_t rgb_bit_flip_status :1;
        /* Current Swap order of bits with RGB byte :*/
        uint8_t embedded_code_en_status :1;
        /* Embedded code insertion status*/
        uint8_t false_sync_code_protect_en_status :1;
        /* False sync code protection Status*/
        uint8_t invert_hsync_status :1;
        /* Current Enable Status of hsync0 inversion*/
        uint8_t invert_vsync_status :1;
        /* Current Enable Status of Vsync0 inversion*/
        uint8_t idata_ch0_en_status :1;
        /* Current Enable Status of corresponding channel output data*/
        uint8_t idata_ch1_en_status :1;
        /* Current Enable Status of corresponding channel output data*/
        uint8_t idata_ch2_en_status :1;
        /* Current Enable Status of corresponding channel output data*/
        uint8_t opf_output_status :3;
        /* Current Output Data Format :*/
        uint8_t rgb444_format_status :1;
        /* Current packing of RGB444 data*/
    }ISP_OPF0_CONTROL_STATUS_ts;

}ISP_OPF0_CONTROL_STATUS_tu;



//ISP_OPF0_PIXVALID_LTYPES_STATUS
/*Description: Line type control Status register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t pixvalid_linetypes_status :6;
        /* Current line types for which pixvalid will be generated:
        bit0 - SOF
        bit1 - EOF
        bit2 - BLANK
        bit3 - BLACK
        bit4 - DARK
        bit5 - ACTIVE*/
        uint8_t eof_blank_only_en_status :1;
        /* Current status of blank lines qualification at the end of frame (no other blank lines in frame are qualified).*/
    }ISP_OPF0_PIXVALID_LTYPES_STATUS_ts;

}ISP_OPF0_PIXVALID_LTYPES_STATUS_tu;



//ISP_OPF0_YCBCR_FLIP_STATUS
/*Description: Current Y/Cb/Cr order
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t cbcr_flip_status :1;
        /* Current Cb-Cr output sequence*/
        uint8_t y_cbcr_flip_status :1;
        /* Current Y-Cb/Cr output sequence*/
    }ISP_OPF0_YCBCR_FLIP_STATUS_ts;

}ISP_OPF0_YCBCR_FLIP_STATUS_tu;



//ISP_OPF0_LAST_NONACT_LINE_STATUS
/*Description: Current Line number of last non-active line before start of active region (assumes SOF=0)
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t last_nonactive_line_status;
    }ISP_OPF0_LAST_NONACT_LINE_STATUS_ts;

}ISP_OPF0_LAST_NONACT_LINE_STATUS_tu;

typedef struct
{
    ISP_OPF0_ENABLE_tu ISP_OPF0_ENABLE;
    ISP_OPF0_DFV_tu ISP_OPF0_DFV;
    ISP_OPF0_HSYNC_RISING_tu ISP_OPF0_HSYNC_RISING;
    ISP_OPF0_HSYNC_FALLING_tu ISP_OPF0_HSYNC_FALLING;
    ISP_OPF0_VSYNC_RISING_FINE_tu ISP_OPF0_VSYNC_RISING_FINE;
    ISP_OPF0_VSYNC_FALLING_FINE_tu ISP_OPF0_VSYNC_FALLING_FINE;
    ISP_OPF0_VSYNC_RISING_COARSE_tu ISP_OPF0_VSYNC_RISING_COARSE;
    ISP_OPF0_VSYNC_FALLING_COARSE_tu ISP_OPF0_VSYNC_FALLING_COARSE;
    ISP_OPF0_HCROP_RISING_tu ISP_OPF0_HCROP_RISING;
    ISP_OPF0_HCROP_FALLING_tu ISP_OPF0_HCROP_FALLING;
    ISP_OPF0_VCROP_RISING_COARSE_tu ISP_OPF0_VCROP_RISING_COARSE;
    ISP_OPF0_VCROP_FALLING_COARSE_tu ISP_OPF0_VCROP_FALLING_COARSE;
    ISP_OPF0_CONTROL_tu ISP_OPF0_CONTROL;
    ISP_OPF0_PIXVALID_LTYPES_tu ISP_OPF0_PIXVALID_LTYPES;
    ISP_OPF0_YCBCR_FLIP_tu ISP_OPF0_YCBCR_FLIP;
    ISP_OPF0_LAST_NONACT_LINE_tu ISP_OPF0_LAST_NONACT_LINE;
    ISP_OPF0_HSYNC_RISING_STATUS_tu ISP_OPF0_HSYNC_RISING_STATUS;
    ISP_OPF0_HSYNC_FALLING_STATUS_tu ISP_OPF0_HSYNC_FALLING_STATUS;
    ISP_OPF0_VSYNC_RISING_FINE_STATUS_tu ISP_OPF0_VSYNC_RISING_FINE_STATUS;
    ISP_OPF0_VSYNC_FALLING_FINE_STATUS_tu ISP_OPF0_VSYNC_FALLING_FINE_STATUS;
    ISP_OPF0_VSYNC_RISING_COARSE_STATUS_tu ISP_OPF0_VSYNC_RISING_COARSE_STATUS;
    ISP_OPF0_VSYNC_FALLING_COARSE_STATUS_tu ISP_OPF0_VSYNC_FALLING_COARSE_STATUS;
    ISP_OPF0_HCROP_RISING_STATUS_tu ISP_OPF0_HCROP_RISING_STATUS;
    ISP_OPF0_HCROP_FALLING_STATUS_tu ISP_OPF0_HCROP_FALLING_STATUS;
    ISP_OPF0_VCROP_RISING_COARSE_STATUS_tu ISP_OPF0_VCROP_RISING_COARSE_STATUS;
    ISP_OPF0_VCROP_FALLING_COARSE_STATUS_tu ISP_OPF0_VCROP_FALLING_COARSE_STATUS;
    ISP_OPF0_CONTROL_STATUS_tu ISP_OPF0_CONTROL_STATUS;
    ISP_OPF0_PIXVALID_LTYPES_STATUS_tu ISP_OPF0_PIXVALID_LTYPES_STATUS;
    ISP_OPF0_YCBCR_FLIP_STATUS_tu ISP_OPF0_YCBCR_FLIP_STATUS;
    ISP_OPF0_LAST_NONACT_LINE_STATUS_tu ISP_OPF0_LAST_NONACT_LINE_STATUS;
}ISP_OPF0_IP_ts;




//ISP_OPF0_ENABLE


#define Get_ISP_OPF0_ISP_OPF0_ENABLE_enable() p_ISP_OPF0_IP->ISP_OPF0_ENABLE.ISP_OPF0_ENABLE_ts.enable
#define Is_ISP_OPF0_ISP_OPF0_ENABLE_enable_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_ENABLE.ISP_OPF0_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_OPF0_ISP_OPF0_ENABLE_enable__DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_ENABLE.ISP_OPF0_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable output formatter module
#define Is_ISP_OPF0_ISP_OPF0_ENABLE_enable_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_ENABLE.ISP_OPF0_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_OPF0_ISP_OPF0_ENABLE_enable__ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_ENABLE.ISP_OPF0_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable output formatter module


#define Get_ISP_OPF0_ISP_OPF0_ENABLE_soft_reset() p_ISP_OPF0_IP->ISP_OPF0_ENABLE.ISP_OPF0_ENABLE_ts.soft_reset
#define Is_ISP_OPF0_ISP_OPF0_ENABLE_soft_reset_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_ENABLE.ISP_OPF0_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_OPF0_ISP_OPF0_ENABLE_soft_reset__B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_ENABLE.ISP_OPF0_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET) IP is functional
#define Is_ISP_OPF0_ISP_OPF0_ENABLE_soft_reset_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_ENABLE.ISP_OPF0_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_OPF0_ISP_OPF0_ENABLE_soft_reset__B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_ENABLE.ISP_OPF0_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET) Soft Reset the IP
#define Set_ISP_OPF0_ISP_OPF0_ENABLE(enable,soft_reset) (p_ISP_OPF0_IP->ISP_OPF0_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_OPF0_ISP_OPF0_ENABLE() p_ISP_OPF0_IP->ISP_OPF0_ENABLE.word
#define Set_ISP_OPF0_ISP_OPF0_ENABLE_word(x) (p_ISP_OPF0_IP->ISP_OPF0_ENABLE.word = x)


//ISP_OPF0_DFV


#define Get_ISP_OPF0_ISP_OPF0_DFV_dfv_enable() p_ISP_OPF0_IP->ISP_OPF0_DFV.ISP_OPF0_DFV_ts.dfv_enable
#define Is_ISP_OPF0_ISP_OPF0_DFV_dfv_enable_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_DFV.ISP_OPF0_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_OPF0_ISP_OPF0_DFV_dfv_enable__DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_DFV.ISP_OPF0_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable DFV for OPF filter
#define Is_ISP_OPF0_ISP_OPF0_DFV_dfv_enable_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_DFV.ISP_OPF0_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_OPF0_ISP_OPF0_DFV_dfv_enable__ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_DFV.ISP_OPF0_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable DFV for OPF filter


#define Get_ISP_OPF0_ISP_OPF0_DFV_dfv_interrupt_ctrl() p_ISP_OPF0_IP->ISP_OPF0_DFV.ISP_OPF0_DFV_ts.dfv_interrupt_ctrl
#define Set_ISP_OPF0_ISP_OPF0_DFV_dfv_interrupt_ctrl(x) (p_ISP_OPF0_IP->ISP_OPF0_DFV.ISP_OPF0_DFV_ts.dfv_interrupt_ctrl = x)
#define Set_ISP_OPF0_ISP_OPF0_DFV(dfv_enable,dfv_interrupt_ctrl) (p_ISP_OPF0_IP->ISP_OPF0_DFV.word = (uint32_t)dfv_enable<<0 | (uint32_t)dfv_interrupt_ctrl<<1)
#define Get_ISP_OPF0_ISP_OPF0_DFV() p_ISP_OPF0_IP->ISP_OPF0_DFV.word
#define Set_ISP_OPF0_ISP_OPF0_DFV_word(x) (p_ISP_OPF0_IP->ISP_OPF0_DFV.word = x)


//ISP_OPF0_HSYNC_RISING


#define Get_ISP_OPF0_ISP_OPF0_HSYNC_RISING_hsync_rising() p_ISP_OPF0_IP->ISP_OPF0_HSYNC_RISING.ISP_OPF0_HSYNC_RISING_ts.hsync_rising
#define Set_ISP_OPF0_ISP_OPF0_HSYNC_RISING_hsync_rising(x) (p_ISP_OPF0_IP->ISP_OPF0_HSYNC_RISING.ISP_OPF0_HSYNC_RISING_ts.hsync_rising = x)
#define Set_ISP_OPF0_ISP_OPF0_HSYNC_RISING(hsync_rising) (p_ISP_OPF0_IP->ISP_OPF0_HSYNC_RISING.word = (uint32_t)hsync_rising<<0)
#define Get_ISP_OPF0_ISP_OPF0_HSYNC_RISING() p_ISP_OPF0_IP->ISP_OPF0_HSYNC_RISING.word
#define Set_ISP_OPF0_ISP_OPF0_HSYNC_RISING_word(x) (p_ISP_OPF0_IP->ISP_OPF0_HSYNC_RISING.word = x)


//ISP_OPF0_HSYNC_FALLING


#define Get_ISP_OPF0_ISP_OPF0_HSYNC_FALLING_hsync_falling() p_ISP_OPF0_IP->ISP_OPF0_HSYNC_FALLING.ISP_OPF0_HSYNC_FALLING_ts.hsync_falling
#define Set_ISP_OPF0_ISP_OPF0_HSYNC_FALLING_hsync_falling(x) (p_ISP_OPF0_IP->ISP_OPF0_HSYNC_FALLING.ISP_OPF0_HSYNC_FALLING_ts.hsync_falling = x)
#define Set_ISP_OPF0_ISP_OPF0_HSYNC_FALLING(hsync_falling) (p_ISP_OPF0_IP->ISP_OPF0_HSYNC_FALLING.word = (uint32_t)hsync_falling<<0)
#define Get_ISP_OPF0_ISP_OPF0_HSYNC_FALLING() p_ISP_OPF0_IP->ISP_OPF0_HSYNC_FALLING.word
#define Set_ISP_OPF0_ISP_OPF0_HSYNC_FALLING_word(x) (p_ISP_OPF0_IP->ISP_OPF0_HSYNC_FALLING.word = x)


//ISP_OPF0_VSYNC_RISING_FINE


#define Get_ISP_OPF0_ISP_OPF0_VSYNC_RISING_FINE_vsync_rising_fine() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_FINE.ISP_OPF0_VSYNC_RISING_FINE_ts.vsync_rising_fine
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_RISING_FINE_vsync_rising_fine(x) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_FINE.ISP_OPF0_VSYNC_RISING_FINE_ts.vsync_rising_fine = x)
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_RISING_FINE(vsync_rising_fine) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_FINE.word = (uint32_t)vsync_rising_fine<<0)
#define Get_ISP_OPF0_ISP_OPF0_VSYNC_RISING_FINE() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_FINE.word
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_RISING_FINE_word(x) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_FINE.word = x)


//ISP_OPF0_VSYNC_FALLING_FINE


#define Get_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_FINE_vsync_falling_fine() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_FINE.ISP_OPF0_VSYNC_FALLING_FINE_ts.vsync_falling_fine
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_FINE_vsync_falling_fine(x) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_FINE.ISP_OPF0_VSYNC_FALLING_FINE_ts.vsync_falling_fine = x)
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_FINE(vsync_falling_fine) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_FINE.word = (uint32_t)vsync_falling_fine<<0)
#define Get_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_FINE() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_FINE.word
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_FINE_word(x) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_FINE.word = x)


//ISP_OPF0_VSYNC_RISING_COARSE


#define Get_ISP_OPF0_ISP_OPF0_VSYNC_RISING_COARSE_vsync_rising_coarse() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_COARSE.ISP_OPF0_VSYNC_RISING_COARSE_ts.vsync_rising_coarse
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_RISING_COARSE_vsync_rising_coarse(x) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_COARSE.ISP_OPF0_VSYNC_RISING_COARSE_ts.vsync_rising_coarse = x)
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_RISING_COARSE(vsync_rising_coarse) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_COARSE.word = (uint32_t)vsync_rising_coarse<<0)
#define Get_ISP_OPF0_ISP_OPF0_VSYNC_RISING_COARSE() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_COARSE.word
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_RISING_COARSE_word(x) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_COARSE.word = x)


//ISP_OPF0_VSYNC_FALLING_COARSE


#define Get_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_COARSE_vsync_falling_coarse() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_COARSE.ISP_OPF0_VSYNC_FALLING_COARSE_ts.vsync_falling_coarse
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_COARSE_vsync_falling_coarse(x) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_COARSE.ISP_OPF0_VSYNC_FALLING_COARSE_ts.vsync_falling_coarse = x)
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_COARSE(vsync_falling_coarse) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_COARSE.word = (uint32_t)vsync_falling_coarse<<0)
#define Get_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_COARSE() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_COARSE.word
#define Set_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_COARSE_word(x) (p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_COARSE.word = x)


//ISP_OPF0_HCROP_RISING


#define Get_ISP_OPF0_ISP_OPF0_HCROP_RISING_hcrop_rising() p_ISP_OPF0_IP->ISP_OPF0_HCROP_RISING.ISP_OPF0_HCROP_RISING_ts.hcrop_rising
#define Set_ISP_OPF0_ISP_OPF0_HCROP_RISING_hcrop_rising(x) (p_ISP_OPF0_IP->ISP_OPF0_HCROP_RISING.ISP_OPF0_HCROP_RISING_ts.hcrop_rising = x)
#define Set_ISP_OPF0_ISP_OPF0_HCROP_RISING(hcrop_rising) (p_ISP_OPF0_IP->ISP_OPF0_HCROP_RISING.word = (uint32_t)hcrop_rising<<0)
#define Get_ISP_OPF0_ISP_OPF0_HCROP_RISING() p_ISP_OPF0_IP->ISP_OPF0_HCROP_RISING.word
#define Set_ISP_OPF0_ISP_OPF0_HCROP_RISING_word(x) (p_ISP_OPF0_IP->ISP_OPF0_HCROP_RISING.word = x)


//ISP_OPF0_HCROP_FALLING


#define Get_ISP_OPF0_ISP_OPF0_HCROP_FALLING_hcrop_falling() p_ISP_OPF0_IP->ISP_OPF0_HCROP_FALLING.ISP_OPF0_HCROP_FALLING_ts.hcrop_falling
#define Set_ISP_OPF0_ISP_OPF0_HCROP_FALLING_hcrop_falling(x) (p_ISP_OPF0_IP->ISP_OPF0_HCROP_FALLING.ISP_OPF0_HCROP_FALLING_ts.hcrop_falling = x)
#define Set_ISP_OPF0_ISP_OPF0_HCROP_FALLING(hcrop_falling) (p_ISP_OPF0_IP->ISP_OPF0_HCROP_FALLING.word = ((uint32_t)hcrop_falling)<<0)
#define Get_ISP_OPF0_ISP_OPF0_HCROP_FALLING() p_ISP_OPF0_IP->ISP_OPF0_HCROP_FALLING.word
#define Set_ISP_OPF0_ISP_OPF0_HCROP_FALLING_word(x) (p_ISP_OPF0_IP->ISP_OPF0_HCROP_FALLING.word = x)


//ISP_OPF0_VCROP_RISING_COARSE


#define Get_ISP_OPF0_ISP_OPF0_VCROP_RISING_COARSE_vcrop_rising_coarse() p_ISP_OPF0_IP->ISP_OPF0_VCROP_RISING_COARSE.ISP_OPF0_VCROP_RISING_COARSE_ts.vcrop_rising_coarse
#define Set_ISP_OPF0_ISP_OPF0_VCROP_RISING_COARSE_vcrop_rising_coarse(x) (p_ISP_OPF0_IP->ISP_OPF0_VCROP_RISING_COARSE.ISP_OPF0_VCROP_RISING_COARSE_ts.vcrop_rising_coarse = x)
#define Set_ISP_OPF0_ISP_OPF0_VCROP_RISING_COARSE(vcrop_rising_coarse) (p_ISP_OPF0_IP->ISP_OPF0_VCROP_RISING_COARSE.word = (uint32_t)vcrop_rising_coarse<<0)
#define Get_ISP_OPF0_ISP_OPF0_VCROP_RISING_COARSE() p_ISP_OPF0_IP->ISP_OPF0_VCROP_RISING_COARSE.word
#define Set_ISP_OPF0_ISP_OPF0_VCROP_RISING_COARSE_word(x) (p_ISP_OPF0_IP->ISP_OPF0_VCROP_RISING_COARSE.word = x)


//ISP_OPF0_VCROP_FALLING_COARSE


#define Get_ISP_OPF0_ISP_OPF0_VCROP_FALLING_COARSE_vcrop_falling_coarse() p_ISP_OPF0_IP->ISP_OPF0_VCROP_FALLING_COARSE.ISP_OPF0_VCROP_FALLING_COARSE_ts.vcrop_falling_coarse
#define Set_ISP_OPF0_ISP_OPF0_VCROP_FALLING_COARSE_vcrop_falling_coarse(x) (p_ISP_OPF0_IP->ISP_OPF0_VCROP_FALLING_COARSE.ISP_OPF0_VCROP_FALLING_COARSE_ts.vcrop_falling_coarse = x)
#define Set_ISP_OPF0_ISP_OPF0_VCROP_FALLING_COARSE(vcrop_falling_coarse) (p_ISP_OPF0_IP->ISP_OPF0_VCROP_FALLING_COARSE.word = (uint32_t)vcrop_falling_coarse<<0)
#define Get_ISP_OPF0_ISP_OPF0_VCROP_FALLING_COARSE() p_ISP_OPF0_IP->ISP_OPF0_VCROP_FALLING_COARSE.word
#define Set_ISP_OPF0_ISP_OPF0_VCROP_FALLING_COARSE_word(x) (p_ISP_OPF0_IP->ISP_OPF0_VCROP_FALLING_COARSE.word = x)


//ISP_OPF0_CONTROL


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_sync_based_pixvalid() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.sync_based_pixvalid
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_sync_based_pixvalid_SYNC_PIX_VALID_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.sync_based_pixvalid == sync_based_pixvalid_SYNC_PIX_VALID_DISABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_sync_based_pixvalid__SYNC_PIX_VALID_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.sync_based_pixvalid = sync_based_pixvalid_SYNC_PIX_VALID_DISABLE)
#define sync_based_pixvalid_SYNC_PIX_VALID_DISABLE 0x0    //Disable
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_sync_based_pixvalid_SYNC_PIX_VALID_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.sync_based_pixvalid == sync_based_pixvalid_SYNC_PIX_VALID_ENABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_sync_based_pixvalid__SYNC_PIX_VALID_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.sync_based_pixvalid = sync_based_pixvalid_SYNC_PIX_VALID_ENABLE)
#define sync_based_pixvalid_SYNC_PIX_VALID_ENABLE 0x1    //Enable


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_toggle_pix_valid() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.toggle_pix_valid
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_toggle_pix_valid_PIX_VALID_LEVEL() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.toggle_pix_valid == toggle_pix_valid_PIX_VALID_LEVEL)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_toggle_pix_valid__PIX_VALID_LEVEL() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.toggle_pix_valid = toggle_pix_valid_PIX_VALID_LEVEL)
#define toggle_pix_valid_PIX_VALID_LEVEL 0x0    //Disable
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_toggle_pix_valid_PIX_VALID_EDGE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.toggle_pix_valid == toggle_pix_valid_PIX_VALID_EDGE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_toggle_pix_valid__PIX_VALID_EDGE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.toggle_pix_valid = toggle_pix_valid_PIX_VALID_EDGE)
#define toggle_pix_valid_PIX_VALID_EDGE 0x1    //Enable


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip == rgb_flip_B_0x0)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip__B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip = rgb_flip_B_0x0)
#define rgb_flip_B_0x0 0x0    //RGB
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip == rgb_flip_B_0x1)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip__B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip = rgb_flip_B_0x1)
#define rgb_flip_B_0x1 0x1    //BGR
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip_B_0x2() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip == rgb_flip_B_0x2)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip__B_0x2() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip = rgb_flip_B_0x2)
#define rgb_flip_B_0x2 0x2    //GBR
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip_B_0x3() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip == rgb_flip_B_0x3)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip__B_0x3() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip = rgb_flip_B_0x3)
#define rgb_flip_B_0x3 0x3    //RBG
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip_B_0x4() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip == rgb_flip_B_0x4)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip__B_0x4() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip = rgb_flip_B_0x4)
#define rgb_flip_B_0x4 0x4    //BRG
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip_B_0x5() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip == rgb_flip_B_0x5)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_rgb_flip__B_0x5() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_flip = rgb_flip_B_0x5)
#define rgb_flip_B_0x5 0x5    //GRB


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_rgb_bit_flip() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_bit_flip
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_rgb_bit_flip_RGB_BITS_SWAP_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_bit_flip == rgb_bit_flip_RGB_BITS_SWAP_DISABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_rgb_bit_flip__RGB_BITS_SWAP_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_bit_flip = rgb_bit_flip_RGB_BITS_SWAP_DISABLE)
#define rgb_bit_flip_RGB_BITS_SWAP_DISABLE 0x0    //no swap i.e. [9:0]
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_rgb_bit_flip_RGB_BITS_SWAP_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_bit_flip == rgb_bit_flip_RGB_BITS_SWAP_ENABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_rgb_bit_flip__RGB_BITS_SWAP_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb_bit_flip = rgb_bit_flip_RGB_BITS_SWAP_ENABLE)
#define rgb_bit_flip_RGB_BITS_SWAP_ENABLE 0x1    //swap i.e. [0:9]


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_embedded_code_en() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.embedded_code_en
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_embedded_code_en_EMB_CODE_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.embedded_code_en == embedded_code_en_EMB_CODE_DISABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_embedded_code_en__EMB_CODE_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.embedded_code_en = embedded_code_en_EMB_CODE_DISABLE)
#define embedded_code_en_EMB_CODE_DISABLE 0x0    //Disable
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_embedded_code_en_EMB_CODE_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.embedded_code_en == embedded_code_en_EMB_CODE_ENABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_embedded_code_en__EMB_CODE_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.embedded_code_en = embedded_code_en_EMB_CODE_ENABLE)
#define embedded_code_en_EMB_CODE_ENABLE 0x1    //Enable


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_false_sync_code_protect_en() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.false_sync_code_protect_en
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_false_sync_code_protect_en_FSC_PROTECTION_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.false_sync_code_protect_en == false_sync_code_protect_en_FSC_PROTECTION_DISABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_false_sync_code_protect_en__FSC_PROTECTION_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.false_sync_code_protect_en = false_sync_code_protect_en_FSC_PROTECTION_DISABLE)
#define false_sync_code_protect_en_FSC_PROTECTION_DISABLE 0x0    //Disable
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_false_sync_code_protect_en_FSC_PROTECTION_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.false_sync_code_protect_en == false_sync_code_protect_en_FSC_PROTECTION_ENABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_false_sync_code_protect_en__FSC_PROTECTION_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.false_sync_code_protect_en = false_sync_code_protect_en_FSC_PROTECTION_ENABLE)
#define false_sync_code_protect_en_FSC_PROTECTION_ENABLE 0x1    //Enable


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_invert_hsync() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.invert_hsync
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_invert_hsync_HSYNC_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.invert_hsync == invert_hsync_HSYNC_DISABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_invert_hsync__HSYNC_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.invert_hsync = invert_hsync_HSYNC_DISABLE)
#define invert_hsync_HSYNC_DISABLE 0x0    //Disable
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_invert_hsync_HSYNC_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.invert_hsync == invert_hsync_HSYNC_ENABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_invert_hsync__HSYNC_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.invert_hsync = invert_hsync_HSYNC_ENABLE)
#define invert_hsync_HSYNC_ENABLE 0x1    //Enable


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_invert_vsync() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.invert_vsync
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_invert_vsync_VSYNC_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.invert_vsync == invert_vsync_VSYNC_DISABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_invert_vsync__VSYNC_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.invert_vsync = invert_vsync_VSYNC_DISABLE)
#define invert_vsync_VSYNC_DISABLE 0x0    //Disable
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_invert_vsync_VSYNC_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.invert_vsync == invert_vsync_VSYNC_ENABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_invert_vsync__VSYNC_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.invert_vsync = invert_vsync_VSYNC_ENABLE)
#define invert_vsync_VSYNC_ENABLE 0x1    //Enable


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch0_en() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch0_en
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch0_en_OPF_CHANNEL_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch0_en == idata_ch0_en_OPF_CHANNEL_DISABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch0_en__OPF_CHANNEL_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch0_en = idata_ch0_en_OPF_CHANNEL_DISABLE)
#define idata_ch0_en_OPF_CHANNEL_DISABLE 0x0    //Disable
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch0_en_OPF_CHANNEL_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch0_en == idata_ch0_en_OPF_CHANNEL_ENABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch0_en__OPF_CHANNEL_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch0_en = idata_ch0_en_OPF_CHANNEL_ENABLE)
#define idata_ch0_en_OPF_CHANNEL_ENABLE 0x1    //Enable


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch1_en() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch1_en
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch1_en_OPF_CHANNEL_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch1_en == idata_ch1_en_OPF_CHANNEL_DISABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch1_en__OPF_CHANNEL_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch1_en = idata_ch1_en_OPF_CHANNEL_DISABLE)
#define idata_ch1_en_OPF_CHANNEL_DISABLE 0x0    //Disable
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch1_en_OPF_CHANNEL_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch1_en == idata_ch1_en_OPF_CHANNEL_ENABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch1_en__OPF_CHANNEL_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch1_en = idata_ch1_en_OPF_CHANNEL_ENABLE)
#define idata_ch1_en_OPF_CHANNEL_ENABLE 0x1    //Enable


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch2_en() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch2_en
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch2_en_OPF_CHANNEL_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch2_en == idata_ch2_en_OPF_CHANNEL_DISABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch2_en__OPF_CHANNEL_DISABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch2_en = idata_ch2_en_OPF_CHANNEL_DISABLE)
#define idata_ch2_en_OPF_CHANNEL_DISABLE 0x0    //Disable
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch2_en_OPF_CHANNEL_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch2_en == idata_ch2_en_OPF_CHANNEL_ENABLE)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_idata_ch2_en__OPF_CHANNEL_ENABLE() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.idata_ch2_en = idata_ch2_en_OPF_CHANNEL_ENABLE)
#define idata_ch2_en_OPF_CHANNEL_ENABLE 0x1    //Enable


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_opf_output() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_opf_output_OPF_RGB101010() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output == opf_output_OPF_RGB101010)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_opf_output__OPF_RGB101010() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output = opf_output_OPF_RGB101010)
#define opf_output_OPF_RGB101010 0x0    //RGB101010
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_opf_output_OPF_RGB888() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output == opf_output_OPF_RGB888)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_opf_output__OPF_RGB888() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output = opf_output_OPF_RGB888)
#define opf_output_OPF_RGB888 0x1    //RGB888
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_opf_output_OPF_RGB565() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output == opf_output_OPF_RGB565)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_opf_output__OPF_RGB565() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output = opf_output_OPF_RGB565)
#define opf_output_OPF_RGB565 0x2    //RGB565
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_opf_output_OPF_RGB555() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output == opf_output_OPF_RGB555)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_opf_output__OPF_RGB555() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output = opf_output_OPF_RGB555)
#define opf_output_OPF_RGB555 0x3    //RGB555
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_opf_output_OPF_RGB444() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output == opf_output_OPF_RGB444)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_opf_output__OPF_RGB444() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output = opf_output_OPF_RGB444)
#define opf_output_OPF_RGB444 0x4    //RGB444
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_opf_output_OPF_YUV() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output == opf_output_OPF_YUV)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_opf_output__OPF_YUV() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.opf_output = opf_output_OPF_YUV)
#define opf_output_OPF_YUV 0x5    //YUV


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_rgb444_format() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb444_format
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_rgb444_format_RGB444_NOPACK() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb444_format == rgb444_format_RGB444_NOPACK)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_rgb444_format__RGB444_NOPACK() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb444_format = rgb444_format_RGB444_NOPACK)
#define rgb444_format_RGB444_NOPACK 0x0    //no packing
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_rgb444_format_RGB444_PACKED() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb444_format == rgb444_format_RGB444_PACKED)
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_rgb444_format__RGB444_PACKED() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.ISP_OPF0_CONTROL_ts.rgb444_format = rgb444_format_RGB444_PACKED)
#define rgb444_format_RGB444_PACKED 0x1    //Packing
#define Set_ISP_OPF0_ISP_OPF0_CONTROL(sync_based_pixvalid,toggle_pix_valid,rgb_flip,rgb_bit_flip,embedded_code_en,false_sync_code_protect_en,invert_hsync,invert_vsync,idata_ch0_en,idata_ch1_en,idata_ch2_en,opf_output,rgb444_format) (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.word = (uint32_t)sync_based_pixvalid<<0 | (uint32_t)toggle_pix_valid<<1 | (uint32_t)rgb_flip<<2 | (uint32_t)rgb_bit_flip<<5 | (uint32_t)embedded_code_en<<6 | (uint32_t)false_sync_code_protect_en<<7 | (uint32_t)invert_hsync<<8 | (uint32_t)invert_vsync<<9 | (uint32_t)idata_ch0_en<<10 | (uint32_t)idata_ch1_en<<11 | (uint32_t)idata_ch2_en<<12 | (uint32_t)opf_output<<13 | (uint32_t)rgb444_format<<16)
#define Get_ISP_OPF0_ISP_OPF0_CONTROL() p_ISP_OPF0_IP->ISP_OPF0_CONTROL.word
#define Set_ISP_OPF0_ISP_OPF0_CONTROL_word(x) (p_ISP_OPF0_IP->ISP_OPF0_CONTROL.word = x)


//ISP_OPF0_PIXVALID_LTYPES


#define Get_ISP_OPF0_ISP_OPF0_PIXVALID_LTYPES_pixvalid_linetypes() p_ISP_OPF0_IP->ISP_OPF0_PIXVALID_LTYPES.ISP_OPF0_PIXVALID_LTYPES_ts.pixvalid_linetypes
#define Set_ISP_OPF0_ISP_OPF0_PIXVALID_LTYPES_pixvalid_linetypes(x) (p_ISP_OPF0_IP->ISP_OPF0_PIXVALID_LTYPES.ISP_OPF0_PIXVALID_LTYPES_ts.pixvalid_linetypes = x)


#define Get_ISP_OPF0_ISP_OPF0_PIXVALID_LTYPES_eof_blank_only_en() p_ISP_OPF0_IP->ISP_OPF0_PIXVALID_LTYPES.ISP_OPF0_PIXVALID_LTYPES_ts.eof_blank_only_en
#define Set_ISP_OPF0_ISP_OPF0_PIXVALID_LTYPES_eof_blank_only_en(x) (p_ISP_OPF0_IP->ISP_OPF0_PIXVALID_LTYPES.ISP_OPF0_PIXVALID_LTYPES_ts.eof_blank_only_en = x)
#define Set_ISP_OPF0_ISP_OPF0_PIXVALID_LTYPES(pixvalid_linetypes,eof_blank_only_en) (p_ISP_OPF0_IP->ISP_OPF0_PIXVALID_LTYPES.word = (uint32_t)pixvalid_linetypes<<0 | (uint32_t)eof_blank_only_en<<6)
#define Get_ISP_OPF0_ISP_OPF0_PIXVALID_LTYPES() p_ISP_OPF0_IP->ISP_OPF0_PIXVALID_LTYPES.word
#define Set_ISP_OPF0_ISP_OPF0_PIXVALID_LTYPES_word(x) (p_ISP_OPF0_IP->ISP_OPF0_PIXVALID_LTYPES.word = x)


//ISP_OPF0_YCBCR_FLIP


#define Get_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_cbcr_flip() p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.ISP_OPF0_YCBCR_FLIP_ts.cbcr_flip
#define Is_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_cbcr_flip_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.ISP_OPF0_YCBCR_FLIP_ts.cbcr_flip == cbcr_flip_B_0x0)
#define Set_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_cbcr_flip__B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.ISP_OPF0_YCBCR_FLIP_ts.cbcr_flip = cbcr_flip_B_0x0)
#define cbcr_flip_B_0x0 0x0    //No flip
#define Is_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_cbcr_flip_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.ISP_OPF0_YCBCR_FLIP_ts.cbcr_flip == cbcr_flip_B_0x1)
#define Set_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_cbcr_flip__B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.ISP_OPF0_YCBCR_FLIP_ts.cbcr_flip = cbcr_flip_B_0x1)
#define cbcr_flip_B_0x1 0x1    //Flip


#define Get_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_y_cbcr_flip() p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.ISP_OPF0_YCBCR_FLIP_ts.y_cbcr_flip
#define Is_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_y_cbcr_flip_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.ISP_OPF0_YCBCR_FLIP_ts.y_cbcr_flip == y_cbcr_flip_B_0x0)
#define Set_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_y_cbcr_flip__B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.ISP_OPF0_YCBCR_FLIP_ts.y_cbcr_flip = y_cbcr_flip_B_0x0)
#define y_cbcr_flip_B_0x0 0x0    //No flip
#define Is_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_y_cbcr_flip_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.ISP_OPF0_YCBCR_FLIP_ts.y_cbcr_flip == y_cbcr_flip_B_0x1)
#define Set_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_y_cbcr_flip__B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.ISP_OPF0_YCBCR_FLIP_ts.y_cbcr_flip = y_cbcr_flip_B_0x1)
#define y_cbcr_flip_B_0x1 0x1    //Flip
#define Set_ISP_OPF0_ISP_OPF0_YCBCR_FLIP(cbcr_flip,y_cbcr_flip) (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.word = (uint32_t)cbcr_flip<<0 | (uint32_t)y_cbcr_flip<<1)
#define Get_ISP_OPF0_ISP_OPF0_YCBCR_FLIP() p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.word
#define Set_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_word(x) (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP.word = x)


//ISP_OPF0_LAST_NONACT_LINE


#define Get_ISP_OPF0_ISP_OPF0_LAST_NONACT_LINE_last_nonactive_line() p_ISP_OPF0_IP->ISP_OPF0_LAST_NONACT_LINE.ISP_OPF0_LAST_NONACT_LINE_ts.last_nonactive_line
#define Set_ISP_OPF0_ISP_OPF0_LAST_NONACT_LINE_last_nonactive_line(x) (p_ISP_OPF0_IP->ISP_OPF0_LAST_NONACT_LINE.ISP_OPF0_LAST_NONACT_LINE_ts.last_nonactive_line = x)
#define Set_ISP_OPF0_ISP_OPF0_LAST_NONACT_LINE(last_nonactive_line) (p_ISP_OPF0_IP->ISP_OPF0_LAST_NONACT_LINE.word = (uint32_t)last_nonactive_line<<0)
#define Get_ISP_OPF0_ISP_OPF0_LAST_NONACT_LINE() p_ISP_OPF0_IP->ISP_OPF0_LAST_NONACT_LINE.word
#define Set_ISP_OPF0_ISP_OPF0_LAST_NONACT_LINE_word(x) (p_ISP_OPF0_IP->ISP_OPF0_LAST_NONACT_LINE.word = x)


//ISP_OPF0_HSYNC_RISING_STATUS


#define Get_ISP_OPF0_ISP_OPF0_HSYNC_RISING_STATUS_hsync_rising_status() p_ISP_OPF0_IP->ISP_OPF0_HSYNC_RISING_STATUS.ISP_OPF0_HSYNC_RISING_STATUS_ts.hsync_rising_status
#define Get_ISP_OPF0_ISP_OPF0_HSYNC_RISING_STATUS() p_ISP_OPF0_IP->ISP_OPF0_HSYNC_RISING_STATUS.word


//ISP_OPF0_HSYNC_FALLING_STATUS


#define Get_ISP_OPF0_ISP_OPF0_HSYNC_FALLING_STATUS_hsync_falling_status() p_ISP_OPF0_IP->ISP_OPF0_HSYNC_FALLING_STATUS.ISP_OPF0_HSYNC_FALLING_STATUS_ts.hsync_falling_status
#define Get_ISP_OPF0_ISP_OPF0_HSYNC_FALLING_STATUS() p_ISP_OPF0_IP->ISP_OPF0_HSYNC_FALLING_STATUS.word


//ISP_OPF0_VSYNC_RISING_FINE_STATUS


#define Get_ISP_OPF0_ISP_OPF0_VSYNC_RISING_FINE_STATUS_vsync_rising_fine_status() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_FINE_STATUS.ISP_OPF0_VSYNC_RISING_FINE_STATUS_ts.vsync_rising_fine_status
#define Get_ISP_OPF0_ISP_OPF0_VSYNC_RISING_FINE_STATUS() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_FINE_STATUS.word


//ISP_OPF0_VSYNC_FALLING_FINE_STATUS


#define Get_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_FINE_STATUS_vsync_falling_fine_status() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_FINE_STATUS.ISP_OPF0_VSYNC_FALLING_FINE_STATUS_ts.vsync_falling_fine_status
#define Get_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_FINE_STATUS() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_FINE_STATUS.word


//ISP_OPF0_VSYNC_RISING_COARSE_STATUS


#define Get_ISP_OPF0_ISP_OPF0_VSYNC_RISING_COARSE_STATUS_vsync_rising_coarse_status() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_COARSE_STATUS.ISP_OPF0_VSYNC_RISING_COARSE_STATUS_ts.vsync_rising_coarse_status
#define Get_ISP_OPF0_ISP_OPF0_VSYNC_RISING_COARSE_STATUS() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_RISING_COARSE_STATUS.word


//ISP_OPF0_VSYNC_FALLING_COARSE_STATUS


#define Get_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_COARSE_STATUS_vsync_falling_coarse_status() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_COARSE_STATUS.ISP_OPF0_VSYNC_FALLING_COARSE_STATUS_ts.vsync_falling_coarse_status
#define Get_ISP_OPF0_ISP_OPF0_VSYNC_FALLING_COARSE_STATUS() p_ISP_OPF0_IP->ISP_OPF0_VSYNC_FALLING_COARSE_STATUS.word


//ISP_OPF0_HCROP_RISING_STATUS


#define Get_ISP_OPF0_ISP_OPF0_HCROP_RISING_STATUS_hcrop_rising_status() p_ISP_OPF0_IP->ISP_OPF0_HCROP_RISING_STATUS.ISP_OPF0_HCROP_RISING_STATUS_ts.hcrop_rising_status
#define Get_ISP_OPF0_ISP_OPF0_HCROP_RISING_STATUS() p_ISP_OPF0_IP->ISP_OPF0_HCROP_RISING_STATUS.word


//ISP_OPF0_HCROP_FALLING_STATUS


#define Get_ISP_OPF0_ISP_OPF0_HCROP_FALLING_STATUS_hcrop_falling_status() p_ISP_OPF0_IP->ISP_OPF0_HCROP_FALLING_STATUS.ISP_OPF0_HCROP_FALLING_STATUS_ts.hcrop_falling_status
#define Get_ISP_OPF0_ISP_OPF0_HCROP_FALLING_STATUS() p_ISP_OPF0_IP->ISP_OPF0_HCROP_FALLING_STATUS.word


//ISP_OPF0_VCROP_RISING_COARSE_STATUS


#define Get_ISP_OPF0_ISP_OPF0_VCROP_RISING_COARSE_STATUS_vcrop_rising_coarse_status() p_ISP_OPF0_IP->ISP_OPF0_VCROP_RISING_COARSE_STATUS.ISP_OPF0_VCROP_RISING_COARSE_STATUS_ts.vcrop_rising_coarse_status
#define Get_ISP_OPF0_ISP_OPF0_VCROP_RISING_COARSE_STATUS() p_ISP_OPF0_IP->ISP_OPF0_VCROP_RISING_COARSE_STATUS.word


//ISP_OPF0_VCROP_FALLING_COARSE_STATUS


#define Get_ISP_OPF0_ISP_OPF0_VCROP_FALLING_COARSE_STATUS_vcrop_falling_coarse_status() p_ISP_OPF0_IP->ISP_OPF0_VCROP_FALLING_COARSE_STATUS.ISP_OPF0_VCROP_FALLING_COARSE_STATUS_ts.vcrop_falling_coarse_status
#define Get_ISP_OPF0_ISP_OPF0_VCROP_FALLING_COARSE_STATUS() p_ISP_OPF0_IP->ISP_OPF0_VCROP_FALLING_COARSE_STATUS.word


//ISP_OPF0_CONTROL_STATUS


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_sync_based_pixvalid_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.sync_based_pixvalid_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_sync_based_pixvalid_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.sync_based_pixvalid_status == sync_based_pixvalid_status_B_0x0)
#define sync_based_pixvalid_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_sync_based_pixvalid_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.sync_based_pixvalid_status == sync_based_pixvalid_status_B_0x1)
#define sync_based_pixvalid_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_toggle_pix_valid_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.toggle_pix_valid_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_toggle_pix_valid_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.toggle_pix_valid_status == toggle_pix_valid_status_B_0x0)
#define toggle_pix_valid_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_toggle_pix_valid_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.toggle_pix_valid_status == toggle_pix_valid_status_B_0x1)
#define toggle_pix_valid_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb_flip_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb_flip_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb_flip_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x0)
#define rgb_flip_status_B_0x0 0x0    //RGB
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb_flip_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x1)
#define rgb_flip_status_B_0x1 0x1    //BGR
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb_flip_status_B_0x2() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x2)
#define rgb_flip_status_B_0x2 0x2    //GBR
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb_flip_status_B_0x3() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x3)
#define rgb_flip_status_B_0x3 0x3    //RBG
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb_flip_status_B_0x4() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x4)
#define rgb_flip_status_B_0x4 0x4    //BRG
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb_flip_status_B_0x5() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x5)
#define rgb_flip_status_B_0x5 0x5    //GRB


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb_bit_flip_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb_bit_flip_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb_bit_flip_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb_bit_flip_status == rgb_bit_flip_status_B_0x0)
#define rgb_bit_flip_status_B_0x0 0x0    //not swapped i.e. [9:0]
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb_bit_flip_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb_bit_flip_status == rgb_bit_flip_status_B_0x1)
#define rgb_bit_flip_status_B_0x1 0x1    //swapped i.e. [0:9]


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_embedded_code_en_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.embedded_code_en_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_embedded_code_en_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.embedded_code_en_status == embedded_code_en_status_B_0x0)
#define embedded_code_en_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_embedded_code_en_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.embedded_code_en_status == embedded_code_en_status_B_0x1)
#define embedded_code_en_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_false_sync_code_protect_en_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.false_sync_code_protect_en_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_false_sync_code_protect_en_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.false_sync_code_protect_en_status == false_sync_code_protect_en_status_B_0x0)
#define false_sync_code_protect_en_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_false_sync_code_protect_en_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.false_sync_code_protect_en_status == false_sync_code_protect_en_status_B_0x1)
#define false_sync_code_protect_en_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_invert_hsync_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.invert_hsync_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_invert_hsync_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.invert_hsync_status == invert_hsync_status_B_0x0)
#define invert_hsync_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_invert_hsync_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.invert_hsync_status == invert_hsync_status_B_0x1)
#define invert_hsync_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_invert_vsync_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.invert_vsync_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_invert_vsync_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.invert_vsync_status == invert_vsync_status_B_0x0)
#define invert_vsync_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_invert_vsync_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.invert_vsync_status == invert_vsync_status_B_0x1)
#define invert_vsync_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_idata_ch0_en_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.idata_ch0_en_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_idata_ch0_en_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.idata_ch0_en_status == idata_ch0_en_status_B_0x0)
#define idata_ch0_en_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_idata_ch0_en_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.idata_ch0_en_status == idata_ch0_en_status_B_0x1)
#define idata_ch0_en_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_idata_ch1_en_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.idata_ch1_en_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_idata_ch1_en_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.idata_ch1_en_status == idata_ch1_en_status_B_0x0)
#define idata_ch1_en_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_idata_ch1_en_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.idata_ch1_en_status == idata_ch1_en_status_B_0x1)
#define idata_ch1_en_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_idata_ch2_en_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.idata_ch2_en_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_idata_ch2_en_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.idata_ch2_en_status == idata_ch2_en_status_B_0x0)
#define idata_ch2_en_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_idata_ch2_en_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.idata_ch2_en_status == idata_ch2_en_status_B_0x1)
#define idata_ch2_en_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_opf_output_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.opf_output_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_opf_output_status_OPF_RGB101010() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_RGB101010)
#define opf_output_status_OPF_RGB101010 0x0    //RGB101010
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_opf_output_status_OPF_RGB888() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_RGB888)
#define opf_output_status_OPF_RGB888 0x1    //RGB888
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_opf_output_status_OPF_RGB565() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_RGB565)
#define opf_output_status_OPF_RGB565 0x2    //RGB565
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_opf_output_status_OPF_RGB555() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_RGB555)
#define opf_output_status_OPF_RGB555 0x3    //RGB555
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_opf_output_status_OPF_RGB444() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_RGB444)
#define opf_output_status_OPF_RGB444 0x4    //RGB444
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_opf_output_status_OPF_YUV() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_YUV)
#define opf_output_status_OPF_YUV 0x5    //YUV


#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb444_format_status() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb444_format_status
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb444_format_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb444_format_status == rgb444_format_status_B_0x0)
#define rgb444_format_status_B_0x0 0x0    //not packed (RGB444 native)
#define Is_ISP_OPF0_ISP_OPF0_CONTROL_STATUS_rgb444_format_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.ISP_OPF0_CONTROL_STATUS_ts.rgb444_format_status == rgb444_format_status_B_0x1)
#define rgb444_format_status_B_0x1 0x1    //Packed (RGB565-like)
#define Get_ISP_OPF0_ISP_OPF0_CONTROL_STATUS() p_ISP_OPF0_IP->ISP_OPF0_CONTROL_STATUS.word


//ISP_OPF0_PIXVALID_LTYPES_STATUS


#define Get_ISP_OPF0_ISP_OPF0_PIXVALID_LTYPES_STATUS_pixvalid_linetypes_status() p_ISP_OPF0_IP->ISP_OPF0_PIXVALID_LTYPES_STATUS.ISP_OPF0_PIXVALID_LTYPES_STATUS_ts.pixvalid_linetypes_status


#define Get_ISP_OPF0_ISP_OPF0_PIXVALID_LTYPES_STATUS_eof_blank_only_en_status() p_ISP_OPF0_IP->ISP_OPF0_PIXVALID_LTYPES_STATUS.ISP_OPF0_PIXVALID_LTYPES_STATUS_ts.eof_blank_only_en_status
#define Get_ISP_OPF0_ISP_OPF0_PIXVALID_LTYPES_STATUS() p_ISP_OPF0_IP->ISP_OPF0_PIXVALID_LTYPES_STATUS.word


//ISP_OPF0_YCBCR_FLIP_STATUS


#define Get_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_STATUS_cbcr_flip_status() p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP_STATUS.ISP_OPF0_YCBCR_FLIP_STATUS_ts.cbcr_flip_status
#define Is_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_STATUS_cbcr_flip_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP_STATUS.ISP_OPF0_YCBCR_FLIP_STATUS_ts.cbcr_flip_status == cbcr_flip_status_B_0x0)
#define cbcr_flip_status_B_0x0 0x0    //No flip
#define Is_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_STATUS_cbcr_flip_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP_STATUS.ISP_OPF0_YCBCR_FLIP_STATUS_ts.cbcr_flip_status == cbcr_flip_status_B_0x1)
#define cbcr_flip_status_B_0x1 0x1    //Flip


#define Get_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_STATUS_y_cbcr_flip_status() p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP_STATUS.ISP_OPF0_YCBCR_FLIP_STATUS_ts.y_cbcr_flip_status
#define Is_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_STATUS_y_cbcr_flip_status_B_0x0() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP_STATUS.ISP_OPF0_YCBCR_FLIP_STATUS_ts.y_cbcr_flip_status == y_cbcr_flip_status_B_0x0)
#define y_cbcr_flip_status_B_0x0 0x0    //No flip
#define Is_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_STATUS_y_cbcr_flip_status_B_0x1() (p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP_STATUS.ISP_OPF0_YCBCR_FLIP_STATUS_ts.y_cbcr_flip_status == y_cbcr_flip_status_B_0x1)
#define y_cbcr_flip_status_B_0x1 0x1    //Flip
#define Get_ISP_OPF0_ISP_OPF0_YCBCR_FLIP_STATUS() p_ISP_OPF0_IP->ISP_OPF0_YCBCR_FLIP_STATUS.word


//ISP_OPF0_LAST_NONACT_LINE_STATUS


#define Get_ISP_OPF0_ISP_OPF0_LAST_NONACT_LINE_STATUS_last_nonactive_line_status() p_ISP_OPF0_IP->ISP_OPF0_LAST_NONACT_LINE_STATUS.ISP_OPF0_LAST_NONACT_LINE_STATUS_ts.last_nonactive_line_status
#define Get_ISP_OPF0_ISP_OPF0_LAST_NONACT_LINE_STATUS() p_ISP_OPF0_IP->ISP_OPF0_LAST_NONACT_LINE_STATUS.word

//ISP_CE1_IDP_GATE_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE1_IDP_GATE_ENABLE_ts;

}ISP_CE1_IDP_GATE_ENABLE_tu;



//ISP_CE1_IDP_GATE_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE1_IDP_GATE_SELECT_ts;

}ISP_CE1_IDP_GATE_SELECT_tu;

typedef struct
{
    ISP_CE1_IDP_GATE_ENABLE_tu ISP_CE1_IDP_GATE_ENABLE;
    ISP_CE1_IDP_GATE_SELECT_tu ISP_CE1_IDP_GATE_SELECT;
}ISP_CE1_IDP_GATE_IP_ts;




//ISP_CE1_IDP_GATE_ENABLE


#define Get_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE_mux2to1_enable() p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.ISP_CE1_IDP_GATE_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.ISP_CE1_IDP_GATE_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.ISP_CE1_IDP_GATE_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.ISP_CE1_IDP_GATE_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.ISP_CE1_IDP_GATE_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE_mux2to1_soft_reset() p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.ISP_CE1_IDP_GATE_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.ISP_CE1_IDP_GATE_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.ISP_CE1_IDP_GATE_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.ISP_CE1_IDP_GATE_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.ISP_CE1_IDP_GATE_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE() p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.word
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_ENABLE_word(x) (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_ENABLE.word = x)


//ISP_CE1_IDP_GATE_SELECT


#define Get_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT_mux2to1_select() p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.ISP_CE1_IDP_GATE_SELECT_ts.mux2to1_select
#define Is_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT_mux2to1_select_IDP0() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.ISP_CE1_IDP_GATE_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT_mux2to1_select__IDP0() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.ISP_CE1_IDP_GATE_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT_mux2to1_select_IDP1() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.ISP_CE1_IDP_GATE_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT_mux2to1_select__IDP1() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.ISP_CE1_IDP_GATE_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT_mux2to1_shadow_en() p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.ISP_CE1_IDP_GATE_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.ISP_CE1_IDP_GATE_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.ISP_CE1_IDP_GATE_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.ISP_CE1_IDP_GATE_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.ISP_CE1_IDP_GATE_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT() p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.word
#define Set_ISP_CE1_IDP_GATE_ISP_CE1_IDP_GATE_SELECT_word(x) (p_ISP_CE1_IDP_GATE_IP->ISP_CE1_IDP_GATE_SELECT.word = x)

//ISP_CE1_CROP_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t crop_enable :1;
        /* Disable Crop module*/
        uint8_t reserved0 :3;
        uint8_t crop_soft_reset :1;
        /* cropper soft reset disable*/
    }ISP_CE1_CROP_ENABLE_ts;

}ISP_CE1_CROP_ENABLE_tu;



//ISP_CE1_CROP_SOF_RETIMING
/*Description: Enable the retiming option of start of frame tag. With this option the line delay between SOF and ACTIV in output will be same as input.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t crop_sof_retiming :1;
        /* Disable the SOF retiming*/
    }ISP_CE1_CROP_SOF_RETIMING_ts;

}ISP_CE1_CROP_SOF_RETIMING_tu;



//ISP_CE1_CROP_SHADOW_CROPS
/*Description: Enable shadow registers for H/V start and H/V size on START OF FRAME
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t crop_shadow_crops :1;
    }ISP_CE1_CROP_SHADOW_CROPS_ts;

}ISP_CE1_CROP_SHADOW_CROPS_tu;



//ISP_CE1_CROP_H_START
/*Description: crop_h_start define the horizontal start point of the crop area.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_h_start :13;
    }ISP_CE1_CROP_H_START_ts;

}ISP_CE1_CROP_H_START_tu;



//ISP_CE1_CROP_V_START
/*Description: crop_v_start define the vertical start point of the crop area
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_v_start :13;
    }ISP_CE1_CROP_V_START_ts;

}ISP_CE1_CROP_V_START_tu;



//ISP_CE1_CROP_H_SIZE
/*Description: crop_v_size define the horizontal size of the crop area
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_h_size :13;
    }ISP_CE1_CROP_H_SIZE_ts;

}ISP_CE1_CROP_H_SIZE_tu;



//ISP_CE1_CROP_V_SIZE
/*Description: crop_v_size define the vertical size of the crop area
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_v_size :13;
    }ISP_CE1_CROP_V_SIZE_ts;

}ISP_CE1_CROP_V_SIZE_tu;



//ISP_CE1_CROP_IACTIVE_PIXS
/*Description: crop_iactive_pixs define the horizontal number of actives pixels in the input frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_iactive_pixs :13;
    }ISP_CE1_CROP_IACTIVE_PIXS_ts;

}ISP_CE1_CROP_IACTIVE_PIXS_tu;



//ISP_CE1_CROP_IACTIVE_LINES
/*Description: crop_iactive_lines define the vertical number of lines in the input frame
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t crop_iactive_lines :13;
    }ISP_CE1_CROP_IACTIVE_LINES_ts;

}ISP_CE1_CROP_IACTIVE_LINES_tu;

typedef struct
{
    ISP_CE1_CROP_ENABLE_tu ISP_CE1_CROP_ENABLE;
    ISP_CE1_CROP_SOF_RETIMING_tu ISP_CE1_CROP_SOF_RETIMING;
    ISP_CE1_CROP_SHADOW_CROPS_tu ISP_CE1_CROP_SHADOW_CROPS;
    ISP_CE1_CROP_H_START_tu ISP_CE1_CROP_H_START;
    ISP_CE1_CROP_V_START_tu ISP_CE1_CROP_V_START;
    ISP_CE1_CROP_H_SIZE_tu ISP_CE1_CROP_H_SIZE;
    ISP_CE1_CROP_V_SIZE_tu ISP_CE1_CROP_V_SIZE;
    ISP_CE1_CROP_IACTIVE_PIXS_tu ISP_CE1_CROP_IACTIVE_PIXS;
    ISP_CE1_CROP_IACTIVE_LINES_tu ISP_CE1_CROP_IACTIVE_LINES;
}ISP_CE1_CROP_IP_ts;




//ISP_CE1_CROP_ENABLE


#define Get_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE_crop_enable() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.ISP_CE1_CROP_ENABLE_ts.crop_enable
#define Is_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE_crop_enable_DISABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.ISP_CE1_CROP_ENABLE_ts.crop_enable == crop_enable_DISABLE)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE_crop_enable__DISABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.ISP_CE1_CROP_ENABLE_ts.crop_enable = crop_enable_DISABLE)
#define crop_enable_DISABLE 0x0    //Disable Crop module
#define Is_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE_crop_enable_ENABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.ISP_CE1_CROP_ENABLE_ts.crop_enable == crop_enable_ENABLE)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE_crop_enable__ENABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.ISP_CE1_CROP_ENABLE_ts.crop_enable = crop_enable_ENABLE)
#define crop_enable_ENABLE 0x1    //Enable Cropmodule


#define Get_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE_crop_soft_reset() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.ISP_CE1_CROP_ENABLE_ts.crop_soft_reset
#define Is_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE_crop_soft_reset_SOFT_RST_DISABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.ISP_CE1_CROP_ENABLE_ts.crop_soft_reset == crop_soft_reset_SOFT_RST_DISABLE)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE_crop_soft_reset__SOFT_RST_DISABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.ISP_CE1_CROP_ENABLE_ts.crop_soft_reset = crop_soft_reset_SOFT_RST_DISABLE)
#define crop_soft_reset_SOFT_RST_DISABLE 0x0    //cropper soft reset disable
#define Is_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE_crop_soft_reset_SOFT_RST_ENABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.ISP_CE1_CROP_ENABLE_ts.crop_soft_reset == crop_soft_reset_SOFT_RST_ENABLE)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE_crop_soft_reset__SOFT_RST_ENABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.ISP_CE1_CROP_ENABLE_ts.crop_soft_reset = crop_soft_reset_SOFT_RST_ENABLE)
#define crop_soft_reset_SOFT_RST_ENABLE 0x1    //cropper soft reset enable
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE(crop_enable,crop_soft_reset) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.word = (uint32_t)crop_enable<<0 | (uint32_t)crop_soft_reset<<4)
#define Get_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.word
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_ENABLE_word(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_ENABLE.word = x)


//ISP_CE1_CROP_SOF_RETIMING


#define Get_ISP_CE1_CROP_ISP_CE1_CROP_SOF_RETIMING_crop_sof_retiming() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SOF_RETIMING.ISP_CE1_CROP_SOF_RETIMING_ts.crop_sof_retiming
#define Is_ISP_CE1_CROP_ISP_CE1_CROP_SOF_RETIMING_crop_sof_retiming_DISABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SOF_RETIMING.ISP_CE1_CROP_SOF_RETIMING_ts.crop_sof_retiming == crop_sof_retiming_DISABLE)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_SOF_RETIMING_crop_sof_retiming__DISABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SOF_RETIMING.ISP_CE1_CROP_SOF_RETIMING_ts.crop_sof_retiming = crop_sof_retiming_DISABLE)
#define crop_sof_retiming_DISABLE 0x0    //Disable the SOF retiming
#define Is_ISP_CE1_CROP_ISP_CE1_CROP_SOF_RETIMING_crop_sof_retiming_ENABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SOF_RETIMING.ISP_CE1_CROP_SOF_RETIMING_ts.crop_sof_retiming == crop_sof_retiming_ENABLE)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_SOF_RETIMING_crop_sof_retiming__ENABLE() (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SOF_RETIMING.ISP_CE1_CROP_SOF_RETIMING_ts.crop_sof_retiming = crop_sof_retiming_ENABLE)
#define crop_sof_retiming_ENABLE 0x1    //Enable the SOF retiming
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_SOF_RETIMING(crop_sof_retiming) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SOF_RETIMING.word = (uint32_t)crop_sof_retiming<<0)
#define Get_ISP_CE1_CROP_ISP_CE1_CROP_SOF_RETIMING() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SOF_RETIMING.word
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_SOF_RETIMING_word(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SOF_RETIMING.word = x)


//ISP_CE1_CROP_SHADOW_CROPS


#define Get_ISP_CE1_CROP_ISP_CE1_CROP_SHADOW_CROPS_crop_shadow_crops() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SHADOW_CROPS.ISP_CE1_CROP_SHADOW_CROPS_ts.crop_shadow_crops
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_SHADOW_CROPS_crop_shadow_crops(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SHADOW_CROPS.ISP_CE1_CROP_SHADOW_CROPS_ts.crop_shadow_crops = x)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_SHADOW_CROPS(crop_shadow_crops) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SHADOW_CROPS.word = (uint32_t)crop_shadow_crops<<0)
#define Get_ISP_CE1_CROP_ISP_CE1_CROP_SHADOW_CROPS() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SHADOW_CROPS.word
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_SHADOW_CROPS_word(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_SHADOW_CROPS.word = x)


//ISP_CE1_CROP_H_START


#define Get_ISP_CE1_CROP_ISP_CE1_CROP_H_START_crop_h_start() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_H_START.ISP_CE1_CROP_H_START_ts.crop_h_start
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_H_START_crop_h_start(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_H_START.ISP_CE1_CROP_H_START_ts.crop_h_start = x)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_H_START(crop_h_start) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_H_START.word = (uint32_t)crop_h_start<<0)
#define Get_ISP_CE1_CROP_ISP_CE1_CROP_H_START() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_H_START.word
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_H_START_word(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_H_START.word = x)


//ISP_CE1_CROP_V_START


#define Get_ISP_CE1_CROP_ISP_CE1_CROP_V_START_crop_v_start() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_V_START.ISP_CE1_CROP_V_START_ts.crop_v_start
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_V_START_crop_v_start(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_V_START.ISP_CE1_CROP_V_START_ts.crop_v_start = x)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_V_START(crop_v_start) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_V_START.word = (uint32_t)crop_v_start<<0)
#define Get_ISP_CE1_CROP_ISP_CE1_CROP_V_START() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_V_START.word
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_V_START_word(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_V_START.word = x)


//ISP_CE1_CROP_H_SIZE


#define Get_ISP_CE1_CROP_ISP_CE1_CROP_H_SIZE_crop_h_size() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_H_SIZE.ISP_CE1_CROP_H_SIZE_ts.crop_h_size
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_H_SIZE_crop_h_size(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_H_SIZE.ISP_CE1_CROP_H_SIZE_ts.crop_h_size = x)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_H_SIZE(crop_h_size) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_H_SIZE.word = (uint32_t)crop_h_size<<0)
#define Get_ISP_CE1_CROP_ISP_CE1_CROP_H_SIZE() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_H_SIZE.word
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_H_SIZE_word(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_H_SIZE.word = x)


//ISP_CE1_CROP_V_SIZE


#define Get_ISP_CE1_CROP_ISP_CE1_CROP_V_SIZE_crop_v_size() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_V_SIZE.ISP_CE1_CROP_V_SIZE_ts.crop_v_size
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_V_SIZE_crop_v_size(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_V_SIZE.ISP_CE1_CROP_V_SIZE_ts.crop_v_size = x)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_V_SIZE(crop_v_size) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_V_SIZE.word = (uint32_t)crop_v_size<<0)
#define Get_ISP_CE1_CROP_ISP_CE1_CROP_V_SIZE() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_V_SIZE.word
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_V_SIZE_word(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_V_SIZE.word = x)


//ISP_CE1_CROP_IACTIVE_PIXS


#define Get_ISP_CE1_CROP_ISP_CE1_CROP_IACTIVE_PIXS_crop_iactive_pixs() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_IACTIVE_PIXS.ISP_CE1_CROP_IACTIVE_PIXS_ts.crop_iactive_pixs
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_IACTIVE_PIXS_crop_iactive_pixs(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_IACTIVE_PIXS.ISP_CE1_CROP_IACTIVE_PIXS_ts.crop_iactive_pixs = x)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_IACTIVE_PIXS(crop_iactive_pixs) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_IACTIVE_PIXS.word = (uint32_t)crop_iactive_pixs<<0)
#define Get_ISP_CE1_CROP_ISP_CE1_CROP_IACTIVE_PIXS() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_IACTIVE_PIXS.word
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_IACTIVE_PIXS_word(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_IACTIVE_PIXS.word = x)


//ISP_CE1_CROP_IACTIVE_LINES


#define Get_ISP_CE1_CROP_ISP_CE1_CROP_IACTIVE_LINES_crop_iactive_lines() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_IACTIVE_LINES.ISP_CE1_CROP_IACTIVE_LINES_ts.crop_iactive_lines
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_IACTIVE_LINES_crop_iactive_lines(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_IACTIVE_LINES.ISP_CE1_CROP_IACTIVE_LINES_ts.crop_iactive_lines = x)
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_IACTIVE_LINES(crop_iactive_lines) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_IACTIVE_LINES.word = (uint16_t)crop_iactive_lines<<0)
#define Get_ISP_CE1_CROP_ISP_CE1_CROP_IACTIVE_LINES() p_ISP_CE1_CROP_IP->ISP_CE1_CROP_IACTIVE_LINES.word
#define Set_ISP_CE1_CROP_ISP_CE1_CROP_IACTIVE_LINES_word(x) (p_ISP_CE1_CROP_IP->ISP_CE1_CROP_IACTIVE_LINES.word = x)

//ISP_CE1_RADIAL_ADSOC_PK_ENABLE
/*Description: Adsoc enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ADSOC_ENABLE :1;
        /* . This signal is set low at reset*/
    }ISP_CE1_RADIAL_ADSOC_PK_ENABLE_ts;

}ISP_CE1_RADIAL_ADSOC_PK_ENABLE_tu;



//ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN
/*Description: Adsoc adaptive sharpening
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ADSOC_ADAPTIVE_SHARPENING :1;
        /* . This signal is set low at reset*/
    }ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_ts;

}ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_tu;



//ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL
/*Description: Adsoc coring level
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ADSOC_CORING_LEVEL :6;
    }ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL_ts;

}ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL_tu;



//ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL
/*Description: Adsoc overshoot control
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t ADSOC_OSHOOT_GAIN_BRIGHT :5;
        /* - MSB = disable oshoot control, bottom 4 bits provide a fractional fade out of overshoot*/
        uint8_t reserved0 :3;
        uint8_t ADSOC_OSHOOT_GAIN_DARK :5;
        /* - MSB = disable oshoot control, bottom 4 bits provide a fractional fade out of overshoot*/
    }ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_ts;

}ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_tu;



//ISP_CE1_RADIAL_ADSOC_PK_EFFECTS
/*Description: Adsoc special effects
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t ADSOC_EMBOSS_SELECT :3;
        uint8_t reserved0 :5;
        uint8_t ADSOC_FLIPPER :2;
        uint8_t reserved1 :6;
        uint8_t ADSOC_GREYBACK :2;
    }ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ts;

}ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_tu;



//ISP_CE1_RADIAL_ADSOC_PK_GAIN
/*Description: Adsoc gain
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t ADSOC_GAIN;
    }ISP_CE1_RADIAL_ADSOC_PK_GAIN_ts;

}ISP_CE1_RADIAL_ADSOC_PK_GAIN_tu;

typedef struct
{
    ISP_CE1_RADIAL_ADSOC_PK_ENABLE_tu ISP_CE1_RADIAL_ADSOC_PK_ENABLE;
    ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_tu ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN;
    ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL_tu ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL;
    ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_tu ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL;
    ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_tu ISP_CE1_RADIAL_ADSOC_PK_EFFECTS;
    ISP_CE1_RADIAL_ADSOC_PK_GAIN_tu ISP_CE1_RADIAL_ADSOC_PK_GAIN;
}ISP_CE1_RADIAL_ADSOC_PK_IP_ts;




//ISP_CE1_RADIAL_ADSOC_PK_ENABLE


#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ENABLE_ADSOC_ENABLE() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ENABLE.ISP_CE1_RADIAL_ADSOC_PK_ENABLE_ts.ADSOC_ENABLE
#define Is_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ENABLE_ADSOC_ENABLE_DISABLE() (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ENABLE.ISP_CE1_RADIAL_ADSOC_PK_ENABLE_ts.ADSOC_ENABLE == ADSOC_ENABLE_DISABLE)
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ENABLE_ADSOC_ENABLE__DISABLE() (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ENABLE.ISP_CE1_RADIAL_ADSOC_PK_ENABLE_ts.ADSOC_ENABLE = ADSOC_ENABLE_DISABLE)
#define ADSOC_ENABLE_DISABLE 0x0    //Disable adsoc
#define Is_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ENABLE_ADSOC_ENABLE_ENABLE() (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ENABLE.ISP_CE1_RADIAL_ADSOC_PK_ENABLE_ts.ADSOC_ENABLE == ADSOC_ENABLE_ENABLE)
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ENABLE_ADSOC_ENABLE__ENABLE() (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ENABLE.ISP_CE1_RADIAL_ADSOC_PK_ENABLE_ts.ADSOC_ENABLE = ADSOC_ENABLE_ENABLE)
#define ADSOC_ENABLE_ENABLE 0x1    //Enable adsoc
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ENABLE(ADSOC_ENABLE) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ENABLE.word = (uint32_t)ADSOC_ENABLE<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ENABLE() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ENABLE.word
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ENABLE_word(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ENABLE.word = x)


//ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN


#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_ADSOC_ADAPTIVE_SHARPENING() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN.ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_ts.ADSOC_ADAPTIVE_SHARPENING
#define Is_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_ADSOC_ADAPTIVE_SHARPENING_DISABLE() (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN.ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_ts.ADSOC_ADAPTIVE_SHARPENING == ADSOC_ADAPTIVE_SHARPENING_DISABLE)
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_ADSOC_ADAPTIVE_SHARPENING__DISABLE() (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN.ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_ts.ADSOC_ADAPTIVE_SHARPENING = ADSOC_ADAPTIVE_SHARPENING_DISABLE)
#define ADSOC_ADAPTIVE_SHARPENING_DISABLE 0x0    //Disable adsoc adaptive sharpening
#define Is_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_ADSOC_ADAPTIVE_SHARPENING_ENABLE() (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN.ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_ts.ADSOC_ADAPTIVE_SHARPENING == ADSOC_ADAPTIVE_SHARPENING_ENABLE)
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_ADSOC_ADAPTIVE_SHARPENING__ENABLE() (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN.ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_ts.ADSOC_ADAPTIVE_SHARPENING = ADSOC_ADAPTIVE_SHARPENING_ENABLE)
#define ADSOC_ADAPTIVE_SHARPENING_ENABLE 0x1    //Enable adsoc adaptive sharpening
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN(ADSOC_ADAPTIVE_SHARPENING) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN.word = (uint32_t)ADSOC_ADAPTIVE_SHARPENING<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN.word
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN_word(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_ADSHARP_EN.word = x)


//ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL


#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL_ADSOC_CORING_LEVEL() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL.ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL_ts.ADSOC_CORING_LEVEL
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL_ADSOC_CORING_LEVEL(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL.ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL_ts.ADSOC_CORING_LEVEL = x)
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL(ADSOC_CORING_LEVEL) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL.word = (uint32_t)ADSOC_CORING_LEVEL<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL.word
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL_word(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_CORING_LEVEL.word = x)


//ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL


#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_ADSOC_OSHOOT_GAIN_BRIGHT() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL.ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_ts.ADSOC_OSHOOT_GAIN_BRIGHT
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_ADSOC_OSHOOT_GAIN_BRIGHT(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL.ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_ts.ADSOC_OSHOOT_GAIN_BRIGHT = x)


#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_ADSOC_OSHOOT_GAIN_DARK() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL.ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_ts.ADSOC_OSHOOT_GAIN_DARK
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_ADSOC_OSHOOT_GAIN_DARK(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL.ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_ts.ADSOC_OSHOOT_GAIN_DARK = x)
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL(ADSOC_OSHOOT_GAIN_BRIGHT,ADSOC_OSHOOT_GAIN_DARK) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL.word = (uint32_t)ADSOC_OSHOOT_GAIN_BRIGHT<<0 | (uint32_t)ADSOC_OSHOOT_GAIN_DARK<<8)
#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL.word
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL_word(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_OSHOOT_CTRL.word = x)


//ISP_CE1_RADIAL_ADSOC_PK_EFFECTS


#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ADSOC_EMBOSS_SELECT() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_EFFECTS.ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_EMBOSS_SELECT
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ADSOC_EMBOSS_SELECT(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_EFFECTS.ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_EMBOSS_SELECT = x)


#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ADSOC_FLIPPER() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_EFFECTS.ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_FLIPPER
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ADSOC_FLIPPER(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_EFFECTS.ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_FLIPPER = x)


#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ADSOC_GREYBACK() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_EFFECTS.ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_GREYBACK
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ADSOC_GREYBACK(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_EFFECTS.ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_ts.ADSOC_GREYBACK = x)
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_EFFECTS(ADSOC_EMBOSS_SELECT,ADSOC_FLIPPER,ADSOC_GREYBACK) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_EFFECTS.word = (uint32_t)ADSOC_EMBOSS_SELECT<<0 | (uint32_t)ADSOC_FLIPPER<<8 | (uint32_t)ADSOC_GREYBACK<<16)
#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_EFFECTS() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_EFFECTS.word
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_EFFECTS_word(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_EFFECTS.word = x)


//ISP_CE1_RADIAL_ADSOC_PK_GAIN


#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_GAIN_ADSOC_GAIN() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_GAIN.ISP_CE1_RADIAL_ADSOC_PK_GAIN_ts.ADSOC_GAIN
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_GAIN_ADSOC_GAIN(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_GAIN.ISP_CE1_RADIAL_ADSOC_PK_GAIN_ts.ADSOC_GAIN = x)
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_GAIN(ADSOC_GAIN) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_GAIN.word = (uint8_t)ADSOC_GAIN<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_GAIN() p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_GAIN.word
#define Set_ISP_CE1_RADIAL_ADSOC_PK_ISP_CE1_RADIAL_ADSOC_PK_GAIN_word(x) (p_ISP_CE1_RADIAL_ADSOC_PK_IP->ISP_CE1_RADIAL_ADSOC_PK_GAIN.word = x)

//ISP_CE1_RADIAL_ADSOC_RP_ENABLE
/*Description: Radial Peaking Control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rdpk_enable :1;
        /* Disable Radial Peaking module*/
    }ISP_CE1_RADIAL_ADSOC_RP_ENABLE_ts;

}ISP_CE1_RADIAL_ADSOC_RP_ENABLE_tu;



//ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0
/*Description: Radial Peaking Polynomial Coefficient 0
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rdpk_qvec0;
        /* coef of polynomial in power of 2*/
    }ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0_ts;

}ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0_tu;



//ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1
/*Description: Radial Peaking Polynomial coef 1
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rdpk_qvec1;
        /* coef of polynomial in power of four*/
    }ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1_ts;

}ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1_tu;



//ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT
/*Description: Radial Peaking polynomial shift
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rdpk_cof_shift :4;
        /* Polynomes shift*/
    }ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT_ts;

}ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT_tu;



//ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT
/*Description: Radial Peaking Gain Shift
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rdpk_out_shift :4;
        /* radial peaking gain shift*/
    }ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT_ts;

}ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT_tu;



//ISP_CE1_RADIAL_ADSOC_RP_UNITY
/*Description: Radial Peaking Unity
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rdpk_unity :9;
        /* Radial peaking modulation on lens centre*/
    }ISP_CE1_RADIAL_ADSOC_RP_UNITY_ts;

}ISP_CE1_RADIAL_ADSOC_RP_UNITY_tu;



//ISP_CE1_RADIAL_ADSOC_RP_HOFFSET
/*Description: Radial Peaking Horizontal Coordinate of lens centre
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rdpk_hoffset :14;
        /* signed relative horizontal coordinate of lens centre*/
    }ISP_CE1_RADIAL_ADSOC_RP_HOFFSET_ts;

}ISP_CE1_RADIAL_ADSOC_RP_HOFFSET_tu;



//ISP_CE1_RADIAL_ADSOC_RP_VOFFSET
/*Description: Radial Peaking Vertical Coordinate of lens centre
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rdpk_voffset :14;
        /* signed relative vertical coordinate of lens centre*/
    }ISP_CE1_RADIAL_ADSOC_RP_VOFFSET_ts;

}ISP_CE1_RADIAL_ADSOC_RP_VOFFSET_tu;



//ISP_CE1_RADIAL_ADSOC_RP_SCALE_X
/*Description: Radial Peaking Scaling Factor X
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rdpk_scaling_factor_x;
        /* radial peaking horizontal scaling factor*/
    }ISP_CE1_RADIAL_ADSOC_RP_SCALE_X_ts;

}ISP_CE1_RADIAL_ADSOC_RP_SCALE_X_tu;



//ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y
/*Description: Radial Peaking Scaling Factor Y
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t rdpk_scaling_factor_y;
        /* radial peaking vertical scaling factor*/
    }ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y_ts;

}ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y_tu;

typedef struct
{
    ISP_CE1_RADIAL_ADSOC_RP_ENABLE_tu ISP_CE1_RADIAL_ADSOC_RP_ENABLE;
    ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0_tu ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0;
    ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1_tu ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1;
    ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT_tu ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT;
    ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT_tu ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT;
    ISP_CE1_RADIAL_ADSOC_RP_UNITY_tu ISP_CE1_RADIAL_ADSOC_RP_UNITY;
    ISP_CE1_RADIAL_ADSOC_RP_HOFFSET_tu ISP_CE1_RADIAL_ADSOC_RP_HOFFSET;
    ISP_CE1_RADIAL_ADSOC_RP_VOFFSET_tu ISP_CE1_RADIAL_ADSOC_RP_VOFFSET;
    ISP_CE1_RADIAL_ADSOC_RP_SCALE_X_tu ISP_CE1_RADIAL_ADSOC_RP_SCALE_X;
    ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y_tu ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y;
}ISP_CE1_RADIAL_ADSOC_RP_IP_ts;




//ISP_CE1_RADIAL_ADSOC_RP_ENABLE


#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_ENABLE_rdpk_enable() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_ENABLE.ISP_CE1_RADIAL_ADSOC_RP_ENABLE_ts.rdpk_enable
#define Is_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_ENABLE_rdpk_enable_DISABLE() (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_ENABLE.ISP_CE1_RADIAL_ADSOC_RP_ENABLE_ts.rdpk_enable == rdpk_enable_DISABLE)
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_ENABLE_rdpk_enable__DISABLE() (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_ENABLE.ISP_CE1_RADIAL_ADSOC_RP_ENABLE_ts.rdpk_enable = rdpk_enable_DISABLE)
#define rdpk_enable_DISABLE 0x0    //Disable Radial Peaking module
#define Is_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_ENABLE_rdpk_enable_ENABLE() (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_ENABLE.ISP_CE1_RADIAL_ADSOC_RP_ENABLE_ts.rdpk_enable == rdpk_enable_ENABLE)
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_ENABLE_rdpk_enable__ENABLE() (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_ENABLE.ISP_CE1_RADIAL_ADSOC_RP_ENABLE_ts.rdpk_enable = rdpk_enable_ENABLE)
#define rdpk_enable_ENABLE 0x1    //Enable Radial Peaking module
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_ENABLE(rdpk_enable) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_ENABLE.word = (uint32_t)rdpk_enable<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_ENABLE() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_ENABLE.word
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_ENABLE_word(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_ENABLE.word = x)


//ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0


#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0_rdpk_qvec0() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0.ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0_ts.rdpk_qvec0
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0_rdpk_qvec0(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0.ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0_ts.rdpk_qvec0 = x)
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0(rdpk_qvec0) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0.word = (uint32_t)rdpk_qvec0<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0.word
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0_word(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF0.word = x)


//ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1


#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1_rdpk_qvec1() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1.ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1_ts.rdpk_qvec1
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1_rdpk_qvec1(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1.ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1_ts.rdpk_qvec1 = x)
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1(rdpk_qvec1) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1.word = (uint32_t)rdpk_qvec1<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1.word
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1_word(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_POLYCOEF1.word = x)


//ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT


#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT_rdpk_cof_shift() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT.ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT_ts.rdpk_cof_shift
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT_rdpk_cof_shift(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT.ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT_ts.rdpk_cof_shift = x)
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT(rdpk_cof_shift) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT.word = (uint32_t)rdpk_cof_shift<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT.word
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT_word(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_COF_SHIFT.word = x)


//ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT


#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT_rdpk_out_shift() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT.ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT_ts.rdpk_out_shift
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT_rdpk_out_shift(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT.ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT_ts.rdpk_out_shift = x)
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT(rdpk_out_shift) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT.word = (uint32_t)rdpk_out_shift<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT.word
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT_word(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_OUT_SHIFT.word = x)


//ISP_CE1_RADIAL_ADSOC_RP_UNITY


#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_UNITY_rdpk_unity() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_UNITY.ISP_CE1_RADIAL_ADSOC_RP_UNITY_ts.rdpk_unity
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_UNITY_rdpk_unity(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_UNITY.ISP_CE1_RADIAL_ADSOC_RP_UNITY_ts.rdpk_unity = x)
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_UNITY(rdpk_unity) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_UNITY.word = (uint32_t)rdpk_unity<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_UNITY() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_UNITY.word
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_UNITY_word(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_UNITY.word = x)


//ISP_CE1_RADIAL_ADSOC_RP_HOFFSET


#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_HOFFSET_rdpk_hoffset() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_HOFFSET.ISP_CE1_RADIAL_ADSOC_RP_HOFFSET_ts.rdpk_hoffset
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_HOFFSET_rdpk_hoffset(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_HOFFSET.ISP_CE1_RADIAL_ADSOC_RP_HOFFSET_ts.rdpk_hoffset = x)
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_HOFFSET(rdpk_hoffset) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_HOFFSET.word = (uint32_t)rdpk_hoffset<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_HOFFSET() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_HOFFSET.word
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_HOFFSET_word(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_HOFFSET.word = x)


//ISP_CE1_RADIAL_ADSOC_RP_VOFFSET


#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_VOFFSET_rdpk_voffset() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_VOFFSET.ISP_CE1_RADIAL_ADSOC_RP_VOFFSET_ts.rdpk_voffset
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_VOFFSET_rdpk_voffset(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_VOFFSET.ISP_CE1_RADIAL_ADSOC_RP_VOFFSET_ts.rdpk_voffset = x)
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_VOFFSET(rdpk_voffset) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_VOFFSET.word = (uint32_t)rdpk_voffset<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_VOFFSET() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_VOFFSET.word
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_VOFFSET_word(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_VOFFSET.word = x)


//ISP_CE1_RADIAL_ADSOC_RP_SCALE_X


#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_SCALE_X_rdpk_scaling_factor_x() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_SCALE_X.ISP_CE1_RADIAL_ADSOC_RP_SCALE_X_ts.rdpk_scaling_factor_x
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_SCALE_X_rdpk_scaling_factor_x(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_SCALE_X.ISP_CE1_RADIAL_ADSOC_RP_SCALE_X_ts.rdpk_scaling_factor_x = x)
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_SCALE_X(rdpk_scaling_factor_x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_SCALE_X.word = (uint32_t)rdpk_scaling_factor_x<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_SCALE_X() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_SCALE_X.word
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_SCALE_X_word(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_SCALE_X.word = x)


//ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y


#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y_rdpk_scaling_factor_y() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y.ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y_ts.rdpk_scaling_factor_y
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y_rdpk_scaling_factor_y(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y.ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y_ts.rdpk_scaling_factor_y = x)
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y(rdpk_scaling_factor_y) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y.word = (uint16_t)rdpk_scaling_factor_y<<0)
#define Get_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y() p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y.word
#define Set_ISP_CE1_RADIAL_ADSOC_RP_ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y_word(x) (p_ISP_CE1_RADIAL_ADSOC_RP_IP->ISP_CE1_RADIAL_ADSOC_RP_SCALE_Y.word = x)

//ISP_CE1_MUX_GPS_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE1_MUX_GPS_ENABLE_ts;

}ISP_CE1_MUX_GPS_ENABLE_tu;



//ISP_CE1_MUX_GPS_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE1_MUX_GPS_SELECT_ts;

}ISP_CE1_MUX_GPS_SELECT_tu;

typedef struct
{
    ISP_CE1_MUX_GPS_ENABLE_tu ISP_CE1_MUX_GPS_ENABLE;
    ISP_CE1_MUX_GPS_SELECT_tu ISP_CE1_MUX_GPS_SELECT;
}ISP_CE1_MUX_GPS_IP_ts;




//ISP_CE1_MUX_GPS_ENABLE


#define Get_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE_mux2to1_enable() p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.ISP_CE1_MUX_GPS_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.ISP_CE1_MUX_GPS_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.ISP_CE1_MUX_GPS_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.ISP_CE1_MUX_GPS_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.ISP_CE1_MUX_GPS_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE_mux2to1_soft_reset() p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.ISP_CE1_MUX_GPS_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.ISP_CE1_MUX_GPS_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.ISP_CE1_MUX_GPS_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.ISP_CE1_MUX_GPS_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.ISP_CE1_MUX_GPS_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE() p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.word
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_ENABLE_word(x) (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_ENABLE.word = x)


//ISP_CE1_MUX_GPS_SELECT


#define Get_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT_mux2to1_select() p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.ISP_CE1_MUX_GPS_SELECT_ts.mux2to1_select
#define Is_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT_mux2to1_select_IDP0() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.ISP_CE1_MUX_GPS_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT_mux2to1_select__IDP0() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.ISP_CE1_MUX_GPS_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT_mux2to1_select_IDP1() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.ISP_CE1_MUX_GPS_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT_mux2to1_select__IDP1() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.ISP_CE1_MUX_GPS_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT_mux2to1_shadow_en() p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.ISP_CE1_MUX_GPS_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.ISP_CE1_MUX_GPS_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.ISP_CE1_MUX_GPS_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.ISP_CE1_MUX_GPS_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.ISP_CE1_MUX_GPS_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT() p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.word
#define Set_ISP_CE1_MUX_GPS_ISP_CE1_MUX_GPS_SELECT_word(x) (p_ISP_CE1_MUX_GPS_IP->ISP_CE1_MUX_GPS_SELECT.word = x)

//ISP_CE1_MUX_SHARP_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE1_MUX_SHARP_ENABLE_ts;

}ISP_CE1_MUX_SHARP_ENABLE_tu;



//ISP_CE1_MUX_SHARP_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE1_MUX_SHARP_SELECT_ts;

}ISP_CE1_MUX_SHARP_SELECT_tu;

typedef struct
{
    ISP_CE1_MUX_SHARP_ENABLE_tu ISP_CE1_MUX_SHARP_ENABLE;
    ISP_CE1_MUX_SHARP_SELECT_tu ISP_CE1_MUX_SHARP_SELECT;
}ISP_CE1_MUX_SHARP_IP_ts;




//ISP_CE1_MUX_SHARP_ENABLE


#define Get_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE_mux2to1_enable() p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.ISP_CE1_MUX_SHARP_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.ISP_CE1_MUX_SHARP_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.ISP_CE1_MUX_SHARP_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.ISP_CE1_MUX_SHARP_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.ISP_CE1_MUX_SHARP_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE_mux2to1_soft_reset() p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.ISP_CE1_MUX_SHARP_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.ISP_CE1_MUX_SHARP_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.ISP_CE1_MUX_SHARP_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.ISP_CE1_MUX_SHARP_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.ISP_CE1_MUX_SHARP_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE() p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.word
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_ENABLE_word(x) (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_ENABLE.word = x)


//ISP_CE1_MUX_SHARP_SELECT


#define Get_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT_mux2to1_select() p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.ISP_CE1_MUX_SHARP_SELECT_ts.mux2to1_select
#define Is_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT_mux2to1_select_IDP0() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.ISP_CE1_MUX_SHARP_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT_mux2to1_select__IDP0() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.ISP_CE1_MUX_SHARP_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT_mux2to1_select_IDP1() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.ISP_CE1_MUX_SHARP_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT_mux2to1_select__IDP1() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.ISP_CE1_MUX_SHARP_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT_mux2to1_shadow_en() p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.ISP_CE1_MUX_SHARP_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.ISP_CE1_MUX_SHARP_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.ISP_CE1_MUX_SHARP_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.ISP_CE1_MUX_SHARP_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.ISP_CE1_MUX_SHARP_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT() p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.word
#define Set_ISP_CE1_MUX_SHARP_ISP_CE1_MUX_SHARP_SELECT_word(x) (p_ISP_CE1_MUX_SHARP_IP->ISP_CE1_MUX_SHARP_SELECT.word = x)

//ISP_CE1_MUX_UNSHARP_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE1_MUX_UNSHARP_ENABLE_ts;

}ISP_CE1_MUX_UNSHARP_ENABLE_tu;



//ISP_CE1_MUX_UNSHARP_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE1_MUX_UNSHARP_SELECT_ts;

}ISP_CE1_MUX_UNSHARP_SELECT_tu;

typedef struct
{
    ISP_CE1_MUX_UNSHARP_ENABLE_tu ISP_CE1_MUX_UNSHARP_ENABLE;
    ISP_CE1_MUX_UNSHARP_SELECT_tu ISP_CE1_MUX_UNSHARP_SELECT;
}ISP_CE1_MUX_UNSHARP_IP_ts;




//ISP_CE1_MUX_UNSHARP_ENABLE


#define Get_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE_mux2to1_enable() p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.ISP_CE1_MUX_UNSHARP_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.ISP_CE1_MUX_UNSHARP_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.ISP_CE1_MUX_UNSHARP_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.ISP_CE1_MUX_UNSHARP_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.ISP_CE1_MUX_UNSHARP_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE_mux2to1_soft_reset() p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.ISP_CE1_MUX_UNSHARP_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.ISP_CE1_MUX_UNSHARP_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.ISP_CE1_MUX_UNSHARP_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.ISP_CE1_MUX_UNSHARP_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.ISP_CE1_MUX_UNSHARP_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE() p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.word
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_ENABLE_word(x) (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_ENABLE.word = x)


//ISP_CE1_MUX_UNSHARP_SELECT


#define Get_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT_mux2to1_select() p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.ISP_CE1_MUX_UNSHARP_SELECT_ts.mux2to1_select
#define Is_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT_mux2to1_select_IDP0() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.ISP_CE1_MUX_UNSHARP_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT_mux2to1_select__IDP0() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.ISP_CE1_MUX_UNSHARP_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT_mux2to1_select_IDP1() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.ISP_CE1_MUX_UNSHARP_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT_mux2to1_select__IDP1() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.ISP_CE1_MUX_UNSHARP_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT_mux2to1_shadow_en() p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.ISP_CE1_MUX_UNSHARP_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.ISP_CE1_MUX_UNSHARP_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.ISP_CE1_MUX_UNSHARP_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.ISP_CE1_MUX_UNSHARP_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.ISP_CE1_MUX_UNSHARP_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT() p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.word
#define Set_ISP_CE1_MUX_UNSHARP_ISP_CE1_MUX_UNSHARP_SELECT_word(x) (p_ISP_CE1_MUX_UNSHARP_IP->ISP_CE1_MUX_UNSHARP_SELECT.word = x)

//ISP_CE1_FLEXTF_SHARP_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable flextf module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* flextf is not under a soft reset*/
    }ISP_CE1_FLEXTF_SHARP_ENABLE_ts;

}ISP_CE1_FLEXTF_SHARP_ENABLE_tu;



//ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR
/*Description: Last Index element for interpolation of Green / Green in Red channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_green_gir;
        /* last indexed element for interpolation
        in bayer configuration : Green in Redcolor channel.
        in rgb configuration : Green color channel*/
    }ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_ts;

}ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_tu;



//ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED
/*Description: Last Index element for interpolation of Red channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_red;
        /* last indexed element for interpolation*/
    }ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED_ts;

}ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED_tu;



//ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE
/*Description: Last Index element for interpolation of Blue channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_blue;
        /* last indexed element for interpolation*/
    }ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE_ts;

}ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE_tu;



//ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB
/*Description: Last Index element for interpolation of Green in Blue channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_gib;
        /* last indexed element for interpolation
        in bayer configuration, Green in Blue color channel.
        in rgb configuration, this register is ignored*/
    }ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB_ts;

}ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB_tu;



//ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT
/*Description: Pixel Input Value is right shifted by index in the range [0:5].
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint8_t pixel_shift :3;
        /* index value of the right shift*/
    }ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT_ts;

}ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT_tu;

typedef struct
{
    ISP_CE1_FLEXTF_SHARP_ENABLE_tu ISP_CE1_FLEXTF_SHARP_ENABLE;
    ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_tu ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR;
    ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED_tu ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED;
    ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE_tu ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE;
    ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB_tu ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB;
    ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT_tu ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT;
}ISP_CE1_FLEXTF_SHARP_IP_ts;




//ISP_CE1_FLEXTF_SHARP_ENABLE


#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE_enable() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.ISP_CE1_FLEXTF_SHARP_ENABLE_ts.enable
#define Is_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE_enable_DISABLE() (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.ISP_CE1_FLEXTF_SHARP_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE_enable__DISABLE() (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.ISP_CE1_FLEXTF_SHARP_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable flextf module
#define Is_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE_enable_ENABLE() (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.ISP_CE1_FLEXTF_SHARP_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE_enable__ENABLE() (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.ISP_CE1_FLEXTF_SHARP_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable flextf module


#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE_soft_reset() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.ISP_CE1_FLEXTF_SHARP_ENABLE_ts.soft_reset
#define Is_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE_soft_reset_B_0x0() (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.ISP_CE1_FLEXTF_SHARP_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE_soft_reset__B_0x0() (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.ISP_CE1_FLEXTF_SHARP_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //flextf is not under a soft reset
#define Is_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE_soft_reset_B_0x1() (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.ISP_CE1_FLEXTF_SHARP_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE_soft_reset__B_0x1() (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.ISP_CE1_FLEXTF_SHARP_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //flextf is under a soft reset
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE(enable,soft_reset) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.word
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_ENABLE_word(x) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_ENABLE.word = x)


//ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR


#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_last_elt_green_gir() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR.ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_ts.last_elt_green_gir
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_last_elt_green_gir(x) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR.ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_ts.last_elt_green_gir = x)
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR(last_elt_green_gir) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR.word = (uint32_t)last_elt_green_gir<<0)
#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR.word
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR_word(x) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_GREEN_GIR.word = x)


//ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED


#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED_last_elt_red() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED.ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED_ts.last_elt_red
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED_last_elt_red(x) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED.ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED_ts.last_elt_red = x)
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED(last_elt_red) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED.word = (uint32_t)last_elt_red<<0)
#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED.word
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED_word(x) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_RED.word = x)


//ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE


#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE_last_elt_blue() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE.ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE_ts.last_elt_blue
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE_last_elt_blue(x) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE.ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE_ts.last_elt_blue = x)
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE(last_elt_blue) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE.word = (uint32_t)last_elt_blue<<0)
#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE.word
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE_word(x) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_BLUE.word = x)


//ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB


#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB_last_elt_gib() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB.ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB_ts.last_elt_gib
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB_last_elt_gib(x) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB.ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB_ts.last_elt_gib = x)
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB(last_elt_gib) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB.word = (uint32_t)last_elt_gib<<0)
#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB.word
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB_word(x) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_LAST_ELT_GIB.word = x)


//ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT


#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT_pixel_shift() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT.ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT_ts.pixel_shift
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT_pixel_shift(x) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT.ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT_ts.pixel_shift = x)
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT(pixel_shift) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT.word = (uint16_t)pixel_shift<<0)
#define Get_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT() p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT.word
#define Set_ISP_CE1_FLEXTF_SHARP_ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT_word(x) (p_ISP_CE1_FLEXTF_SHARP_IP->ISP_CE1_FLEXTF_SHARP_PIXELIN_SHIFT.word = x)

//ISP_CE1_FLEXTF_UNSHARP_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable flextf module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* flextf is not under a soft reset*/
    }ISP_CE1_FLEXTF_UNSHARP_ENABLE_ts;

}ISP_CE1_FLEXTF_UNSHARP_ENABLE_tu;



//ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR
/*Description: Last Index element for interpolation of Green / Green in Red channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_green_gir;
        /* last indexed element for interpolation
        in bayer configuration : Green in Redcolor channel.
        in rgb configuration : Green color channel*/
    }ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_ts;

}ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_tu;



//ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED
/*Description: Last Index element for interpolation of Red channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_red;
        /* last indexed element for interpolation*/
    }ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED_ts;

}ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED_tu;



//ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE
/*Description: Last Index element for interpolation of Blue channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_blue;
        /* last indexed element for interpolation*/
    }ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE_ts;

}ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE_tu;



//ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB
/*Description: Last Index element for interpolation of Green in Blue channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_elt_gib;
        /* last indexed element for interpolation
        in bayer configuration, Green in Blue color channel.
        in rgb configuration, this register is ignored*/
    }ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB_ts;

}ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB_tu;



//ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT
/*Description: Pixel Input Value is right shifted by index in the range [0:5].
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint8_t pixel_shift :3;
        /* index value of the right shift*/
    }ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT_ts;

}ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT_tu;

typedef struct
{
    ISP_CE1_FLEXTF_UNSHARP_ENABLE_tu ISP_CE1_FLEXTF_UNSHARP_ENABLE;
    ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_tu ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR;
    ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED_tu ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED;
    ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE_tu ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE;
    ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB_tu ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB;
    ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT_tu ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT;
}ISP_CE1_FLEXTF_UNSHARP_IP_ts;




//ISP_CE1_FLEXTF_UNSHARP_ENABLE


#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE_enable() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.ISP_CE1_FLEXTF_UNSHARP_ENABLE_ts.enable
#define Is_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE_enable_DISABLE() (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.ISP_CE1_FLEXTF_UNSHARP_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE_enable__DISABLE() (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.ISP_CE1_FLEXTF_UNSHARP_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable flextf module
#define Is_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE_enable_ENABLE() (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.ISP_CE1_FLEXTF_UNSHARP_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE_enable__ENABLE() (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.ISP_CE1_FLEXTF_UNSHARP_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable flextf module


#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE_soft_reset() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.ISP_CE1_FLEXTF_UNSHARP_ENABLE_ts.soft_reset
#define Is_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE_soft_reset_B_0x0() (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.ISP_CE1_FLEXTF_UNSHARP_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE_soft_reset__B_0x0() (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.ISP_CE1_FLEXTF_UNSHARP_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //flextf is not under a soft reset
#define Is_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE_soft_reset_B_0x1() (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.ISP_CE1_FLEXTF_UNSHARP_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE_soft_reset__B_0x1() (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.ISP_CE1_FLEXTF_UNSHARP_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //flextf is under a soft reset
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE(enable,soft_reset) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.word
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_ENABLE_word(x) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_ENABLE.word = x)


//ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR


#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_last_elt_green_gir() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR.ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_ts.last_elt_green_gir
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_last_elt_green_gir(x) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR.ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_ts.last_elt_green_gir = x)
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR(last_elt_green_gir) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR.word = (uint32_t)last_elt_green_gir<<0)
#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR.word
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR_word(x) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GREEN_GIR.word = x)


//ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED


#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED_last_elt_red() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED.ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED_ts.last_elt_red
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED_last_elt_red(x) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED.ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED_ts.last_elt_red = x)
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED(last_elt_red) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED.word = (uint32_t)last_elt_red<<0)
#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED.word
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED_word(x) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_RED.word = x)


//ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE


#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE_last_elt_blue() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE.ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE_ts.last_elt_blue
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE_last_elt_blue(x) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE.ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE_ts.last_elt_blue = x)
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE(last_elt_blue) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE.word = (uint32_t)last_elt_blue<<0)
#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE.word
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE_word(x) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_BLUE.word = x)


//ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB


#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB_last_elt_gib() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB.ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB_ts.last_elt_gib
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB_last_elt_gib(x) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB.ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB_ts.last_elt_gib = x)
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB(last_elt_gib) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB.word = (uint32_t)last_elt_gib<<0)
#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB.word
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB_word(x) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_LAST_ELT_GIB.word = x)


//ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT


#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT_pixel_shift() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT.ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT_ts.pixel_shift
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT_pixel_shift(x) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT.ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT_ts.pixel_shift = x)
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT(pixel_shift) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT.word = (uint16_t)pixel_shift<<0)
#define Get_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT() p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT.word
#define Set_ISP_CE1_FLEXTF_UNSHARP_ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT_word(x) (p_ISP_CE1_FLEXTF_UNSHARP_IP->ISP_CE1_FLEXTF_UNSHARP_PIXELIN_SHIFT.word = x)

//ISP_CE1_MUX_MATRIX_ADSOC_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_ts;

}ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_tu;



//ISP_CE1_MUX_MATRIX_ADSOC_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE1_MUX_MATRIX_ADSOC_SELECT_ts;

}ISP_CE1_MUX_MATRIX_ADSOC_SELECT_tu;

typedef struct
{
    ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_tu ISP_CE1_MUX_MATRIX_ADSOC_ENABLE;
    ISP_CE1_MUX_MATRIX_ADSOC_SELECT_tu ISP_CE1_MUX_MATRIX_ADSOC_SELECT;
}ISP_CE1_MUX_MATRIX_ADSOC_IP_ts;




//ISP_CE1_MUX_MATRIX_ADSOC_ENABLE


#define Get_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_mux2to1_enable() p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_mux2to1_soft_reset() p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE() p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.word
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_ENABLE_word(x) (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_ENABLE.word = x)


//ISP_CE1_MUX_MATRIX_ADSOC_SELECT


#define Get_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT_mux2to1_select() p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.ISP_CE1_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_select
#define Is_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT_mux2to1_select_IDP0() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.ISP_CE1_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT_mux2to1_select__IDP0() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.ISP_CE1_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT_mux2to1_select_IDP1() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.ISP_CE1_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT_mux2to1_select__IDP1() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.ISP_CE1_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT_mux2to1_shadow_en() p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.ISP_CE1_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.ISP_CE1_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.ISP_CE1_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.ISP_CE1_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.ISP_CE1_MUX_MATRIX_ADSOC_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT() p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.word
#define Set_ISP_CE1_MUX_MATRIX_ADSOC_ISP_CE1_MUX_MATRIX_ADSOC_SELECT_word(x) (p_ISP_CE1_MUX_MATRIX_ADSOC_IP->ISP_CE1_MUX_MATRIX_ADSOC_SELECT.word = x)

//ISP_CE1_SNAIL0_ADSOC_ENABLE
/*Description: Enable configuration register. Soft reset register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t snailnorec_enable :1;
        /* Disable snailnorec module*/
        uint8_t reserved0 :3;
        uint8_t snailnorec_soft_reset :1;
        /* SOFT_RESET_DISABLE*/
    }ISP_CE1_SNAIL0_ADSOC_ENABLE_ts;

}ISP_CE1_SNAIL0_ADSOC_ENABLE_tu;

typedef struct
{
    ISP_CE1_SNAIL0_ADSOC_ENABLE_tu ISP_CE1_SNAIL0_ADSOC_ENABLE;
}ISP_CE1_SNAIL0_ADSOC_IP_ts;




//ISP_CE1_SNAIL0_ADSOC_ENABLE


#define Get_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE_snailnorec_enable() p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.ISP_CE1_SNAIL0_ADSOC_ENABLE_ts.snailnorec_enable
#define Is_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE_snailnorec_enable_DISABLE() (p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.ISP_CE1_SNAIL0_ADSOC_ENABLE_ts.snailnorec_enable == snailnorec_enable_DISABLE)
#define Set_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE_snailnorec_enable__DISABLE() (p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.ISP_CE1_SNAIL0_ADSOC_ENABLE_ts.snailnorec_enable = snailnorec_enable_DISABLE)
#define snailnorec_enable_DISABLE 0x0    //Disable snailnorec module
#define Is_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE_snailnorec_enable_ENABLE() (p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.ISP_CE1_SNAIL0_ADSOC_ENABLE_ts.snailnorec_enable == snailnorec_enable_ENABLE)
#define Set_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE_snailnorec_enable__ENABLE() (p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.ISP_CE1_SNAIL0_ADSOC_ENABLE_ts.snailnorec_enable = snailnorec_enable_ENABLE)
#define snailnorec_enable_ENABLE 0x1    //Enable snailnorec module


#define Get_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE_snailnorec_soft_reset() p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.ISP_CE1_SNAIL0_ADSOC_ENABLE_ts.snailnorec_soft_reset
#define Is_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE_snailnorec_soft_reset_SOFT_RESET_DISABLE() (p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.ISP_CE1_SNAIL0_ADSOC_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define Set_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE_snailnorec_soft_reset__SOFT_RESET_DISABLE() (p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.ISP_CE1_SNAIL0_ADSOC_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define snailnorec_soft_reset_SOFT_RESET_DISABLE 0x0    //SOFT_RESET_DISABLE
#define Is_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE_snailnorec_soft_reset_SOFT_RESET_ENABLE() (p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.ISP_CE1_SNAIL0_ADSOC_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define Set_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE_snailnorec_soft_reset__SOFT_RESET_ENABLE() (p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.ISP_CE1_SNAIL0_ADSOC_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define snailnorec_soft_reset_SOFT_RESET_ENABLE 0x1    //SOFT_RESET_ENABLE
#define Set_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE(snailnorec_enable,snailnorec_soft_reset) (p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.word = (uint8_t)snailnorec_enable<<0 | (uint8_t)snailnorec_soft_reset<<4)
#define Get_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE() p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.word
#define Set_ISP_CE1_SNAIL0_ADSOC_ISP_CE1_SNAIL0_ADSOC_ENABLE_word(x) (p_ISP_CE1_SNAIL0_ADSOC_IP->ISP_CE1_SNAIL0_ADSOC_ENABLE.word = x)

//ISP_CE1_SNAIL1_ADSOC_ENABLE
/*Description: Enable configuration register. Soft reset register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t snailnorec_enable :1;
        /* Disable snailnorec module*/
        uint8_t reserved0 :3;
        uint8_t snailnorec_soft_reset :1;
        /* SOFT_RESET_DISABLE*/
    }ISP_CE1_SNAIL1_ADSOC_ENABLE_ts;

}ISP_CE1_SNAIL1_ADSOC_ENABLE_tu;

typedef struct
{
    ISP_CE1_SNAIL1_ADSOC_ENABLE_tu ISP_CE1_SNAIL1_ADSOC_ENABLE;
}ISP_CE1_SNAIL1_ADSOC_IP_ts;




//ISP_CE1_SNAIL1_ADSOC_ENABLE


#define Get_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE_snailnorec_enable() p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.ISP_CE1_SNAIL1_ADSOC_ENABLE_ts.snailnorec_enable
#define Is_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE_snailnorec_enable_DISABLE() (p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.ISP_CE1_SNAIL1_ADSOC_ENABLE_ts.snailnorec_enable == snailnorec_enable_DISABLE)
#define Set_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE_snailnorec_enable__DISABLE() (p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.ISP_CE1_SNAIL1_ADSOC_ENABLE_ts.snailnorec_enable = snailnorec_enable_DISABLE)
#define snailnorec_enable_DISABLE 0x0    //Disable snailnorec module
#define Is_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE_snailnorec_enable_ENABLE() (p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.ISP_CE1_SNAIL1_ADSOC_ENABLE_ts.snailnorec_enable == snailnorec_enable_ENABLE)
#define Set_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE_snailnorec_enable__ENABLE() (p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.ISP_CE1_SNAIL1_ADSOC_ENABLE_ts.snailnorec_enable = snailnorec_enable_ENABLE)
#define snailnorec_enable_ENABLE 0x1    //Enable snailnorec module


#define Get_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE_snailnorec_soft_reset() p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.ISP_CE1_SNAIL1_ADSOC_ENABLE_ts.snailnorec_soft_reset
#define Is_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE_snailnorec_soft_reset_SOFT_RESET_DISABLE() (p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.ISP_CE1_SNAIL1_ADSOC_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define Set_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE_snailnorec_soft_reset__SOFT_RESET_DISABLE() (p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.ISP_CE1_SNAIL1_ADSOC_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define snailnorec_soft_reset_SOFT_RESET_DISABLE 0x0    //SOFT_RESET_DISABLE
#define Is_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE_snailnorec_soft_reset_SOFT_RESET_ENABLE() (p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.ISP_CE1_SNAIL1_ADSOC_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define Set_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE_snailnorec_soft_reset__SOFT_RESET_ENABLE() (p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.ISP_CE1_SNAIL1_ADSOC_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define snailnorec_soft_reset_SOFT_RESET_ENABLE 0x1    //SOFT_RESET_ENABLE
#define Set_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE(snailnorec_enable,snailnorec_soft_reset) (p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.word = (uint8_t)snailnorec_enable<<0 | (uint8_t)snailnorec_soft_reset<<4)
#define Get_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE() p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.word
#define Set_ISP_CE1_SNAIL1_ADSOC_ISP_CE1_SNAIL1_ADSOC_ENABLE_word(x) (p_ISP_CE1_SNAIL1_ADSOC_IP->ISP_CE1_SNAIL1_ADSOC_ENABLE.word = x)

//ISP_CE1_MATRIX_ENABLE
/*Description: Matrix Control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable Matrix module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* Soft reset deasserted*/
    }ISP_CE1_MATRIX_ENABLE_ts;

}ISP_CE1_MATRIX_ENABLE_tu;



//ISP_CE1_MATRIX_RCOF00
/*Description: On-diagonal Matrix coefficient (0,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof00;
        /* Matrix Coefficient (0,0).*/
    }ISP_CE1_MATRIX_RCOF00_ts;

}ISP_CE1_MATRIX_RCOF00_tu;



//ISP_CE1_MATRIX_RCOF01
/*Description: Off-diagonal Matrix coefficient (0,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof01;
        /* Matrix Coefficient (0,1).*/
    }ISP_CE1_MATRIX_RCOF01_ts;

}ISP_CE1_MATRIX_RCOF01_tu;



//ISP_CE1_MATRIX_RCOF02
/*Description: Off-diagonal Matrix coefficient (0,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof02;
        /* Matrix Coefficient (0,2).*/
    }ISP_CE1_MATRIX_RCOF02_ts;

}ISP_CE1_MATRIX_RCOF02_tu;



//ISP_CE1_MATRIX_RCOF10
/*Description: Off-diagonal Matrix coefficient (1,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof10;
        /* Matrix Coefficient (1,0).*/
    }ISP_CE1_MATRIX_RCOF10_ts;

}ISP_CE1_MATRIX_RCOF10_tu;



//ISP_CE1_MATRIX_RCOF11
/*Description: On-diagonal Matrix coefficient (1,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof11;
        /* Matrix Coefficient (1,1).*/
    }ISP_CE1_MATRIX_RCOF11_ts;

}ISP_CE1_MATRIX_RCOF11_tu;



//ISP_CE1_MATRIX_RCOF12
/*Description: Off-diagonal Matrix coefficient (1,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof12;
        /* Matrix Coefficient (1,2).*/
    }ISP_CE1_MATRIX_RCOF12_ts;

}ISP_CE1_MATRIX_RCOF12_tu;



//ISP_CE1_MATRIX_RCOF20
/*Description: Off-diagonal Matrix coefficient (2,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof20;
        /* Matrix Coefficient (2,0).*/
    }ISP_CE1_MATRIX_RCOF20_ts;

}ISP_CE1_MATRIX_RCOF20_tu;



//ISP_CE1_MATRIX_RCOF21
/*Description: Off-diagonal Matrix coefficient (2,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof21;
        /* Matrix Coefficient (2,1).*/
    }ISP_CE1_MATRIX_RCOF21_ts;

}ISP_CE1_MATRIX_RCOF21_tu;



//ISP_CE1_MATRIX_RCOF22
/*Description: On-diagonal Matrix coefficient (2,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof22;
        /* Matrix Coefficient (2,2).*/
    }ISP_CE1_MATRIX_RCOF22_ts;

}ISP_CE1_MATRIX_RCOF22_tu;



//ISP_CE1_MATRIX_R_OFFSET
/*Description: Offset for R data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t r_offset :13;
        /* offset for R data*/
    }ISP_CE1_MATRIX_R_OFFSET_ts;

}ISP_CE1_MATRIX_R_OFFSET_tu;



//ISP_CE1_MATRIX_G_OFFSET
/*Description: Offset for G data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t g_offset :13;
        /* offset for G data*/
    }ISP_CE1_MATRIX_G_OFFSET_ts;

}ISP_CE1_MATRIX_G_OFFSET_tu;



//ISP_CE1_MATRIX_B_OFFSET
/*Description: Offset for B data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit































Synthesis Results
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t b_offset :13;
        /* offset for B data*/
    }ISP_CE1_MATRIX_B_OFFSET_ts;

}ISP_CE1_MATRIX_B_OFFSET_tu;

typedef struct
{
    ISP_CE1_MATRIX_ENABLE_tu ISP_CE1_MATRIX_ENABLE;
    ISP_CE1_MATRIX_RCOF00_tu ISP_CE1_MATRIX_RCOF00;
    ISP_CE1_MATRIX_RCOF01_tu ISP_CE1_MATRIX_RCOF01;
    ISP_CE1_MATRIX_RCOF02_tu ISP_CE1_MATRIX_RCOF02;
    ISP_CE1_MATRIX_RCOF10_tu ISP_CE1_MATRIX_RCOF10;
    ISP_CE1_MATRIX_RCOF11_tu ISP_CE1_MATRIX_RCOF11;
    ISP_CE1_MATRIX_RCOF12_tu ISP_CE1_MATRIX_RCOF12;
    ISP_CE1_MATRIX_RCOF20_tu ISP_CE1_MATRIX_RCOF20;
    ISP_CE1_MATRIX_RCOF21_tu ISP_CE1_MATRIX_RCOF21;
    ISP_CE1_MATRIX_RCOF22_tu ISP_CE1_MATRIX_RCOF22;
    ISP_CE1_MATRIX_R_OFFSET_tu ISP_CE1_MATRIX_R_OFFSET;
    ISP_CE1_MATRIX_G_OFFSET_tu ISP_CE1_MATRIX_G_OFFSET;
    ISP_CE1_MATRIX_B_OFFSET_tu ISP_CE1_MATRIX_B_OFFSET;
}ISP_CE1_MATRIX_IP_ts;




//ISP_CE1_MATRIX_ENABLE


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE_enable() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.ISP_CE1_MATRIX_ENABLE_ts.enable
#define Is_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE_enable_DISABLE() (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.ISP_CE1_MATRIX_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE_enable__DISABLE() (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.ISP_CE1_MATRIX_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable Matrix module
#define Is_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE_enable_ENABLE() (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.ISP_CE1_MATRIX_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE_enable__ENABLE() (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.ISP_CE1_MATRIX_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable Matrix module


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE_soft_reset() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.ISP_CE1_MATRIX_ENABLE_ts.soft_reset
#define Is_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE_soft_reset_DISABLE() (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.ISP_CE1_MATRIX_ENABLE_ts.soft_reset == soft_reset_DISABLE)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE_soft_reset__DISABLE() (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.ISP_CE1_MATRIX_ENABLE_ts.soft_reset = soft_reset_DISABLE)
#define soft_reset_DISABLE 0x0    //Soft reset deasserted
#define Is_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE_soft_reset_ENABLE() (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.ISP_CE1_MATRIX_ENABLE_ts.soft_reset == soft_reset_ENABLE)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE_soft_reset__ENABLE() (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.ISP_CE1_MATRIX_ENABLE_ts.soft_reset = soft_reset_ENABLE)
#define soft_reset_ENABLE 0x1    //Soft reset asserted
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE(enable,soft_reset) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_ENABLE_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_ENABLE.word = x)


//ISP_CE1_MATRIX_RCOF00


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF00_rcof00() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF00.ISP_CE1_MATRIX_RCOF00_ts.rcof00
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF00_rcof00(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF00.ISP_CE1_MATRIX_RCOF00_ts.rcof00 = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF00(rcof00) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF00.word = (uint32_t)rcof00<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF00() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF00.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF00_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF00.word = x)


//ISP_CE1_MATRIX_RCOF01


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF01_rcof01() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF01.ISP_CE1_MATRIX_RCOF01_ts.rcof01
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF01_rcof01(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF01.ISP_CE1_MATRIX_RCOF01_ts.rcof01 = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF01(rcof01) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF01.word = (uint32_t)rcof01<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF01() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF01.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF01_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF01.word = x)


//ISP_CE1_MATRIX_RCOF02


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF02_rcof02() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF02.ISP_CE1_MATRIX_RCOF02_ts.rcof02
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF02_rcof02(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF02.ISP_CE1_MATRIX_RCOF02_ts.rcof02 = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF02(rcof02) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF02.word = (uint32_t)rcof02<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF02() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF02.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF02_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF02.word = x)


//ISP_CE1_MATRIX_RCOF10


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF10_rcof10() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF10.ISP_CE1_MATRIX_RCOF10_ts.rcof10
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF10_rcof10(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF10.ISP_CE1_MATRIX_RCOF10_ts.rcof10 = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF10(rcof10) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF10.word = (uint32_t)rcof10<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF10() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF10.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF10_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF10.word = x)


//ISP_CE1_MATRIX_RCOF11


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF11_rcof11() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF11.ISP_CE1_MATRIX_RCOF11_ts.rcof11
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF11_rcof11(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF11.ISP_CE1_MATRIX_RCOF11_ts.rcof11 = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF11(rcof11) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF11.word = (uint32_t)rcof11<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF11() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF11.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF11_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF11.word = x)


//ISP_CE1_MATRIX_RCOF12


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF12_rcof12() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF12.ISP_CE1_MATRIX_RCOF12_ts.rcof12
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF12_rcof12(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF12.ISP_CE1_MATRIX_RCOF12_ts.rcof12 = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF12(rcof12) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF12.word = (uint32_t)rcof12<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF12() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF12.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF12_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF12.word = x)


//ISP_CE1_MATRIX_RCOF20


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF20_rcof20() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF20.ISP_CE1_MATRIX_RCOF20_ts.rcof20
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF20_rcof20(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF20.ISP_CE1_MATRIX_RCOF20_ts.rcof20 = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF20(rcof20) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF20.word = (uint32_t)rcof20<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF20() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF20.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF20_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF20.word = x)


//ISP_CE1_MATRIX_RCOF21


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF21_rcof21() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF21.ISP_CE1_MATRIX_RCOF21_ts.rcof21
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF21_rcof21(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF21.ISP_CE1_MATRIX_RCOF21_ts.rcof21 = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF21(rcof21) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF21.word = (uint32_t)rcof21<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF21() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF21.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF21_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF21.word = x)


//ISP_CE1_MATRIX_RCOF22


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF22_rcof22() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF22.ISP_CE1_MATRIX_RCOF22_ts.rcof22
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF22_rcof22(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF22.ISP_CE1_MATRIX_RCOF22_ts.rcof22 = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF22(rcof22) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF22.word = (uint32_t)rcof22<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF22() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF22.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_RCOF22_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_RCOF22.word = x)


//ISP_CE1_MATRIX_R_OFFSET


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_R_OFFSET_r_offset() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_R_OFFSET.ISP_CE1_MATRIX_R_OFFSET_ts.r_offset
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_R_OFFSET_r_offset(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_R_OFFSET.ISP_CE1_MATRIX_R_OFFSET_ts.r_offset = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_R_OFFSET(r_offset) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_R_OFFSET.word = (uint32_t)r_offset<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_R_OFFSET() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_R_OFFSET.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_R_OFFSET_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_R_OFFSET.word = x)


//ISP_CE1_MATRIX_G_OFFSET


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_G_OFFSET_g_offset() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_G_OFFSET.ISP_CE1_MATRIX_G_OFFSET_ts.g_offset
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_G_OFFSET_g_offset(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_G_OFFSET.ISP_CE1_MATRIX_G_OFFSET_ts.g_offset = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_G_OFFSET(g_offset) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_G_OFFSET.word = (uint32_t)g_offset<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_G_OFFSET() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_G_OFFSET.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_G_OFFSET_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_G_OFFSET.word = x)


//ISP_CE1_MATRIX_B_OFFSET


#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_B_OFFSET_b_offset() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_B_OFFSET.ISP_CE1_MATRIX_B_OFFSET_ts.b_offset
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_B_OFFSET_b_offset(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_B_OFFSET.ISP_CE1_MATRIX_B_OFFSET_ts.b_offset = x)
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_B_OFFSET(b_offset) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_B_OFFSET.word = (uint16_t)b_offset<<0)
#define Get_ISP_CE1_MATRIX_ISP_CE1_MATRIX_B_OFFSET() p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_B_OFFSET.word
#define Set_ISP_CE1_MATRIX_ISP_CE1_MATRIX_B_OFFSET_word(x) (p_ISP_CE1_MATRIX_IP->ISP_CE1_MATRIX_B_OFFSET.word = x)

//ISP_CE1_PIXDELAY_0_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t pix_delay_enable :1;
        /* Disable Pixel delay module*/
        uint8_t reserved0 :3;
        uint8_t pix_delay_soft_reset :1;
        /* pix_delay soft reset disable*/
    }ISP_CE1_PIXDELAY_0_ENABLE_ts;

}ISP_CE1_PIXDELAY_0_ENABLE_tu;

typedef struct
{
    ISP_CE1_PIXDELAY_0_ENABLE_tu ISP_CE1_PIXDELAY_0_ENABLE;
}ISP_CE1_PIXDELAY_0_IP_ts;




//ISP_CE1_PIXDELAY_0_ENABLE


#define Get_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE_pix_delay_enable() p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.ISP_CE1_PIXDELAY_0_ENABLE_ts.pix_delay_enable
#define Is_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE_pix_delay_enable_DISABLE() (p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.ISP_CE1_PIXDELAY_0_ENABLE_ts.pix_delay_enable == pix_delay_enable_DISABLE)
#define Set_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE_pix_delay_enable__DISABLE() (p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.ISP_CE1_PIXDELAY_0_ENABLE_ts.pix_delay_enable = pix_delay_enable_DISABLE)
#define pix_delay_enable_DISABLE 0x0    //Disable Pixel delay module
#define Is_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE_pix_delay_enable_ENABLE() (p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.ISP_CE1_PIXDELAY_0_ENABLE_ts.pix_delay_enable == pix_delay_enable_ENABLE)
#define Set_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE_pix_delay_enable__ENABLE() (p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.ISP_CE1_PIXDELAY_0_ENABLE_ts.pix_delay_enable = pix_delay_enable_ENABLE)
#define pix_delay_enable_ENABLE 0x1    //Enable Pixel delay module


#define Get_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE_pix_delay_soft_reset() p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.ISP_CE1_PIXDELAY_0_ENABLE_ts.pix_delay_soft_reset
#define Is_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE_pix_delay_soft_reset_SOFT_RST_DISABLE() (p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.ISP_CE1_PIXDELAY_0_ENABLE_ts.pix_delay_soft_reset == pix_delay_soft_reset_SOFT_RST_DISABLE)
#define Set_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE_pix_delay_soft_reset__SOFT_RST_DISABLE() (p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.ISP_CE1_PIXDELAY_0_ENABLE_ts.pix_delay_soft_reset = pix_delay_soft_reset_SOFT_RST_DISABLE)
#define pix_delay_soft_reset_SOFT_RST_DISABLE 0x0    //pix_delay soft reset disable
#define Is_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE_pix_delay_soft_reset_SOFT_RST_ENABLE() (p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.ISP_CE1_PIXDELAY_0_ENABLE_ts.pix_delay_soft_reset == pix_delay_soft_reset_SOFT_RST_ENABLE)
#define Set_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE_pix_delay_soft_reset__SOFT_RST_ENABLE() (p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.ISP_CE1_PIXDELAY_0_ENABLE_ts.pix_delay_soft_reset = pix_delay_soft_reset_SOFT_RST_ENABLE)
#define pix_delay_soft_reset_SOFT_RST_ENABLE 0x1    //pix_delay soft reset enable
#define Set_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE(pix_delay_enable,pix_delay_soft_reset) (p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.word = (uint8_t)pix_delay_enable<<0 | (uint8_t)pix_delay_soft_reset<<4)
#define Get_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE() p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.word
#define Set_ISP_CE1_PIXDELAY_0_ISP_CE1_PIXDELAY_0_ENABLE_word(x) (p_ISP_CE1_PIXDELAY_0_IP->ISP_CE1_PIXDELAY_0_ENABLE.word = x)

//ISP_CE1_PIXDELAY_1_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t pix_delay_enable :1;
        /* Disable Pixel delay module*/
        uint8_t reserved0 :3;
        uint8_t pix_delay_soft_reset :1;
        /* pix_delay soft reset disable*/
    }ISP_CE1_PIXDELAY_1_ENABLE_ts;

}ISP_CE1_PIXDELAY_1_ENABLE_tu;

typedef struct
{
    ISP_CE1_PIXDELAY_1_ENABLE_tu ISP_CE1_PIXDELAY_1_ENABLE;
}ISP_CE1_PIXDELAY_1_IP_ts;




//ISP_CE1_PIXDELAY_1_ENABLE


#define Get_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE_pix_delay_enable() p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.ISP_CE1_PIXDELAY_1_ENABLE_ts.pix_delay_enable
#define Is_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE_pix_delay_enable_DISABLE() (p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.ISP_CE1_PIXDELAY_1_ENABLE_ts.pix_delay_enable == pix_delay_enable_DISABLE)
#define Set_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE_pix_delay_enable__DISABLE() (p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.ISP_CE1_PIXDELAY_1_ENABLE_ts.pix_delay_enable = pix_delay_enable_DISABLE)
#define pix_delay_enable_DISABLE 0x0    //Disable Pixel delay module
#define Is_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE_pix_delay_enable_ENABLE() (p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.ISP_CE1_PIXDELAY_1_ENABLE_ts.pix_delay_enable == pix_delay_enable_ENABLE)
#define Set_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE_pix_delay_enable__ENABLE() (p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.ISP_CE1_PIXDELAY_1_ENABLE_ts.pix_delay_enable = pix_delay_enable_ENABLE)
#define pix_delay_enable_ENABLE 0x1    //Enable Pixel delay module


#define Get_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE_pix_delay_soft_reset() p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.ISP_CE1_PIXDELAY_1_ENABLE_ts.pix_delay_soft_reset
#define Is_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE_pix_delay_soft_reset_SOFT_RST_DISABLE() (p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.ISP_CE1_PIXDELAY_1_ENABLE_ts.pix_delay_soft_reset == pix_delay_soft_reset_SOFT_RST_DISABLE)
#define Set_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE_pix_delay_soft_reset__SOFT_RST_DISABLE() (p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.ISP_CE1_PIXDELAY_1_ENABLE_ts.pix_delay_soft_reset = pix_delay_soft_reset_SOFT_RST_DISABLE)
#define pix_delay_soft_reset_SOFT_RST_DISABLE 0x0    //pix_delay soft reset disable
#define Is_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE_pix_delay_soft_reset_SOFT_RST_ENABLE() (p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.ISP_CE1_PIXDELAY_1_ENABLE_ts.pix_delay_soft_reset == pix_delay_soft_reset_SOFT_RST_ENABLE)
#define Set_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE_pix_delay_soft_reset__SOFT_RST_ENABLE() (p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.ISP_CE1_PIXDELAY_1_ENABLE_ts.pix_delay_soft_reset = pix_delay_soft_reset_SOFT_RST_ENABLE)
#define pix_delay_soft_reset_SOFT_RST_ENABLE 0x1    //pix_delay soft reset enable
#define Set_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE(pix_delay_enable,pix_delay_soft_reset) (p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.word = (uint8_t)pix_delay_enable<<0 | (uint8_t)pix_delay_soft_reset<<4)
#define Get_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE() p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.word
#define Set_ISP_CE1_PIXDELAY_1_ISP_CE1_PIXDELAY_1_ENABLE_word(x) (p_ISP_CE1_PIXDELAY_1_IP->ISP_CE1_PIXDELAY_1_ENABLE.word = x)

//ISP_CE1_SPECIALFX_SOL_ENABLE
/*Description: Solarization enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t sfx_sol_enable :1;
        /* Disable solarization*/
        uint8_t reserved0 :3;
        uint8_t sfx_soft_reset :1;
        /* DISABLE_SOFT_RESET*/
    }ISP_CE1_SPECIALFX_SOL_ENABLE_ts;

}ISP_CE1_SPECIALFX_SOL_ENABLE_tu;



//ISP_CE1_SPECIALFX_NEG_ENABLE
/*Description: Negative enable configuration register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t sfx_neg_enable :1;
        /* Disable negative*/
    }ISP_CE1_SPECIALFX_NEG_ENABLE_ts;

}ISP_CE1_SPECIALFX_NEG_ENABLE_tu;

typedef struct
{
    ISP_CE1_SPECIALFX_SOL_ENABLE_tu ISP_CE1_SPECIALFX_SOL_ENABLE;
    ISP_CE1_SPECIALFX_NEG_ENABLE_tu ISP_CE1_SPECIALFX_NEG_ENABLE;
}ISP_CE1_SPECIALFX_IP_ts;




//ISP_CE1_SPECIALFX_SOL_ENABLE


#define Get_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE_sfx_sol_enable() p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.ISP_CE1_SPECIALFX_SOL_ENABLE_ts.sfx_sol_enable
#define Is_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE_sfx_sol_enable_DISABLE_SOLAR() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.ISP_CE1_SPECIALFX_SOL_ENABLE_ts.sfx_sol_enable == sfx_sol_enable_DISABLE_SOLAR)
#define Set_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE_sfx_sol_enable__DISABLE_SOLAR() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.ISP_CE1_SPECIALFX_SOL_ENABLE_ts.sfx_sol_enable = sfx_sol_enable_DISABLE_SOLAR)
#define sfx_sol_enable_DISABLE_SOLAR 0x0    //Disable solarization
#define Is_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE_sfx_sol_enable_ENABLE_SOLAR() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.ISP_CE1_SPECIALFX_SOL_ENABLE_ts.sfx_sol_enable == sfx_sol_enable_ENABLE_SOLAR)
#define Set_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE_sfx_sol_enable__ENABLE_SOLAR() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.ISP_CE1_SPECIALFX_SOL_ENABLE_ts.sfx_sol_enable = sfx_sol_enable_ENABLE_SOLAR)
#define sfx_sol_enable_ENABLE_SOLAR 0x1    //Enable solarization


#define Get_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE_sfx_soft_reset() p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.ISP_CE1_SPECIALFX_SOL_ENABLE_ts.sfx_soft_reset
#define Is_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE_sfx_soft_reset_DISABLE_SOFT_RESET() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.ISP_CE1_SPECIALFX_SOL_ENABLE_ts.sfx_soft_reset == sfx_soft_reset_DISABLE_SOFT_RESET)
#define Set_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE_sfx_soft_reset__DISABLE_SOFT_RESET() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.ISP_CE1_SPECIALFX_SOL_ENABLE_ts.sfx_soft_reset = sfx_soft_reset_DISABLE_SOFT_RESET)
#define sfx_soft_reset_DISABLE_SOFT_RESET 0x0    //DISABLE_SOFT_RESET
#define Is_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE_sfx_soft_reset_ENABLE_SOFT_RESET() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.ISP_CE1_SPECIALFX_SOL_ENABLE_ts.sfx_soft_reset == sfx_soft_reset_ENABLE_SOFT_RESET)
#define Set_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE_sfx_soft_reset__ENABLE_SOFT_RESET() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.ISP_CE1_SPECIALFX_SOL_ENABLE_ts.sfx_soft_reset = sfx_soft_reset_ENABLE_SOFT_RESET)
#define sfx_soft_reset_ENABLE_SOFT_RESET 0x1    //ENABLE_SOFT_RESET
#define Set_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE(sfx_sol_enable,sfx_soft_reset) (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.word = (uint32_t)sfx_sol_enable<<0 | (uint32_t)sfx_soft_reset<<4)
#define Get_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE() p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.word
#define Set_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_SOL_ENABLE_word(x) (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_SOL_ENABLE.word = x)


//ISP_CE1_SPECIALFX_NEG_ENABLE


#define Get_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_NEG_ENABLE_sfx_neg_enable() p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_NEG_ENABLE.ISP_CE1_SPECIALFX_NEG_ENABLE_ts.sfx_neg_enable
#define Is_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_NEG_ENABLE_sfx_neg_enable_DISABLE_NEG() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_NEG_ENABLE.ISP_CE1_SPECIALFX_NEG_ENABLE_ts.sfx_neg_enable == sfx_neg_enable_DISABLE_NEG)
#define Set_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_NEG_ENABLE_sfx_neg_enable__DISABLE_NEG() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_NEG_ENABLE.ISP_CE1_SPECIALFX_NEG_ENABLE_ts.sfx_neg_enable = sfx_neg_enable_DISABLE_NEG)
#define sfx_neg_enable_DISABLE_NEG 0x0    //Disable negative
#define Is_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_NEG_ENABLE_sfx_neg_enable_ENABLE_NEG() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_NEG_ENABLE.ISP_CE1_SPECIALFX_NEG_ENABLE_ts.sfx_neg_enable == sfx_neg_enable_ENABLE_NEG)
#define Set_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_NEG_ENABLE_sfx_neg_enable__ENABLE_NEG() (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_NEG_ENABLE.ISP_CE1_SPECIALFX_NEG_ENABLE_ts.sfx_neg_enable = sfx_neg_enable_ENABLE_NEG)
#define sfx_neg_enable_ENABLE_NEG 0x1    //Enable negative
#define Set_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_NEG_ENABLE(sfx_neg_enable) (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_NEG_ENABLE.word = (uint8_t)sfx_neg_enable<<0)
#define Get_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_NEG_ENABLE() p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_NEG_ENABLE.word
#define Set_ISP_CE1_SPECIALFX_ISP_CE1_SPECIALFX_NEG_ENABLE_word(x) (p_ISP_CE1_SPECIALFX_IP->ISP_CE1_SPECIALFX_NEG_ENABLE.word = x)

//ISP_CE1_DITHER_ENABLE
/*Description: Dither enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable dither*/
    }ISP_CE1_DITHER_ENABLE_ts;

}ISP_CE1_DITHER_ENABLE_tu;



//ISP_CE1_DITHER_GREEN_BITS
/*Description: Dithering level for Green channel
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t iGbits :3;
        /* Level of dithering for Green channel. Correspond to the number of bit used for Green channel*/
    }ISP_CE1_DITHER_GREEN_BITS_ts;

}ISP_CE1_DITHER_GREEN_BITS_tu;



//ISP_CE1_DITHER_REDBLUE_BITS
/*Description: Dithering level for Red and Blue channels
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t iRBbits :3;
        /* Level of dithering for Red/Blue channels. Correspond to the number of bit used for Red/Blue channels*/
    }ISP_CE1_DITHER_REDBLUE_BITS_ts;

}ISP_CE1_DITHER_REDBLUE_BITS_tu;

typedef struct
{
    ISP_CE1_DITHER_ENABLE_tu ISP_CE1_DITHER_ENABLE;
    ISP_CE1_DITHER_GREEN_BITS_tu ISP_CE1_DITHER_GREEN_BITS;
    ISP_CE1_DITHER_REDBLUE_BITS_tu ISP_CE1_DITHER_REDBLUE_BITS;
}ISP_CE1_DITHER_IP_ts;




//ISP_CE1_DITHER_ENABLE


#define Get_ISP_CE1_DITHER_ISP_CE1_DITHER_ENABLE_enable() p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_ENABLE.ISP_CE1_DITHER_ENABLE_ts.enable
#define Is_ISP_CE1_DITHER_ISP_CE1_DITHER_ENABLE_enable_DISABLE() (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_ENABLE.ISP_CE1_DITHER_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE1_DITHER_ISP_CE1_DITHER_ENABLE_enable__DISABLE() (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_ENABLE.ISP_CE1_DITHER_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable dither
#define Is_ISP_CE1_DITHER_ISP_CE1_DITHER_ENABLE_enable_ENABLE() (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_ENABLE.ISP_CE1_DITHER_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE1_DITHER_ISP_CE1_DITHER_ENABLE_enable__ENABLE() (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_ENABLE.ISP_CE1_DITHER_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable dither
#define Set_ISP_CE1_DITHER_ISP_CE1_DITHER_ENABLE(enable) (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_ENABLE.word = (uint32_t)enable<<0)
#define Get_ISP_CE1_DITHER_ISP_CE1_DITHER_ENABLE() p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_ENABLE.word
#define Set_ISP_CE1_DITHER_ISP_CE1_DITHER_ENABLE_word(x) (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_ENABLE.word = x)


//ISP_CE1_DITHER_GREEN_BITS


#define Get_ISP_CE1_DITHER_ISP_CE1_DITHER_GREEN_BITS_iGbits() p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_GREEN_BITS.ISP_CE1_DITHER_GREEN_BITS_ts.iGbits
#define Set_ISP_CE1_DITHER_ISP_CE1_DITHER_GREEN_BITS_iGbits(x) (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_GREEN_BITS.ISP_CE1_DITHER_GREEN_BITS_ts.iGbits = x)
#define Set_ISP_CE1_DITHER_ISP_CE1_DITHER_GREEN_BITS(iGbits) (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_GREEN_BITS.word = (uint32_t)iGbits<<0)
#define Get_ISP_CE1_DITHER_ISP_CE1_DITHER_GREEN_BITS() p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_GREEN_BITS.word
#define Set_ISP_CE1_DITHER_ISP_CE1_DITHER_GREEN_BITS_word(x) (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_GREEN_BITS.word = x)


//ISP_CE1_DITHER_REDBLUE_BITS


#define Get_ISP_CE1_DITHER_ISP_CE1_DITHER_REDBLUE_BITS_iRBbits() p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_REDBLUE_BITS.ISP_CE1_DITHER_REDBLUE_BITS_ts.iRBbits
#define Set_ISP_CE1_DITHER_ISP_CE1_DITHER_REDBLUE_BITS_iRBbits(x) (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_REDBLUE_BITS.ISP_CE1_DITHER_REDBLUE_BITS_ts.iRBbits = x)
#define Set_ISP_CE1_DITHER_ISP_CE1_DITHER_REDBLUE_BITS(iRBbits) (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_REDBLUE_BITS.word = (uint8_t)iRBbits<<0)
#define Get_ISP_CE1_DITHER_ISP_CE1_DITHER_REDBLUE_BITS() p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_REDBLUE_BITS.word
#define Set_ISP_CE1_DITHER_ISP_CE1_DITHER_REDBLUE_BITS_word(x) (p_ISP_CE1_DITHER_IP->ISP_CE1_DITHER_REDBLUE_BITS.word = x)

//ISP_CE1_GPSSCALER_ENABLE
/*Description: Enable Horizontal and or Vertical scaling. Control the soft reset on full GPS state machine.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t h_gps_enable :1;
        /* 
        This bit is used to enable the horizontal scaling function. If this is enabled RGB horizontal scaling will be performed in accordance with parameters below otherwise IDP data out will be the same as IDP data in.*/
        uint8_t v_gps_enable :1;
        /* 
        This bit is used to enable the vertical scaling function. If this is enabled RGB vertical scaling will be performed in accordance with parameters below otherwise IDP data out will be the same as IDP data in.*/
        uint8_t reserved0 :2;
        uint8_t gps_soft_reset :1;
        /* Disable gps_soft_reset module*/
    }ISP_CE1_GPSSCALER_ENABLE_ts;

}ISP_CE1_GPSSCALER_ENABLE_tu;



//ISP_CE1_GPSSCALER_DOWNSCALING
/*Description: Enable dowscaling. If this bit is set to 1, the scaler will work in downscaling mode, else the scaler will work in up-scaling mode.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t gps_downscaling :1;
    }ISP_CE1_GPSSCALER_DOWNSCALING_ts;

}ISP_CE1_GPSSCALER_DOWNSCALING_tu;



//ISP_CE1_GPSSCALER_LR_BORD_PIXS
/*Description: Horizontal left and right border pixels is used to indicate with reference from the left and right hand side of the image which pixels are to be passed as borders.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t h_left_border_pixs;
        uint16_t h_right_border_pixs;
    }ISP_CE1_GPSSCALER_LR_BORD_PIXS_ts;

}ISP_CE1_GPSSCALER_LR_BORD_PIXS_tu;



//ISP_CE1_GPSSCALER_TB_BORD_LINES
/*Description: Vertical top and bottom border pixels is used to indicate with reference from the top and bottom hand side of the image which pixels are to be passed as borders.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t v_top_border_lines;
        uint16_t v_bottom_border_lines;
    }ISP_CE1_GPSSCALER_TB_BORD_LINES_ts;

}ISP_CE1_GPSSCALER_TB_BORD_LINES_tu;



//ISP_CE1_GPSSCALER_H_V_FIRTAPS
/*Description: Horizontal and vertical FIR taps is used to indicate how many taps are used in the FIR filter for the current frame.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t v_fir_taps;
        uint8_t h_fir_taps;
    }ISP_CE1_GPSSCALER_H_V_FIRTAPS_ts;

}ISP_CE1_GPSSCALER_H_V_FIRTAPS_tu;



//ISP_CE1_GPSSCALER_H_V_IPSIZES
/*Description: Horizontal and vertical input size provides the number of active pixels in the input frame.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t v_input_size;
        uint16_t h_input_size;
    }ISP_CE1_GPSSCALER_H_V_IPSIZES_ts;

}ISP_CE1_GPSSCALER_H_V_IPSIZES_tu;



//ISP_CE1_GPSSCALER_H_V_OPSIZES
/*Description: Horizontal and Vertical output size provides the number of active pixels in the output frame.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t v_input_size;
        uint16_t h_input_size;
    }ISP_CE1_GPSSCALER_H_V_OPSIZES_ts;

}ISP_CE1_GPSSCALER_H_V_OPSIZES_tu;



//ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS
/*Description: Horizontal and Vertical log physical polyphases gives the log2 number of physical polyphases which are stored in the coefficient register bank.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t v_log_phys_polys;
        uint8_t h_log_phys_polys;
    }ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_ts;

}ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_tu;



//ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY
/*Description: Horizontal and vertical kickoff delay provides the integer part of the starting phase delay.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t v_kickoff_delay;
        uint8_t h_kickoff_delay;
    }ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_ts;

}ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_tu;



//ISP_CE1_GPSSCALER_H_V_CROPFRAC
/*Description: Horizontal and vertical crop fraction provides the fractional part of the starting phase delay.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t v_crop_frac;
        uint16_t h_crop_frac;
    }ISP_CE1_GPSSCALER_H_V_CROPFRAC_ts;

}ISP_CE1_GPSSCALER_H_V_CROPFRAC_tu;



//ISP_CE1_GPSSCALER_H_V_STEPBULK
/*Description: Horizontal and vertical step bulk provides the integer part of the scaling ratio.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t v_step_bulk;
        uint8_t h_step_bulk;
    }ISP_CE1_GPSSCALER_H_V_STEPBULK_ts;

}ISP_CE1_GPSSCALER_H_V_STEPBULK_tu;



//ISP_CE1_GPSSCALER_H_V_STEPFRAC
/*Description: Horizontal and vertical step bulk provides the fractional part of the scaling ratio.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t v_step_frac;
        uint16_t h_step_frac;
    }ISP_CE1_GPSSCALER_H_V_STEPFRAC_ts;

}ISP_CE1_GPSSCALER_H_V_STEPFRAC_tu;



//ISP_CE1_GPSSCALER_HCOF_0_3
/*Description: Horizontal coefficients 0 to 3, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr3;
        uint8_t h_cof_set_wr2;
        uint8_t h_cof_set_wr1;
        uint8_t h_cof_set_wr0;
    }ISP_CE1_GPSSCALER_HCOF_0_3_ts;

}ISP_CE1_GPSSCALER_HCOF_0_3_tu;



//ISP_CE1_GPSSCALER_HCOF_4_7
/*Description: Horizontal coefficients 4 to 7, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr7;
        uint8_t h_cof_set_wr6;
        uint8_t h_cof_set_wr5;
        uint8_t h_cof_set_wr4;
    }ISP_CE1_GPSSCALER_HCOF_4_7_ts;

}ISP_CE1_GPSSCALER_HCOF_4_7_tu;



//ISP_CE1_GPSSCALER_HCOF_8_11
/*Description: Horizontal coefficients 8 to 11, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr11;
        uint8_t h_cof_set_wr10;
        uint8_t h_cof_set_wr9;
        uint8_t h_cof_set_wr8;
    }ISP_CE1_GPSSCALER_HCOF_8_11_ts;

}ISP_CE1_GPSSCALER_HCOF_8_11_tu;



//ISP_CE1_GPSSCALER_HCOF_12_15
/*Description: Horizontal coefficients 12 to 15, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr15;
        uint8_t h_cof_set_wr14;
        uint8_t h_cof_set_wr13;
        uint8_t h_cof_set_wr12;
    }ISP_CE1_GPSSCALER_HCOF_12_15_ts;

}ISP_CE1_GPSSCALER_HCOF_12_15_tu;



//ISP_CE1_GPSSCALER_HCOF_16_19
/*Description: Horizontal coefficients 16 to 19, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr19;
        uint8_t h_cof_set_wr18;
        uint8_t h_cof_set_wr17;
        uint8_t h_cof_set_wr16;
    }ISP_CE1_GPSSCALER_HCOF_16_19_ts;

}ISP_CE1_GPSSCALER_HCOF_16_19_tu;



//ISP_CE1_GPSSCALER_HCOF_20_23
/*Description: Horizontal coefficients 20 to 23, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr23;
        uint8_t h_cof_set_wr22;
        uint8_t h_cof_set_wr21;
        uint8_t h_cof_set_wr20;
    }ISP_CE1_GPSSCALER_HCOF_20_23_ts;

}ISP_CE1_GPSSCALER_HCOF_20_23_tu;



//ISP_CE1_GPSSCALER_HCOF_24_27
/*Description: Horizontal coefficients 24 to 27, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr27;
        uint8_t h_cof_set_wr26;
        uint8_t h_cof_set_wr25;
        uint8_t h_cof_set_wr24;
    }ISP_CE1_GPSSCALER_HCOF_24_27_ts;

}ISP_CE1_GPSSCALER_HCOF_24_27_tu;



//ISP_CE1_GPSSCALER_HCOF_28_31
/*Description: Horizontal coefficients 28 to 31, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr31;
        uint8_t h_cof_set_wr30;
        uint8_t h_cof_set_wr29;
        uint8_t h_cof_set_wr28;
    }ISP_CE1_GPSSCALER_HCOF_28_31_ts;

}ISP_CE1_GPSSCALER_HCOF_28_31_tu;



//ISP_CE1_GPSSCALER_HCOF_32_35
/*Description: Horizontal coefficients 32 to 35, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr35;
        uint8_t h_cof_set_wr34;
        uint8_t h_cof_set_wr33;
        uint8_t h_cof_set_wr32;
    }ISP_CE1_GPSSCALER_HCOF_32_35_ts;

}ISP_CE1_GPSSCALER_HCOF_32_35_tu;



//ISP_CE1_GPSSCALER_HCOF_36_39
/*Description: Horizontal coefficients 36 to 39, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr39;
        uint8_t h_cof_set_wr38;
        uint8_t h_cof_set_wr37;
        uint8_t h_cof_set_wr36;
    }ISP_CE1_GPSSCALER_HCOF_36_39_ts;

}ISP_CE1_GPSSCALER_HCOF_36_39_tu;



//ISP_CE1_GPSSCALER_HCOF_40_43
/*Description: Horizontal coefficients 40 to 43, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr43;
        uint8_t h_cof_set_wr42;
        uint8_t h_cof_set_wr41;
        uint8_t h_cof_set_wr40;
    }ISP_CE1_GPSSCALER_HCOF_40_43_ts;

}ISP_CE1_GPSSCALER_HCOF_40_43_tu;



//ISP_CE1_GPSSCALER_HCOF_44_47
/*Description: Horizontal coefficients 44 to 47, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr47;
        uint8_t h_cof_set_wr46;
        uint8_t h_cof_set_wr45;
        uint8_t h_cof_set_wr44;
    }ISP_CE1_GPSSCALER_HCOF_44_47_ts;

}ISP_CE1_GPSSCALER_HCOF_44_47_tu;



//ISP_CE1_GPSSCALER_HCOF_48_51
/*Description: Horizontal coefficients 48 to 51, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr51;
        uint8_t h_cof_set_wr50;
        uint8_t h_cof_set_wr49;
        uint8_t h_cof_set_wr48;
    }ISP_CE1_GPSSCALER_HCOF_48_51_ts;

}ISP_CE1_GPSSCALER_HCOF_48_51_tu;



//ISP_CE1_GPSSCALER_HCOF_52_55
/*Description: Horizontal coefficients 52 to 55, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr55;
        uint8_t h_cof_set_wr54;
        uint8_t h_cof_set_wr53;
        uint8_t h_cof_set_wr52;
    }ISP_CE1_GPSSCALER_HCOF_52_55_ts;

}ISP_CE1_GPSSCALER_HCOF_52_55_tu;



//ISP_CE1_GPSSCALER_HCOF_56_59
/*Description: Horizontal coefficients 56 to 59, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr59;
        uint8_t h_cof_set_wr58;
        uint8_t h_cof_set_wr57;
        uint8_t h_cof_set_wr56;
    }ISP_CE1_GPSSCALER_HCOF_56_59_ts;

}ISP_CE1_GPSSCALER_HCOF_56_59_tu;



//ISP_CE1_GPSSCALER_HCOF_60_63
/*Description: Horizontal coefficients 60 to 63, set is the parallel bus of horizontal filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t h_cof_set_wr63;
        uint8_t h_cof_set_wr62;
        uint8_t h_cof_set_wr61;
        uint8_t h_cof_set_wr60;
    }ISP_CE1_GPSSCALER_HCOF_60_63_ts;

}ISP_CE1_GPSSCALER_HCOF_60_63_tu;



//ISP_CE1_GPSSCALER_VCOF_0_3
/*Description: Vertical coefficients 0 to 3, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr3;
        uint8_t v_cof_set_wr2;
        uint8_t v_cof_set_wr1;
        uint8_t v_cof_set_wr0;
    }ISP_CE1_GPSSCALER_VCOF_0_3_ts;

}ISP_CE1_GPSSCALER_VCOF_0_3_tu;



//ISP_CE1_GPSSCALER_VCOF_4_7
/*Description: Vertical coefficients 4 to 7, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr7;
        uint8_t v_cof_set_wr6;
        uint8_t v_cof_set_wr5;
        uint8_t v_cof_set_wr4;
    }ISP_CE1_GPSSCALER_VCOF_4_7_ts;

}ISP_CE1_GPSSCALER_VCOF_4_7_tu;



//ISP_CE1_GPSSCALER_VCOF_8_11
/*Description: Vertical coefficients 8 to 11, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr11;
        uint8_t v_cof_set_wr10;
        uint8_t v_cof_set_wr9;
        uint8_t v_cof_set_wr8;
    }ISP_CE1_GPSSCALER_VCOF_8_11_ts;

}ISP_CE1_GPSSCALER_VCOF_8_11_tu;



//ISP_CE1_GPSSCALER_VCOF_12_15
/*Description: Vertical coefficients 12 to 17, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr15;
        uint8_t v_cof_set_wr14;
        uint8_t v_cof_set_wr13;
        uint8_t v_cof_set_wr12;
    }ISP_CE1_GPSSCALER_VCOF_12_15_ts;

}ISP_CE1_GPSSCALER_VCOF_12_15_tu;



//ISP_CE1_GPSSCALER_VCOF_16_19
/*Description: Vertical coefficients 16 to 19, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr19;
        uint8_t v_cof_set_wr18;
        uint8_t v_cof_set_wr17;
        uint8_t v_cof_set_wr16;
    }ISP_CE1_GPSSCALER_VCOF_16_19_ts;

}ISP_CE1_GPSSCALER_VCOF_16_19_tu;



//ISP_CE1_GPSSCALER_VCOF_20_23
/*Description: Vertical coefficients 20 to 23, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr23;
        uint8_t v_cof_set_wr22;
        uint8_t v_cof_set_wr21;
        uint8_t v_cof_set_wr20;
    }ISP_CE1_GPSSCALER_VCOF_20_23_ts;

}ISP_CE1_GPSSCALER_VCOF_20_23_tu;



//ISP_CE1_GPSSCALER_VCOF_24_27
/*Description: Vertical coefficients 24 to 27, set is the parallel bus of vertical filter coefficients
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr27;
        uint8_t v_cof_set_wr26;
        uint8_t v_cof_set_wr25;
        uint8_t v_cof_set_wr24;
    }ISP_CE1_GPSSCALER_VCOF_24_27_ts;

}ISP_CE1_GPSSCALER_VCOF_24_27_tu;



//ISP_CE1_GPSSCALER_VCOF_28_31
/*Description: Vertical coefficients 28 to 31, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr31;
        uint8_t v_cof_set_wr30;
        uint8_t v_cof_set_wr29;
        uint8_t v_cof_set_wr28;
    }ISP_CE1_GPSSCALER_VCOF_28_31_ts;

}ISP_CE1_GPSSCALER_VCOF_28_31_tu;



//ISP_CE1_GPSSCALER_VCOF_32_35
/*Description: Vertical coefficients 32 to 35, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr35;
        uint8_t v_cof_set_wr34;
        uint8_t v_cof_set_wr33;
        uint8_t v_cof_set_wr32;
    }ISP_CE1_GPSSCALER_VCOF_32_35_ts;

}ISP_CE1_GPSSCALER_VCOF_32_35_tu;



//ISP_CE1_GPSSCALER_VCOF_36_39
/*Description: Vertical coefficients 36 to 39, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr39;
        uint8_t v_cof_set_wr38;
        uint8_t v_cof_set_wr37;
        uint8_t v_cof_set_wr36;
    }ISP_CE1_GPSSCALER_VCOF_36_39_ts;

}ISP_CE1_GPSSCALER_VCOF_36_39_tu;



//ISP_CE1_GPSSCALER_VCOF_40_43
/*Description: Vertical coefficients 40 to 43, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr43;
        uint8_t v_cof_set_wr42;
        uint8_t v_cof_set_wr41;
        uint8_t v_cof_set_wr40;
    }ISP_CE1_GPSSCALER_VCOF_40_43_ts;

}ISP_CE1_GPSSCALER_VCOF_40_43_tu;



//ISP_CE1_GPSSCALER_VCOF_44_47
/*Description: Vertical coefficients 44 to 47, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr47;
        uint8_t v_cof_set_wr46;
        uint8_t v_cof_set_wr45;
        uint8_t v_cof_set_wr44;
    }ISP_CE1_GPSSCALER_VCOF_44_47_ts;

}ISP_CE1_GPSSCALER_VCOF_44_47_tu;



//ISP_CE1_GPSSCALER_VCOF_48_51
/*Description: Vertical coefficients 48 to 51, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr51;
        uint8_t v_cof_set_wr50;
        uint8_t v_cof_set_wr49;
        uint8_t v_cof_set_wr48;
    }ISP_CE1_GPSSCALER_VCOF_48_51_ts;

}ISP_CE1_GPSSCALER_VCOF_48_51_tu;



//ISP_CE1_GPSSCALER_VCOF_52_55
/*Description: Vertical coefficients 52 to 55, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr55;
        uint8_t v_cof_set_wr54;
        uint8_t v_cof_set_wr53;
        uint8_t v_cof_set_wr52;
    }ISP_CE1_GPSSCALER_VCOF_52_55_ts;

}ISP_CE1_GPSSCALER_VCOF_52_55_tu;



//ISP_CE1_GPSSCALER_VCOF_56_59
/*Description: Vertical coefficients 56 to 59, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr59;
        uint8_t v_cof_set_wr58;
        uint8_t v_cof_set_wr57;
        uint8_t v_cof_set_wr56;
    }ISP_CE1_GPSSCALER_VCOF_56_59_ts;

}ISP_CE1_GPSSCALER_VCOF_56_59_tu;



//ISP_CE1_GPSSCALER_VCOF_60_63
/*Description: Vertical coefficients 60 to 63, set is the parallel bus of vertical filter coefficients.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t v_cof_set_wr63;
        uint8_t v_cof_set_wr62;
        uint8_t v_cof_set_wr61;
        uint8_t v_cof_set_wr60;
    }ISP_CE1_GPSSCALER_VCOF_60_63_ts;

}ISP_CE1_GPSSCALER_VCOF_60_63_tu;

typedef struct
{
    ISP_CE1_GPSSCALER_ENABLE_tu ISP_CE1_GPSSCALER_ENABLE;
    ISP_CE1_GPSSCALER_DOWNSCALING_tu ISP_CE1_GPSSCALER_DOWNSCALING;
    ISP_CE1_GPSSCALER_LR_BORD_PIXS_tu ISP_CE1_GPSSCALER_LR_BORD_PIXS;
    ISP_CE1_GPSSCALER_TB_BORD_LINES_tu ISP_CE1_GPSSCALER_TB_BORD_LINES;
    ISP_CE1_GPSSCALER_H_V_FIRTAPS_tu ISP_CE1_GPSSCALER_H_V_FIRTAPS;
    ISP_CE1_GPSSCALER_H_V_IPSIZES_tu ISP_CE1_GPSSCALER_H_V_IPSIZES;
    ISP_CE1_GPSSCALER_H_V_OPSIZES_tu ISP_CE1_GPSSCALER_H_V_OPSIZES;
    ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_tu ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS;
    ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_tu ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY;
    ISP_CE1_GPSSCALER_H_V_CROPFRAC_tu ISP_CE1_GPSSCALER_H_V_CROPFRAC;
    ISP_CE1_GPSSCALER_H_V_STEPBULK_tu ISP_CE1_GPSSCALER_H_V_STEPBULK;
    ISP_CE1_GPSSCALER_H_V_STEPFRAC_tu ISP_CE1_GPSSCALER_H_V_STEPFRAC;
    ISP_CE1_GPSSCALER_HCOF_0_3_tu ISP_CE1_GPSSCALER_HCOF_0_3;
    ISP_CE1_GPSSCALER_HCOF_4_7_tu ISP_CE1_GPSSCALER_HCOF_4_7;
    ISP_CE1_GPSSCALER_HCOF_8_11_tu ISP_CE1_GPSSCALER_HCOF_8_11;
    ISP_CE1_GPSSCALER_HCOF_12_15_tu ISP_CE1_GPSSCALER_HCOF_12_15;
    ISP_CE1_GPSSCALER_HCOF_16_19_tu ISP_CE1_GPSSCALER_HCOF_16_19;
    ISP_CE1_GPSSCALER_HCOF_20_23_tu ISP_CE1_GPSSCALER_HCOF_20_23;
    ISP_CE1_GPSSCALER_HCOF_24_27_tu ISP_CE1_GPSSCALER_HCOF_24_27;
    ISP_CE1_GPSSCALER_HCOF_28_31_tu ISP_CE1_GPSSCALER_HCOF_28_31;
    ISP_CE1_GPSSCALER_HCOF_32_35_tu ISP_CE1_GPSSCALER_HCOF_32_35;
    ISP_CE1_GPSSCALER_HCOF_36_39_tu ISP_CE1_GPSSCALER_HCOF_36_39;
    ISP_CE1_GPSSCALER_HCOF_40_43_tu ISP_CE1_GPSSCALER_HCOF_40_43;
    ISP_CE1_GPSSCALER_HCOF_44_47_tu ISP_CE1_GPSSCALER_HCOF_44_47;
    ISP_CE1_GPSSCALER_HCOF_48_51_tu ISP_CE1_GPSSCALER_HCOF_48_51;
    ISP_CE1_GPSSCALER_HCOF_52_55_tu ISP_CE1_GPSSCALER_HCOF_52_55;
    ISP_CE1_GPSSCALER_HCOF_56_59_tu ISP_CE1_GPSSCALER_HCOF_56_59;
    ISP_CE1_GPSSCALER_HCOF_60_63_tu ISP_CE1_GPSSCALER_HCOF_60_63;
    ISP_CE1_GPSSCALER_VCOF_0_3_tu ISP_CE1_GPSSCALER_VCOF_0_3;
    ISP_CE1_GPSSCALER_VCOF_4_7_tu ISP_CE1_GPSSCALER_VCOF_4_7;
    ISP_CE1_GPSSCALER_VCOF_8_11_tu ISP_CE1_GPSSCALER_VCOF_8_11;
    ISP_CE1_GPSSCALER_VCOF_12_15_tu ISP_CE1_GPSSCALER_VCOF_12_15;
    ISP_CE1_GPSSCALER_VCOF_16_19_tu ISP_CE1_GPSSCALER_VCOF_16_19;
    ISP_CE1_GPSSCALER_VCOF_20_23_tu ISP_CE1_GPSSCALER_VCOF_20_23;
    ISP_CE1_GPSSCALER_VCOF_24_27_tu ISP_CE1_GPSSCALER_VCOF_24_27;
    ISP_CE1_GPSSCALER_VCOF_28_31_tu ISP_CE1_GPSSCALER_VCOF_28_31;
    ISP_CE1_GPSSCALER_VCOF_32_35_tu ISP_CE1_GPSSCALER_VCOF_32_35;
    ISP_CE1_GPSSCALER_VCOF_36_39_tu ISP_CE1_GPSSCALER_VCOF_36_39;
    ISP_CE1_GPSSCALER_VCOF_40_43_tu ISP_CE1_GPSSCALER_VCOF_40_43;
    ISP_CE1_GPSSCALER_VCOF_44_47_tu ISP_CE1_GPSSCALER_VCOF_44_47;
    ISP_CE1_GPSSCALER_VCOF_48_51_tu ISP_CE1_GPSSCALER_VCOF_48_51;
    ISP_CE1_GPSSCALER_VCOF_52_55_tu ISP_CE1_GPSSCALER_VCOF_52_55;
    ISP_CE1_GPSSCALER_VCOF_56_59_tu ISP_CE1_GPSSCALER_VCOF_56_59;
    ISP_CE1_GPSSCALER_VCOF_60_63_tu ISP_CE1_GPSSCALER_VCOF_60_63;
}ISP_CE1_GPSSCALER_IP_ts;




//ISP_CE1_GPSSCALER_ENABLE


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_h_gps_enable() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.h_gps_enable
#define Is_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_h_gps_enable_DISABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.h_gps_enable == h_gps_enable_DISABLE)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_h_gps_enable__DISABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.h_gps_enable = h_gps_enable_DISABLE)
#define h_gps_enable_DISABLE 0x0    //Disable horizontal scaling
#define Is_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_h_gps_enable_ENABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.h_gps_enable == h_gps_enable_ENABLE)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_h_gps_enable__ENABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.h_gps_enable = h_gps_enable_ENABLE)
#define h_gps_enable_ENABLE 0x1    //Enable horizontal scaling


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_v_gps_enable() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.v_gps_enable
#define Is_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_v_gps_enable_DISABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.v_gps_enable == v_gps_enable_DISABLE)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_v_gps_enable__DISABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.v_gps_enable = v_gps_enable_DISABLE)
#define v_gps_enable_DISABLE 0x0    //Disable vertical scaling
#define Is_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_v_gps_enable_ENABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.v_gps_enable == v_gps_enable_ENABLE)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_v_gps_enable__ENABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.v_gps_enable = v_gps_enable_ENABLE)
#define v_gps_enable_ENABLE 0x1    //Enable vertical scaling


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_gps_soft_reset() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.gps_soft_reset
#define Is_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_gps_soft_reset_DISABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.gps_soft_reset == gps_soft_reset_DISABLE)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_gps_soft_reset__DISABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.gps_soft_reset = gps_soft_reset_DISABLE)
#define gps_soft_reset_DISABLE 0x0    //Disable gps_soft_reset module
#define Is_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_gps_soft_reset_ENABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.gps_soft_reset == gps_soft_reset_ENABLE)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_gps_soft_reset__ENABLE() (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.ISP_CE1_GPSSCALER_ENABLE_ts.gps_soft_reset = gps_soft_reset_ENABLE)
#define gps_soft_reset_ENABLE 0x1    //Enable gps_soft_reset module
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE(h_gps_enable,v_gps_enable,gps_soft_reset) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.word = (uint32_t)h_gps_enable<<0 | (uint32_t)v_gps_enable<<1 | (uint32_t)gps_soft_reset<<4)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_ENABLE_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_ENABLE.word = x)


//ISP_CE1_GPSSCALER_DOWNSCALING


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_DOWNSCALING_gps_downscaling() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_DOWNSCALING.ISP_CE1_GPSSCALER_DOWNSCALING_ts.gps_downscaling
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_DOWNSCALING_gps_downscaling(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_DOWNSCALING.ISP_CE1_GPSSCALER_DOWNSCALING_ts.gps_downscaling = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_DOWNSCALING(gps_downscaling) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_DOWNSCALING.word = (uint32_t)gps_downscaling<<0)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_DOWNSCALING() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_DOWNSCALING.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_DOWNSCALING_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_DOWNSCALING.word = x)


//ISP_CE1_GPSSCALER_LR_BORD_PIXS


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_LR_BORD_PIXS_h_left_border_pixs() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_LR_BORD_PIXS.ISP_CE1_GPSSCALER_LR_BORD_PIXS_ts.h_left_border_pixs
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_LR_BORD_PIXS_h_left_border_pixs(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_LR_BORD_PIXS.ISP_CE1_GPSSCALER_LR_BORD_PIXS_ts.h_left_border_pixs = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_LR_BORD_PIXS_h_right_border_pixs() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_LR_BORD_PIXS.ISP_CE1_GPSSCALER_LR_BORD_PIXS_ts.h_right_border_pixs
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_LR_BORD_PIXS_h_right_border_pixs(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_LR_BORD_PIXS.ISP_CE1_GPSSCALER_LR_BORD_PIXS_ts.h_right_border_pixs = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_LR_BORD_PIXS(h_left_border_pixs,h_right_border_pixs) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_LR_BORD_PIXS.word = (uint32_t)h_left_border_pixs<<0 | (uint32_t)h_right_border_pixs<<16)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_LR_BORD_PIXS() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_LR_BORD_PIXS.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_LR_BORD_PIXS_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_LR_BORD_PIXS.word = x)


//ISP_CE1_GPSSCALER_TB_BORD_LINES


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_TB_BORD_LINES_v_top_border_lines() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_TB_BORD_LINES.ISP_CE1_GPSSCALER_TB_BORD_LINES_ts.v_top_border_lines
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_TB_BORD_LINES_v_top_border_lines(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_TB_BORD_LINES.ISP_CE1_GPSSCALER_TB_BORD_LINES_ts.v_top_border_lines = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_TB_BORD_LINES_v_bottom_border_lines() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_TB_BORD_LINES.ISP_CE1_GPSSCALER_TB_BORD_LINES_ts.v_bottom_border_lines
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_TB_BORD_LINES_v_bottom_border_lines(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_TB_BORD_LINES.ISP_CE1_GPSSCALER_TB_BORD_LINES_ts.v_bottom_border_lines = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_TB_BORD_LINES(v_top_border_lines,v_bottom_border_lines) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_TB_BORD_LINES.word = (uint32_t)v_top_border_lines<<0 | (uint32_t)v_bottom_border_lines<<16)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_TB_BORD_LINES() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_TB_BORD_LINES.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_TB_BORD_LINES_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_TB_BORD_LINES.word = x)


//ISP_CE1_GPSSCALER_H_V_FIRTAPS


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_FIRTAPS_v_fir_taps() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_FIRTAPS.ISP_CE1_GPSSCALER_H_V_FIRTAPS_ts.v_fir_taps
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_FIRTAPS_v_fir_taps(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_FIRTAPS.ISP_CE1_GPSSCALER_H_V_FIRTAPS_ts.v_fir_taps = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_FIRTAPS_h_fir_taps() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_FIRTAPS.ISP_CE1_GPSSCALER_H_V_FIRTAPS_ts.h_fir_taps
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_FIRTAPS_h_fir_taps(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_FIRTAPS.ISP_CE1_GPSSCALER_H_V_FIRTAPS_ts.h_fir_taps = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_FIRTAPS(v_fir_taps,h_fir_taps) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_FIRTAPS.word = (uint32_t)v_fir_taps<<0 | (uint32_t)h_fir_taps<<8)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_FIRTAPS() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_FIRTAPS.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_FIRTAPS_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_FIRTAPS.word = x)


//ISP_CE1_GPSSCALER_H_V_IPSIZES


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_IPSIZES_v_input_size() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_IPSIZES.ISP_CE1_GPSSCALER_H_V_IPSIZES_ts.v_input_size
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_IPSIZES_v_input_size(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_IPSIZES.ISP_CE1_GPSSCALER_H_V_IPSIZES_ts.v_input_size = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_IPSIZES_h_input_size() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_IPSIZES.ISP_CE1_GPSSCALER_H_V_IPSIZES_ts.h_input_size
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_IPSIZES_h_input_size(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_IPSIZES.ISP_CE1_GPSSCALER_H_V_IPSIZES_ts.h_input_size = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_IPSIZES(v_input_size,h_input_size) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_IPSIZES.word = (uint32_t)v_input_size<<0 | (uint32_t)h_input_size<<16)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_IPSIZES() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_IPSIZES.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_IPSIZES_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_IPSIZES.word = x)


//ISP_CE1_GPSSCALER_H_V_OPSIZES


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_OPSIZES_v_input_size() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_OPSIZES.ISP_CE1_GPSSCALER_H_V_OPSIZES_ts.v_input_size
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_OPSIZES_v_input_size(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_OPSIZES.ISP_CE1_GPSSCALER_H_V_OPSIZES_ts.v_input_size = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_OPSIZES_h_input_size() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_OPSIZES.ISP_CE1_GPSSCALER_H_V_OPSIZES_ts.h_input_size
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_OPSIZES_h_input_size(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_OPSIZES.ISP_CE1_GPSSCALER_H_V_OPSIZES_ts.h_input_size = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_OPSIZES(v_input_size,h_input_size) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_OPSIZES.word = (uint32_t)v_input_size<<0 | (uint32_t)h_input_size<<16)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_OPSIZES() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_OPSIZES.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_OPSIZES_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_OPSIZES.word = x)


//ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_v_log_phys_polys() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS.ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_ts.v_log_phys_polys
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_v_log_phys_polys(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS.ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_ts.v_log_phys_polys = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_h_log_phys_polys() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS.ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_ts.h_log_phys_polys
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_h_log_phys_polys(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS.ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_ts.h_log_phys_polys = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS(v_log_phys_polys,h_log_phys_polys) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS.word = (uint32_t)v_log_phys_polys<<0 | (uint32_t)h_log_phys_polys<<8)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_LOGPHYSPOLYS.word = x)


//ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_v_kickoff_delay() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY.ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_ts.v_kickoff_delay
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_v_kickoff_delay(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY.ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_ts.v_kickoff_delay = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_h_kickoff_delay() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY.ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_ts.h_kickoff_delay
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_h_kickoff_delay(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY.ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_ts.h_kickoff_delay = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY(v_kickoff_delay,h_kickoff_delay) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY.word = (uint32_t)v_kickoff_delay<<0 | (uint32_t)h_kickoff_delay<<8)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_KICKOFF_DLY.word = x)


//ISP_CE1_GPSSCALER_H_V_CROPFRAC


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_CROPFRAC_v_crop_frac() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_CROPFRAC.ISP_CE1_GPSSCALER_H_V_CROPFRAC_ts.v_crop_frac
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_CROPFRAC_v_crop_frac(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_CROPFRAC.ISP_CE1_GPSSCALER_H_V_CROPFRAC_ts.v_crop_frac = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_CROPFRAC_h_crop_frac() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_CROPFRAC.ISP_CE1_GPSSCALER_H_V_CROPFRAC_ts.h_crop_frac
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_CROPFRAC_h_crop_frac(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_CROPFRAC.ISP_CE1_GPSSCALER_H_V_CROPFRAC_ts.h_crop_frac = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_CROPFRAC(v_crop_frac,h_crop_frac) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_CROPFRAC.word = (uint32_t)v_crop_frac<<0 | (uint32_t)h_crop_frac<<16)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_CROPFRAC() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_CROPFRAC.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_CROPFRAC_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_CROPFRAC.word = x)


//ISP_CE1_GPSSCALER_H_V_STEPBULK


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPBULK_v_step_bulk() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPBULK.ISP_CE1_GPSSCALER_H_V_STEPBULK_ts.v_step_bulk
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPBULK_v_step_bulk(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPBULK.ISP_CE1_GPSSCALER_H_V_STEPBULK_ts.v_step_bulk = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPBULK_h_step_bulk() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPBULK.ISP_CE1_GPSSCALER_H_V_STEPBULK_ts.h_step_bulk
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPBULK_h_step_bulk(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPBULK.ISP_CE1_GPSSCALER_H_V_STEPBULK_ts.h_step_bulk = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPBULK(v_step_bulk,h_step_bulk) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPBULK.word = (uint32_t)v_step_bulk<<0 | (uint32_t)h_step_bulk<<8)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPBULK() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPBULK.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPBULK_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPBULK.word = x)


//ISP_CE1_GPSSCALER_H_V_STEPFRAC


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPFRAC_v_step_frac() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPFRAC.ISP_CE1_GPSSCALER_H_V_STEPFRAC_ts.v_step_frac
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPFRAC_v_step_frac(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPFRAC.ISP_CE1_GPSSCALER_H_V_STEPFRAC_ts.v_step_frac = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPFRAC_h_step_frac() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPFRAC.ISP_CE1_GPSSCALER_H_V_STEPFRAC_ts.h_step_frac
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPFRAC_h_step_frac(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPFRAC.ISP_CE1_GPSSCALER_H_V_STEPFRAC_ts.h_step_frac = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPFRAC(v_step_frac,h_step_frac) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPFRAC.word = (uint32_t)v_step_frac<<0 | (uint32_t)h_step_frac<<16)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPFRAC() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPFRAC.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_H_V_STEPFRAC_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_H_V_STEPFRAC.word = x)


//ISP_CE1_GPSSCALER_HCOF_0_3


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_0_3_h_cof_set_wr3() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_0_3.ISP_CE1_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr3
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_0_3_h_cof_set_wr3(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_0_3.ISP_CE1_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr3 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_0_3_h_cof_set_wr2() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_0_3.ISP_CE1_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr2
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_0_3_h_cof_set_wr2(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_0_3.ISP_CE1_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr2 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_0_3_h_cof_set_wr1() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_0_3.ISP_CE1_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr1
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_0_3_h_cof_set_wr1(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_0_3.ISP_CE1_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr1 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_0_3_h_cof_set_wr0() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_0_3.ISP_CE1_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr0
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_0_3_h_cof_set_wr0(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_0_3.ISP_CE1_GPSSCALER_HCOF_0_3_ts.h_cof_set_wr0 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_0_3(h_cof_set_wr3,h_cof_set_wr2,h_cof_set_wr1,h_cof_set_wr0) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_0_3.word = (uint32_t)h_cof_set_wr3<<0 | (uint32_t)h_cof_set_wr2<<8 | (uint32_t)h_cof_set_wr1<<16 | (uint32_t)h_cof_set_wr0<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_0_3() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_0_3.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_0_3_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_0_3.word = x)


//ISP_CE1_GPSSCALER_HCOF_4_7


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_4_7_h_cof_set_wr7() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_4_7.ISP_CE1_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr7
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_4_7_h_cof_set_wr7(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_4_7.ISP_CE1_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr7 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_4_7_h_cof_set_wr6() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_4_7.ISP_CE1_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr6
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_4_7_h_cof_set_wr6(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_4_7.ISP_CE1_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr6 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_4_7_h_cof_set_wr5() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_4_7.ISP_CE1_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr5
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_4_7_h_cof_set_wr5(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_4_7.ISP_CE1_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr5 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_4_7_h_cof_set_wr4() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_4_7.ISP_CE1_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr4
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_4_7_h_cof_set_wr4(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_4_7.ISP_CE1_GPSSCALER_HCOF_4_7_ts.h_cof_set_wr4 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_4_7(h_cof_set_wr7,h_cof_set_wr6,h_cof_set_wr5,h_cof_set_wr4) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_4_7.word = (uint32_t)h_cof_set_wr7<<0 | (uint32_t)h_cof_set_wr6<<8 | (uint32_t)h_cof_set_wr5<<16 | (uint32_t)h_cof_set_wr4<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_4_7() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_4_7.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_4_7_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_4_7.word = x)


//ISP_CE1_GPSSCALER_HCOF_8_11


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_8_11_h_cof_set_wr11() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_8_11.ISP_CE1_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr11
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_8_11_h_cof_set_wr11(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_8_11.ISP_CE1_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr11 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_8_11_h_cof_set_wr10() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_8_11.ISP_CE1_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr10
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_8_11_h_cof_set_wr10(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_8_11.ISP_CE1_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr10 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_8_11_h_cof_set_wr9() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_8_11.ISP_CE1_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr9
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_8_11_h_cof_set_wr9(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_8_11.ISP_CE1_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr9 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_8_11_h_cof_set_wr8() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_8_11.ISP_CE1_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr8
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_8_11_h_cof_set_wr8(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_8_11.ISP_CE1_GPSSCALER_HCOF_8_11_ts.h_cof_set_wr8 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_8_11(h_cof_set_wr11,h_cof_set_wr10,h_cof_set_wr9,h_cof_set_wr8) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_8_11.word = (uint32_t)h_cof_set_wr11<<0 | (uint32_t)h_cof_set_wr10<<8 | (uint32_t)h_cof_set_wr9<<16 | (uint32_t)h_cof_set_wr8<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_8_11() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_8_11.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_8_11_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_8_11.word = x)


//ISP_CE1_GPSSCALER_HCOF_12_15


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_12_15_h_cof_set_wr15() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_12_15.ISP_CE1_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr15
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_12_15_h_cof_set_wr15(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_12_15.ISP_CE1_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr15 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_12_15_h_cof_set_wr14() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_12_15.ISP_CE1_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr14
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_12_15_h_cof_set_wr14(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_12_15.ISP_CE1_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr14 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_12_15_h_cof_set_wr13() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_12_15.ISP_CE1_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr13
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_12_15_h_cof_set_wr13(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_12_15.ISP_CE1_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr13 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_12_15_h_cof_set_wr12() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_12_15.ISP_CE1_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr12
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_12_15_h_cof_set_wr12(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_12_15.ISP_CE1_GPSSCALER_HCOF_12_15_ts.h_cof_set_wr12 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_12_15(h_cof_set_wr15,h_cof_set_wr14,h_cof_set_wr13,h_cof_set_wr12) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_12_15.word = (uint32_t)h_cof_set_wr15<<0 | (uint32_t)h_cof_set_wr14<<8 | (uint32_t)h_cof_set_wr13<<16 | (uint32_t)h_cof_set_wr12<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_12_15() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_12_15.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_12_15_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_12_15.word = x)


//ISP_CE1_GPSSCALER_HCOF_16_19


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_16_19_h_cof_set_wr19() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_16_19.ISP_CE1_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr19
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_16_19_h_cof_set_wr19(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_16_19.ISP_CE1_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr19 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_16_19_h_cof_set_wr18() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_16_19.ISP_CE1_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr18
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_16_19_h_cof_set_wr18(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_16_19.ISP_CE1_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr18 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_16_19_h_cof_set_wr17() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_16_19.ISP_CE1_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr17
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_16_19_h_cof_set_wr17(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_16_19.ISP_CE1_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr17 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_16_19_h_cof_set_wr16() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_16_19.ISP_CE1_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr16
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_16_19_h_cof_set_wr16(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_16_19.ISP_CE1_GPSSCALER_HCOF_16_19_ts.h_cof_set_wr16 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_16_19(h_cof_set_wr19,h_cof_set_wr18,h_cof_set_wr17,h_cof_set_wr16) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_16_19.word = (uint32_t)h_cof_set_wr19<<0 | (uint32_t)h_cof_set_wr18<<8 | (uint32_t)h_cof_set_wr17<<16 | (uint32_t)h_cof_set_wr16<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_16_19() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_16_19.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_16_19_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_16_19.word = x)


//ISP_CE1_GPSSCALER_HCOF_20_23


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_20_23_h_cof_set_wr23() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_20_23.ISP_CE1_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr23
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_20_23_h_cof_set_wr23(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_20_23.ISP_CE1_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr23 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_20_23_h_cof_set_wr22() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_20_23.ISP_CE1_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr22
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_20_23_h_cof_set_wr22(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_20_23.ISP_CE1_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr22 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_20_23_h_cof_set_wr21() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_20_23.ISP_CE1_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr21
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_20_23_h_cof_set_wr21(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_20_23.ISP_CE1_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr21 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_20_23_h_cof_set_wr20() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_20_23.ISP_CE1_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr20
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_20_23_h_cof_set_wr20(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_20_23.ISP_CE1_GPSSCALER_HCOF_20_23_ts.h_cof_set_wr20 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_20_23(h_cof_set_wr23,h_cof_set_wr22,h_cof_set_wr21,h_cof_set_wr20) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_20_23.word = (uint32_t)h_cof_set_wr23<<0 | (uint32_t)h_cof_set_wr22<<8 | (uint32_t)h_cof_set_wr21<<16 | (uint32_t)h_cof_set_wr20<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_20_23() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_20_23.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_20_23_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_20_23.word = x)


//ISP_CE1_GPSSCALER_HCOF_24_27


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_24_27_h_cof_set_wr27() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_24_27.ISP_CE1_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr27
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_24_27_h_cof_set_wr27(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_24_27.ISP_CE1_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr27 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_24_27_h_cof_set_wr26() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_24_27.ISP_CE1_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr26
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_24_27_h_cof_set_wr26(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_24_27.ISP_CE1_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr26 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_24_27_h_cof_set_wr25() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_24_27.ISP_CE1_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr25
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_24_27_h_cof_set_wr25(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_24_27.ISP_CE1_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr25 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_24_27_h_cof_set_wr24() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_24_27.ISP_CE1_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr24
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_24_27_h_cof_set_wr24(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_24_27.ISP_CE1_GPSSCALER_HCOF_24_27_ts.h_cof_set_wr24 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_24_27(h_cof_set_wr27,h_cof_set_wr26,h_cof_set_wr25,h_cof_set_wr24) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_24_27.word = (uint32_t)h_cof_set_wr27<<0 | (uint32_t)h_cof_set_wr26<<8 | (uint32_t)h_cof_set_wr25<<16 | (uint32_t)h_cof_set_wr24<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_24_27() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_24_27.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_24_27_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_24_27.word = x)


//ISP_CE1_GPSSCALER_HCOF_28_31


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_28_31_h_cof_set_wr31() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_28_31.ISP_CE1_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr31
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_28_31_h_cof_set_wr31(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_28_31.ISP_CE1_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr31 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_28_31_h_cof_set_wr30() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_28_31.ISP_CE1_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr30
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_28_31_h_cof_set_wr30(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_28_31.ISP_CE1_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr30 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_28_31_h_cof_set_wr29() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_28_31.ISP_CE1_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr29
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_28_31_h_cof_set_wr29(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_28_31.ISP_CE1_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr29 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_28_31_h_cof_set_wr28() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_28_31.ISP_CE1_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr28
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_28_31_h_cof_set_wr28(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_28_31.ISP_CE1_GPSSCALER_HCOF_28_31_ts.h_cof_set_wr28 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_28_31(h_cof_set_wr31,h_cof_set_wr30,h_cof_set_wr29,h_cof_set_wr28) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_28_31.word = (uint32_t)h_cof_set_wr31<<0 | (uint32_t)h_cof_set_wr30<<8 | (uint32_t)h_cof_set_wr29<<16 | (uint32_t)h_cof_set_wr28<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_28_31() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_28_31.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_28_31_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_28_31.word = x)


//ISP_CE1_GPSSCALER_HCOF_32_35


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_32_35_h_cof_set_wr35() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_32_35.ISP_CE1_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr35
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_32_35_h_cof_set_wr35(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_32_35.ISP_CE1_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr35 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_32_35_h_cof_set_wr34() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_32_35.ISP_CE1_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr34
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_32_35_h_cof_set_wr34(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_32_35.ISP_CE1_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr34 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_32_35_h_cof_set_wr33() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_32_35.ISP_CE1_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr33
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_32_35_h_cof_set_wr33(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_32_35.ISP_CE1_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr33 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_32_35_h_cof_set_wr32() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_32_35.ISP_CE1_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr32
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_32_35_h_cof_set_wr32(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_32_35.ISP_CE1_GPSSCALER_HCOF_32_35_ts.h_cof_set_wr32 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_32_35(h_cof_set_wr35,h_cof_set_wr34,h_cof_set_wr33,h_cof_set_wr32) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_32_35.word = (uint32_t)h_cof_set_wr35<<0 | (uint32_t)h_cof_set_wr34<<8 | (uint32_t)h_cof_set_wr33<<16 | (uint32_t)h_cof_set_wr32<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_32_35() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_32_35.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_32_35_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_32_35.word = x)


//ISP_CE1_GPSSCALER_HCOF_36_39


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_36_39_h_cof_set_wr39() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_36_39.ISP_CE1_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr39
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_36_39_h_cof_set_wr39(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_36_39.ISP_CE1_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr39 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_36_39_h_cof_set_wr38() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_36_39.ISP_CE1_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr38
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_36_39_h_cof_set_wr38(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_36_39.ISP_CE1_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr38 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_36_39_h_cof_set_wr37() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_36_39.ISP_CE1_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr37
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_36_39_h_cof_set_wr37(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_36_39.ISP_CE1_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr37 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_36_39_h_cof_set_wr36() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_36_39.ISP_CE1_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr36
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_36_39_h_cof_set_wr36(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_36_39.ISP_CE1_GPSSCALER_HCOF_36_39_ts.h_cof_set_wr36 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_36_39(h_cof_set_wr39,h_cof_set_wr38,h_cof_set_wr37,h_cof_set_wr36) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_36_39.word = (uint32_t)h_cof_set_wr39<<0 | (uint32_t)h_cof_set_wr38<<8 | (uint32_t)h_cof_set_wr37<<16 | (uint32_t)h_cof_set_wr36<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_36_39() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_36_39.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_36_39_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_36_39.word = x)


//ISP_CE1_GPSSCALER_HCOF_40_43


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_40_43_h_cof_set_wr43() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_40_43.ISP_CE1_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr43
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_40_43_h_cof_set_wr43(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_40_43.ISP_CE1_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr43 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_40_43_h_cof_set_wr42() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_40_43.ISP_CE1_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr42
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_40_43_h_cof_set_wr42(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_40_43.ISP_CE1_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr42 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_40_43_h_cof_set_wr41() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_40_43.ISP_CE1_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr41
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_40_43_h_cof_set_wr41(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_40_43.ISP_CE1_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr41 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_40_43_h_cof_set_wr40() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_40_43.ISP_CE1_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr40
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_40_43_h_cof_set_wr40(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_40_43.ISP_CE1_GPSSCALER_HCOF_40_43_ts.h_cof_set_wr40 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_40_43(h_cof_set_wr43,h_cof_set_wr42,h_cof_set_wr41,h_cof_set_wr40) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_40_43.word = (uint32_t)h_cof_set_wr43<<0 | (uint32_t)h_cof_set_wr42<<8 | (uint32_t)h_cof_set_wr41<<16 | (uint32_t)h_cof_set_wr40<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_40_43() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_40_43.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_40_43_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_40_43.word = x)


//ISP_CE1_GPSSCALER_HCOF_44_47


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_44_47_h_cof_set_wr47() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_44_47.ISP_CE1_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr47
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_44_47_h_cof_set_wr47(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_44_47.ISP_CE1_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr47 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_44_47_h_cof_set_wr46() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_44_47.ISP_CE1_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr46
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_44_47_h_cof_set_wr46(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_44_47.ISP_CE1_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr46 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_44_47_h_cof_set_wr45() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_44_47.ISP_CE1_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr45
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_44_47_h_cof_set_wr45(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_44_47.ISP_CE1_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr45 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_44_47_h_cof_set_wr44() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_44_47.ISP_CE1_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr44
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_44_47_h_cof_set_wr44(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_44_47.ISP_CE1_GPSSCALER_HCOF_44_47_ts.h_cof_set_wr44 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_44_47(h_cof_set_wr47,h_cof_set_wr46,h_cof_set_wr45,h_cof_set_wr44) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_44_47.word = (uint32_t)h_cof_set_wr47<<0 | (uint32_t)h_cof_set_wr46<<8 | (uint32_t)h_cof_set_wr45<<16 | (uint32_t)h_cof_set_wr44<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_44_47() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_44_47.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_44_47_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_44_47.word = x)


//ISP_CE1_GPSSCALER_HCOF_48_51


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_48_51_h_cof_set_wr51() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_48_51.ISP_CE1_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr51
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_48_51_h_cof_set_wr51(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_48_51.ISP_CE1_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr51 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_48_51_h_cof_set_wr50() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_48_51.ISP_CE1_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr50
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_48_51_h_cof_set_wr50(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_48_51.ISP_CE1_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr50 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_48_51_h_cof_set_wr49() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_48_51.ISP_CE1_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr49
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_48_51_h_cof_set_wr49(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_48_51.ISP_CE1_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr49 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_48_51_h_cof_set_wr48() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_48_51.ISP_CE1_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr48
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_48_51_h_cof_set_wr48(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_48_51.ISP_CE1_GPSSCALER_HCOF_48_51_ts.h_cof_set_wr48 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_48_51(h_cof_set_wr51,h_cof_set_wr50,h_cof_set_wr49,h_cof_set_wr48) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_48_51.word = (uint32_t)h_cof_set_wr51<<0 | (uint32_t)h_cof_set_wr50<<8 | (uint32_t)h_cof_set_wr49<<16 | (uint32_t)h_cof_set_wr48<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_48_51() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_48_51.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_48_51_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_48_51.word = x)


//ISP_CE1_GPSSCALER_HCOF_52_55


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_52_55_h_cof_set_wr55() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_52_55.ISP_CE1_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr55
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_52_55_h_cof_set_wr55(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_52_55.ISP_CE1_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr55 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_52_55_h_cof_set_wr54() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_52_55.ISP_CE1_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr54
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_52_55_h_cof_set_wr54(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_52_55.ISP_CE1_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr54 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_52_55_h_cof_set_wr53() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_52_55.ISP_CE1_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr53
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_52_55_h_cof_set_wr53(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_52_55.ISP_CE1_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr53 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_52_55_h_cof_set_wr52() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_52_55.ISP_CE1_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr52
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_52_55_h_cof_set_wr52(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_52_55.ISP_CE1_GPSSCALER_HCOF_52_55_ts.h_cof_set_wr52 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_52_55(h_cof_set_wr55,h_cof_set_wr54,h_cof_set_wr53,h_cof_set_wr52) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_52_55.word = (uint32_t)h_cof_set_wr55<<0 | (uint32_t)h_cof_set_wr54<<8 | (uint32_t)h_cof_set_wr53<<16 | (uint32_t)h_cof_set_wr52<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_52_55() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_52_55.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_52_55_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_52_55.word = x)


//ISP_CE1_GPSSCALER_HCOF_56_59


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_56_59_h_cof_set_wr59() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_56_59.ISP_CE1_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr59
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_56_59_h_cof_set_wr59(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_56_59.ISP_CE1_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr59 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_56_59_h_cof_set_wr58() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_56_59.ISP_CE1_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr58
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_56_59_h_cof_set_wr58(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_56_59.ISP_CE1_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr58 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_56_59_h_cof_set_wr57() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_56_59.ISP_CE1_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr57
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_56_59_h_cof_set_wr57(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_56_59.ISP_CE1_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr57 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_56_59_h_cof_set_wr56() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_56_59.ISP_CE1_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr56
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_56_59_h_cof_set_wr56(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_56_59.ISP_CE1_GPSSCALER_HCOF_56_59_ts.h_cof_set_wr56 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_56_59(h_cof_set_wr59,h_cof_set_wr58,h_cof_set_wr57,h_cof_set_wr56) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_56_59.word = (uint32_t)h_cof_set_wr59<<0 | (uint32_t)h_cof_set_wr58<<8 | (uint32_t)h_cof_set_wr57<<16 | (uint32_t)h_cof_set_wr56<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_56_59() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_56_59.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_56_59_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_56_59.word = x)


//ISP_CE1_GPSSCALER_HCOF_60_63


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_60_63_h_cof_set_wr63() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_60_63.ISP_CE1_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr63
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_60_63_h_cof_set_wr63(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_60_63.ISP_CE1_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr63 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_60_63_h_cof_set_wr62() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_60_63.ISP_CE1_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr62
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_60_63_h_cof_set_wr62(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_60_63.ISP_CE1_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr62 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_60_63_h_cof_set_wr61() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_60_63.ISP_CE1_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr61
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_60_63_h_cof_set_wr61(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_60_63.ISP_CE1_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr61 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_60_63_h_cof_set_wr60() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_60_63.ISP_CE1_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr60
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_60_63_h_cof_set_wr60(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_60_63.ISP_CE1_GPSSCALER_HCOF_60_63_ts.h_cof_set_wr60 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_60_63(h_cof_set_wr63,h_cof_set_wr62,h_cof_set_wr61,h_cof_set_wr60) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_60_63.word = (uint32_t)h_cof_set_wr63<<0 | (uint32_t)h_cof_set_wr62<<8 | (uint32_t)h_cof_set_wr61<<16 | (uint32_t)h_cof_set_wr60<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_60_63() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_60_63.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_HCOF_60_63_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_HCOF_60_63.word = x)


//ISP_CE1_GPSSCALER_VCOF_0_3


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_0_3_v_cof_set_wr3() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_0_3.ISP_CE1_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr3
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_0_3_v_cof_set_wr3(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_0_3.ISP_CE1_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr3 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_0_3_v_cof_set_wr2() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_0_3.ISP_CE1_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr2
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_0_3_v_cof_set_wr2(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_0_3.ISP_CE1_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr2 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_0_3_v_cof_set_wr1() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_0_3.ISP_CE1_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr1
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_0_3_v_cof_set_wr1(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_0_3.ISP_CE1_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr1 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_0_3_v_cof_set_wr0() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_0_3.ISP_CE1_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr0
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_0_3_v_cof_set_wr0(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_0_3.ISP_CE1_GPSSCALER_VCOF_0_3_ts.v_cof_set_wr0 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_0_3(v_cof_set_wr3,v_cof_set_wr2,v_cof_set_wr1,v_cof_set_wr0) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_0_3.word = (uint32_t)v_cof_set_wr3<<0 | (uint32_t)v_cof_set_wr2<<8 | (uint32_t)v_cof_set_wr1<<16 | (uint32_t)v_cof_set_wr0<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_0_3() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_0_3.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_0_3_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_0_3.word = x)


//ISP_CE1_GPSSCALER_VCOF_4_7


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_4_7_v_cof_set_wr7() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_4_7.ISP_CE1_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr7
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_4_7_v_cof_set_wr7(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_4_7.ISP_CE1_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr7 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_4_7_v_cof_set_wr6() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_4_7.ISP_CE1_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr6
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_4_7_v_cof_set_wr6(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_4_7.ISP_CE1_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr6 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_4_7_v_cof_set_wr5() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_4_7.ISP_CE1_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr5
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_4_7_v_cof_set_wr5(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_4_7.ISP_CE1_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr5 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_4_7_v_cof_set_wr4() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_4_7.ISP_CE1_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr4
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_4_7_v_cof_set_wr4(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_4_7.ISP_CE1_GPSSCALER_VCOF_4_7_ts.v_cof_set_wr4 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_4_7(v_cof_set_wr7,v_cof_set_wr6,v_cof_set_wr5,v_cof_set_wr4) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_4_7.word = (uint32_t)v_cof_set_wr7<<0 | (uint32_t)v_cof_set_wr6<<8 | (uint32_t)v_cof_set_wr5<<16 | (uint32_t)v_cof_set_wr4<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_4_7() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_4_7.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_4_7_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_4_7.word = x)


//ISP_CE1_GPSSCALER_VCOF_8_11


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_8_11_v_cof_set_wr11() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_8_11.ISP_CE1_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr11
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_8_11_v_cof_set_wr11(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_8_11.ISP_CE1_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr11 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_8_11_v_cof_set_wr10() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_8_11.ISP_CE1_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr10
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_8_11_v_cof_set_wr10(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_8_11.ISP_CE1_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr10 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_8_11_v_cof_set_wr9() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_8_11.ISP_CE1_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr9
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_8_11_v_cof_set_wr9(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_8_11.ISP_CE1_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr9 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_8_11_v_cof_set_wr8() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_8_11.ISP_CE1_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr8
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_8_11_v_cof_set_wr8(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_8_11.ISP_CE1_GPSSCALER_VCOF_8_11_ts.v_cof_set_wr8 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_8_11(v_cof_set_wr11,v_cof_set_wr10,v_cof_set_wr9,v_cof_set_wr8) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_8_11.word = (uint32_t)v_cof_set_wr11<<0 | (uint32_t)v_cof_set_wr10<<8 | (uint32_t)v_cof_set_wr9<<16 | (uint32_t)v_cof_set_wr8<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_8_11() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_8_11.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_8_11_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_8_11.word = x)


//ISP_CE1_GPSSCALER_VCOF_12_15


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_12_15_v_cof_set_wr15() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_12_15.ISP_CE1_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr15
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_12_15_v_cof_set_wr15(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_12_15.ISP_CE1_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr15 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_12_15_v_cof_set_wr14() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_12_15.ISP_CE1_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr14
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_12_15_v_cof_set_wr14(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_12_15.ISP_CE1_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr14 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_12_15_v_cof_set_wr13() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_12_15.ISP_CE1_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr13
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_12_15_v_cof_set_wr13(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_12_15.ISP_CE1_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr13 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_12_15_v_cof_set_wr12() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_12_15.ISP_CE1_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr12
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_12_15_v_cof_set_wr12(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_12_15.ISP_CE1_GPSSCALER_VCOF_12_15_ts.v_cof_set_wr12 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_12_15(v_cof_set_wr15,v_cof_set_wr14,v_cof_set_wr13,v_cof_set_wr12) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_12_15.word = (uint32_t)v_cof_set_wr15<<0 | (uint32_t)v_cof_set_wr14<<8 | (uint32_t)v_cof_set_wr13<<16 | (uint32_t)v_cof_set_wr12<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_12_15() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_12_15.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_12_15_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_12_15.word = x)


//ISP_CE1_GPSSCALER_VCOF_16_19


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_16_19_v_cof_set_wr19() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_16_19.ISP_CE1_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr19
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_16_19_v_cof_set_wr19(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_16_19.ISP_CE1_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr19 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_16_19_v_cof_set_wr18() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_16_19.ISP_CE1_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr18
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_16_19_v_cof_set_wr18(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_16_19.ISP_CE1_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr18 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_16_19_v_cof_set_wr17() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_16_19.ISP_CE1_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr17
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_16_19_v_cof_set_wr17(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_16_19.ISP_CE1_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr17 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_16_19_v_cof_set_wr16() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_16_19.ISP_CE1_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr16
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_16_19_v_cof_set_wr16(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_16_19.ISP_CE1_GPSSCALER_VCOF_16_19_ts.v_cof_set_wr16 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_16_19(v_cof_set_wr19,v_cof_set_wr18,v_cof_set_wr17,v_cof_set_wr16) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_16_19.word = (uint32_t)v_cof_set_wr19<<0 | (uint32_t)v_cof_set_wr18<<8 | (uint32_t)v_cof_set_wr17<<16 | (uint32_t)v_cof_set_wr16<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_16_19() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_16_19.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_16_19_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_16_19.word = x)


//ISP_CE1_GPSSCALER_VCOF_20_23


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_20_23_v_cof_set_wr23() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_20_23.ISP_CE1_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr23
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_20_23_v_cof_set_wr23(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_20_23.ISP_CE1_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr23 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_20_23_v_cof_set_wr22() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_20_23.ISP_CE1_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr22
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_20_23_v_cof_set_wr22(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_20_23.ISP_CE1_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr22 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_20_23_v_cof_set_wr21() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_20_23.ISP_CE1_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr21
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_20_23_v_cof_set_wr21(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_20_23.ISP_CE1_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr21 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_20_23_v_cof_set_wr20() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_20_23.ISP_CE1_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr20
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_20_23_v_cof_set_wr20(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_20_23.ISP_CE1_GPSSCALER_VCOF_20_23_ts.v_cof_set_wr20 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_20_23(v_cof_set_wr23,v_cof_set_wr22,v_cof_set_wr21,v_cof_set_wr20) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_20_23.word = (uint32_t)v_cof_set_wr23<<0 | (uint32_t)v_cof_set_wr22<<8 | (uint32_t)v_cof_set_wr21<<16 | (uint32_t)v_cof_set_wr20<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_20_23() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_20_23.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_20_23_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_20_23.word = x)


//ISP_CE1_GPSSCALER_VCOF_24_27


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_24_27_v_cof_set_wr27() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_24_27.ISP_CE1_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr27
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_24_27_v_cof_set_wr27(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_24_27.ISP_CE1_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr27 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_24_27_v_cof_set_wr26() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_24_27.ISP_CE1_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr26
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_24_27_v_cof_set_wr26(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_24_27.ISP_CE1_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr26 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_24_27_v_cof_set_wr25() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_24_27.ISP_CE1_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr25
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_24_27_v_cof_set_wr25(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_24_27.ISP_CE1_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr25 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_24_27_v_cof_set_wr24() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_24_27.ISP_CE1_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr24
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_24_27_v_cof_set_wr24(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_24_27.ISP_CE1_GPSSCALER_VCOF_24_27_ts.v_cof_set_wr24 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_24_27(v_cof_set_wr27,v_cof_set_wr26,v_cof_set_wr25,v_cof_set_wr24) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_24_27.word = (uint32_t)v_cof_set_wr27<<0 | (uint32_t)v_cof_set_wr26<<8 | (uint32_t)v_cof_set_wr25<<16 | (uint32_t)v_cof_set_wr24<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_24_27() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_24_27.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_24_27_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_24_27.word = x)


//ISP_CE1_GPSSCALER_VCOF_28_31


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_28_31_v_cof_set_wr31() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_28_31.ISP_CE1_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr31
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_28_31_v_cof_set_wr31(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_28_31.ISP_CE1_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr31 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_28_31_v_cof_set_wr30() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_28_31.ISP_CE1_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr30
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_28_31_v_cof_set_wr30(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_28_31.ISP_CE1_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr30 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_28_31_v_cof_set_wr29() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_28_31.ISP_CE1_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr29
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_28_31_v_cof_set_wr29(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_28_31.ISP_CE1_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr29 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_28_31_v_cof_set_wr28() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_28_31.ISP_CE1_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr28
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_28_31_v_cof_set_wr28(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_28_31.ISP_CE1_GPSSCALER_VCOF_28_31_ts.v_cof_set_wr28 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_28_31(v_cof_set_wr31,v_cof_set_wr30,v_cof_set_wr29,v_cof_set_wr28) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_28_31.word = (uint32_t)v_cof_set_wr31<<0 | (uint32_t)v_cof_set_wr30<<8 | (uint32_t)v_cof_set_wr29<<16 | (uint32_t)v_cof_set_wr28<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_28_31() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_28_31.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_28_31_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_28_31.word = x)


//ISP_CE1_GPSSCALER_VCOF_32_35


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_32_35_v_cof_set_wr35() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_32_35.ISP_CE1_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr35
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_32_35_v_cof_set_wr35(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_32_35.ISP_CE1_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr35 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_32_35_v_cof_set_wr34() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_32_35.ISP_CE1_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr34
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_32_35_v_cof_set_wr34(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_32_35.ISP_CE1_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr34 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_32_35_v_cof_set_wr33() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_32_35.ISP_CE1_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr33
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_32_35_v_cof_set_wr33(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_32_35.ISP_CE1_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr33 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_32_35_v_cof_set_wr32() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_32_35.ISP_CE1_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr32
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_32_35_v_cof_set_wr32(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_32_35.ISP_CE1_GPSSCALER_VCOF_32_35_ts.v_cof_set_wr32 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_32_35(v_cof_set_wr35,v_cof_set_wr34,v_cof_set_wr33,v_cof_set_wr32) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_32_35.word = (uint32_t)v_cof_set_wr35<<0 | (uint32_t)v_cof_set_wr34<<8 | (uint32_t)v_cof_set_wr33<<16 | (uint32_t)v_cof_set_wr32<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_32_35() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_32_35.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_32_35_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_32_35.word = x)


//ISP_CE1_GPSSCALER_VCOF_36_39


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_36_39_v_cof_set_wr39() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_36_39.ISP_CE1_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr39
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_36_39_v_cof_set_wr39(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_36_39.ISP_CE1_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr39 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_36_39_v_cof_set_wr38() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_36_39.ISP_CE1_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr38
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_36_39_v_cof_set_wr38(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_36_39.ISP_CE1_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr38 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_36_39_v_cof_set_wr37() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_36_39.ISP_CE1_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr37
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_36_39_v_cof_set_wr37(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_36_39.ISP_CE1_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr37 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_36_39_v_cof_set_wr36() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_36_39.ISP_CE1_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr36
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_36_39_v_cof_set_wr36(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_36_39.ISP_CE1_GPSSCALER_VCOF_36_39_ts.v_cof_set_wr36 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_36_39(v_cof_set_wr39,v_cof_set_wr38,v_cof_set_wr37,v_cof_set_wr36) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_36_39.word = (uint32_t)v_cof_set_wr39<<0 | (uint32_t)v_cof_set_wr38<<8 | (uint32_t)v_cof_set_wr37<<16 | (uint32_t)v_cof_set_wr36<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_36_39() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_36_39.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_36_39_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_36_39.word = x)


//ISP_CE1_GPSSCALER_VCOF_40_43


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_40_43_v_cof_set_wr43() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_40_43.ISP_CE1_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr43
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_40_43_v_cof_set_wr43(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_40_43.ISP_CE1_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr43 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_40_43_v_cof_set_wr42() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_40_43.ISP_CE1_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr42
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_40_43_v_cof_set_wr42(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_40_43.ISP_CE1_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr42 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_40_43_v_cof_set_wr41() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_40_43.ISP_CE1_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr41
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_40_43_v_cof_set_wr41(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_40_43.ISP_CE1_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr41 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_40_43_v_cof_set_wr40() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_40_43.ISP_CE1_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr40
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_40_43_v_cof_set_wr40(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_40_43.ISP_CE1_GPSSCALER_VCOF_40_43_ts.v_cof_set_wr40 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_40_43(v_cof_set_wr43,v_cof_set_wr42,v_cof_set_wr41,v_cof_set_wr40) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_40_43.word = (uint32_t)v_cof_set_wr43<<0 | (uint32_t)v_cof_set_wr42<<8 | (uint32_t)v_cof_set_wr41<<16 | (uint32_t)v_cof_set_wr40<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_40_43() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_40_43.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_40_43_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_40_43.word = x)


//ISP_CE1_GPSSCALER_VCOF_44_47


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_44_47_v_cof_set_wr47() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_44_47.ISP_CE1_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr47
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_44_47_v_cof_set_wr47(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_44_47.ISP_CE1_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr47 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_44_47_v_cof_set_wr46() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_44_47.ISP_CE1_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr46
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_44_47_v_cof_set_wr46(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_44_47.ISP_CE1_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr46 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_44_47_v_cof_set_wr45() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_44_47.ISP_CE1_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr45
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_44_47_v_cof_set_wr45(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_44_47.ISP_CE1_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr45 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_44_47_v_cof_set_wr44() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_44_47.ISP_CE1_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr44
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_44_47_v_cof_set_wr44(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_44_47.ISP_CE1_GPSSCALER_VCOF_44_47_ts.v_cof_set_wr44 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_44_47(v_cof_set_wr47,v_cof_set_wr46,v_cof_set_wr45,v_cof_set_wr44) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_44_47.word = (uint32_t)v_cof_set_wr47<<0 | (uint32_t)v_cof_set_wr46<<8 | (uint32_t)v_cof_set_wr45<<16 | (uint32_t)v_cof_set_wr44<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_44_47() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_44_47.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_44_47_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_44_47.word = x)


//ISP_CE1_GPSSCALER_VCOF_48_51


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_48_51_v_cof_set_wr51() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_48_51.ISP_CE1_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr51
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_48_51_v_cof_set_wr51(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_48_51.ISP_CE1_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr51 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_48_51_v_cof_set_wr50() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_48_51.ISP_CE1_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr50
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_48_51_v_cof_set_wr50(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_48_51.ISP_CE1_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr50 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_48_51_v_cof_set_wr49() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_48_51.ISP_CE1_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr49
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_48_51_v_cof_set_wr49(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_48_51.ISP_CE1_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr49 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_48_51_v_cof_set_wr48() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_48_51.ISP_CE1_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr48
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_48_51_v_cof_set_wr48(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_48_51.ISP_CE1_GPSSCALER_VCOF_48_51_ts.v_cof_set_wr48 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_48_51(v_cof_set_wr51,v_cof_set_wr50,v_cof_set_wr49,v_cof_set_wr48) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_48_51.word = (uint32_t)v_cof_set_wr51<<0 | (uint32_t)v_cof_set_wr50<<8 | (uint32_t)v_cof_set_wr49<<16 | (uint32_t)v_cof_set_wr48<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_48_51() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_48_51.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_48_51_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_48_51.word = x)


//ISP_CE1_GPSSCALER_VCOF_52_55


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_52_55_v_cof_set_wr55() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_52_55.ISP_CE1_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr55
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_52_55_v_cof_set_wr55(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_52_55.ISP_CE1_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr55 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_52_55_v_cof_set_wr54() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_52_55.ISP_CE1_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr54
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_52_55_v_cof_set_wr54(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_52_55.ISP_CE1_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr54 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_52_55_v_cof_set_wr53() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_52_55.ISP_CE1_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr53
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_52_55_v_cof_set_wr53(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_52_55.ISP_CE1_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr53 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_52_55_v_cof_set_wr52() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_52_55.ISP_CE1_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr52
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_52_55_v_cof_set_wr52(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_52_55.ISP_CE1_GPSSCALER_VCOF_52_55_ts.v_cof_set_wr52 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_52_55(v_cof_set_wr55,v_cof_set_wr54,v_cof_set_wr53,v_cof_set_wr52) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_52_55.word = (uint32_t)v_cof_set_wr55<<0 | (uint32_t)v_cof_set_wr54<<8 | (uint32_t)v_cof_set_wr53<<16 | (uint32_t)v_cof_set_wr52<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_52_55() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_52_55.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_52_55_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_52_55.word = x)


//ISP_CE1_GPSSCALER_VCOF_56_59


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_56_59_v_cof_set_wr59() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_56_59.ISP_CE1_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr59
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_56_59_v_cof_set_wr59(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_56_59.ISP_CE1_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr59 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_56_59_v_cof_set_wr58() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_56_59.ISP_CE1_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr58
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_56_59_v_cof_set_wr58(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_56_59.ISP_CE1_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr58 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_56_59_v_cof_set_wr57() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_56_59.ISP_CE1_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr57
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_56_59_v_cof_set_wr57(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_56_59.ISP_CE1_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr57 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_56_59_v_cof_set_wr56() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_56_59.ISP_CE1_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr56
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_56_59_v_cof_set_wr56(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_56_59.ISP_CE1_GPSSCALER_VCOF_56_59_ts.v_cof_set_wr56 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_56_59(v_cof_set_wr59,v_cof_set_wr58,v_cof_set_wr57,v_cof_set_wr56) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_56_59.word = (uint32_t)v_cof_set_wr59<<0 | (uint32_t)v_cof_set_wr58<<8 | (uint32_t)v_cof_set_wr57<<16 | (uint32_t)v_cof_set_wr56<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_56_59() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_56_59.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_56_59_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_56_59.word = x)


//ISP_CE1_GPSSCALER_VCOF_60_63


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_60_63_v_cof_set_wr63() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_60_63.ISP_CE1_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr63
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_60_63_v_cof_set_wr63(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_60_63.ISP_CE1_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr63 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_60_63_v_cof_set_wr62() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_60_63.ISP_CE1_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr62
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_60_63_v_cof_set_wr62(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_60_63.ISP_CE1_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr62 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_60_63_v_cof_set_wr61() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_60_63.ISP_CE1_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr61
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_60_63_v_cof_set_wr61(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_60_63.ISP_CE1_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr61 = x)


#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_60_63_v_cof_set_wr60() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_60_63.ISP_CE1_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr60
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_60_63_v_cof_set_wr60(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_60_63.ISP_CE1_GPSSCALER_VCOF_60_63_ts.v_cof_set_wr60 = x)
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_60_63(v_cof_set_wr63,v_cof_set_wr62,v_cof_set_wr61,v_cof_set_wr60) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_60_63.word = (uint32_t)v_cof_set_wr63<<0 | (uint32_t)v_cof_set_wr62<<8 | (uint32_t)v_cof_set_wr61<<16 | (uint32_t)v_cof_set_wr60<<24)
#define Get_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_60_63() p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_60_63.word
#define Set_ISP_CE1_GPSSCALER_ISP_CE1_GPSSCALER_VCOF_60_63_word(x) (p_ISP_CE1_GPSSCALER_IP->ISP_CE1_GPSSCALER_VCOF_60_63.word = x)

//ISP_CE1_CODER_ENABLE
/*Description: Coder Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable processing*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* Disable soft_reset*/
    }ISP_CE1_CODER_ENABLE_ts;

}ISP_CE1_CODER_ENABLE_tu;



//ISP_CE1_CODER_FORMAT
/*Description: Output format selection
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t yuv_format :3;
        /* Conversion mode selection*/
    }ISP_CE1_CODER_FORMAT_ts;

}ISP_CE1_CODER_FORMAT_tu;



//ISP_CE1_CODER_Y_COF00
/*Description: Matrix coefficient 00
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_y_cof00 :13;
        /* 
        Conversion matrix coefficient 00*/
    }ISP_CE1_CODER_Y_COF00_ts;

}ISP_CE1_CODER_Y_COF00_tu;



//ISP_CE1_CODER_Y_COF01
/*Description: Matrix coefficient 01
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_y_cof01 :13;
        /* 
        Conversion matrix coefficient 01*/
    }ISP_CE1_CODER_Y_COF01_ts;

}ISP_CE1_CODER_Y_COF01_tu;



//ISP_CE1_CODER_Y_COF02
/*Description: Matrix coefficient 02
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_y_cof02 :13;
        /* Conversion matrix coefficient 02*/
    }ISP_CE1_CODER_Y_COF02_ts;

}ISP_CE1_CODER_Y_COF02_tu;



//ISP_CE1_CODER_CB_COF10
/*Description: Matrix coefficient 10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cb_cof10 :13;
        /* Conversion matrix coefficient 10*/
    }ISP_CE1_CODER_CB_COF10_ts;

}ISP_CE1_CODER_CB_COF10_tu;



//ISP_CE1_CODER_CB_COF11
/*Description: Matrix coefficient 11
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cb_cof11 :13;
        /* Conversion matrix coefficient 11*/
    }ISP_CE1_CODER_CB_COF11_ts;

}ISP_CE1_CODER_CB_COF11_tu;



//ISP_CE1_CODER_CB_COF12
/*Description: Matrix coefficient 12
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cb_cof12 :13;
        /* Conversion matrix coefficient 12*/
    }ISP_CE1_CODER_CB_COF12_ts;

}ISP_CE1_CODER_CB_COF12_tu;



//ISP_CE1_CODER_CR_COF20
/*Description: Matrix coefficient 20
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cr_cof20 :13;
        /* Conversion matrix coefficient 20*/
    }ISP_CE1_CODER_CR_COF20_ts;

}ISP_CE1_CODER_CR_COF20_tu;



//ISP_CE1_CODER_CR_COF21
/*Description: Matrix coefficient 21
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cr_cof21 :13;
        /* Conversion matrix coefficient 21*/
    }ISP_CE1_CODER_CR_COF21_ts;

}ISP_CE1_CODER_CR_COF21_tu;



//ISP_CE1_CODER_CR_COF22
/*Description: Matrix coefficient 22
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cr_cof22 :13;
        /* Conversion matrix coefficient 22*/
    }ISP_CE1_CODER_CR_COF22_ts;

}ISP_CE1_CODER_CR_COF22_tu;



//ISP_CE1_CODER_YFLOOR
/*Description: Y data offset
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_yfloor :9;
        /* Y data floor*/
    }ISP_CE1_CODER_YFLOOR_ts;

}ISP_CE1_CODER_YFLOOR_tu;



//ISP_CE1_CODER_CBFLOOR
/*Description: Cb data offset
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_cbfloor :9;
        /* Cb data floor*/
    }ISP_CE1_CODER_CBFLOOR_ts;

}ISP_CE1_CODER_CBFLOOR_tu;



//ISP_CE1_CODER_CRFLOOR
/*Description: Cr data Offset
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_crfloor :9;
        /* Cr data floor*/
    }ISP_CE1_CODER_CRFLOOR_ts;

}ISP_CE1_CODER_CRFLOOR_tu;



//ISP_CE1_CODER_CB_COLOUR_EFFECT
/*Description: Cb color effect
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t yuv_cb_colour_effect_lo :3;
        /* Cb negative color effect*/
        uint8_t reserved0 :5;
        uint8_t yuv_cb_colour_effect_hi :3;
        /* Cb positive color effect*/
    }ISP_CE1_CODER_CB_COLOUR_EFFECT_ts;

}ISP_CE1_CODER_CB_COLOUR_EFFECT_tu;



//ISP_CE1_CODER_CR_COLOUR_EFFECT
/*Description: Cr color effect
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t yuv_cr_colour_effect_lo :3;
        /* Cr negative color effect*/
        uint8_t reserved0 :5;
        uint8_t yuv_cr_colour_effect_hi :3;
        /* Cr positive color effect*/
    }ISP_CE1_CODER_CR_COLOUR_EFFECT_ts;

}ISP_CE1_CODER_CR_COLOUR_EFFECT_tu;



//ISP_CE1_CODER_CH0_MIN_CLIP
/*Description: Channel 0 minimum value
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch0_min_clip :12;
        /* channel 0 minimum value after matrix and offset*/
    }ISP_CE1_CODER_CH0_MIN_CLIP_ts;

}ISP_CE1_CODER_CH0_MIN_CLIP_tu;



//ISP_CE1_CODER_CH0_MAX_CLIP
/*Description: Channel 0 maximum value
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch0_max_clip :12;
        /* Channel 0 maximum value after matrix and offset*/
    }ISP_CE1_CODER_CH0_MAX_CLIP_ts;

}ISP_CE1_CODER_CH0_MAX_CLIP_tu;



//ISP_CE1_CODER_CH1_MIN_CLIP
/*Description: Channel 1 minimum value
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch1_min_clip :12;
        /* Channel 1 minimum value after matrix and offset*/
    }ISP_CE1_CODER_CH1_MIN_CLIP_ts;

}ISP_CE1_CODER_CH1_MIN_CLIP_tu;



//ISP_CE1_CODER_CH1_MAX_CLIP
/*Description: Channel 1 maximum clip values
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch1_max_clip :12;
        /* Channel 1 maximum value after matrix and offset*/
    }ISP_CE1_CODER_CH1_MAX_CLIP_ts;

}ISP_CE1_CODER_CH1_MAX_CLIP_tu;



//ISP_CE1_CODER_CH2_MIN_CLIP
/*Description: Channel 2 minimum clip values
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch2_min_clip :12;
        /* Channel 2 minimum value after matrix and offset*/
    }ISP_CE1_CODER_CH2_MIN_CLIP_ts;

}ISP_CE1_CODER_CH2_MIN_CLIP_tu;



//ISP_CE1_CODER_CH2_MAX_CLIP
/*Description: Channel 2 maximum value
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t yuv_ch2_max_clip :12;
        /* Channel 2 maximum value after matrix and offset*/
    }ISP_CE1_CODER_CH2_MAX_CLIP_ts;

}ISP_CE1_CODER_CH2_MAX_CLIP_tu;



//ISP_CE1_CODER_RAW_NONACTIVE
/*Description: Control for non active lines
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t yuv_raw_nonactive :1;
        /* Disable transmission of non-active lines to the output*/
    }ISP_CE1_CODER_RAW_NONACTIVE_ts;

}ISP_CE1_CODER_RAW_NONACTIVE_tu;

typedef struct
{
    ISP_CE1_CODER_ENABLE_tu ISP_CE1_CODER_ENABLE;
    ISP_CE1_CODER_FORMAT_tu ISP_CE1_CODER_FORMAT;
    ISP_CE1_CODER_Y_COF00_tu ISP_CE1_CODER_Y_COF00;
    ISP_CE1_CODER_Y_COF01_tu ISP_CE1_CODER_Y_COF01;
    ISP_CE1_CODER_Y_COF02_tu ISP_CE1_CODER_Y_COF02;
    ISP_CE1_CODER_CB_COF10_tu ISP_CE1_CODER_CB_COF10;
    ISP_CE1_CODER_CB_COF11_tu ISP_CE1_CODER_CB_COF11;
    ISP_CE1_CODER_CB_COF12_tu ISP_CE1_CODER_CB_COF12;
    ISP_CE1_CODER_CR_COF20_tu ISP_CE1_CODER_CR_COF20;
    ISP_CE1_CODER_CR_COF21_tu ISP_CE1_CODER_CR_COF21;
    ISP_CE1_CODER_CR_COF22_tu ISP_CE1_CODER_CR_COF22;
    ISP_CE1_CODER_YFLOOR_tu ISP_CE1_CODER_YFLOOR;
    ISP_CE1_CODER_CBFLOOR_tu ISP_CE1_CODER_CBFLOOR;
    ISP_CE1_CODER_CRFLOOR_tu ISP_CE1_CODER_CRFLOOR;
    ISP_CE1_CODER_CB_COLOUR_EFFECT_tu ISP_CE1_CODER_CB_COLOUR_EFFECT;
    ISP_CE1_CODER_CR_COLOUR_EFFECT_tu ISP_CE1_CODER_CR_COLOUR_EFFECT;
    ISP_CE1_CODER_CH0_MIN_CLIP_tu ISP_CE1_CODER_CH0_MIN_CLIP;
    ISP_CE1_CODER_CH0_MAX_CLIP_tu ISP_CE1_CODER_CH0_MAX_CLIP;
    ISP_CE1_CODER_CH1_MIN_CLIP_tu ISP_CE1_CODER_CH1_MIN_CLIP;
    ISP_CE1_CODER_CH1_MAX_CLIP_tu ISP_CE1_CODER_CH1_MAX_CLIP;
    ISP_CE1_CODER_CH2_MIN_CLIP_tu ISP_CE1_CODER_CH2_MIN_CLIP;
    ISP_CE1_CODER_CH2_MAX_CLIP_tu ISP_CE1_CODER_CH2_MAX_CLIP;
    ISP_CE1_CODER_RAW_NONACTIVE_tu ISP_CE1_CODER_RAW_NONACTIVE;
}ISP_CE1_CODER_IP_ts;




//ISP_CE1_CODER_ENABLE


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE_enable() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.ISP_CE1_CODER_ENABLE_ts.enable
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE_enable_DISABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.ISP_CE1_CODER_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE_enable__DISABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.ISP_CE1_CODER_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable processing
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE_enable_ENABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.ISP_CE1_CODER_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE_enable__ENABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.ISP_CE1_CODER_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable data processing


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE_soft_reset() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.ISP_CE1_CODER_ENABLE_ts.soft_reset
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE_soft_reset_DISABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.ISP_CE1_CODER_ENABLE_ts.soft_reset == soft_reset_DISABLE)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE_soft_reset__DISABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.ISP_CE1_CODER_ENABLE_ts.soft_reset = soft_reset_DISABLE)
#define soft_reset_DISABLE 0x0    //Disable soft_reset
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE_soft_reset_ENABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.ISP_CE1_CODER_ENABLE_ts.soft_reset == soft_reset_ENABLE)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE_soft_reset__ENABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.ISP_CE1_CODER_ENABLE_ts.soft_reset = soft_reset_ENABLE)
#define soft_reset_ENABLE 0x1    //Enable soft_reset <=> block is in reset
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE(enable,soft_reset) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_ENABLE_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_ENABLE.word = x)


//ISP_CE1_CODER_FORMAT


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format_B_0x0() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x0)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format__B_0x0() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x0)
#define yuv_format_B_0x0 0x0    //RGB peak. If YUVCODER_ENABLE[0] is not set, peaked IDP input is forwarded to the output
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format_B_0x1() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x1)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format__B_0x1() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x1)
#define yuv_format_B_0x1 0x1    //RGB unpeak. If YUVCODER_ENABLE[0] is not set, unpeaked IDP input is forwarded to the output
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format_B_0x2() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x2)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format__B_0x2() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x2)
#define yuv_format_B_0x2 0x2    //YUV 422
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format_B_0x3() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x3)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format__B_0x3() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x3)
#define yuv_format_B_0x3 0x3    //YUV 420. Chroma is filtered with 1-1 filter but vertical filter and decimation is not done.
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format_B_0x4() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x4)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format__B_0x4() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x4)
#define yuv_format_B_0x4 0x4    //Bayer (right shifted)
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format_B_0x5() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format == yuv_format_B_0x5)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_yuv_format__B_0x5() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.ISP_CE1_CODER_FORMAT_ts.yuv_format = yuv_format_B_0x5)
#define yuv_format_B_0x5 0x5    //Bayer (left shifted)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT(yuv_format) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.word = (uint32_t)yuv_format<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_FORMAT_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_FORMAT.word = x)


//ISP_CE1_CODER_Y_COF00


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF00_yuv_y_cof00() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF00.ISP_CE1_CODER_Y_COF00_ts.yuv_y_cof00
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF00_yuv_y_cof00(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF00.ISP_CE1_CODER_Y_COF00_ts.yuv_y_cof00 = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF00(yuv_y_cof00) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF00.word = (uint32_t)yuv_y_cof00<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF00() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF00.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF00_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF00.word = x)


//ISP_CE1_CODER_Y_COF01


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF01_yuv_y_cof01() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF01.ISP_CE1_CODER_Y_COF01_ts.yuv_y_cof01
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF01_yuv_y_cof01(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF01.ISP_CE1_CODER_Y_COF01_ts.yuv_y_cof01 = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF01(yuv_y_cof01) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF01.word = (uint32_t)yuv_y_cof01<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF01() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF01.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF01_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF01.word = x)


//ISP_CE1_CODER_Y_COF02


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF02_yuv_y_cof02() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF02.ISP_CE1_CODER_Y_COF02_ts.yuv_y_cof02
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF02_yuv_y_cof02(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF02.ISP_CE1_CODER_Y_COF02_ts.yuv_y_cof02 = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF02(yuv_y_cof02) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF02.word = (uint32_t)yuv_y_cof02<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF02() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF02.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_Y_COF02_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_Y_COF02.word = x)


//ISP_CE1_CODER_CB_COF10


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF10_yuv_cb_cof10() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF10.ISP_CE1_CODER_CB_COF10_ts.yuv_cb_cof10
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF10_yuv_cb_cof10(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF10.ISP_CE1_CODER_CB_COF10_ts.yuv_cb_cof10 = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF10(yuv_cb_cof10) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF10.word = (uint32_t)yuv_cb_cof10<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF10() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF10.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF10_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF10.word = x)


//ISP_CE1_CODER_CB_COF11


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF11_yuv_cb_cof11() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF11.ISP_CE1_CODER_CB_COF11_ts.yuv_cb_cof11
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF11_yuv_cb_cof11(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF11.ISP_CE1_CODER_CB_COF11_ts.yuv_cb_cof11 = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF11(yuv_cb_cof11) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF11.word = (uint32_t)yuv_cb_cof11<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF11() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF11.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF11_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF11.word = x)


//ISP_CE1_CODER_CB_COF12


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF12_yuv_cb_cof12() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF12.ISP_CE1_CODER_CB_COF12_ts.yuv_cb_cof12
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF12_yuv_cb_cof12(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF12.ISP_CE1_CODER_CB_COF12_ts.yuv_cb_cof12 = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF12(yuv_cb_cof12) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF12.word = (uint32_t)yuv_cb_cof12<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF12() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF12.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COF12_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COF12.word = x)


//ISP_CE1_CODER_CR_COF20


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF20_yuv_cr_cof20() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF20.ISP_CE1_CODER_CR_COF20_ts.yuv_cr_cof20
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF20_yuv_cr_cof20(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF20.ISP_CE1_CODER_CR_COF20_ts.yuv_cr_cof20 = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF20(yuv_cr_cof20) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF20.word = (uint32_t)yuv_cr_cof20<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF20() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF20.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF20_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF20.word = x)


//ISP_CE1_CODER_CR_COF21


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF21_yuv_cr_cof21() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF21.ISP_CE1_CODER_CR_COF21_ts.yuv_cr_cof21
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF21_yuv_cr_cof21(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF21.ISP_CE1_CODER_CR_COF21_ts.yuv_cr_cof21 = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF21(yuv_cr_cof21) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF21.word = (uint32_t)yuv_cr_cof21<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF21() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF21.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF21_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF21.word = x)


//ISP_CE1_CODER_CR_COF22


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF22_yuv_cr_cof22() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF22.ISP_CE1_CODER_CR_COF22_ts.yuv_cr_cof22
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF22_yuv_cr_cof22(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF22.ISP_CE1_CODER_CR_COF22_ts.yuv_cr_cof22 = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF22(yuv_cr_cof22) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF22.word = (uint32_t)yuv_cr_cof22<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF22() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF22.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COF22_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COF22.word = x)


//ISP_CE1_CODER_YFLOOR


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_YFLOOR_yuv_yfloor() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_YFLOOR.ISP_CE1_CODER_YFLOOR_ts.yuv_yfloor
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_YFLOOR_yuv_yfloor(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_YFLOOR.ISP_CE1_CODER_YFLOOR_ts.yuv_yfloor = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_YFLOOR(yuv_yfloor) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_YFLOOR.word = (uint32_t)yuv_yfloor<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_YFLOOR() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_YFLOOR.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_YFLOOR_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_YFLOOR.word = x)


//ISP_CE1_CODER_CBFLOOR


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CBFLOOR_yuv_cbfloor() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CBFLOOR.ISP_CE1_CODER_CBFLOOR_ts.yuv_cbfloor
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CBFLOOR_yuv_cbfloor(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CBFLOOR.ISP_CE1_CODER_CBFLOOR_ts.yuv_cbfloor = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CBFLOOR(yuv_cbfloor) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CBFLOOR.word = (uint32_t)yuv_cbfloor<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CBFLOOR() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CBFLOOR.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CBFLOOR_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CBFLOOR.word = x)


//ISP_CE1_CODER_CRFLOOR


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CRFLOOR_yuv_crfloor() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CRFLOOR.ISP_CE1_CODER_CRFLOOR_ts.yuv_crfloor
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CRFLOOR_yuv_crfloor(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CRFLOOR.ISP_CE1_CODER_CRFLOOR_ts.yuv_crfloor = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CRFLOOR(yuv_crfloor) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CRFLOOR.word = (uint32_t)yuv_crfloor<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CRFLOOR() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CRFLOOR.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CRFLOOR_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CRFLOOR.word = x)


//ISP_CE1_CODER_CB_COLOUR_EFFECT


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CB_COLOUR_EFFECT_yuv_cb_colour_effect_lo() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COLOUR_EFFECT.ISP_CE1_CODER_CB_COLOUR_EFFECT_ts.yuv_cb_colour_effect_lo
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COLOUR_EFFECT_yuv_cb_colour_effect_lo(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COLOUR_EFFECT.ISP_CE1_CODER_CB_COLOUR_EFFECT_ts.yuv_cb_colour_effect_lo = x)


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CB_COLOUR_EFFECT_yuv_cb_colour_effect_hi() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COLOUR_EFFECT.ISP_CE1_CODER_CB_COLOUR_EFFECT_ts.yuv_cb_colour_effect_hi
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COLOUR_EFFECT_yuv_cb_colour_effect_hi(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COLOUR_EFFECT.ISP_CE1_CODER_CB_COLOUR_EFFECT_ts.yuv_cb_colour_effect_hi = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COLOUR_EFFECT(yuv_cb_colour_effect_lo,yuv_cb_colour_effect_hi) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COLOUR_EFFECT.word = (uint32_t)yuv_cb_colour_effect_lo<<0 | (uint32_t)yuv_cb_colour_effect_hi<<8)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CB_COLOUR_EFFECT() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COLOUR_EFFECT.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CB_COLOUR_EFFECT_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CB_COLOUR_EFFECT.word = x)


//ISP_CE1_CODER_CR_COLOUR_EFFECT


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CR_COLOUR_EFFECT_yuv_cr_colour_effect_lo() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COLOUR_EFFECT.ISP_CE1_CODER_CR_COLOUR_EFFECT_ts.yuv_cr_colour_effect_lo
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COLOUR_EFFECT_yuv_cr_colour_effect_lo(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COLOUR_EFFECT.ISP_CE1_CODER_CR_COLOUR_EFFECT_ts.yuv_cr_colour_effect_lo = x)


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CR_COLOUR_EFFECT_yuv_cr_colour_effect_hi() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COLOUR_EFFECT.ISP_CE1_CODER_CR_COLOUR_EFFECT_ts.yuv_cr_colour_effect_hi
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COLOUR_EFFECT_yuv_cr_colour_effect_hi(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COLOUR_EFFECT.ISP_CE1_CODER_CR_COLOUR_EFFECT_ts.yuv_cr_colour_effect_hi = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COLOUR_EFFECT(yuv_cr_colour_effect_lo,yuv_cr_colour_effect_hi) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COLOUR_EFFECT.word = (uint32_t)yuv_cr_colour_effect_lo<<0 | (uint32_t)yuv_cr_colour_effect_hi<<8)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CR_COLOUR_EFFECT() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COLOUR_EFFECT.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CR_COLOUR_EFFECT_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CR_COLOUR_EFFECT.word = x)


//ISP_CE1_CODER_CH0_MIN_CLIP


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH0_MIN_CLIP_yuv_ch0_min_clip() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH0_MIN_CLIP.ISP_CE1_CODER_CH0_MIN_CLIP_ts.yuv_ch0_min_clip
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH0_MIN_CLIP_yuv_ch0_min_clip(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH0_MIN_CLIP.ISP_CE1_CODER_CH0_MIN_CLIP_ts.yuv_ch0_min_clip = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH0_MIN_CLIP(yuv_ch0_min_clip) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH0_MIN_CLIP.word = (uint32_t)yuv_ch0_min_clip<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH0_MIN_CLIP() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH0_MIN_CLIP.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH0_MIN_CLIP_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH0_MIN_CLIP.word = x)


//ISP_CE1_CODER_CH0_MAX_CLIP


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH0_MAX_CLIP_yuv_ch0_max_clip() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH0_MAX_CLIP.ISP_CE1_CODER_CH0_MAX_CLIP_ts.yuv_ch0_max_clip
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH0_MAX_CLIP_yuv_ch0_max_clip(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH0_MAX_CLIP.ISP_CE1_CODER_CH0_MAX_CLIP_ts.yuv_ch0_max_clip = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH0_MAX_CLIP(yuv_ch0_max_clip) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH0_MAX_CLIP.word = (uint32_t)yuv_ch0_max_clip<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH0_MAX_CLIP() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH0_MAX_CLIP.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH0_MAX_CLIP_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH0_MAX_CLIP.word = x)


//ISP_CE1_CODER_CH1_MIN_CLIP


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH1_MIN_CLIP_yuv_ch1_min_clip() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH1_MIN_CLIP.ISP_CE1_CODER_CH1_MIN_CLIP_ts.yuv_ch1_min_clip
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH1_MIN_CLIP_yuv_ch1_min_clip(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH1_MIN_CLIP.ISP_CE1_CODER_CH1_MIN_CLIP_ts.yuv_ch1_min_clip = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH1_MIN_CLIP(yuv_ch1_min_clip) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH1_MIN_CLIP.word = (uint32_t)yuv_ch1_min_clip<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH1_MIN_CLIP() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH1_MIN_CLIP.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH1_MIN_CLIP_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH1_MIN_CLIP.word = x)


//ISP_CE1_CODER_CH1_MAX_CLIP


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH1_MAX_CLIP_yuv_ch1_max_clip() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH1_MAX_CLIP.ISP_CE1_CODER_CH1_MAX_CLIP_ts.yuv_ch1_max_clip
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH1_MAX_CLIP_yuv_ch1_max_clip(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH1_MAX_CLIP.ISP_CE1_CODER_CH1_MAX_CLIP_ts.yuv_ch1_max_clip = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH1_MAX_CLIP(yuv_ch1_max_clip) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH1_MAX_CLIP.word = (uint32_t)yuv_ch1_max_clip<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH1_MAX_CLIP() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH1_MAX_CLIP.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH1_MAX_CLIP_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH1_MAX_CLIP.word = x)


//ISP_CE1_CODER_CH2_MIN_CLIP


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH2_MIN_CLIP_yuv_ch2_min_clip() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH2_MIN_CLIP.ISP_CE1_CODER_CH2_MIN_CLIP_ts.yuv_ch2_min_clip
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH2_MIN_CLIP_yuv_ch2_min_clip(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH2_MIN_CLIP.ISP_CE1_CODER_CH2_MIN_CLIP_ts.yuv_ch2_min_clip = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH2_MIN_CLIP(yuv_ch2_min_clip) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH2_MIN_CLIP.word = (uint32_t)yuv_ch2_min_clip<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH2_MIN_CLIP() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH2_MIN_CLIP.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH2_MIN_CLIP_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH2_MIN_CLIP.word = x)


//ISP_CE1_CODER_CH2_MAX_CLIP


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH2_MAX_CLIP_yuv_ch2_max_clip() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH2_MAX_CLIP.ISP_CE1_CODER_CH2_MAX_CLIP_ts.yuv_ch2_max_clip
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH2_MAX_CLIP_yuv_ch2_max_clip(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH2_MAX_CLIP.ISP_CE1_CODER_CH2_MAX_CLIP_ts.yuv_ch2_max_clip = x)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH2_MAX_CLIP(yuv_ch2_max_clip) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH2_MAX_CLIP.word = (uint32_t)yuv_ch2_max_clip<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_CH2_MAX_CLIP() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH2_MAX_CLIP.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_CH2_MAX_CLIP_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_CH2_MAX_CLIP.word = x)


//ISP_CE1_CODER_RAW_NONACTIVE


#define Get_ISP_CE1_CODER_ISP_CE1_CODER_RAW_NONACTIVE_yuv_raw_nonactive() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_RAW_NONACTIVE.ISP_CE1_CODER_RAW_NONACTIVE_ts.yuv_raw_nonactive
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_RAW_NONACTIVE_yuv_raw_nonactive_DISABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_RAW_NONACTIVE.ISP_CE1_CODER_RAW_NONACTIVE_ts.yuv_raw_nonactive == yuv_raw_nonactive_DISABLE)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_RAW_NONACTIVE_yuv_raw_nonactive__DISABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_RAW_NONACTIVE.ISP_CE1_CODER_RAW_NONACTIVE_ts.yuv_raw_nonactive = yuv_raw_nonactive_DISABLE)
#define yuv_raw_nonactive_DISABLE 0x0    //Disable transmission of non-active lines to the output
#define Is_ISP_CE1_CODER_ISP_CE1_CODER_RAW_NONACTIVE_yuv_raw_nonactive_ENABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_RAW_NONACTIVE.ISP_CE1_CODER_RAW_NONACTIVE_ts.yuv_raw_nonactive == yuv_raw_nonactive_ENABLE)
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_RAW_NONACTIVE_yuv_raw_nonactive__ENABLE() (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_RAW_NONACTIVE.ISP_CE1_CODER_RAW_NONACTIVE_ts.yuv_raw_nonactive = yuv_raw_nonactive_ENABLE)
#define yuv_raw_nonactive_ENABLE 0x1    //Enable non-active lines copy from input to output
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_RAW_NONACTIVE(yuv_raw_nonactive) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_RAW_NONACTIVE.word = (uint8_t)yuv_raw_nonactive<<0)
#define Get_ISP_CE1_CODER_ISP_CE1_CODER_RAW_NONACTIVE() p_ISP_CE1_CODER_IP->ISP_CE1_CODER_RAW_NONACTIVE.word
#define Set_ISP_CE1_CODER_ISP_CE1_CODER_RAW_NONACTIVE_word(x) (p_ISP_CE1_CODER_IP->ISP_CE1_CODER_RAW_NONACTIVE.word = x)

//ISP_OPF1_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable output formatter module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* (DISABLE SOFT RESET) IP is functional*/
    }ISP_OPF1_ENABLE_ts;

}ISP_OPF1_ENABLE_tu;



//ISP_OPF1_DFV
/*Description: Design for verification register, use to verify interrupt
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* Disable DFV for OPF filter*/
        uint8_t dfv_interrupt_ctrl :1;
        /* 
        When the register value change, interrupt is set to activ*/
    }ISP_OPF1_DFV_ts;

}ISP_OPF1_DFV_tu;



//ISP_OPF1_HSYNC_RISING
/*Description: Pixel clock period delay between first active pixel data and rising edge of hsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hsync_rising;
    }ISP_OPF1_HSYNC_RISING_ts;

}ISP_OPF1_HSYNC_RISING_tu;



//ISP_OPF1_HSYNC_FALLING
/*Description: Pixel clock period delay between first active pixel data and falling edge of hsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hsync_falling;
    }ISP_OPF1_HSYNC_FALLING_ts;

}ISP_OPF1_HSYNC_FALLING_tu;



//ISP_OPF1_VSYNC_RISING_FINE
/*Description: Pixel clock period delay between first active pixel data and rising edge of vsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_rising_fine;
    }ISP_OPF1_VSYNC_RISING_FINE_ts;

}ISP_OPF1_VSYNC_RISING_FINE_tu;



//ISP_OPF1_VSYNC_FALLING_FINE
/*Description: Pixel clock period delay between first active pixel data and falling edge of vsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_falling_fine;
    }ISP_OPF1_VSYNC_FALLING_FINE_ts;

}ISP_OPF1_VSYNC_FALLING_FINE_tu;



//ISP_OPF1_VSYNC_RISING_COARSE
/*Description: Delay between line zero (SOF) and vsync0 rising edge (in lines)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_rising_coarse;
    }ISP_OPF1_VSYNC_RISING_COARSE_ts;

}ISP_OPF1_VSYNC_RISING_COARSE_tu;



//ISP_OPF1_VSYNC_FALLING_COARSE
/*Description: Delay between line zero (SOF) and vsync0 falling edge (in lines)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_falling_coarse;
    }ISP_OPF1_VSYNC_FALLING_COARSE_ts;

}ISP_OPF1_VSYNC_FALLING_COARSE_tu;



//ISP_OPF1_HCROP_RISING
/*Description: Horizontal starting point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hcrop_rising;
    }ISP_OPF1_HCROP_RISING_ts;

}ISP_OPF1_HCROP_RISING_tu;



//ISP_OPF1_HCROP_FALLING
/*Description: Horizontal end point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hcrop_falling;
    }ISP_OPF1_HCROP_FALLING_ts;

}ISP_OPF1_HCROP_FALLING_tu;



//ISP_OPF1_VCROP_RISING_COARSE
/*Description: Vertical starting point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vcrop_rising_coarse;
    }ISP_OPF1_VCROP_RISING_COARSE_ts;

}ISP_OPF1_VCROP_RISING_COARSE_tu;



//ISP_OPF1_VCROP_FALLING_COARSE
/*Description: Vertical end point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vcrop_falling_coarse;
    }ISP_OPF1_VCROP_FALLING_COARSE_ts;

}ISP_OPF1_VCROP_FALLING_COARSE_tu;



//ISP_OPF1_CONTROL
/*Description: Output Formatter Control register
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t sync_based_pixvalid :1;
        /* Enable sync-based pix-valid output*/
        uint8_t toggle_pix_valid :1;
        /* Enable pix_valid toggle function*/
        uint8_t rgb_flip :3;
        /* Swap order of RGB bytes being output :*/
        uint8_t rgb_bit_flip :1;
        /* Swap order of bits with RGB byte :*/
        uint8_t embedded_code_en :1;
        /* Enable embedded code insertion*/
        uint8_t false_sync_code_protect_en :1;
        /* False sync code protection function*/
        uint8_t invert_hsync :1;
        /* Enable hsync0 inversion*/
        uint8_t invert_vsync :1;
        /* Enable Vsync0 inversion*/
        uint8_t idata_ch0_en :1;
        /* Enable/Disable corresponding channel output data*/
        uint8_t idata_ch1_en :1;
        /* Enable/Disable corresponding channel output data*/
        uint8_t idata_ch2_en :1;
        /* Enable/Disable corresponding channel output data*/
        uint8_t opf_output :3;
        /* Output Data Format :*/
        uint8_t rgb444_format :1;
        /* Packs RGB444 data to resemble RGB565*/
    }ISP_OPF1_CONTROL_ts;

}ISP_OPF1_CONTROL_tu;



//ISP_OPF1_PIXVALID_LTYPES
/*Description: Defines behaviour depending on line types.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t pixvalid_linetypes :6;
        /* Select line types for which pixvalid will be generated :
        bit0 - SOF
        bit1 - EOF
        bit2 - BLANK
        bit3 - BLACK
        bit4 - DARK
        bit5 - ACTIVE*/
        uint8_t eof_blank_only_en :1;
        /* Used to qualify blank lines at the end of frame (no other blank lines in frame are qualified).
        Bit2 of pixvalid_linetypes MUST be set if this register is to be used.*/
    }ISP_OPF1_PIXVALID_LTYPES_ts;

}ISP_OPF1_PIXVALID_LTYPES_tu;



//ISP_OPF1_YCBCR_FLIP
/*Description: Control Y/Cb/Cr output order
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t cbcr_flip :1;
        /* Flip Cb-Cr output sequence*/
        uint8_t y_cbcr_flip :1;
        /* Flip Y-Cb/Cr output sequence*/
    }ISP_OPF1_YCBCR_FLIP_ts;

}ISP_OPF1_YCBCR_FLIP_tu;



//ISP_OPF1_LAST_NONACT_LINE
/*Description: Line number of last non-active line before start of active region (assumes SOF=0)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t last_nonactive_line;
    }ISP_OPF1_LAST_NONACT_LINE_ts;

}ISP_OPF1_LAST_NONACT_LINE_tu;



//ISP_OPF1_HSYNC_RISING_STATUS
/*Description: Pixel clock period delay between first active pixel data and rising edge of hsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hsync_rising_status;
    }ISP_OPF1_HSYNC_RISING_STATUS_ts;

}ISP_OPF1_HSYNC_RISING_STATUS_tu;



//ISP_OPF1_HSYNC_FALLING_STATUS
/*Description: Pixel clock period delay between first active pixel data and falling edge of hsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hsync_falling_status;
    }ISP_OPF1_HSYNC_FALLING_STATUS_ts;

}ISP_OPF1_HSYNC_FALLING_STATUS_tu;



//ISP_OPF1_VSYNC_RISING_FINE_STATUS
/*Description: Pixel clock period delay between first active pixel data and rising edge of vsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_rising_fine_status;
    }ISP_OPF1_VSYNC_RISING_FINE_STATUS_ts;

}ISP_OPF1_VSYNC_RISING_FINE_STATUS_tu;



//ISP_OPF1_VSYNC_FALLING_FINE_STATUS
/*Description: Pixel clock period delay between first active pixel data and falling edge of vsync0
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_falling_fine_status;
    }ISP_OPF1_VSYNC_FALLING_FINE_STATUS_ts;

}ISP_OPF1_VSYNC_FALLING_FINE_STATUS_tu;



//ISP_OPF1_VSYNC_RISING_COARSE_STATUS
/*Description: Delay between line zero (SOF) and vsync0 rising edge (in lines)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_rising_coarse_status;
    }ISP_OPF1_VSYNC_RISING_COARSE_STATUS_ts;

}ISP_OPF1_VSYNC_RISING_COARSE_STATUS_tu;



//ISP_OPF1_VSYNC_FALLING_COARSE_STATUS
/*Description: Delay between line zero (SOF) and vsync0 falling edge (in lines)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vsync_falling_coarse_status;
    }ISP_OPF1_VSYNC_FALLING_COARSE_STATUS_ts;

}ISP_OPF1_VSYNC_FALLING_COARSE_STATUS_tu;



//ISP_OPF1_HCROP_RISING_STATUS
/*Description: Horizontal starting point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hcrop_rising_status;
    }ISP_OPF1_HCROP_RISING_STATUS_ts;

}ISP_OPF1_HCROP_RISING_STATUS_tu;



//ISP_OPF1_HCROP_FALLING_STATUS
/*Description: Horizontal end point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hcrop_falling_status;
    }ISP_OPF1_HCROP_FALLING_STATUS_ts;

}ISP_OPF1_HCROP_FALLING_STATUS_tu;



//ISP_OPF1_VCROP_RISING_COARSE_STATUS
/*Description: Vertical starting point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vcrop_rising_coarse_status;
    }ISP_OPF1_VCROP_RISING_COARSE_STATUS_ts;

}ISP_OPF1_VCROP_RISING_COARSE_STATUS_tu;



//ISP_OPF1_VCROP_FALLING_COARSE_STATUS
/*Description: Vertical end point of crop window of interest
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vcrop_falling_coarse_status;
    }ISP_OPF1_VCROP_FALLING_COARSE_STATUS_ts;

}ISP_OPF1_VCROP_FALLING_COARSE_STATUS_tu;



//ISP_OPF1_CONTROL_STATUS
/*Description: Output Formatter Control Status register
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t sync_based_pixvalid_status :1;
        /* Sync-based pix-valid Status*/
        uint8_t toggle_pix_valid_status :1;
        /* Pix_valid toggling status*/
        uint8_t rgb_flip_status :3;
        /* Current output order of RGB bytes :*/
        uint8_t rgb_bit_flip_status :1;
        /* Current Swap order of bits with RGB byte :*/
        uint8_t embedded_code_en_status :1;
        /* Embedded code insertion status*/
        uint8_t false_sync_code_protect_en_status :1;
        /* False sync code protection Status*/
        uint8_t invert_hsync_status :1;
        /* Current Enable Status of hsync0 inversion*/
        uint8_t invert_vsync_status :1;
        /* Current Enable Status of Vsync0 inversion*/
        uint8_t idata_ch0_en_status :1;
        /* Current Enable Status of corresponding channel output data*/
        uint8_t idata_ch1_en_status :1;
        /* Current Enable Status of corresponding channel output data*/
        uint8_t idata_ch2_en_status :1;
        /* Current Enable Status of corresponding channel output data*/
        uint8_t opf_output_status :3;
        /* Current Output Data Format :*/
        uint8_t rgb444_format_status :1;
        /* Current packing of RGB444 data*/
    }ISP_OPF1_CONTROL_STATUS_ts;

}ISP_OPF1_CONTROL_STATUS_tu;



//ISP_OPF1_PIXVALID_LTYPES_STATUS
/*Description: Line type control Status register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t pixvalid_linetypes_status :6;
        /* Current line types for which pixvalid will be generated:
        bit0 - SOF
        bit1 - EOF
        bit2 - BLANK
        bit3 - BLACK
        bit4 - DARK
        bit5 - ACTIVE*/
        uint8_t eof_blank_only_en_status :1;
        /* Current status of blank lines qualification at the end of frame (no other blank lines in frame are qualified).*/
    }ISP_OPF1_PIXVALID_LTYPES_STATUS_ts;

}ISP_OPF1_PIXVALID_LTYPES_STATUS_tu;



//ISP_OPF1_YCBCR_FLIP_STATUS
/*Description: Current Y/Cb/Cr order
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t cbcr_flip_status :1;
        /* Current Cb-Cr output sequence*/
        uint8_t y_cbcr_flip_status :1;
        /* Current Y-Cb/Cr output sequence*/
    }ISP_OPF1_YCBCR_FLIP_STATUS_ts;

}ISP_OPF1_YCBCR_FLIP_STATUS_tu;



//ISP_OPF1_LAST_NONACT_LINE_STATUS
/*Description: Current Line number of last non-active line before start of active region (assumes SOF=0)
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t last_nonactive_line_status;
    }ISP_OPF1_LAST_NONACT_LINE_STATUS_ts;

}ISP_OPF1_LAST_NONACT_LINE_STATUS_tu;

typedef struct
{
    ISP_OPF1_ENABLE_tu ISP_OPF1_ENABLE;
    ISP_OPF1_DFV_tu ISP_OPF1_DFV;
    ISP_OPF1_HSYNC_RISING_tu ISP_OPF1_HSYNC_RISING;
    ISP_OPF1_HSYNC_FALLING_tu ISP_OPF1_HSYNC_FALLING;
    ISP_OPF1_VSYNC_RISING_FINE_tu ISP_OPF1_VSYNC_RISING_FINE;
    ISP_OPF1_VSYNC_FALLING_FINE_tu ISP_OPF1_VSYNC_FALLING_FINE;
    ISP_OPF1_VSYNC_RISING_COARSE_tu ISP_OPF1_VSYNC_RISING_COARSE;
    ISP_OPF1_VSYNC_FALLING_COARSE_tu ISP_OPF1_VSYNC_FALLING_COARSE;
    ISP_OPF1_HCROP_RISING_tu ISP_OPF1_HCROP_RISING;
    ISP_OPF1_HCROP_FALLING_tu ISP_OPF1_HCROP_FALLING;
    ISP_OPF1_VCROP_RISING_COARSE_tu ISP_OPF1_VCROP_RISING_COARSE;
    ISP_OPF1_VCROP_FALLING_COARSE_tu ISP_OPF1_VCROP_FALLING_COARSE;
    ISP_OPF1_CONTROL_tu ISP_OPF1_CONTROL;
    ISP_OPF1_PIXVALID_LTYPES_tu ISP_OPF1_PIXVALID_LTYPES;
    ISP_OPF1_YCBCR_FLIP_tu ISP_OPF1_YCBCR_FLIP;
    ISP_OPF1_LAST_NONACT_LINE_tu ISP_OPF1_LAST_NONACT_LINE;
    ISP_OPF1_HSYNC_RISING_STATUS_tu ISP_OPF1_HSYNC_RISING_STATUS;
    ISP_OPF1_HSYNC_FALLING_STATUS_tu ISP_OPF1_HSYNC_FALLING_STATUS;
    ISP_OPF1_VSYNC_RISING_FINE_STATUS_tu ISP_OPF1_VSYNC_RISING_FINE_STATUS;
    ISP_OPF1_VSYNC_FALLING_FINE_STATUS_tu ISP_OPF1_VSYNC_FALLING_FINE_STATUS;
    ISP_OPF1_VSYNC_RISING_COARSE_STATUS_tu ISP_OPF1_VSYNC_RISING_COARSE_STATUS;
    ISP_OPF1_VSYNC_FALLING_COARSE_STATUS_tu ISP_OPF1_VSYNC_FALLING_COARSE_STATUS;
    ISP_OPF1_HCROP_RISING_STATUS_tu ISP_OPF1_HCROP_RISING_STATUS;
    ISP_OPF1_HCROP_FALLING_STATUS_tu ISP_OPF1_HCROP_FALLING_STATUS;
    ISP_OPF1_VCROP_RISING_COARSE_STATUS_tu ISP_OPF1_VCROP_RISING_COARSE_STATUS;
    ISP_OPF1_VCROP_FALLING_COARSE_STATUS_tu ISP_OPF1_VCROP_FALLING_COARSE_STATUS;
    ISP_OPF1_CONTROL_STATUS_tu ISP_OPF1_CONTROL_STATUS;
    ISP_OPF1_PIXVALID_LTYPES_STATUS_tu ISP_OPF1_PIXVALID_LTYPES_STATUS;
    ISP_OPF1_YCBCR_FLIP_STATUS_tu ISP_OPF1_YCBCR_FLIP_STATUS;
    ISP_OPF1_LAST_NONACT_LINE_STATUS_tu ISP_OPF1_LAST_NONACT_LINE_STATUS;
}ISP_OPF1_IP_ts;




//ISP_OPF1_ENABLE


#define Get_ISP_OPF1_ISP_OPF1_ENABLE_enable() p_ISP_OPF1_IP->ISP_OPF1_ENABLE.ISP_OPF1_ENABLE_ts.enable
#define Is_ISP_OPF1_ISP_OPF1_ENABLE_enable_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_ENABLE.ISP_OPF1_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_OPF1_ISP_OPF1_ENABLE_enable__DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_ENABLE.ISP_OPF1_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable output formatter module
#define Is_ISP_OPF1_ISP_OPF1_ENABLE_enable_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_ENABLE.ISP_OPF1_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_OPF1_ISP_OPF1_ENABLE_enable__ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_ENABLE.ISP_OPF1_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable output formatter module


#define Get_ISP_OPF1_ISP_OPF1_ENABLE_soft_reset() p_ISP_OPF1_IP->ISP_OPF1_ENABLE.ISP_OPF1_ENABLE_ts.soft_reset
#define Is_ISP_OPF1_ISP_OPF1_ENABLE_soft_reset_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_ENABLE.ISP_OPF1_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_OPF1_ISP_OPF1_ENABLE_soft_reset__B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_ENABLE.ISP_OPF1_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET) IP is functional
#define Is_ISP_OPF1_ISP_OPF1_ENABLE_soft_reset_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_ENABLE.ISP_OPF1_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_OPF1_ISP_OPF1_ENABLE_soft_reset__B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_ENABLE.ISP_OPF1_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET) Soft Reset the IP
#define Set_ISP_OPF1_ISP_OPF1_ENABLE(enable,soft_reset) (p_ISP_OPF1_IP->ISP_OPF1_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_OPF1_ISP_OPF1_ENABLE() p_ISP_OPF1_IP->ISP_OPF1_ENABLE.word
#define Set_ISP_OPF1_ISP_OPF1_ENABLE_word(x) (p_ISP_OPF1_IP->ISP_OPF1_ENABLE.word = x)


//ISP_OPF1_DFV


#define Get_ISP_OPF1_ISP_OPF1_DFV_dfv_enable() p_ISP_OPF1_IP->ISP_OPF1_DFV.ISP_OPF1_DFV_ts.dfv_enable
#define Is_ISP_OPF1_ISP_OPF1_DFV_dfv_enable_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_DFV.ISP_OPF1_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_OPF1_ISP_OPF1_DFV_dfv_enable__DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_DFV.ISP_OPF1_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable DFV for OPF filter
#define Is_ISP_OPF1_ISP_OPF1_DFV_dfv_enable_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_DFV.ISP_OPF1_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_OPF1_ISP_OPF1_DFV_dfv_enable__ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_DFV.ISP_OPF1_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable DFV for OPF filter


#define Get_ISP_OPF1_ISP_OPF1_DFV_dfv_interrupt_ctrl() p_ISP_OPF1_IP->ISP_OPF1_DFV.ISP_OPF1_DFV_ts.dfv_interrupt_ctrl
#define Set_ISP_OPF1_ISP_OPF1_DFV_dfv_interrupt_ctrl(x) (p_ISP_OPF1_IP->ISP_OPF1_DFV.ISP_OPF1_DFV_ts.dfv_interrupt_ctrl = x)
#define Set_ISP_OPF1_ISP_OPF1_DFV(dfv_enable,dfv_interrupt_ctrl) (p_ISP_OPF1_IP->ISP_OPF1_DFV.word = (uint32_t)dfv_enable<<0 | (uint32_t)dfv_interrupt_ctrl<<1)
#define Get_ISP_OPF1_ISP_OPF1_DFV() p_ISP_OPF1_IP->ISP_OPF1_DFV.word
#define Set_ISP_OPF1_ISP_OPF1_DFV_word(x) (p_ISP_OPF1_IP->ISP_OPF1_DFV.word = x)


//ISP_OPF1_HSYNC_RISING


#define Get_ISP_OPF1_ISP_OPF1_HSYNC_RISING_hsync_rising() p_ISP_OPF1_IP->ISP_OPF1_HSYNC_RISING.ISP_OPF1_HSYNC_RISING_ts.hsync_rising
#define Set_ISP_OPF1_ISP_OPF1_HSYNC_RISING_hsync_rising(x) (p_ISP_OPF1_IP->ISP_OPF1_HSYNC_RISING.ISP_OPF1_HSYNC_RISING_ts.hsync_rising = x)
#define Set_ISP_OPF1_ISP_OPF1_HSYNC_RISING(hsync_rising) (p_ISP_OPF1_IP->ISP_OPF1_HSYNC_RISING.word = (uint32_t)hsync_rising<<0)
#define Get_ISP_OPF1_ISP_OPF1_HSYNC_RISING() p_ISP_OPF1_IP->ISP_OPF1_HSYNC_RISING.word
#define Set_ISP_OPF1_ISP_OPF1_HSYNC_RISING_word(x) (p_ISP_OPF1_IP->ISP_OPF1_HSYNC_RISING.word = x)


//ISP_OPF1_HSYNC_FALLING


#define Get_ISP_OPF1_ISP_OPF1_HSYNC_FALLING_hsync_falling() p_ISP_OPF1_IP->ISP_OPF1_HSYNC_FALLING.ISP_OPF1_HSYNC_FALLING_ts.hsync_falling
#define Set_ISP_OPF1_ISP_OPF1_HSYNC_FALLING_hsync_falling(x) (p_ISP_OPF1_IP->ISP_OPF1_HSYNC_FALLING.ISP_OPF1_HSYNC_FALLING_ts.hsync_falling = x)
#define Set_ISP_OPF1_ISP_OPF1_HSYNC_FALLING(hsync_falling) (p_ISP_OPF1_IP->ISP_OPF1_HSYNC_FALLING.word = (uint32_t)hsync_falling<<0)
#define Get_ISP_OPF1_ISP_OPF1_HSYNC_FALLING() p_ISP_OPF1_IP->ISP_OPF1_HSYNC_FALLING.word
#define Set_ISP_OPF1_ISP_OPF1_HSYNC_FALLING_word(x) (p_ISP_OPF1_IP->ISP_OPF1_HSYNC_FALLING.word = x)


//ISP_OPF1_VSYNC_RISING_FINE


#define Get_ISP_OPF1_ISP_OPF1_VSYNC_RISING_FINE_vsync_rising_fine() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_FINE.ISP_OPF1_VSYNC_RISING_FINE_ts.vsync_rising_fine
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_RISING_FINE_vsync_rising_fine(x) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_FINE.ISP_OPF1_VSYNC_RISING_FINE_ts.vsync_rising_fine = x)
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_RISING_FINE(vsync_rising_fine) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_FINE.word = (uint32_t)vsync_rising_fine<<0)
#define Get_ISP_OPF1_ISP_OPF1_VSYNC_RISING_FINE() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_FINE.word
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_RISING_FINE_word(x) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_FINE.word = x)


//ISP_OPF1_VSYNC_FALLING_FINE


#define Get_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_FINE_vsync_falling_fine() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_FINE.ISP_OPF1_VSYNC_FALLING_FINE_ts.vsync_falling_fine
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_FINE_vsync_falling_fine(x) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_FINE.ISP_OPF1_VSYNC_FALLING_FINE_ts.vsync_falling_fine = x)
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_FINE(vsync_falling_fine) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_FINE.word = (uint32_t)vsync_falling_fine<<0)
#define Get_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_FINE() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_FINE.word
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_FINE_word(x) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_FINE.word = x)


//ISP_OPF1_VSYNC_RISING_COARSE


#define Get_ISP_OPF1_ISP_OPF1_VSYNC_RISING_COARSE_vsync_rising_coarse() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_COARSE.ISP_OPF1_VSYNC_RISING_COARSE_ts.vsync_rising_coarse
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_RISING_COARSE_vsync_rising_coarse(x) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_COARSE.ISP_OPF1_VSYNC_RISING_COARSE_ts.vsync_rising_coarse = x)
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_RISING_COARSE(vsync_rising_coarse) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_COARSE.word = (uint32_t)vsync_rising_coarse<<0)
#define Get_ISP_OPF1_ISP_OPF1_VSYNC_RISING_COARSE() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_COARSE.word
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_RISING_COARSE_word(x) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_COARSE.word = x)


//ISP_OPF1_VSYNC_FALLING_COARSE


#define Get_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_COARSE_vsync_falling_coarse() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_COARSE.ISP_OPF1_VSYNC_FALLING_COARSE_ts.vsync_falling_coarse
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_COARSE_vsync_falling_coarse(x) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_COARSE.ISP_OPF1_VSYNC_FALLING_COARSE_ts.vsync_falling_coarse = x)
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_COARSE(vsync_falling_coarse) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_COARSE.word = (uint32_t)vsync_falling_coarse<<0)
#define Get_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_COARSE() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_COARSE.word
#define Set_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_COARSE_word(x) (p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_COARSE.word = x)


//ISP_OPF1_HCROP_RISING


#define Get_ISP_OPF1_ISP_OPF1_HCROP_RISING_hcrop_rising() p_ISP_OPF1_IP->ISP_OPF1_HCROP_RISING.ISP_OPF1_HCROP_RISING_ts.hcrop_rising
#define Set_ISP_OPF1_ISP_OPF1_HCROP_RISING_hcrop_rising(x) (p_ISP_OPF1_IP->ISP_OPF1_HCROP_RISING.ISP_OPF1_HCROP_RISING_ts.hcrop_rising = x)
#define Set_ISP_OPF1_ISP_OPF1_HCROP_RISING(hcrop_rising) (p_ISP_OPF1_IP->ISP_OPF1_HCROP_RISING.word = (uint32_t)hcrop_rising<<0)
#define Get_ISP_OPF1_ISP_OPF1_HCROP_RISING() p_ISP_OPF1_IP->ISP_OPF1_HCROP_RISING.word
#define Set_ISP_OPF1_ISP_OPF1_HCROP_RISING_word(x) (p_ISP_OPF1_IP->ISP_OPF1_HCROP_RISING.word = x)


//ISP_OPF1_HCROP_FALLING


#define Get_ISP_OPF1_ISP_OPF1_HCROP_FALLING_hcrop_falling() p_ISP_OPF1_IP->ISP_OPF1_HCROP_FALLING.ISP_OPF1_HCROP_FALLING_ts.hcrop_falling
#define Set_ISP_OPF1_ISP_OPF1_HCROP_FALLING_hcrop_falling(x) (p_ISP_OPF1_IP->ISP_OPF1_HCROP_FALLING.ISP_OPF1_HCROP_FALLING_ts.hcrop_falling = x)
#define Set_ISP_OPF1_ISP_OPF1_HCROP_FALLING(hcrop_falling) (p_ISP_OPF1_IP->ISP_OPF1_HCROP_FALLING.word = ((uint32_t)hcrop_falling)<<0)
#define Get_ISP_OPF1_ISP_OPF1_HCROP_FALLING() p_ISP_OPF1_IP->ISP_OPF1_HCROP_FALLING.word
#define Set_ISP_OPF1_ISP_OPF1_HCROP_FALLING_word(x) (p_ISP_OPF1_IP->ISP_OPF1_HCROP_FALLING.word = x)


//ISP_OPF1_VCROP_RISING_COARSE


#define Get_ISP_OPF1_ISP_OPF1_VCROP_RISING_COARSE_vcrop_rising_coarse() p_ISP_OPF1_IP->ISP_OPF1_VCROP_RISING_COARSE.ISP_OPF1_VCROP_RISING_COARSE_ts.vcrop_rising_coarse
#define Set_ISP_OPF1_ISP_OPF1_VCROP_RISING_COARSE_vcrop_rising_coarse(x) (p_ISP_OPF1_IP->ISP_OPF1_VCROP_RISING_COARSE.ISP_OPF1_VCROP_RISING_COARSE_ts.vcrop_rising_coarse = x)
#define Set_ISP_OPF1_ISP_OPF1_VCROP_RISING_COARSE(vcrop_rising_coarse) (p_ISP_OPF1_IP->ISP_OPF1_VCROP_RISING_COARSE.word = (uint32_t)vcrop_rising_coarse<<0)
#define Get_ISP_OPF1_ISP_OPF1_VCROP_RISING_COARSE() p_ISP_OPF1_IP->ISP_OPF1_VCROP_RISING_COARSE.word
#define Set_ISP_OPF1_ISP_OPF1_VCROP_RISING_COARSE_word(x) (p_ISP_OPF1_IP->ISP_OPF1_VCROP_RISING_COARSE.word = x)


//ISP_OPF1_VCROP_FALLING_COARSE


#define Get_ISP_OPF1_ISP_OPF1_VCROP_FALLING_COARSE_vcrop_falling_coarse() p_ISP_OPF1_IP->ISP_OPF1_VCROP_FALLING_COARSE.ISP_OPF1_VCROP_FALLING_COARSE_ts.vcrop_falling_coarse
#define Set_ISP_OPF1_ISP_OPF1_VCROP_FALLING_COARSE_vcrop_falling_coarse(x) (p_ISP_OPF1_IP->ISP_OPF1_VCROP_FALLING_COARSE.ISP_OPF1_VCROP_FALLING_COARSE_ts.vcrop_falling_coarse = x)
#define Set_ISP_OPF1_ISP_OPF1_VCROP_FALLING_COARSE(vcrop_falling_coarse) (p_ISP_OPF1_IP->ISP_OPF1_VCROP_FALLING_COARSE.word = (uint32_t)vcrop_falling_coarse<<0)
#define Get_ISP_OPF1_ISP_OPF1_VCROP_FALLING_COARSE() p_ISP_OPF1_IP->ISP_OPF1_VCROP_FALLING_COARSE.word
#define Set_ISP_OPF1_ISP_OPF1_VCROP_FALLING_COARSE_word(x) (p_ISP_OPF1_IP->ISP_OPF1_VCROP_FALLING_COARSE.word = x)


//ISP_OPF1_CONTROL


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_sync_based_pixvalid() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.sync_based_pixvalid
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_sync_based_pixvalid_SYNC_PIX_VALID_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.sync_based_pixvalid == sync_based_pixvalid_SYNC_PIX_VALID_DISABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_sync_based_pixvalid__SYNC_PIX_VALID_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.sync_based_pixvalid = sync_based_pixvalid_SYNC_PIX_VALID_DISABLE)
#define sync_based_pixvalid_SYNC_PIX_VALID_DISABLE 0x0    //Disable
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_sync_based_pixvalid_SYNC_PIX_VALID_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.sync_based_pixvalid == sync_based_pixvalid_SYNC_PIX_VALID_ENABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_sync_based_pixvalid__SYNC_PIX_VALID_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.sync_based_pixvalid = sync_based_pixvalid_SYNC_PIX_VALID_ENABLE)
#define sync_based_pixvalid_SYNC_PIX_VALID_ENABLE 0x1    //Enable


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_toggle_pix_valid() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.toggle_pix_valid
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_toggle_pix_valid_PIX_VALID_LEVEL() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.toggle_pix_valid == toggle_pix_valid_PIX_VALID_LEVEL)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_toggle_pix_valid__PIX_VALID_LEVEL() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.toggle_pix_valid = toggle_pix_valid_PIX_VALID_LEVEL)
#define toggle_pix_valid_PIX_VALID_LEVEL 0x0    //Disable
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_toggle_pix_valid_PIX_VALID_EDGE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.toggle_pix_valid == toggle_pix_valid_PIX_VALID_EDGE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_toggle_pix_valid__PIX_VALID_EDGE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.toggle_pix_valid = toggle_pix_valid_PIX_VALID_EDGE)
#define toggle_pix_valid_PIX_VALID_EDGE 0x1    //Enable


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip == rgb_flip_B_0x0)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip__B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip = rgb_flip_B_0x0)
#define rgb_flip_B_0x0 0x0    //RGB
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip == rgb_flip_B_0x1)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip__B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip = rgb_flip_B_0x1)
#define rgb_flip_B_0x1 0x1    //BGR
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip_B_0x2() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip == rgb_flip_B_0x2)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip__B_0x2() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip = rgb_flip_B_0x2)
#define rgb_flip_B_0x2 0x2    //GBR
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip_B_0x3() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip == rgb_flip_B_0x3)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip__B_0x3() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip = rgb_flip_B_0x3)
#define rgb_flip_B_0x3 0x3    //RBG
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip_B_0x4() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip == rgb_flip_B_0x4)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip__B_0x4() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip = rgb_flip_B_0x4)
#define rgb_flip_B_0x4 0x4    //BRG
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip_B_0x5() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip == rgb_flip_B_0x5)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_rgb_flip__B_0x5() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_flip = rgb_flip_B_0x5)
#define rgb_flip_B_0x5 0x5    //GRB


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_rgb_bit_flip() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_bit_flip
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_rgb_bit_flip_RGB_BITS_SWAP_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_bit_flip == rgb_bit_flip_RGB_BITS_SWAP_DISABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_rgb_bit_flip__RGB_BITS_SWAP_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_bit_flip = rgb_bit_flip_RGB_BITS_SWAP_DISABLE)
#define rgb_bit_flip_RGB_BITS_SWAP_DISABLE 0x0    //no swap i.e. [9:0]
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_rgb_bit_flip_RGB_BITS_SWAP_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_bit_flip == rgb_bit_flip_RGB_BITS_SWAP_ENABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_rgb_bit_flip__RGB_BITS_SWAP_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb_bit_flip = rgb_bit_flip_RGB_BITS_SWAP_ENABLE)
#define rgb_bit_flip_RGB_BITS_SWAP_ENABLE 0x1    //swap i.e. [0:9]


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_embedded_code_en() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.embedded_code_en
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_embedded_code_en_EMB_CODE_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.embedded_code_en == embedded_code_en_EMB_CODE_DISABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_embedded_code_en__EMB_CODE_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.embedded_code_en = embedded_code_en_EMB_CODE_DISABLE)
#define embedded_code_en_EMB_CODE_DISABLE 0x0    //Disable
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_embedded_code_en_EMB_CODE_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.embedded_code_en == embedded_code_en_EMB_CODE_ENABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_embedded_code_en__EMB_CODE_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.embedded_code_en = embedded_code_en_EMB_CODE_ENABLE)
#define embedded_code_en_EMB_CODE_ENABLE 0x1    //Enable


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_false_sync_code_protect_en() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.false_sync_code_protect_en
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_false_sync_code_protect_en_FSC_PROTECTION_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.false_sync_code_protect_en == false_sync_code_protect_en_FSC_PROTECTION_DISABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_false_sync_code_protect_en__FSC_PROTECTION_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.false_sync_code_protect_en = false_sync_code_protect_en_FSC_PROTECTION_DISABLE)
#define false_sync_code_protect_en_FSC_PROTECTION_DISABLE 0x0    //Disable
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_false_sync_code_protect_en_FSC_PROTECTION_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.false_sync_code_protect_en == false_sync_code_protect_en_FSC_PROTECTION_ENABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_false_sync_code_protect_en__FSC_PROTECTION_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.false_sync_code_protect_en = false_sync_code_protect_en_FSC_PROTECTION_ENABLE)
#define false_sync_code_protect_en_FSC_PROTECTION_ENABLE 0x1    //Enable


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_invert_hsync() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.invert_hsync
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_invert_hsync_HSYNC_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.invert_hsync == invert_hsync_HSYNC_DISABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_invert_hsync__HSYNC_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.invert_hsync = invert_hsync_HSYNC_DISABLE)
#define invert_hsync_HSYNC_DISABLE 0x0    //Disable
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_invert_hsync_HSYNC_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.invert_hsync == invert_hsync_HSYNC_ENABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_invert_hsync__HSYNC_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.invert_hsync = invert_hsync_HSYNC_ENABLE)
#define invert_hsync_HSYNC_ENABLE 0x1    //Enable


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_invert_vsync() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.invert_vsync
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_invert_vsync_VSYNC_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.invert_vsync == invert_vsync_VSYNC_DISABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_invert_vsync__VSYNC_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.invert_vsync = invert_vsync_VSYNC_DISABLE)
#define invert_vsync_VSYNC_DISABLE 0x0    //Disable
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_invert_vsync_VSYNC_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.invert_vsync == invert_vsync_VSYNC_ENABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_invert_vsync__VSYNC_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.invert_vsync = invert_vsync_VSYNC_ENABLE)
#define invert_vsync_VSYNC_ENABLE 0x1    //Enable


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch0_en() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch0_en
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch0_en_OPF_CHANNEL_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch0_en == idata_ch0_en_OPF_CHANNEL_DISABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch0_en__OPF_CHANNEL_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch0_en = idata_ch0_en_OPF_CHANNEL_DISABLE)
#define idata_ch0_en_OPF_CHANNEL_DISABLE 0x0    //Disable
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch0_en_OPF_CHANNEL_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch0_en == idata_ch0_en_OPF_CHANNEL_ENABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch0_en__OPF_CHANNEL_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch0_en = idata_ch0_en_OPF_CHANNEL_ENABLE)
#define idata_ch0_en_OPF_CHANNEL_ENABLE 0x1    //Enable


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch1_en() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch1_en
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch1_en_OPF_CHANNEL_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch1_en == idata_ch1_en_OPF_CHANNEL_DISABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch1_en__OPF_CHANNEL_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch1_en = idata_ch1_en_OPF_CHANNEL_DISABLE)
#define idata_ch1_en_OPF_CHANNEL_DISABLE 0x0    //Disable
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch1_en_OPF_CHANNEL_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch1_en == idata_ch1_en_OPF_CHANNEL_ENABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch1_en__OPF_CHANNEL_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch1_en = idata_ch1_en_OPF_CHANNEL_ENABLE)
#define idata_ch1_en_OPF_CHANNEL_ENABLE 0x1    //Enable


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch2_en() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch2_en
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch2_en_OPF_CHANNEL_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch2_en == idata_ch2_en_OPF_CHANNEL_DISABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch2_en__OPF_CHANNEL_DISABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch2_en = idata_ch2_en_OPF_CHANNEL_DISABLE)
#define idata_ch2_en_OPF_CHANNEL_DISABLE 0x0    //Disable
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch2_en_OPF_CHANNEL_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch2_en == idata_ch2_en_OPF_CHANNEL_ENABLE)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_idata_ch2_en__OPF_CHANNEL_ENABLE() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.idata_ch2_en = idata_ch2_en_OPF_CHANNEL_ENABLE)
#define idata_ch2_en_OPF_CHANNEL_ENABLE 0x1    //Enable


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_opf_output() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_opf_output_OPF_RGB101010() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output == opf_output_OPF_RGB101010)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_opf_output__OPF_RGB101010() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output = opf_output_OPF_RGB101010)
#define opf_output_OPF_RGB101010 0x0    //RGB101010
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_opf_output_OPF_RGB888() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output == opf_output_OPF_RGB888)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_opf_output__OPF_RGB888() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output = opf_output_OPF_RGB888)
#define opf_output_OPF_RGB888 0x1    //RGB888
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_opf_output_OPF_RGB565() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output == opf_output_OPF_RGB565)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_opf_output__OPF_RGB565() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output = opf_output_OPF_RGB565)
#define opf_output_OPF_RGB565 0x2    //RGB565
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_opf_output_OPF_RGB555() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output == opf_output_OPF_RGB555)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_opf_output__OPF_RGB555() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output = opf_output_OPF_RGB555)
#define opf_output_OPF_RGB555 0x3    //RGB555
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_opf_output_OPF_RGB444() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output == opf_output_OPF_RGB444)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_opf_output__OPF_RGB444() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output = opf_output_OPF_RGB444)
#define opf_output_OPF_RGB444 0x4    //RGB444
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_opf_output_OPF_YUV() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output == opf_output_OPF_YUV)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_opf_output__OPF_YUV() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.opf_output = opf_output_OPF_YUV)
#define opf_output_OPF_YUV 0x5    //YUV


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_rgb444_format() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb444_format
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_rgb444_format_RGB444_NOPACK() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb444_format == rgb444_format_RGB444_NOPACK)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_rgb444_format__RGB444_NOPACK() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb444_format = rgb444_format_RGB444_NOPACK)
#define rgb444_format_RGB444_NOPACK 0x0    //no packing
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_rgb444_format_RGB444_PACKED() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb444_format == rgb444_format_RGB444_PACKED)
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_rgb444_format__RGB444_PACKED() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.ISP_OPF1_CONTROL_ts.rgb444_format = rgb444_format_RGB444_PACKED)
#define rgb444_format_RGB444_PACKED 0x1    //Packing
#define Set_ISP_OPF1_ISP_OPF1_CONTROL(sync_based_pixvalid,toggle_pix_valid,rgb_flip,rgb_bit_flip,embedded_code_en,false_sync_code_protect_en,invert_hsync,invert_vsync,idata_ch0_en,idata_ch1_en,idata_ch2_en,opf_output,rgb444_format) (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.word = (uint32_t)sync_based_pixvalid<<0 | (uint32_t)toggle_pix_valid<<1 | (uint32_t)rgb_flip<<2 | (uint32_t)rgb_bit_flip<<5 | (uint32_t)embedded_code_en<<6 | (uint32_t)false_sync_code_protect_en<<7 | (uint32_t)invert_hsync<<8 | (uint32_t)invert_vsync<<9 | (uint32_t)idata_ch0_en<<10 | (uint32_t)idata_ch1_en<<11 | (uint32_t)idata_ch2_en<<12 | (uint32_t)opf_output<<13 | (uint32_t)rgb444_format<<16)
#define Get_ISP_OPF1_ISP_OPF1_CONTROL() p_ISP_OPF1_IP->ISP_OPF1_CONTROL.word
#define Set_ISP_OPF1_ISP_OPF1_CONTROL_word(x) (p_ISP_OPF1_IP->ISP_OPF1_CONTROL.word = x)


//ISP_OPF1_PIXVALID_LTYPES


#define Get_ISP_OPF1_ISP_OPF1_PIXVALID_LTYPES_pixvalid_linetypes() p_ISP_OPF1_IP->ISP_OPF1_PIXVALID_LTYPES.ISP_OPF1_PIXVALID_LTYPES_ts.pixvalid_linetypes
#define Set_ISP_OPF1_ISP_OPF1_PIXVALID_LTYPES_pixvalid_linetypes(x) (p_ISP_OPF1_IP->ISP_OPF1_PIXVALID_LTYPES.ISP_OPF1_PIXVALID_LTYPES_ts.pixvalid_linetypes = x)


#define Get_ISP_OPF1_ISP_OPF1_PIXVALID_LTYPES_eof_blank_only_en() p_ISP_OPF1_IP->ISP_OPF1_PIXVALID_LTYPES.ISP_OPF1_PIXVALID_LTYPES_ts.eof_blank_only_en
#define Set_ISP_OPF1_ISP_OPF1_PIXVALID_LTYPES_eof_blank_only_en(x) (p_ISP_OPF1_IP->ISP_OPF1_PIXVALID_LTYPES.ISP_OPF1_PIXVALID_LTYPES_ts.eof_blank_only_en = x)
#define Set_ISP_OPF1_ISP_OPF1_PIXVALID_LTYPES(pixvalid_linetypes,eof_blank_only_en) (p_ISP_OPF1_IP->ISP_OPF1_PIXVALID_LTYPES.word = (uint32_t)pixvalid_linetypes<<0 | (uint32_t)eof_blank_only_en<<6)
#define Get_ISP_OPF1_ISP_OPF1_PIXVALID_LTYPES() p_ISP_OPF1_IP->ISP_OPF1_PIXVALID_LTYPES.word
#define Set_ISP_OPF1_ISP_OPF1_PIXVALID_LTYPES_word(x) (p_ISP_OPF1_IP->ISP_OPF1_PIXVALID_LTYPES.word = x)


//ISP_OPF1_YCBCR_FLIP


#define Get_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_cbcr_flip() p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.ISP_OPF1_YCBCR_FLIP_ts.cbcr_flip
#define Is_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_cbcr_flip_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.ISP_OPF1_YCBCR_FLIP_ts.cbcr_flip == cbcr_flip_B_0x0)
#define Set_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_cbcr_flip__B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.ISP_OPF1_YCBCR_FLIP_ts.cbcr_flip = cbcr_flip_B_0x0)
#define cbcr_flip_B_0x0 0x0    //No flip
#define Is_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_cbcr_flip_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.ISP_OPF1_YCBCR_FLIP_ts.cbcr_flip == cbcr_flip_B_0x1)
#define Set_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_cbcr_flip__B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.ISP_OPF1_YCBCR_FLIP_ts.cbcr_flip = cbcr_flip_B_0x1)
#define cbcr_flip_B_0x1 0x1    //Flip


#define Get_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_y_cbcr_flip() p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.ISP_OPF1_YCBCR_FLIP_ts.y_cbcr_flip
#define Is_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_y_cbcr_flip_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.ISP_OPF1_YCBCR_FLIP_ts.y_cbcr_flip == y_cbcr_flip_B_0x0)
#define Set_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_y_cbcr_flip__B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.ISP_OPF1_YCBCR_FLIP_ts.y_cbcr_flip = y_cbcr_flip_B_0x0)
#define y_cbcr_flip_B_0x0 0x0    //No flip
#define Is_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_y_cbcr_flip_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.ISP_OPF1_YCBCR_FLIP_ts.y_cbcr_flip == y_cbcr_flip_B_0x1)
#define Set_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_y_cbcr_flip__B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.ISP_OPF1_YCBCR_FLIP_ts.y_cbcr_flip = y_cbcr_flip_B_0x1)
#define y_cbcr_flip_B_0x1 0x1    //Flip
#define Set_ISP_OPF1_ISP_OPF1_YCBCR_FLIP(cbcr_flip,y_cbcr_flip) (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.word = (uint32_t)cbcr_flip<<0 | (uint32_t)y_cbcr_flip<<1)
#define Get_ISP_OPF1_ISP_OPF1_YCBCR_FLIP() p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.word
#define Set_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_word(x) (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP.word = x)


//ISP_OPF1_LAST_NONACT_LINE


#define Get_ISP_OPF1_ISP_OPF1_LAST_NONACT_LINE_last_nonactive_line() p_ISP_OPF1_IP->ISP_OPF1_LAST_NONACT_LINE.ISP_OPF1_LAST_NONACT_LINE_ts.last_nonactive_line
#define Set_ISP_OPF1_ISP_OPF1_LAST_NONACT_LINE_last_nonactive_line(x) (p_ISP_OPF1_IP->ISP_OPF1_LAST_NONACT_LINE.ISP_OPF1_LAST_NONACT_LINE_ts.last_nonactive_line = x)
#define Set_ISP_OPF1_ISP_OPF1_LAST_NONACT_LINE(last_nonactive_line) (p_ISP_OPF1_IP->ISP_OPF1_LAST_NONACT_LINE.word = (uint32_t)last_nonactive_line<<0)
#define Get_ISP_OPF1_ISP_OPF1_LAST_NONACT_LINE() p_ISP_OPF1_IP->ISP_OPF1_LAST_NONACT_LINE.word
#define Set_ISP_OPF1_ISP_OPF1_LAST_NONACT_LINE_word(x) (p_ISP_OPF1_IP->ISP_OPF1_LAST_NONACT_LINE.word = x)


//ISP_OPF1_HSYNC_RISING_STATUS


#define Get_ISP_OPF1_ISP_OPF1_HSYNC_RISING_STATUS_hsync_rising_status() p_ISP_OPF1_IP->ISP_OPF1_HSYNC_RISING_STATUS.ISP_OPF1_HSYNC_RISING_STATUS_ts.hsync_rising_status
#define Get_ISP_OPF1_ISP_OPF1_HSYNC_RISING_STATUS() p_ISP_OPF1_IP->ISP_OPF1_HSYNC_RISING_STATUS.word


//ISP_OPF1_HSYNC_FALLING_STATUS


#define Get_ISP_OPF1_ISP_OPF1_HSYNC_FALLING_STATUS_hsync_falling_status() p_ISP_OPF1_IP->ISP_OPF1_HSYNC_FALLING_STATUS.ISP_OPF1_HSYNC_FALLING_STATUS_ts.hsync_falling_status
#define Get_ISP_OPF1_ISP_OPF1_HSYNC_FALLING_STATUS() p_ISP_OPF1_IP->ISP_OPF1_HSYNC_FALLING_STATUS.word


//ISP_OPF1_VSYNC_RISING_FINE_STATUS


#define Get_ISP_OPF1_ISP_OPF1_VSYNC_RISING_FINE_STATUS_vsync_rising_fine_status() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_FINE_STATUS.ISP_OPF1_VSYNC_RISING_FINE_STATUS_ts.vsync_rising_fine_status
#define Get_ISP_OPF1_ISP_OPF1_VSYNC_RISING_FINE_STATUS() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_FINE_STATUS.word


//ISP_OPF1_VSYNC_FALLING_FINE_STATUS


#define Get_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_FINE_STATUS_vsync_falling_fine_status() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_FINE_STATUS.ISP_OPF1_VSYNC_FALLING_FINE_STATUS_ts.vsync_falling_fine_status
#define Get_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_FINE_STATUS() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_FINE_STATUS.word


//ISP_OPF1_VSYNC_RISING_COARSE_STATUS


#define Get_ISP_OPF1_ISP_OPF1_VSYNC_RISING_COARSE_STATUS_vsync_rising_coarse_status() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_COARSE_STATUS.ISP_OPF1_VSYNC_RISING_COARSE_STATUS_ts.vsync_rising_coarse_status
#define Get_ISP_OPF1_ISP_OPF1_VSYNC_RISING_COARSE_STATUS() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_RISING_COARSE_STATUS.word


//ISP_OPF1_VSYNC_FALLING_COARSE_STATUS


#define Get_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_COARSE_STATUS_vsync_falling_coarse_status() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_COARSE_STATUS.ISP_OPF1_VSYNC_FALLING_COARSE_STATUS_ts.vsync_falling_coarse_status
#define Get_ISP_OPF1_ISP_OPF1_VSYNC_FALLING_COARSE_STATUS() p_ISP_OPF1_IP->ISP_OPF1_VSYNC_FALLING_COARSE_STATUS.word


//ISP_OPF1_HCROP_RISING_STATUS


#define Get_ISP_OPF1_ISP_OPF1_HCROP_RISING_STATUS_hcrop_rising_status() p_ISP_OPF1_IP->ISP_OPF1_HCROP_RISING_STATUS.ISP_OPF1_HCROP_RISING_STATUS_ts.hcrop_rising_status
#define Get_ISP_OPF1_ISP_OPF1_HCROP_RISING_STATUS() p_ISP_OPF1_IP->ISP_OPF1_HCROP_RISING_STATUS.word


//ISP_OPF1_HCROP_FALLING_STATUS


#define Get_ISP_OPF1_ISP_OPF1_HCROP_FALLING_STATUS_hcrop_falling_status() p_ISP_OPF1_IP->ISP_OPF1_HCROP_FALLING_STATUS.ISP_OPF1_HCROP_FALLING_STATUS_ts.hcrop_falling_status
#define Get_ISP_OPF1_ISP_OPF1_HCROP_FALLING_STATUS() p_ISP_OPF1_IP->ISP_OPF1_HCROP_FALLING_STATUS.word


//ISP_OPF1_VCROP_RISING_COARSE_STATUS


#define Get_ISP_OPF1_ISP_OPF1_VCROP_RISING_COARSE_STATUS_vcrop_rising_coarse_status() p_ISP_OPF1_IP->ISP_OPF1_VCROP_RISING_COARSE_STATUS.ISP_OPF1_VCROP_RISING_COARSE_STATUS_ts.vcrop_rising_coarse_status
#define Get_ISP_OPF1_ISP_OPF1_VCROP_RISING_COARSE_STATUS() p_ISP_OPF1_IP->ISP_OPF1_VCROP_RISING_COARSE_STATUS.word


//ISP_OPF1_VCROP_FALLING_COARSE_STATUS


#define Get_ISP_OPF1_ISP_OPF1_VCROP_FALLING_COARSE_STATUS_vcrop_falling_coarse_status() p_ISP_OPF1_IP->ISP_OPF1_VCROP_FALLING_COARSE_STATUS.ISP_OPF1_VCROP_FALLING_COARSE_STATUS_ts.vcrop_falling_coarse_status
#define Get_ISP_OPF1_ISP_OPF1_VCROP_FALLING_COARSE_STATUS() p_ISP_OPF1_IP->ISP_OPF1_VCROP_FALLING_COARSE_STATUS.word


//ISP_OPF1_CONTROL_STATUS


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_sync_based_pixvalid_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.sync_based_pixvalid_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_sync_based_pixvalid_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.sync_based_pixvalid_status == sync_based_pixvalid_status_B_0x0)
#define sync_based_pixvalid_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_sync_based_pixvalid_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.sync_based_pixvalid_status == sync_based_pixvalid_status_B_0x1)
#define sync_based_pixvalid_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_toggle_pix_valid_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.toggle_pix_valid_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_toggle_pix_valid_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.toggle_pix_valid_status == toggle_pix_valid_status_B_0x0)
#define toggle_pix_valid_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_toggle_pix_valid_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.toggle_pix_valid_status == toggle_pix_valid_status_B_0x1)
#define toggle_pix_valid_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb_flip_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb_flip_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb_flip_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x0)
#define rgb_flip_status_B_0x0 0x0    //RGB
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb_flip_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x1)
#define rgb_flip_status_B_0x1 0x1    //BGR
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb_flip_status_B_0x2() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x2)
#define rgb_flip_status_B_0x2 0x2    //GBR
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb_flip_status_B_0x3() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x3)
#define rgb_flip_status_B_0x3 0x3    //RBG
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb_flip_status_B_0x4() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x4)
#define rgb_flip_status_B_0x4 0x4    //BRG
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb_flip_status_B_0x5() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb_flip_status == rgb_flip_status_B_0x5)
#define rgb_flip_status_B_0x5 0x5    //GRB


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb_bit_flip_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb_bit_flip_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb_bit_flip_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb_bit_flip_status == rgb_bit_flip_status_B_0x0)
#define rgb_bit_flip_status_B_0x0 0x0    //not swapped i.e. [9:0]
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb_bit_flip_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb_bit_flip_status == rgb_bit_flip_status_B_0x1)
#define rgb_bit_flip_status_B_0x1 0x1    //swapped i.e. [0:9]


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_embedded_code_en_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.embedded_code_en_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_embedded_code_en_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.embedded_code_en_status == embedded_code_en_status_B_0x0)
#define embedded_code_en_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_embedded_code_en_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.embedded_code_en_status == embedded_code_en_status_B_0x1)
#define embedded_code_en_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_false_sync_code_protect_en_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.false_sync_code_protect_en_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_false_sync_code_protect_en_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.false_sync_code_protect_en_status == false_sync_code_protect_en_status_B_0x0)
#define false_sync_code_protect_en_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_false_sync_code_protect_en_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.false_sync_code_protect_en_status == false_sync_code_protect_en_status_B_0x1)
#define false_sync_code_protect_en_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_invert_hsync_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.invert_hsync_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_invert_hsync_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.invert_hsync_status == invert_hsync_status_B_0x0)
#define invert_hsync_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_invert_hsync_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.invert_hsync_status == invert_hsync_status_B_0x1)
#define invert_hsync_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_invert_vsync_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.invert_vsync_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_invert_vsync_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.invert_vsync_status == invert_vsync_status_B_0x0)
#define invert_vsync_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_invert_vsync_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.invert_vsync_status == invert_vsync_status_B_0x1)
#define invert_vsync_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_idata_ch0_en_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.idata_ch0_en_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_idata_ch0_en_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.idata_ch0_en_status == idata_ch0_en_status_B_0x0)
#define idata_ch0_en_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_idata_ch0_en_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.idata_ch0_en_status == idata_ch0_en_status_B_0x1)
#define idata_ch0_en_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_idata_ch1_en_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.idata_ch1_en_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_idata_ch1_en_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.idata_ch1_en_status == idata_ch1_en_status_B_0x0)
#define idata_ch1_en_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_idata_ch1_en_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.idata_ch1_en_status == idata_ch1_en_status_B_0x1)
#define idata_ch1_en_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_idata_ch2_en_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.idata_ch2_en_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_idata_ch2_en_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.idata_ch2_en_status == idata_ch2_en_status_B_0x0)
#define idata_ch2_en_status_B_0x0 0x0    //Disabled
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_idata_ch2_en_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.idata_ch2_en_status == idata_ch2_en_status_B_0x1)
#define idata_ch2_en_status_B_0x1 0x1    //Enabled


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_opf_output_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.opf_output_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_opf_output_status_OPF_RGB101010() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_RGB101010)
#define opf_output_status_OPF_RGB101010 0x0    //RGB101010
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_opf_output_status_OPF_RGB888() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_RGB888)
#define opf_output_status_OPF_RGB888 0x1    //RGB888
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_opf_output_status_OPF_RGB565() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_RGB565)
#define opf_output_status_OPF_RGB565 0x2    //RGB565
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_opf_output_status_OPF_RGB555() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_RGB555)
#define opf_output_status_OPF_RGB555 0x3    //RGB555
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_opf_output_status_OPF_RGB444() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_RGB444)
#define opf_output_status_OPF_RGB444 0x4    //RGB444
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_opf_output_status_OPF_YUV() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.opf_output_status == opf_output_status_OPF_YUV)
#define opf_output_status_OPF_YUV 0x5    //YUV


#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb444_format_status() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb444_format_status
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb444_format_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb444_format_status == rgb444_format_status_B_0x0)
#define rgb444_format_status_B_0x0 0x0    //not packed (RGB444 native)
#define Is_ISP_OPF1_ISP_OPF1_CONTROL_STATUS_rgb444_format_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.ISP_OPF1_CONTROL_STATUS_ts.rgb444_format_status == rgb444_format_status_B_0x1)
#define rgb444_format_status_B_0x1 0x1    //Packed (RGB565-like)
#define Get_ISP_OPF1_ISP_OPF1_CONTROL_STATUS() p_ISP_OPF1_IP->ISP_OPF1_CONTROL_STATUS.word


//ISP_OPF1_PIXVALID_LTYPES_STATUS


#define Get_ISP_OPF1_ISP_OPF1_PIXVALID_LTYPES_STATUS_pixvalid_linetypes_status() p_ISP_OPF1_IP->ISP_OPF1_PIXVALID_LTYPES_STATUS.ISP_OPF1_PIXVALID_LTYPES_STATUS_ts.pixvalid_linetypes_status


#define Get_ISP_OPF1_ISP_OPF1_PIXVALID_LTYPES_STATUS_eof_blank_only_en_status() p_ISP_OPF1_IP->ISP_OPF1_PIXVALID_LTYPES_STATUS.ISP_OPF1_PIXVALID_LTYPES_STATUS_ts.eof_blank_only_en_status
#define Get_ISP_OPF1_ISP_OPF1_PIXVALID_LTYPES_STATUS() p_ISP_OPF1_IP->ISP_OPF1_PIXVALID_LTYPES_STATUS.word


//ISP_OPF1_YCBCR_FLIP_STATUS


#define Get_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_STATUS_cbcr_flip_status() p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP_STATUS.ISP_OPF1_YCBCR_FLIP_STATUS_ts.cbcr_flip_status
#define Is_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_STATUS_cbcr_flip_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP_STATUS.ISP_OPF1_YCBCR_FLIP_STATUS_ts.cbcr_flip_status == cbcr_flip_status_B_0x0)
#define cbcr_flip_status_B_0x0 0x0    //No flip
#define Is_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_STATUS_cbcr_flip_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP_STATUS.ISP_OPF1_YCBCR_FLIP_STATUS_ts.cbcr_flip_status == cbcr_flip_status_B_0x1)
#define cbcr_flip_status_B_0x1 0x1    //Flip


#define Get_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_STATUS_y_cbcr_flip_status() p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP_STATUS.ISP_OPF1_YCBCR_FLIP_STATUS_ts.y_cbcr_flip_status
#define Is_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_STATUS_y_cbcr_flip_status_B_0x0() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP_STATUS.ISP_OPF1_YCBCR_FLIP_STATUS_ts.y_cbcr_flip_status == y_cbcr_flip_status_B_0x0)
#define y_cbcr_flip_status_B_0x0 0x0    //No flip
#define Is_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_STATUS_y_cbcr_flip_status_B_0x1() (p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP_STATUS.ISP_OPF1_YCBCR_FLIP_STATUS_ts.y_cbcr_flip_status == y_cbcr_flip_status_B_0x1)
#define y_cbcr_flip_status_B_0x1 0x1    //Flip
#define Get_ISP_OPF1_ISP_OPF1_YCBCR_FLIP_STATUS() p_ISP_OPF1_IP->ISP_OPF1_YCBCR_FLIP_STATUS.word


//ISP_OPF1_LAST_NONACT_LINE_STATUS


#define Get_ISP_OPF1_ISP_OPF1_LAST_NONACT_LINE_STATUS_last_nonactive_line_status() p_ISP_OPF1_IP->ISP_OPF1_LAST_NONACT_LINE_STATUS.ISP_OPF1_LAST_NONACT_LINE_STATUS_ts.last_nonactive_line_status
#define Get_ISP_OPF1_ISP_OPF1_LAST_NONACT_LINE_STATUS() p_ISP_OPF1_IP->ISP_OPF1_LAST_NONACT_LINE_STATUS.word

//ISP_STATS_ACCWZ_ENABLE
/*Description: Enable register used to enable/disable accumulation.

Soft reset control, and design for verification (dfv) control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable statistics gathering*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* Put the IP out of soft reset mode*/
    }ISP_STATS_ACCWZ_ENABLE_ts;

}ISP_STATS_ACCWZ_ENABLE_tu;



//ISP_STATS_ACCWZ_ZONE_GAINS
/*Description: Define gains used for each zone.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t gain_zone0 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone1 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone2 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone3 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone4 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone5 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone6 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone7 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone8 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone9 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone10 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone11 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone12 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone13 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone14 :2;
        /* gain of corresponding zone*/
        uint8_t gain_zone15 :2;
        /* gain of corresponding zone*/
    }ISP_STATS_ACCWZ_ZONE_GAINS_ts;

}ISP_STATS_ACCWZ_ZONE_GAINS_tu;



//ISP_STATS_ACCWZ_ACC0_THRESH_LO
/*Description: Define lower pixel threshold for Accumulation
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t thresh_lo :12;
        /* lower pixel threshold.
        If (pixel value > thresh_lo) then
        value to accumulate = pixel value
        else
        value to accumulate = 0*/
    }ISP_STATS_ACCWZ_ACC0_THRESH_LO_ts;

}ISP_STATS_ACCWZ_ACC0_THRESH_LO_tu;



//ISP_STATS_ACCWZ_ACC0_THRESH_HI
/*Description: Define upper pixel threshold for Accumulation
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t thresh_hi :12;
        /* upper pixel threshold.
        If (pixel value > thresh_hi) then
        value to accumulate = thresh_hi
        else
        value to accumulate = pixel value*/
    }ISP_STATS_ACCWZ_ACC0_THRESH_HI_ts;

}ISP_STATS_ACCWZ_ACC0_THRESH_HI_tu;



//ISP_STATS_ACCWZ_ACC0_CTRL
/*Description: Control of Accumulator
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mode :2;
        /* Real pixel value is accumulated if greater than low threshold*/
        uint8_t type :2;
        /* Selection of kind of statistics*/
        uint8_t color :2;
        /* Selection of pixel to accumulate*/
        uint8_t src :2;
        /* Selection of the input IDP stream for gathering*/
    }ISP_STATS_ACCWZ_ACC0_CTRL_ts;

}ISP_STATS_ACCWZ_ACC0_CTRL_tu;



//ISP_STATS_ACCWZ_ACC1_THRESH_LO
/*Description: Define lower pixel threshold for Accumulation
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t thresh_lo :12;
        /* lower pixel threshold.
        If (pixel value > thresh_lo) then
        value to accumulate = pixel value
        else
        value to accumulate = 0*/
    }ISP_STATS_ACCWZ_ACC1_THRESH_LO_ts;

}ISP_STATS_ACCWZ_ACC1_THRESH_LO_tu;



//ISP_STATS_ACCWZ_ACC1_THRESH_HI
/*Description: Define upper pixel threshold for Accumulation
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t thresh_hi :12;
        /* upper pixel threshold.
        If (pixel value > thresh_hi) then
        value to accumulate = thresh_hi
        else
        value to accumulate = pixel value*/
    }ISP_STATS_ACCWZ_ACC1_THRESH_HI_ts;

}ISP_STATS_ACCWZ_ACC1_THRESH_HI_tu;



//ISP_STATS_ACCWZ_ACC1_CTRL
/*Description: Control of Accumulator
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mode :2;
        /* Real pixel value is accumulated if greater than low threshold*/
        uint8_t type :2;
        /* Selection of kind of statistics*/
        uint8_t color :2;
        /* Selection of pixel to accumulate*/
        uint8_t src :2;
        /* Selection of the input IDP stream for gathering*/
    }ISP_STATS_ACCWZ_ACC1_CTRL_ts;

}ISP_STATS_ACCWZ_ACC1_CTRL_tu;



//ISP_STATS_ACCWZ_ACC2_THRESH_LO
/*Description: Define lower pixel threshold for Accumulation
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t thresh_lo :12;
        /* lower pixel threshold.
        If (pixel value > thresh_lo) then
        value to accumulate = pixel value
        else
        value to accumulate = 0*/
    }ISP_STATS_ACCWZ_ACC2_THRESH_LO_ts;

}ISP_STATS_ACCWZ_ACC2_THRESH_LO_tu;



//ISP_STATS_ACCWZ_ACC2_THRESH_HI
/*Description: Define upper pixel threshold for Accumulation
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t thresh_hi :12;
        /* upper pixel threshold.
        If (pixel value > thresh_hi) then
        value to accumulate = thresh_hi
        else
        value to accumulate = pixel value*/
    }ISP_STATS_ACCWZ_ACC2_THRESH_HI_ts;

}ISP_STATS_ACCWZ_ACC2_THRESH_HI_tu;



//ISP_STATS_ACCWZ_ACC2_CTRL
/*Description: Control of Accumulator
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mode :2;
        /* Real pixel value is accumulated if greater than low threshold*/
        uint8_t type :2;
        /* Selection of kind of statistics*/
        uint8_t color :2;
        /* Selection of pixel to accumulate*/
        uint8_t src :2;
        /* Selection of the input IDP stream for gathering*/
    }ISP_STATS_ACCWZ_ACC2_CTRL_ts;

}ISP_STATS_ACCWZ_ACC2_CTRL_tu;



//ISP_STATS_ACCWZ_ACC3_THRESH_LO
/*Description: Define lower pixel threshold for Accumulation
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t thresh_lo :12;
        /* lower pixel threshold.
        If (pixel value > thresh_lo) then
        value to accumulate = pixel value
        else
        value to accumulate = 0*/
    }ISP_STATS_ACCWZ_ACC3_THRESH_LO_ts;

}ISP_STATS_ACCWZ_ACC3_THRESH_LO_tu;



//ISP_STATS_ACCWZ_ACC3_THRESH_HI
/*Description: Define upper pixel threshold for Accumulation
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t thresh_hi :12;
        /* upper pixel threshold.
        If (pixel value > thresh_hi) then
        value to accumulate = thresh_hi
        else
        value to accumulate = pixel value*/
    }ISP_STATS_ACCWZ_ACC3_THRESH_HI_ts;

}ISP_STATS_ACCWZ_ACC3_THRESH_HI_tu;



//ISP_STATS_ACCWZ_ACC3_CTRL
/*Description: Control of Accumulator
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mode :2;
        /* Real pixel value is accumulated if greater than low threshold*/
        uint8_t type :2;
        /* Selection of kind of statistics*/
        uint8_t color :2;
        /* Selection of pixel to accumulate*/
        uint8_t src :2;
        /* Selection of the input IDP stream for gathering*/
    }ISP_STATS_ACCWZ_ACC3_CTRL_ts;

}ISP_STATS_ACCWZ_ACC3_CTRL_tu;



//ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET
/*Description: X Offset of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_x_offset :13;
        /* X Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET_ts;

}ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET_tu;



//ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET
/*Description: Y Offset of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_y_offset :13;
        /* Y Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET_ts;

}ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET_tu;



//ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET
/*Description: X Offset of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_x_offset :13;
        /* X Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET_ts;

}ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET_tu;



//ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET
/*Description: Y Offset of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_y_offset :13;
        /* Y Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET_ts;

}ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET_tu;



//ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET
/*Description: X Offset of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_x_offset :13;
        /* X Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET_ts;

}ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET_tu;



//ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET
/*Description: Y Offset of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_y_offset :13;
        /* Y Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET_ts;

}ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET_tu;



//ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET
/*Description: X Offset of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_x_offset :13;
        /* X Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET_ts;

}ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET_tu;



//ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET
/*Description: Y Offset of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_y_offset :13;
        /* Y Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET_ts;

}ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET_tu;



//ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE
/*Description: X Size of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_x_size :13;
        /* X Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE_ts;

}ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE_tu;



//ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE
/*Description: Y Size of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_y_size :13;
        /* Y Size of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE_ts;

}ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE_tu;



//ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE
/*Description: X Size of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_x_size :13;
        /* X Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE_ts;

}ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE_tu;



//ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE
/*Description: Y Size of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_y_size :13;
        /* Y Size of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE_ts;

}ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE_tu;



//ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE
/*Description: X Size of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_x_size :13;
        /* X Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE_ts;

}ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE_tu;



//ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE
/*Description: Y Size of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_y_size :13;
        /* Y Size of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE_ts;

}ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE_tu;



//ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE
/*Description: X Size of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_x_size :13;
        /* X Offset of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE_ts;

}ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE_tu;



//ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE
/*Description: Y Size of accumulation window used by Accumulator
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_y_size :13;
        /* Y Size of accumulation window for Acc n*/
    }ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE_ts;

}ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE_tu;



//ISP_STATS_ACCWZ_ACC0
/*Description: Result of Accumulation
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu;
    }ISP_STATS_ACCWZ_ACC0_ts;

}ISP_STATS_ACCWZ_ACC0_tu;



//ISP_STATS_ACCWZ_ACC1
/*Description: Result of Accumulation
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu;
    }ISP_STATS_ACCWZ_ACC1_ts;

}ISP_STATS_ACCWZ_ACC1_tu;



//ISP_STATS_ACCWZ_ACC2
/*Description: Result of Accumulation
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu;
    }ISP_STATS_ACCWZ_ACC2_ts;

}ISP_STATS_ACCWZ_ACC2_tu;



//ISP_STATS_ACCWZ_ACC3
/*Description: Result of Accumulation
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu;
    }ISP_STATS_ACCWZ_ACC3_ts;

}ISP_STATS_ACCWZ_ACC3_tu;



//ISP_STATS_ACCWZ_ZONE_STATUS
/*Description: Indicates whether or not a part of the zones has gone outwith the black, dark or active region.

In certain instances it may be required to configure the zones such that they go beyond the right hand side of the array or beyond the bottom of the array. This is not necessarily an error, but the zone status flags may be used to provide an warning that this has occured. It is the responsibility of the host to setup the zone gains such that they do not result in erroneous behaviour of the ACCs e.g. set the gain to zero for the zones which are outwith the array.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t acc0_zones_error :1;
        /* No error*/
        uint8_t acc1_zones_error :1;
        /* No error*/
        uint8_t acc2_zones_error :1;
        /* No error*/
        uint8_t acc3_zones_error :1;
        /* No error*/
    }ISP_STATS_ACCWZ_ZONE_STATUS_ts;

}ISP_STATS_ACCWZ_ZONE_STATUS_tu;



//ISP_STATS_ACCWZ_DFV
/*Description: Debug For Verification interrupt control register
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* Disable DFV mode*/
        uint8_t dfv_interrupt_ctrl :4;
        /* DFV interrupt generation control
        When DFV mode is active, making any bit toggling will trigger the corresponding interrupt*/
    }ISP_STATS_ACCWZ_DFV_ts;

}ISP_STATS_ACCWZ_DFV_tu;

typedef struct
{
    ISP_STATS_ACCWZ_ENABLE_tu ISP_STATS_ACCWZ_ENABLE;
    ISP_STATS_ACCWZ_ZONE_GAINS_tu ISP_STATS_ACCWZ_ZONE_GAINS;
    ISP_STATS_ACCWZ_ACC0_THRESH_LO_tu ISP_STATS_ACCWZ_ACC0_THRESH_LO;
    ISP_STATS_ACCWZ_ACC0_THRESH_HI_tu ISP_STATS_ACCWZ_ACC0_THRESH_HI;
    ISP_STATS_ACCWZ_ACC0_CTRL_tu ISP_STATS_ACCWZ_ACC0_CTRL;
    ISP_STATS_ACCWZ_ACC1_THRESH_LO_tu ISP_STATS_ACCWZ_ACC1_THRESH_LO;
    ISP_STATS_ACCWZ_ACC1_THRESH_HI_tu ISP_STATS_ACCWZ_ACC1_THRESH_HI;
    ISP_STATS_ACCWZ_ACC1_CTRL_tu ISP_STATS_ACCWZ_ACC1_CTRL;
    ISP_STATS_ACCWZ_ACC2_THRESH_LO_tu ISP_STATS_ACCWZ_ACC2_THRESH_LO;
    ISP_STATS_ACCWZ_ACC2_THRESH_HI_tu ISP_STATS_ACCWZ_ACC2_THRESH_HI;
    ISP_STATS_ACCWZ_ACC2_CTRL_tu ISP_STATS_ACCWZ_ACC2_CTRL;
    ISP_STATS_ACCWZ_ACC3_THRESH_LO_tu ISP_STATS_ACCWZ_ACC3_THRESH_LO;
    ISP_STATS_ACCWZ_ACC3_THRESH_HI_tu ISP_STATS_ACCWZ_ACC3_THRESH_HI;
    ISP_STATS_ACCWZ_ACC3_CTRL_tu ISP_STATS_ACCWZ_ACC3_CTRL;
    ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET_tu ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET;
    ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET_tu ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET;
    ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET_tu ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET;
    ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET_tu ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET;
    ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET_tu ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET;
    ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET_tu ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET;
    ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET_tu ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET;
    ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET_tu ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET;
    ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE_tu ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE;
    ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE_tu ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE;
    ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE_tu ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE;
    ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE_tu ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE;
    ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE_tu ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE;
    ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE_tu ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE;
    ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE_tu ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE;
    ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE_tu ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE;
    ISP_STATS_ACCWZ_ACC0_tu ISP_STATS_ACCWZ_ACC0;
    ISP_STATS_ACCWZ_ACC1_tu ISP_STATS_ACCWZ_ACC1;
    ISP_STATS_ACCWZ_ACC2_tu ISP_STATS_ACCWZ_ACC2;
    ISP_STATS_ACCWZ_ACC3_tu ISP_STATS_ACCWZ_ACC3;
    ISP_STATS_ACCWZ_ZONE_STATUS_tu ISP_STATS_ACCWZ_ZONE_STATUS;
    ISP_STATS_ACCWZ_DFV_tu ISP_STATS_ACCWZ_DFV;
}ISP_STATS_ACCWZ_IP_ts;




//ISP_STATS_ACCWZ_ENABLE


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE_enable() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.ISP_STATS_ACCWZ_ENABLE_ts.enable
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE_enable_DISABLE() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.ISP_STATS_ACCWZ_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE_enable__DISABLE() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.ISP_STATS_ACCWZ_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable statistics gathering
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE_enable_ENABLE() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.ISP_STATS_ACCWZ_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE_enable__ENABLE() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.ISP_STATS_ACCWZ_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable statistics gathering


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE_soft_reset() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.ISP_STATS_ACCWZ_ENABLE_ts.soft_reset
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE_soft_reset_DISABLE_SOFTRESET() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.ISP_STATS_ACCWZ_ENABLE_ts.soft_reset == soft_reset_DISABLE_SOFTRESET)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE_soft_reset__DISABLE_SOFTRESET() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.ISP_STATS_ACCWZ_ENABLE_ts.soft_reset = soft_reset_DISABLE_SOFTRESET)
#define soft_reset_DISABLE_SOFTRESET 0x0    //Put the IP out of soft reset mode
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE_soft_reset_ENABLE_SOFTRESET() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.ISP_STATS_ACCWZ_ENABLE_ts.soft_reset == soft_reset_ENABLE_SOFTRESET)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE_soft_reset__ENABLE_SOFTRESET() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.ISP_STATS_ACCWZ_ENABLE_ts.soft_reset = soft_reset_ENABLE_SOFTRESET)
#define soft_reset_ENABLE_SOFTRESET 0x1    //Set the IP in soft reset mode
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE(enable,soft_reset) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ENABLE_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ENABLE.word = x)


//ISP_STATS_ACCWZ_ZONE_GAINS


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone0() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone0
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone0_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone0 == gain_zone0_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone0__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone0 = gain_zone0_GAIN_0X)
#define gain_zone0_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone0_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone0 == gain_zone0_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone0__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone0 = gain_zone0_GAIN_1X)
#define gain_zone0_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone0_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone0 == gain_zone0_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone0__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone0 = gain_zone0_GAIN_2X)
#define gain_zone0_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone0_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone0 == gain_zone0_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone0__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone0 = gain_zone0_GAIN_4X)
#define gain_zone0_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone1() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone1_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone1 == gain_zone1_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone1__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone1 = gain_zone1_GAIN_0X)
#define gain_zone1_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone1_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone1 == gain_zone1_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone1__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone1 = gain_zone1_GAIN_1X)
#define gain_zone1_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone1_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone1 == gain_zone1_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone1__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone1 = gain_zone1_GAIN_2X)
#define gain_zone1_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone1_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone1 == gain_zone1_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone1__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone1 = gain_zone1_GAIN_4X)
#define gain_zone1_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone2() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone2_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone2 == gain_zone2_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone2__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone2 = gain_zone2_GAIN_0X)
#define gain_zone2_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone2_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone2 == gain_zone2_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone2__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone2 = gain_zone2_GAIN_1X)
#define gain_zone2_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone2_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone2 == gain_zone2_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone2__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone2 = gain_zone2_GAIN_2X)
#define gain_zone2_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone2_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone2 == gain_zone2_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone2__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone2 = gain_zone2_GAIN_4X)
#define gain_zone2_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone3() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone3
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone3_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone3 == gain_zone3_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone3__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone3 = gain_zone3_GAIN_0X)
#define gain_zone3_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone3_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone3 == gain_zone3_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone3__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone3 = gain_zone3_GAIN_1X)
#define gain_zone3_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone3_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone3 == gain_zone3_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone3__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone3 = gain_zone3_GAIN_2X)
#define gain_zone3_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone3_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone3 == gain_zone3_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone3__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone3 = gain_zone3_GAIN_4X)
#define gain_zone3_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone4() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone4
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone4_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone4 == gain_zone4_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone4__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone4 = gain_zone4_GAIN_0X)
#define gain_zone4_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone4_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone4 == gain_zone4_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone4__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone4 = gain_zone4_GAIN_1X)
#define gain_zone4_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone4_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone4 == gain_zone4_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone4__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone4 = gain_zone4_GAIN_2X)
#define gain_zone4_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone4_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone4 == gain_zone4_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone4__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone4 = gain_zone4_GAIN_4X)
#define gain_zone4_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone5() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone5
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone5_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone5 == gain_zone5_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone5__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone5 = gain_zone5_GAIN_0X)
#define gain_zone5_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone5_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone5 == gain_zone5_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone5__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone5 = gain_zone5_GAIN_1X)
#define gain_zone5_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone5_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone5 == gain_zone5_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone5__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone5 = gain_zone5_GAIN_2X)
#define gain_zone5_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone5_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone5 == gain_zone5_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone5__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone5 = gain_zone5_GAIN_4X)
#define gain_zone5_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone6() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone6
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone6_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone6 == gain_zone6_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone6__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone6 = gain_zone6_GAIN_0X)
#define gain_zone6_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone6_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone6 == gain_zone6_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone6__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone6 = gain_zone6_GAIN_1X)
#define gain_zone6_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone6_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone6 == gain_zone6_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone6__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone6 = gain_zone6_GAIN_2X)
#define gain_zone6_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone6_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone6 == gain_zone6_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone6__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone6 = gain_zone6_GAIN_4X)
#define gain_zone6_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone7() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone7
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone7_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone7 == gain_zone7_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone7__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone7 = gain_zone7_GAIN_0X)
#define gain_zone7_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone7_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone7 == gain_zone7_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone7__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone7 = gain_zone7_GAIN_1X)
#define gain_zone7_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone7_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone7 == gain_zone7_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone7__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone7 = gain_zone7_GAIN_2X)
#define gain_zone7_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone7_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone7 == gain_zone7_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone7__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone7 = gain_zone7_GAIN_4X)
#define gain_zone7_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone8() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone8
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone8_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone8 == gain_zone8_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone8__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone8 = gain_zone8_GAIN_0X)
#define gain_zone8_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone8_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone8 == gain_zone8_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone8__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone8 = gain_zone8_GAIN_1X)
#define gain_zone8_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone8_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone8 == gain_zone8_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone8__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone8 = gain_zone8_GAIN_2X)
#define gain_zone8_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone8_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone8 == gain_zone8_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone8__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone8 = gain_zone8_GAIN_4X)
#define gain_zone8_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone9() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone9
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone9_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone9 == gain_zone9_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone9__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone9 = gain_zone9_GAIN_0X)
#define gain_zone9_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone9_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone9 == gain_zone9_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone9__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone9 = gain_zone9_GAIN_1X)
#define gain_zone9_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone9_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone9 == gain_zone9_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone9__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone9 = gain_zone9_GAIN_2X)
#define gain_zone9_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone9_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone9 == gain_zone9_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone9__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone9 = gain_zone9_GAIN_4X)
#define gain_zone9_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone10() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone10
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone10_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone10 == gain_zone10_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone10__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone10 = gain_zone10_GAIN_0X)
#define gain_zone10_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone10_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone10 == gain_zone10_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone10__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone10 = gain_zone10_GAIN_1X)
#define gain_zone10_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone10_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone10 == gain_zone10_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone10__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone10 = gain_zone10_GAIN_2X)
#define gain_zone10_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone10_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone10 == gain_zone10_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone10__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone10 = gain_zone10_GAIN_4X)
#define gain_zone10_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone11() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone11
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone11_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone11 == gain_zone11_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone11__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone11 = gain_zone11_GAIN_0X)
#define gain_zone11_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone11_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone11 == gain_zone11_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone11__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone11 = gain_zone11_GAIN_1X)
#define gain_zone11_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone11_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone11 == gain_zone11_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone11__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone11 = gain_zone11_GAIN_2X)
#define gain_zone11_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone11_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone11 == gain_zone11_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone11__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone11 = gain_zone11_GAIN_4X)
#define gain_zone11_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone12() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone12
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone12_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone12 == gain_zone12_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone12__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone12 = gain_zone12_GAIN_0X)
#define gain_zone12_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone12_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone12 == gain_zone12_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone12__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone12 = gain_zone12_GAIN_1X)
#define gain_zone12_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone12_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone12 == gain_zone12_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone12__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone12 = gain_zone12_GAIN_2X)
#define gain_zone12_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone12_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone12 == gain_zone12_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone12__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone12 = gain_zone12_GAIN_4X)
#define gain_zone12_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone13() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone13
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone13_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone13 == gain_zone13_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone13__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone13 = gain_zone13_GAIN_0X)
#define gain_zone13_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone13_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone13 == gain_zone13_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone13__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone13 = gain_zone13_GAIN_1X)
#define gain_zone13_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone13_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone13 == gain_zone13_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone13__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone13 = gain_zone13_GAIN_2X)
#define gain_zone13_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone13_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone13 == gain_zone13_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone13__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone13 = gain_zone13_GAIN_4X)
#define gain_zone13_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone14() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone14
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone14_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone14 == gain_zone14_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone14__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone14 = gain_zone14_GAIN_0X)
#define gain_zone14_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone14_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone14 == gain_zone14_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone14__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone14 = gain_zone14_GAIN_1X)
#define gain_zone14_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone14_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone14 == gain_zone14_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone14__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone14 = gain_zone14_GAIN_2X)
#define gain_zone14_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone14_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone14 == gain_zone14_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone14__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone14 = gain_zone14_GAIN_4X)
#define gain_zone14_GAIN_4X 0x3    //Gain of 4


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone15() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone15
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone15_GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone15 == gain_zone15_GAIN_0X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone15__GAIN_0X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone15 = gain_zone15_GAIN_0X)
#define gain_zone15_GAIN_0X 0x0    //No accumulation
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone15_GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone15 == gain_zone15_GAIN_1X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone15__GAIN_1X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone15 = gain_zone15_GAIN_1X)
#define gain_zone15_GAIN_1X 0x1    //Gain of 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone15_GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone15 == gain_zone15_GAIN_2X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone15__GAIN_2X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone15 = gain_zone15_GAIN_2X)
#define gain_zone15_GAIN_2X 0x2    //Gain of 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone15_GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone15 == gain_zone15_GAIN_4X)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_gain_zone15__GAIN_4X() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.ISP_STATS_ACCWZ_ZONE_GAINS_ts.gain_zone15 = gain_zone15_GAIN_4X)
#define gain_zone15_GAIN_4X 0x3    //Gain of 4
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS(gain_zone0,gain_zone1,gain_zone2,gain_zone3,gain_zone4,gain_zone5,gain_zone6,gain_zone7,gain_zone8,gain_zone9,gain_zone10,gain_zone11,gain_zone12,gain_zone13,gain_zone14,gain_zone15) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.word = (uint32_t)gain_zone0<<0 | (uint32_t)gain_zone1<<2 | (uint32_t)gain_zone2<<4 | (uint32_t)gain_zone3<<6 | (uint32_t)gain_zone4<<8 | (uint32_t)gain_zone5<<10 | (uint32_t)gain_zone6<<12 | (uint32_t)gain_zone7<<14 | (uint32_t)gain_zone8<<16 | (uint32_t)gain_zone9<<18 | (uint32_t)gain_zone10<<20 | (uint32_t)gain_zone11<<22 | (uint32_t)gain_zone12<<24 | (uint32_t)gain_zone13<<26 | (uint32_t)gain_zone14<<28 | (uint32_t)gain_zone15<<30)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_GAINS_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_GAINS.word = x)


//ISP_STATS_ACCWZ_ACC0_THRESH_LO


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_THRESH_LO_thresh_lo() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_THRESH_LO.ISP_STATS_ACCWZ_ACC0_THRESH_LO_ts.thresh_lo
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_THRESH_LO_thresh_lo(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_THRESH_LO.ISP_STATS_ACCWZ_ACC0_THRESH_LO_ts.thresh_lo = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_THRESH_LO(thresh_lo) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_THRESH_LO.word = (uint32_t)thresh_lo<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_THRESH_LO() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_THRESH_LO.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_THRESH_LO_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_THRESH_LO.word = x)


//ISP_STATS_ACCWZ_ACC0_THRESH_HI


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_THRESH_HI_thresh_hi() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_THRESH_HI.ISP_STATS_ACCWZ_ACC0_THRESH_HI_ts.thresh_hi
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_THRESH_HI_thresh_hi(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_THRESH_HI.ISP_STATS_ACCWZ_ACC0_THRESH_HI_ts.thresh_hi = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_THRESH_HI(thresh_hi) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_THRESH_HI.word = (uint32_t)thresh_hi<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_THRESH_HI() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_THRESH_HI.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_THRESH_HI_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_THRESH_HI.word = x)


//ISP_STATS_ACCWZ_ACC0_CTRL


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_mode() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.mode
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_mode_FULL_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.mode == mode_FULL_PIXELVAL)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_mode__FULL_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.mode = mode_FULL_PIXELVAL)
#define mode_FULL_PIXELVAL 0x0    //Real pixel value is accumulated if greater than low threshold
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_mode_CLIP_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.mode == mode_CLIP_PIXELVAL)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_mode__CLIP_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.mode = mode_CLIP_PIXELVAL)
#define mode_CLIP_PIXELVAL 0x1    //Pixel value is clipped to high threshold and accumulated if greater than low threshold
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_mode_HISTOGRAM() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.mode == mode_HISTOGRAM)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_mode__HISTOGRAM() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.mode = mode_HISTOGRAM)
#define mode_HISTOGRAM 0x2    //HISTOGRAM
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_mode_ZERO() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.mode == mode_ZERO)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_mode__ZERO() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.mode = mode_ZERO)
#define mode_ZERO 0x3    //No accumulation


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_type() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.type
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_type_ACC_ZONED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.type == type_ACC_ZONED)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_type__ACC_ZONED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.type = type_ACC_ZONED)
#define type_ACC_ZONED 0x0    //zone_gains is used according to pixel location in zones
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_type_ACC_FLAT() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.type == type_ACC_FLAT)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_type__ACC_FLAT() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.type = type_ACC_FLAT)
#define type_ACC_FLAT 0x1    //no gain applied
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_type_ACC_BLACK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.type == type_ACC_BLACK)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_type__ACC_BLACK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.type = type_ACC_BLACK)
#define type_ACC_BLACK 0x2    //only black lines are accumulated
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_type_ACC_DARK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.type == type_ACC_DARK)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_type__ACC_DARK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.type = type_ACC_DARK)
#define type_ACC_DARK 0x3    //only dark lines are accumulated


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_color() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.color
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_color_GIR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.color == color_GIR)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_color__GIR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.color = color_GIR)
#define color_GIR 0x0    //Accumulate "Green In Red" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_color_RED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.color == color_RED)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_color__RED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.color = color_RED)
#define color_RED 0x1    //Accumulate "Red" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_color_BLU() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.color == color_BLU)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_color__BLU() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.color = color_BLU)
#define color_BLU 0x2    //Accumulate "Blue" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_color_GIB() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.color == color_GIB)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_color__GIB() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.color = color_GIB)
#define color_GIB 0x3    //Accumulate "Green in Blue" pixels


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_src() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.src
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_src_SRC_IDP_0() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.src == src_SRC_IDP_0)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_src__SRC_IDP_0() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.src = src_SRC_IDP_0)
#define src_SRC_IDP_0 0x0    //Gather stats from IDP Stream 0
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_src_SRC_IDP_1() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.src == src_SRC_IDP_1)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_src__SRC_IDP_1() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.src = src_SRC_IDP_1)
#define src_SRC_IDP_1 0x1    //Gather stats from IDP Stream 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_src_SRC_IDP_2() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.src == src_SRC_IDP_2)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_src__SRC_IDP_2() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.src = src_SRC_IDP_2)
#define src_SRC_IDP_2 0x2    //Gather stats from IDP Stream 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_src_SRC_IDP_3() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.src == src_SRC_IDP_3)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_src__SRC_IDP_3() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.ISP_STATS_ACCWZ_ACC0_CTRL_ts.src = src_SRC_IDP_3)
#define src_SRC_IDP_3 0x3    //Gather stats from IDP Stream 3
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL(mode,type,color,src) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.word = (uint32_t)mode<<0 | (uint32_t)type<<2 | (uint32_t)color<<4 | (uint32_t)src<<6)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_CTRL_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_CTRL.word = x)


//ISP_STATS_ACCWZ_ACC1_THRESH_LO


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_THRESH_LO_thresh_lo() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_THRESH_LO.ISP_STATS_ACCWZ_ACC1_THRESH_LO_ts.thresh_lo
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_THRESH_LO_thresh_lo(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_THRESH_LO.ISP_STATS_ACCWZ_ACC1_THRESH_LO_ts.thresh_lo = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_THRESH_LO(thresh_lo) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_THRESH_LO.word = (uint32_t)thresh_lo<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_THRESH_LO() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_THRESH_LO.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_THRESH_LO_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_THRESH_LO.word = x)


//ISP_STATS_ACCWZ_ACC1_THRESH_HI


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_THRESH_HI_thresh_hi() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_THRESH_HI.ISP_STATS_ACCWZ_ACC1_THRESH_HI_ts.thresh_hi
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_THRESH_HI_thresh_hi(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_THRESH_HI.ISP_STATS_ACCWZ_ACC1_THRESH_HI_ts.thresh_hi = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_THRESH_HI(thresh_hi) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_THRESH_HI.word = (uint32_t)thresh_hi<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_THRESH_HI() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_THRESH_HI.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_THRESH_HI_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_THRESH_HI.word = x)


//ISP_STATS_ACCWZ_ACC1_CTRL


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_mode() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.mode
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_mode_FULL_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.mode == mode_FULL_PIXELVAL)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_mode__FULL_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.mode = mode_FULL_PIXELVAL)
#define mode_FULL_PIXELVAL 0x0    //Real pixel value is accumulated if greater than low threshold
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_mode_CLIP_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.mode == mode_CLIP_PIXELVAL)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_mode__CLIP_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.mode = mode_CLIP_PIXELVAL)
#define mode_CLIP_PIXELVAL 0x1    //Pixel value is clipped to high threshold and accumulated if greater than low threshold
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_mode_HISTOGRAM() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.mode == mode_HISTOGRAM)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_mode__HISTOGRAM() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.mode = mode_HISTOGRAM)
#define mode_HISTOGRAM 0x2    //HISTOGRAM
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_mode_ZERO() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.mode == mode_ZERO)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_mode__ZERO() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.mode = mode_ZERO)
#define mode_ZERO 0x3    //No accumulation


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_type() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.type
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_type_ACC_ZONED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.type == type_ACC_ZONED)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_type__ACC_ZONED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.type = type_ACC_ZONED)
#define type_ACC_ZONED 0x0    //zone_gains is used according to pixel location in zones
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_type_ACC_FLAT() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.type == type_ACC_FLAT)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_type__ACC_FLAT() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.type = type_ACC_FLAT)
#define type_ACC_FLAT 0x1    //no gain applied
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_type_ACC_BLACK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.type == type_ACC_BLACK)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_type__ACC_BLACK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.type = type_ACC_BLACK)
#define type_ACC_BLACK 0x2    //only black lines are accumulated
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_type_ACC_DARK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.type == type_ACC_DARK)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_type__ACC_DARK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.type = type_ACC_DARK)
#define type_ACC_DARK 0x3    //only dark lines are accumulated


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_color() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.color
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_color_GIR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.color == color_GIR)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_color__GIR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.color = color_GIR)
#define color_GIR 0x0    //Accumulate "Green In Red" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_color_RED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.color == color_RED)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_color__RED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.color = color_RED)
#define color_RED 0x1    //Accumulate "Red" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_color_BLU() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.color == color_BLU)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_color__BLU() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.color = color_BLU)
#define color_BLU 0x2    //Accumulate "Blue" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_color_GIB() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.color == color_GIB)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_color__GIB() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.color = color_GIB)
#define color_GIB 0x3    //Accumulate "Green in Blue" pixels


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_src() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.src
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_src_SRC_IDP_0() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.src == src_SRC_IDP_0)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_src__SRC_IDP_0() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.src = src_SRC_IDP_0)
#define src_SRC_IDP_0 0x0    //Gather stats from IDP Stream 0
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_src_SRC_IDP_1() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.src == src_SRC_IDP_1)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_src__SRC_IDP_1() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.src = src_SRC_IDP_1)
#define src_SRC_IDP_1 0x1    //Gather stats from IDP Stream 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_src_SRC_IDP_2() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.src == src_SRC_IDP_2)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_src__SRC_IDP_2() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.src = src_SRC_IDP_2)
#define src_SRC_IDP_2 0x2    //Gather stats from IDP Stream 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_src_SRC_IDP_3() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.src == src_SRC_IDP_3)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_src__SRC_IDP_3() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.ISP_STATS_ACCWZ_ACC1_CTRL_ts.src = src_SRC_IDP_3)
#define src_SRC_IDP_3 0x3    //Gather stats from IDP Stream 3
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL(mode,type,color,src) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.word = (uint32_t)mode<<0 | (uint32_t)type<<2 | (uint32_t)color<<4 | (uint32_t)src<<6)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_CTRL_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_CTRL.word = x)


//ISP_STATS_ACCWZ_ACC2_THRESH_LO


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_THRESH_LO_thresh_lo() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_THRESH_LO.ISP_STATS_ACCWZ_ACC2_THRESH_LO_ts.thresh_lo
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_THRESH_LO_thresh_lo(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_THRESH_LO.ISP_STATS_ACCWZ_ACC2_THRESH_LO_ts.thresh_lo = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_THRESH_LO(thresh_lo) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_THRESH_LO.word = (uint32_t)thresh_lo<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_THRESH_LO() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_THRESH_LO.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_THRESH_LO_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_THRESH_LO.word = x)


//ISP_STATS_ACCWZ_ACC2_THRESH_HI


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_THRESH_HI_thresh_hi() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_THRESH_HI.ISP_STATS_ACCWZ_ACC2_THRESH_HI_ts.thresh_hi
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_THRESH_HI_thresh_hi(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_THRESH_HI.ISP_STATS_ACCWZ_ACC2_THRESH_HI_ts.thresh_hi = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_THRESH_HI(thresh_hi) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_THRESH_HI.word = (uint32_t)thresh_hi<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_THRESH_HI() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_THRESH_HI.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_THRESH_HI_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_THRESH_HI.word = x)


//ISP_STATS_ACCWZ_ACC2_CTRL


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_mode() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.mode
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_mode_FULL_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.mode == mode_FULL_PIXELVAL)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_mode__FULL_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.mode = mode_FULL_PIXELVAL)
#define mode_FULL_PIXELVAL 0x0    //Real pixel value is accumulated if greater than low threshold
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_mode_CLIP_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.mode == mode_CLIP_PIXELVAL)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_mode__CLIP_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.mode = mode_CLIP_PIXELVAL)
#define mode_CLIP_PIXELVAL 0x1    //Pixel value is clipped to high threshold and accumulated if greater than low threshold
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_mode_HISTOGRAM() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.mode == mode_HISTOGRAM)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_mode__HISTOGRAM() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.mode = mode_HISTOGRAM)
#define mode_HISTOGRAM 0x2    //HISTOGRAM
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_mode_ZERO() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.mode == mode_ZERO)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_mode__ZERO() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.mode = mode_ZERO)
#define mode_ZERO 0x3    //No accumulation


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_type() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.type
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_type_ACC_ZONED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.type == type_ACC_ZONED)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_type__ACC_ZONED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.type = type_ACC_ZONED)
#define type_ACC_ZONED 0x0    //zone_gains is used according to pixel location in zones
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_type_ACC_FLAT() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.type == type_ACC_FLAT)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_type__ACC_FLAT() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.type = type_ACC_FLAT)
#define type_ACC_FLAT 0x1    //no gain applied
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_type_ACC_BLACK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.type == type_ACC_BLACK)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_type__ACC_BLACK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.type = type_ACC_BLACK)
#define type_ACC_BLACK 0x2    //only black lines are accumulated
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_type_ACC_DARK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.type == type_ACC_DARK)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_type__ACC_DARK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.type = type_ACC_DARK)
#define type_ACC_DARK 0x3    //only dark lines are accumulated


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_color() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.color
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_color_GIR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.color == color_GIR)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_color__GIR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.color = color_GIR)
#define color_GIR 0x0    //Accumulate "Green In Red" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_color_RED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.color == color_RED)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_color__RED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.color = color_RED)
#define color_RED 0x1    //Accumulate "Red" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_color_BLU() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.color == color_BLU)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_color__BLU() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.color = color_BLU)
#define color_BLU 0x2    //Accumulate "Blue" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_color_GIB() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.color == color_GIB)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_color__GIB() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.color = color_GIB)
#define color_GIB 0x3    //Accumulate "Green in Blue" pixels


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_src() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.src
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_src_SRC_IDP_0() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.src == src_SRC_IDP_0)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_src__SRC_IDP_0() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.src = src_SRC_IDP_0)
#define src_SRC_IDP_0 0x0    //Gather stats from IDP Stream 0
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_src_SRC_IDP_1() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.src == src_SRC_IDP_1)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_src__SRC_IDP_1() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.src = src_SRC_IDP_1)
#define src_SRC_IDP_1 0x1    //Gather stats from IDP Stream 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_src_SRC_IDP_2() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.src == src_SRC_IDP_2)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_src__SRC_IDP_2() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.src = src_SRC_IDP_2)
#define src_SRC_IDP_2 0x2    //Gather stats from IDP Stream 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_src_SRC_IDP_3() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.src == src_SRC_IDP_3)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_src__SRC_IDP_3() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.ISP_STATS_ACCWZ_ACC2_CTRL_ts.src = src_SRC_IDP_3)
#define src_SRC_IDP_3 0x3    //Gather stats from IDP Stream 3
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL(mode,type,color,src) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.word = (uint32_t)mode<<0 | (uint32_t)type<<2 | (uint32_t)color<<4 | (uint32_t)src<<6)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_CTRL_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_CTRL.word = x)


//ISP_STATS_ACCWZ_ACC3_THRESH_LO


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_THRESH_LO_thresh_lo() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_THRESH_LO.ISP_STATS_ACCWZ_ACC3_THRESH_LO_ts.thresh_lo
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_THRESH_LO_thresh_lo(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_THRESH_LO.ISP_STATS_ACCWZ_ACC3_THRESH_LO_ts.thresh_lo = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_THRESH_LO(thresh_lo) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_THRESH_LO.word = (uint32_t)thresh_lo<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_THRESH_LO() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_THRESH_LO.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_THRESH_LO_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_THRESH_LO.word = x)


//ISP_STATS_ACCWZ_ACC3_THRESH_HI


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_THRESH_HI_thresh_hi() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_THRESH_HI.ISP_STATS_ACCWZ_ACC3_THRESH_HI_ts.thresh_hi
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_THRESH_HI_thresh_hi(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_THRESH_HI.ISP_STATS_ACCWZ_ACC3_THRESH_HI_ts.thresh_hi = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_THRESH_HI(thresh_hi) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_THRESH_HI.word = (uint32_t)thresh_hi<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_THRESH_HI() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_THRESH_HI.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_THRESH_HI_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_THRESH_HI.word = x)


//ISP_STATS_ACCWZ_ACC3_CTRL


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_mode() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.mode
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_mode_FULL_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.mode == mode_FULL_PIXELVAL)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_mode__FULL_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.mode = mode_FULL_PIXELVAL)
#define mode_FULL_PIXELVAL 0x0    //Real pixel value is accumulated if greater than low threshold
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_mode_CLIP_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.mode == mode_CLIP_PIXELVAL)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_mode__CLIP_PIXELVAL() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.mode = mode_CLIP_PIXELVAL)
#define mode_CLIP_PIXELVAL 0x1    //Pixel value is clipped to high threshold and accumulated if greater than low threshold
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_mode_HISTOGRAM() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.mode == mode_HISTOGRAM)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_mode__HISTOGRAM() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.mode = mode_HISTOGRAM)
#define mode_HISTOGRAM 0x2    //HISTOGRAM
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_mode_ZERO() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.mode == mode_ZERO)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_mode__ZERO() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.mode = mode_ZERO)
#define mode_ZERO 0x3    //No accumulation


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_type() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.type
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_type_ACC_ZONED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.type == type_ACC_ZONED)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_type__ACC_ZONED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.type = type_ACC_ZONED)
#define type_ACC_ZONED 0x0    //zone_gains is used according to pixel location in zones
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_type_ACC_FLAT() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.type == type_ACC_FLAT)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_type__ACC_FLAT() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.type = type_ACC_FLAT)
#define type_ACC_FLAT 0x1    //no gain applied
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_type_ACC_BLACK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.type == type_ACC_BLACK)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_type__ACC_BLACK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.type = type_ACC_BLACK)
#define type_ACC_BLACK 0x2    //only black lines are accumulated
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_type_ACC_DARK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.type == type_ACC_DARK)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_type__ACC_DARK() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.type = type_ACC_DARK)
#define type_ACC_DARK 0x3    //only dark lines are accumulated


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_color() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.color
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_color_GIR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.color == color_GIR)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_color__GIR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.color = color_GIR)
#define color_GIR 0x0    //Accumulate "Green In Red" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_color_RED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.color == color_RED)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_color__RED() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.color = color_RED)
#define color_RED 0x1    //Accumulate "Red" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_color_BLU() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.color == color_BLU)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_color__BLU() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.color = color_BLU)
#define color_BLU 0x2    //Accumulate "Blue" pixels
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_color_GIB() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.color == color_GIB)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_color__GIB() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.color = color_GIB)
#define color_GIB 0x3    //Accumulate "Green in Blue" pixels


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_src() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.src
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_src_SRC_IDP_0() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.src == src_SRC_IDP_0)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_src__SRC_IDP_0() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.src = src_SRC_IDP_0)
#define src_SRC_IDP_0 0x0    //Gather stats from IDP Stream 0
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_src_SRC_IDP_1() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.src == src_SRC_IDP_1)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_src__SRC_IDP_1() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.src = src_SRC_IDP_1)
#define src_SRC_IDP_1 0x1    //Gather stats from IDP Stream 1
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_src_SRC_IDP_2() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.src == src_SRC_IDP_2)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_src__SRC_IDP_2() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.src = src_SRC_IDP_2)
#define src_SRC_IDP_2 0x2    //Gather stats from IDP Stream 2
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_src_SRC_IDP_3() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.src == src_SRC_IDP_3)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_src__SRC_IDP_3() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.ISP_STATS_ACCWZ_ACC3_CTRL_ts.src = src_SRC_IDP_3)
#define src_SRC_IDP_3 0x3    //Gather stats from IDP Stream 3
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL(mode,type,color,src) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.word = (uint32_t)mode<<0 | (uint32_t)type<<2 | (uint32_t)color<<4 | (uint32_t)src<<6)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_CTRL_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_CTRL.word = x)


//ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET_zone_x_offset() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET.ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET_ts.zone_x_offset
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET_zone_x_offset(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET.ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET_ts.zone_x_offset = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET(zone_x_offset) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET.word = (uint32_t)zone_x_offset<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_X_OFFSET.word = x)


//ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET_zone_y_offset() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET.ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET_ts.zone_y_offset
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET_zone_y_offset(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET.ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET_ts.zone_y_offset = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET(zone_y_offset) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET.word = (uint32_t)zone_y_offset<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_Y_OFFSET.word = x)


//ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET_zone_x_offset() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET.ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET_ts.zone_x_offset
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET_zone_x_offset(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET.ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET_ts.zone_x_offset = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET(zone_x_offset) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET.word = (uint32_t)zone_x_offset<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_X_OFFSET.word = x)


//ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET_zone_y_offset() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET.ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET_ts.zone_y_offset
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET_zone_y_offset(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET.ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET_ts.zone_y_offset = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET(zone_y_offset) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET.word = (uint32_t)zone_y_offset<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_Y_OFFSET.word = x)


//ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET_zone_x_offset() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET.ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET_ts.zone_x_offset
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET_zone_x_offset(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET.ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET_ts.zone_x_offset = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET(zone_x_offset) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET.word = (uint32_t)zone_x_offset<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_X_OFFSET.word = x)


//ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET_zone_y_offset() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET.ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET_ts.zone_y_offset
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET_zone_y_offset(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET.ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET_ts.zone_y_offset = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET(zone_y_offset) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET.word = (uint32_t)zone_y_offset<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_Y_OFFSET.word = x)


//ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET_zone_x_offset() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET.ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET_ts.zone_x_offset
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET_zone_x_offset(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET.ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET_ts.zone_x_offset = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET(zone_x_offset) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET.word = (uint32_t)zone_x_offset<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_X_OFFSET.word = x)


//ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET_zone_y_offset() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET.ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET_ts.zone_y_offset
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET_zone_y_offset(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET.ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET_ts.zone_y_offset = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET(zone_y_offset) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET.word = (uint32_t)zone_y_offset<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_Y_OFFSET.word = x)


//ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE_zone_x_size() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE.ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE_ts.zone_x_size
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE_zone_x_size(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE.ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE_ts.zone_x_size = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE(zone_x_size) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE.word = (uint32_t)zone_x_size<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_X_SIZE.word = x)


//ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE_zone_y_size() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE.ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE_ts.zone_y_size
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE_zone_y_size(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE.ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE_ts.zone_y_size = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE(zone_y_size) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE.word = (uint32_t)zone_y_size<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0_ZONE_Y_SIZE.word = x)


//ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE_zone_x_size() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE.ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE_ts.zone_x_size
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE_zone_x_size(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE.ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE_ts.zone_x_size = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE(zone_x_size) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE.word = (uint32_t)zone_x_size<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_X_SIZE.word = x)


//ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE_zone_y_size() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE.ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE_ts.zone_y_size
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE_zone_y_size(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE.ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE_ts.zone_y_size = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE(zone_y_size) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE.word = (uint32_t)zone_y_size<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1_ZONE_Y_SIZE.word = x)


//ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE_zone_x_size() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE.ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE_ts.zone_x_size
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE_zone_x_size(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE.ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE_ts.zone_x_size = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE(zone_x_size) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE.word = (uint32_t)zone_x_size<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_X_SIZE.word = x)


//ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE_zone_y_size() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE.ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE_ts.zone_y_size
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE_zone_y_size(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE.ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE_ts.zone_y_size = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE(zone_y_size) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE.word = (uint32_t)zone_y_size<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2_ZONE_Y_SIZE.word = x)


//ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE_zone_x_size() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE.ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE_ts.zone_x_size
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE_zone_x_size(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE.ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE_ts.zone_x_size = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE(zone_x_size) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE.word = (uint32_t)zone_x_size<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_X_SIZE.word = x)


//ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE_zone_y_size() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE.ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE_ts.zone_y_size
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE_zone_y_size(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE.ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE_ts.zone_y_size = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE(zone_y_size) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE.word = (uint32_t)zone_y_size<<0)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3_ZONE_Y_SIZE.word = x)


//ISP_STATS_ACCWZ_ACC0


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0_accu() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0.ISP_STATS_ACCWZ_ACC0_ts.accu
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC0() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC0.word


//ISP_STATS_ACCWZ_ACC1


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1_accu() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1.ISP_STATS_ACCWZ_ACC1_ts.accu
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC1() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC1.word


//ISP_STATS_ACCWZ_ACC2


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2_accu() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2.ISP_STATS_ACCWZ_ACC2_ts.accu
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC2() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC2.word


//ISP_STATS_ACCWZ_ACC3


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3_accu() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3.ISP_STATS_ACCWZ_ACC3_ts.accu
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ACC3() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ACC3.word


//ISP_STATS_ACCWZ_ZONE_STATUS


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc0_zones_error() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc0_zones_error
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc0_zones_error_NO_ERROR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc0_zones_error == acc0_zones_error_NO_ERROR)
#define acc0_zones_error_NO_ERROR 0x0    //No error
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc0_zones_error_ERROR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc0_zones_error == acc0_zones_error_ERROR)
#define acc0_zones_error_ERROR 0x1    //Error


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc1_zones_error() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc1_zones_error
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc1_zones_error_NO_ERROR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc1_zones_error == acc1_zones_error_NO_ERROR)
#define acc1_zones_error_NO_ERROR 0x0    //No error
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc1_zones_error_ERROR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc1_zones_error == acc1_zones_error_ERROR)
#define acc1_zones_error_ERROR 0x1    //Error


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc2_zones_error() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc2_zones_error
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc2_zones_error_NO_ERROR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc2_zones_error == acc2_zones_error_NO_ERROR)
#define acc2_zones_error_NO_ERROR 0x0    //No error
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc2_zones_error_ERROR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc2_zones_error == acc2_zones_error_ERROR)
#define acc2_zones_error_ERROR 0x1    //Error


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc3_zones_error() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc3_zones_error
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc3_zones_error_NO_ERROR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc3_zones_error == acc3_zones_error_NO_ERROR)
#define acc3_zones_error_NO_ERROR 0x0    //No error
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS_acc3_zones_error_ERROR() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.ISP_STATS_ACCWZ_ZONE_STATUS_ts.acc3_zones_error == acc3_zones_error_ERROR)
#define acc3_zones_error_ERROR 0x1    //Error
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_ZONE_STATUS() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_ZONE_STATUS.word


//ISP_STATS_ACCWZ_DFV


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_DFV_dfv_enable() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_DFV.ISP_STATS_ACCWZ_DFV_ts.dfv_enable
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_DFV_dfv_enable_DFV_DISABLE() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_DFV.ISP_STATS_ACCWZ_DFV_ts.dfv_enable == dfv_enable_DFV_DISABLE)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_DFV_dfv_enable__DFV_DISABLE() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_DFV.ISP_STATS_ACCWZ_DFV_ts.dfv_enable = dfv_enable_DFV_DISABLE)
#define dfv_enable_DFV_DISABLE 0x0    //Disable DFV mode
#define Is_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_DFV_dfv_enable_B_0x1() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_DFV.ISP_STATS_ACCWZ_DFV_ts.dfv_enable == dfv_enable_B_0x1)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_DFV_dfv_enable__B_0x1() (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_DFV.ISP_STATS_ACCWZ_DFV_ts.dfv_enable = dfv_enable_B_0x1)
#define dfv_enable_B_0x1 0x1    //Enable DFV mode


#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_DFV_dfv_interrupt_ctrl() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_DFV.ISP_STATS_ACCWZ_DFV_ts.dfv_interrupt_ctrl
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_DFV_dfv_interrupt_ctrl(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_DFV.ISP_STATS_ACCWZ_DFV_ts.dfv_interrupt_ctrl = x)
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_DFV(dfv_enable,dfv_interrupt_ctrl) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_DFV.word = (uint8_t)dfv_enable<<0 | (uint8_t)dfv_interrupt_ctrl<<1)
#define Get_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_DFV() p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_DFV.word
#define Set_ISP_STATS_ACCWZ_ISP_STATS_ACCWZ_DFV_word(x) (p_ISP_STATS_ACCWZ_IP->ISP_STATS_ACCWZ_DFV.word = x)

//ISP_STATS_ACC_8x6_ENABLE
/*Description: :Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable accumulation logic*/
    }ISP_STATS_ACC_8x6_ENABLE_ts;

}ISP_STATS_ACC_8x6_ENABLE_tu;



//ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ
/*Description: :Zone gains for zones 1 to 16
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t zone_gains_1_16_req;
        /* 
        Zone gain values for zones 1 to 16. 2 bits are assigned to each zone gain. 1st zone is assigned zone_gains_1_16_req[1:0] and 16th zone is assigned zone_gains_1_16_req[31:30] and intermediate bits are for intermediate zones.*/
    }ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ_ts;

}ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ_tu;



//ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ
/*Description: :Zone gains for zones 17 to 32
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t zone_gains_17_32_req;
        /* 
        Zone gain values for zones 17 to 32. 2 bits are assigned to each zone gain.
        17th zone is assigned zone_gains_17_32_req[1:0] and 32nd zone is assigned zone_gains_17_32_req[31:30] and intermediate bits are for intermediate zones
        */
    }ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ_ts;

}ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ_tu;



//ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ
/*Description: :Zone gains for zones 33 to 48
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t zone_gains_33_48_req;
        /* 
        Zone gain for zones 33 to 48 . 2 bits are assigned to each zone gain
        33rd zone is assigned zone_gains_33_48_req[1:0] and 48th zone is assigned zone_gains_33_48_req[31:30] and intermediate bits are for intermediate zones.
        */
    }ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ_ts;

}ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ_tu;



//ISP_STATS_ACC_8x6_CTRL_REQ
/*Description: :Accumulator control register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t acc_mode_req :2;
        /* Selection of mode
        */
        uint8_t acc_type_req :2;
        /* Selection of kind of statistics*/
        uint8_t acc_color_req :2;
        /* Selection of pixel to accumulate
        */
        uint8_t acc_src_req :2;
        /* Selection of the input IDP stream for gathering
        */
        uint8_t acc_staggered_req :1;
    }ISP_STATS_ACC_8x6_CTRL_REQ_ts;

}ISP_STATS_ACC_8x6_CTRL_REQ_tu;



//ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ
/*Description: X Offset for the zones
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t acc_zone_x_offset_req :13;
        /* X offset for accumulation*/
    }ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ_ts;

}ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ_tu;



//ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ
/*Description: Y Offset for the zones
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t acc_zone_y_offset_req :13;
        /* Y offset for accumulation*/
    }ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ_ts;

}ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ_tu;



//ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ
/*Description: Horizontol Size of Zones
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t acc_zone_x_size_req :13;
        /* X size of zones for accumulation*/
    }ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ_ts;

}ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ_tu;



//ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ
/*Description: Vertical size of zones
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t acc_zone_y_size_req :13;
        /* Y size of zones for accumulation*/
    }ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ_ts;

}ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ_tu;



//ISP_STATS_ACC_8x6_THRESHOLDLO_REQ
/*Description: LowerThreshold Value
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t acc_thresh_lo_req :12;
        /* Lower value of threshold*/
    }ISP_STATS_ACC_8x6_THRESHOLDLO_REQ_ts;

}ISP_STATS_ACC_8x6_THRESHOLDLO_REQ_tu;



//ISP_STATS_ACC_8x6_THRESHOLDHI_REQ
/*Description: Upper Threshold Value
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t acc_thresh_hi_req :12;
        /* Upper value of threshold*/
    }ISP_STATS_ACC_8x6_THRESHOLDHI_REQ_ts;

}ISP_STATS_ACC_8x6_THRESHOLDHI_REQ_tu;



//ISP_STATS_ACC_8x6_DFV
/*Description: DFV Register. Used to control interrupt assertion/deassertion using firmware write to register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* Enable the dfv_interrupt*/
        uint8_t dfv_interrupt_control :1;
        /* Interrupt is generated if this bit toggles and enable is set.*/
    }ISP_STATS_ACC_8x6_DFV_ts;

}ISP_STATS_ACC_8x6_DFV_tu;



//ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_STATUS
/*Description: :Zone gain status for zones 1 to 16
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t zone_gains_1_16;
    }ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_STATUS_ts;

}ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_STATUS_tu;



//ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_STATUS
/*Description: :Zone gain Status for zones 17 to 32
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t zone_gains_17_32;
    }ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_STATUS_ts;

}ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_STATUS_tu;



//ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_STATUS
/*Description: :Zone gains Status for zones 33 to 48
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t zone_gains_33_48;
    }ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_STATUS_ts;

}ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_STATUS_tu;



//ISP_STATS_ACC_8x6_CTRL_STATUS
/*Description: :Accumulator control staus register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t acc_mode :2;
        uint8_t acc_type :2;
        uint8_t acc_color :2;
        uint8_t acc_src :2;
        uint8_t acc_staggered :1;
    }ISP_STATS_ACC_8x6_CTRL_STATUS_ts;

}ISP_STATS_ACC_8x6_CTRL_STATUS_tu;



//ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS
/*Description: X Offset Status
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t acc_zone_x_offset :13;
    }ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS_ts;

}ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS_tu;



//ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS
/*Description: Y Offset Status
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t acc_zone_y_offset :13;
    }ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS_ts;

}ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS_tu;



//ISP_STATS_ACC_8x6_ZONE_SIZEX_STATUS
/*Description: X Size Status
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t acc_zone_x_size :13;
    }ISP_STATS_ACC_8x6_ZONE_SIZEX_STATUS_ts;

}ISP_STATS_ACC_8x6_ZONE_SIZEX_STATUS_tu;



//ISP_STATS_ACC_8x6_ZONE_SIZEY_STATUS
/*Description: Y Size Status
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t acc_zone_y_size :13;
    }ISP_STATS_ACC_8x6_ZONE_SIZEY_STATUS_ts;

}ISP_STATS_ACC_8x6_ZONE_SIZEY_STATUS_tu;



//ISP_STATS_ACC_8x6_ACC_TOTAL
/*Description: :Accumulator for all the zones
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_total;
        /* Accumulated value of all the zones*/
    }ISP_STATS_ACC_8x6_ACC_TOTAL_ts;

}ISP_STATS_ACC_8x6_ACC_TOTAL_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_1
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_1_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_1_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_2
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_2_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_2_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_3
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_3_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_3_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_4
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_4_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_4_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_5
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_5_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_5_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_6
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_6_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_6_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_7
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_7_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_7_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_8
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_8_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_8_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_9
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_9_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_9_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_10
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_10_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_10_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_11
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_11_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_11_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_12
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_12_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_12_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_13
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_13_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_13_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_14
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_14_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_14_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_15
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_15_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_15_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_16
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_16_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_16_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_17
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_17_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_17_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_18
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_18_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_18_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_19
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_19_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_19_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_20
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_20_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_20_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_21
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_21_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_21_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_22
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_22_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_22_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_23
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_23_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_23_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_24
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_24_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_24_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_25
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_25_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_25_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_26
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_26_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_26_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_27
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_27_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_27_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_28
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_28_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_28_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_29
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_29_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_29_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_30
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_30_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_30_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_31
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_31_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_31_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_32
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_32_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_32_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_33
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_33_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_33_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_34
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_34_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_34_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_35
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_35_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_35_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_36
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_36_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_36_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_37
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_37_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_37_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_38
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_38_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_38_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_39
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_39_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_39_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_40
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_40_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_40_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_41
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_41_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_41_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_42
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_42_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_42_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_43
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_43_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_43_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_44
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_44_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_44_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_45
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_45_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_45_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_46
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_46_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_46_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_47
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_47_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_47_tu;



//ISP_STATS_ACC_8x6_ACC_ZONE_48
/*Description: Accumulator for corresponding zone
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t accu :29;
        /* Accumulated value of individual zone*/
    }ISP_STATS_ACC_8x6_ACC_ZONE_48_ts;

}ISP_STATS_ACC_8x6_ACC_ZONE_48_tu;

typedef struct
{
    ISP_STATS_ACC_8x6_ENABLE_tu ISP_STATS_ACC_8x6_ENABLE;
    ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ_tu ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ;
    ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ_tu ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ;
    ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ_tu ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ;
    ISP_STATS_ACC_8x6_CTRL_REQ_tu ISP_STATS_ACC_8x6_CTRL_REQ;
    ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ_tu ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ;
    ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ_tu ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ;
    ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ_tu ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ;
    ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ_tu ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ;
    ISP_STATS_ACC_8x6_THRESHOLDLO_REQ_tu ISP_STATS_ACC_8x6_THRESHOLDLO_REQ;
    ISP_STATS_ACC_8x6_THRESHOLDHI_REQ_tu ISP_STATS_ACC_8x6_THRESHOLDHI_REQ;
    ISP_STATS_ACC_8x6_DFV_tu ISP_STATS_ACC_8x6_DFV;
    ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_STATUS_tu ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_STATUS;
    ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_STATUS_tu ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_STATUS;
    ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_STATUS_tu ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_STATUS;
    ISP_STATS_ACC_8x6_CTRL_STATUS_tu ISP_STATS_ACC_8x6_CTRL_STATUS;
    ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS_tu ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS;
    ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS_tu ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS;
    ISP_STATS_ACC_8x6_ZONE_SIZEX_STATUS_tu ISP_STATS_ACC_8x6_ZONE_SIZEX_STATUS;
    ISP_STATS_ACC_8x6_ZONE_SIZEY_STATUS_tu ISP_STATS_ACC_8x6_ZONE_SIZEY_STATUS;
    ISP_STATS_ACC_8x6_ACC_TOTAL_tu ISP_STATS_ACC_8x6_ACC_TOTAL;
    ISP_STATS_ACC_8x6_ACC_ZONE_1_tu ISP_STATS_ACC_8x6_ACC_ZONE_1;
    ISP_STATS_ACC_8x6_ACC_ZONE_2_tu ISP_STATS_ACC_8x6_ACC_ZONE_2;
    ISP_STATS_ACC_8x6_ACC_ZONE_3_tu ISP_STATS_ACC_8x6_ACC_ZONE_3;
    ISP_STATS_ACC_8x6_ACC_ZONE_4_tu ISP_STATS_ACC_8x6_ACC_ZONE_4;
    ISP_STATS_ACC_8x6_ACC_ZONE_5_tu ISP_STATS_ACC_8x6_ACC_ZONE_5;
    ISP_STATS_ACC_8x6_ACC_ZONE_6_tu ISP_STATS_ACC_8x6_ACC_ZONE_6;
    ISP_STATS_ACC_8x6_ACC_ZONE_7_tu ISP_STATS_ACC_8x6_ACC_ZONE_7;
    ISP_STATS_ACC_8x6_ACC_ZONE_8_tu ISP_STATS_ACC_8x6_ACC_ZONE_8;
    ISP_STATS_ACC_8x6_ACC_ZONE_9_tu ISP_STATS_ACC_8x6_ACC_ZONE_9;
    ISP_STATS_ACC_8x6_ACC_ZONE_10_tu ISP_STATS_ACC_8x6_ACC_ZONE_10;
    ISP_STATS_ACC_8x6_ACC_ZONE_11_tu ISP_STATS_ACC_8x6_ACC_ZONE_11;
    ISP_STATS_ACC_8x6_ACC_ZONE_12_tu ISP_STATS_ACC_8x6_ACC_ZONE_12;
    ISP_STATS_ACC_8x6_ACC_ZONE_13_tu ISP_STATS_ACC_8x6_ACC_ZONE_13;
    ISP_STATS_ACC_8x6_ACC_ZONE_14_tu ISP_STATS_ACC_8x6_ACC_ZONE_14;
    ISP_STATS_ACC_8x6_ACC_ZONE_15_tu ISP_STATS_ACC_8x6_ACC_ZONE_15;
    ISP_STATS_ACC_8x6_ACC_ZONE_16_tu ISP_STATS_ACC_8x6_ACC_ZONE_16;
    ISP_STATS_ACC_8x6_ACC_ZONE_17_tu ISP_STATS_ACC_8x6_ACC_ZONE_17;
    ISP_STATS_ACC_8x6_ACC_ZONE_18_tu ISP_STATS_ACC_8x6_ACC_ZONE_18;
    ISP_STATS_ACC_8x6_ACC_ZONE_19_tu ISP_STATS_ACC_8x6_ACC_ZONE_19;
    ISP_STATS_ACC_8x6_ACC_ZONE_20_tu ISP_STATS_ACC_8x6_ACC_ZONE_20;
    ISP_STATS_ACC_8x6_ACC_ZONE_21_tu ISP_STATS_ACC_8x6_ACC_ZONE_21;
    ISP_STATS_ACC_8x6_ACC_ZONE_22_tu ISP_STATS_ACC_8x6_ACC_ZONE_22;
    ISP_STATS_ACC_8x6_ACC_ZONE_23_tu ISP_STATS_ACC_8x6_ACC_ZONE_23;
    ISP_STATS_ACC_8x6_ACC_ZONE_24_tu ISP_STATS_ACC_8x6_ACC_ZONE_24;
    ISP_STATS_ACC_8x6_ACC_ZONE_25_tu ISP_STATS_ACC_8x6_ACC_ZONE_25;
    ISP_STATS_ACC_8x6_ACC_ZONE_26_tu ISP_STATS_ACC_8x6_ACC_ZONE_26;
    ISP_STATS_ACC_8x6_ACC_ZONE_27_tu ISP_STATS_ACC_8x6_ACC_ZONE_27;
    ISP_STATS_ACC_8x6_ACC_ZONE_28_tu ISP_STATS_ACC_8x6_ACC_ZONE_28;
    ISP_STATS_ACC_8x6_ACC_ZONE_29_tu ISP_STATS_ACC_8x6_ACC_ZONE_29;
    ISP_STATS_ACC_8x6_ACC_ZONE_30_tu ISP_STATS_ACC_8x6_ACC_ZONE_30;
    ISP_STATS_ACC_8x6_ACC_ZONE_31_tu ISP_STATS_ACC_8x6_ACC_ZONE_31;
    ISP_STATS_ACC_8x6_ACC_ZONE_32_tu ISP_STATS_ACC_8x6_ACC_ZONE_32;
    ISP_STATS_ACC_8x6_ACC_ZONE_33_tu ISP_STATS_ACC_8x6_ACC_ZONE_33;
    ISP_STATS_ACC_8x6_ACC_ZONE_34_tu ISP_STATS_ACC_8x6_ACC_ZONE_34;
    ISP_STATS_ACC_8x6_ACC_ZONE_35_tu ISP_STATS_ACC_8x6_ACC_ZONE_35;
    ISP_STATS_ACC_8x6_ACC_ZONE_36_tu ISP_STATS_ACC_8x6_ACC_ZONE_36;
    ISP_STATS_ACC_8x6_ACC_ZONE_37_tu ISP_STATS_ACC_8x6_ACC_ZONE_37;
    ISP_STATS_ACC_8x6_ACC_ZONE_38_tu ISP_STATS_ACC_8x6_ACC_ZONE_38;
    ISP_STATS_ACC_8x6_ACC_ZONE_39_tu ISP_STATS_ACC_8x6_ACC_ZONE_39;
    ISP_STATS_ACC_8x6_ACC_ZONE_40_tu ISP_STATS_ACC_8x6_ACC_ZONE_40;
    ISP_STATS_ACC_8x6_ACC_ZONE_41_tu ISP_STATS_ACC_8x6_ACC_ZONE_41;
    ISP_STATS_ACC_8x6_ACC_ZONE_42_tu ISP_STATS_ACC_8x6_ACC_ZONE_42;
    ISP_STATS_ACC_8x6_ACC_ZONE_43_tu ISP_STATS_ACC_8x6_ACC_ZONE_43;
    ISP_STATS_ACC_8x6_ACC_ZONE_44_tu ISP_STATS_ACC_8x6_ACC_ZONE_44;
    ISP_STATS_ACC_8x6_ACC_ZONE_45_tu ISP_STATS_ACC_8x6_ACC_ZONE_45;
    ISP_STATS_ACC_8x6_ACC_ZONE_46_tu ISP_STATS_ACC_8x6_ACC_ZONE_46;
    ISP_STATS_ACC_8x6_ACC_ZONE_47_tu ISP_STATS_ACC_8x6_ACC_ZONE_47;
    ISP_STATS_ACC_8x6_ACC_ZONE_48_tu ISP_STATS_ACC_8x6_ACC_ZONE_48;
}ISP_STATS_ACC_8x6_IP_ts;




//ISP_STATS_ACC_8x6_ENABLE


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ENABLE_enable() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ENABLE.ISP_STATS_ACC_8x6_ENABLE_ts.enable
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ENABLE_enable_B_0x0() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ENABLE.ISP_STATS_ACC_8x6_ENABLE_ts.enable == enable_B_0x0)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ENABLE_enable__B_0x0() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ENABLE.ISP_STATS_ACC_8x6_ENABLE_ts.enable = enable_B_0x0)
#define enable_B_0x0 0x0    //Disable accumulation logic
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ENABLE_enable_B_0x1() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ENABLE.ISP_STATS_ACC_8x6_ENABLE_ts.enable == enable_B_0x1)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ENABLE_enable__B_0x1() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ENABLE.ISP_STATS_ACC_8x6_ENABLE_ts.enable = enable_B_0x1)
#define enable_B_0x1 0x1    //Enable accumulation logic
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ENABLE(enable) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ENABLE.word = (uint32_t)enable<<0)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ENABLE() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ENABLE.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ENABLE_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ENABLE.word = x)


//ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ_zone_gains_1_16_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ.ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ_ts.zone_gains_1_16_req
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ_zone_gains_1_16_req(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ.ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ_ts.zone_gains_1_16_req = x)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ(zone_gains_1_16_req) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ.word = (uint32_t)zone_gains_1_16_req<<0)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_REQ.word = x)


//ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ_zone_gains_17_32_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ.ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ_ts.zone_gains_17_32_req
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ_zone_gains_17_32_req(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ.ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ_ts.zone_gains_17_32_req = x)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ(zone_gains_17_32_req) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ.word = (uint32_t)zone_gains_17_32_req<<0)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_REQ.word = x)


//ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ_zone_gains_33_48_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ.ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ_ts.zone_gains_33_48_req
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ_zone_gains_33_48_req(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ.ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ_ts.zone_gains_33_48_req = x)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ(zone_gains_33_48_req) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ.word = (uint32_t)zone_gains_33_48_req<<0)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_REQ.word = x)


//ISP_STATS_ACC_8x6_CTRL_REQ


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_mode_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_mode_req
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_mode_req_FULL_PIXELVAL() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_mode_req == acc_mode_req_FULL_PIXELVAL)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_mode_req__FULL_PIXELVAL() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_mode_req = acc_mode_req_FULL_PIXELVAL)
#define acc_mode_req_FULL_PIXELVAL 0x0    //Real pixel value is accumulated if greater than low threshold
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_mode_req_CLIP_PIXELVAL() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_mode_req == acc_mode_req_CLIP_PIXELVAL)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_mode_req__CLIP_PIXELVAL() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_mode_req = acc_mode_req_CLIP_PIXELVAL)
#define acc_mode_req_CLIP_PIXELVAL 0x1    //Pixel value is clipped to high threshold and accumulated if greater than low threshold
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_mode_req_HISTOGRAM() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_mode_req == acc_mode_req_HISTOGRAM)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_mode_req__HISTOGRAM() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_mode_req = acc_mode_req_HISTOGRAM)
#define acc_mode_req_HISTOGRAM 0x2    //Histogramm
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_mode_req_ZERO() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_mode_req == acc_mode_req_ZERO)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_mode_req__ZERO() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_mode_req = acc_mode_req_ZERO)
#define acc_mode_req_ZERO 0x3    //No accumulation


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_type_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_type_req
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_type_req_ACC_ZONED() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_type_req == acc_type_req_ACC_ZONED)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_type_req__ACC_ZONED() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_type_req = acc_type_req_ACC_ZONED)
#define acc_type_req_ACC_ZONED 0x0    //zone_gains is used according to pixel location in zones
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_type_req_ACC_FLAT() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_type_req == acc_type_req_ACC_FLAT)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_type_req__ACC_FLAT() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_type_req = acc_type_req_ACC_FLAT)
#define acc_type_req_ACC_FLAT 0x1    //no gain applied
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_type_req_ACC_BLACK() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_type_req == acc_type_req_ACC_BLACK)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_type_req__ACC_BLACK() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_type_req = acc_type_req_ACC_BLACK)
#define acc_type_req_ACC_BLACK 0x2    //only black lines are accumulated
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_type_req_ACC_DARK() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_type_req == acc_type_req_ACC_DARK)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_type_req__ACC_DARK() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_type_req = acc_type_req_ACC_DARK)
#define acc_type_req_ACC_DARK 0x3    //only dark lines are accumulated


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_color_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_color_req
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_color_req_GIR() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_color_req == acc_color_req_GIR)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_color_req__GIR() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_color_req = acc_color_req_GIR)
#define acc_color_req_GIR 0x0    //Green In Red
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_color_req_RED() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_color_req == acc_color_req_RED)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_color_req__RED() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_color_req = acc_color_req_RED)
#define acc_color_req_RED 0x1    //Red
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_color_req_BLU() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_color_req == acc_color_req_BLU)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_color_req__BLU() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_color_req = acc_color_req_BLU)
#define acc_color_req_BLU 0x2    //Blue
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_color_req_GIB() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_color_req == acc_color_req_GIB)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_color_req__GIB() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_color_req = acc_color_req_GIB)
#define acc_color_req_GIB 0x3    //Green in Blue


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_src_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_src_req
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_src_req_SRC_IDP_0() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_src_req == acc_src_req_SRC_IDP_0)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_src_req__SRC_IDP_0() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_src_req = acc_src_req_SRC_IDP_0)
#define acc_src_req_SRC_IDP_0 0x0    //IDP Stream 0
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_src_req_SRC_IDP_1() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_src_req == acc_src_req_SRC_IDP_1)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_src_req__SRC_IDP_1() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_src_req = acc_src_req_SRC_IDP_1)
#define acc_src_req_SRC_IDP_1 0x1    //IDP Stream 1
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_src_req_SRC_IDP_2() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_src_req == acc_src_req_SRC_IDP_2)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_src_req__SRC_IDP_2() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_src_req = acc_src_req_SRC_IDP_2)
#define acc_src_req_SRC_IDP_2 0x2    //IDP Stream 2
#define Is_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_src_req_SRC_IDP_3() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_src_req == acc_src_req_SRC_IDP_3)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_src_req__SRC_IDP_3() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_src_req = acc_src_req_SRC_IDP_3)
#define acc_src_req_SRC_IDP_3 0x3    //IDP Stream 3


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_staggered_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_staggered_req
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_acc_staggered_req(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.ISP_STATS_ACC_8x6_CTRL_REQ_ts.acc_staggered_req = x)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ(acc_mode_req,acc_type_req,acc_color_req,acc_src_req,acc_staggered_req) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.word = (uint32_t)acc_mode_req<<0 | (uint32_t)acc_type_req<<2 | (uint32_t)acc_color_req<<4 | (uint32_t)acc_src_req<<6 | (uint32_t)acc_staggered_req<<8)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_REQ_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_REQ.word = x)


//ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ_acc_zone_x_offset_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ.ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ_ts.acc_zone_x_offset_req
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ_acc_zone_x_offset_req(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ.ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ_ts.acc_zone_x_offset_req = x)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ(acc_zone_x_offset_req) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ.word = (uint16_t)acc_zone_x_offset_req<<0)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETX_REQ.word = x)


//ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ_acc_zone_y_offset_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ.ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ_ts.acc_zone_y_offset_req
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ_acc_zone_y_offset_req(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ.ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ_ts.acc_zone_y_offset_req = x)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ(acc_zone_y_offset_req) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ.word = (uint16_t)acc_zone_y_offset_req<<0)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETY_REQ.word = x)


//ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ_acc_zone_x_size_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ.ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ_ts.acc_zone_x_size_req
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ_acc_zone_x_size_req(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ.ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ_ts.acc_zone_x_size_req = x)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ(acc_zone_x_size_req) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ.word = (uint16_t)acc_zone_x_size_req<<0)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEX_REQ.word = x)


//ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ_acc_zone_y_size_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ.ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ_ts.acc_zone_y_size_req
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ_acc_zone_y_size_req(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ.ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ_ts.acc_zone_y_size_req = x)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ(acc_zone_y_size_req) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ.word = (uint16_t)acc_zone_y_size_req<<0)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEY_REQ.word = x)


//ISP_STATS_ACC_8x6_THRESHOLDLO_REQ


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_THRESHOLDLO_REQ_acc_thresh_lo_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_THRESHOLDLO_REQ.ISP_STATS_ACC_8x6_THRESHOLDLO_REQ_ts.acc_thresh_lo_req
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_THRESHOLDLO_REQ_acc_thresh_lo_req(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_THRESHOLDLO_REQ.ISP_STATS_ACC_8x6_THRESHOLDLO_REQ_ts.acc_thresh_lo_req = x)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_THRESHOLDLO_REQ(acc_thresh_lo_req) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_THRESHOLDLO_REQ.word = (uint16_t)acc_thresh_lo_req<<0)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_THRESHOLDLO_REQ() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_THRESHOLDLO_REQ.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_THRESHOLDLO_REQ_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_THRESHOLDLO_REQ.word = x)


//ISP_STATS_ACC_8x6_THRESHOLDHI_REQ


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_THRESHOLDHI_REQ_acc_thresh_hi_req() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_THRESHOLDHI_REQ.ISP_STATS_ACC_8x6_THRESHOLDHI_REQ_ts.acc_thresh_hi_req
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_THRESHOLDHI_REQ_acc_thresh_hi_req(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_THRESHOLDHI_REQ.ISP_STATS_ACC_8x6_THRESHOLDHI_REQ_ts.acc_thresh_hi_req = x)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_THRESHOLDHI_REQ(acc_thresh_hi_req) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_THRESHOLDHI_REQ.word = (uint16_t)acc_thresh_hi_req<<0)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_THRESHOLDHI_REQ() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_THRESHOLDHI_REQ.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_THRESHOLDHI_REQ_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_THRESHOLDHI_REQ.word = x)


//ISP_STATS_ACC_8x6_DFV


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_DFV_dfv_enable() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_DFV.ISP_STATS_ACC_8x6_DFV_ts.dfv_enable
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_DFV_dfv_enable(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_DFV.ISP_STATS_ACC_8x6_DFV_ts.dfv_enable = x)


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_DFV_dfv_interrupt_control() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_DFV.ISP_STATS_ACC_8x6_DFV_ts.dfv_interrupt_control
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_DFV_dfv_interrupt_control(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_DFV.ISP_STATS_ACC_8x6_DFV_ts.dfv_interrupt_control = x)
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_DFV(dfv_enable,dfv_interrupt_control) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_DFV.word = (uint32_t)dfv_enable<<0 | (uint32_t)dfv_interrupt_control<<1)
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_DFV() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_DFV.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_DFV_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_DFV.word = x)


//ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_STATUS


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_STATUS_zone_gains_1_16() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_STATUS.ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_STATUS_ts.zone_gains_1_16
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_STATUS() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_1_16_STATUS.word


//ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_STATUS


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_STATUS_zone_gains_17_32() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_STATUS.ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_STATUS_ts.zone_gains_17_32
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_STATUS() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_17_32_STATUS.word


//ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_STATUS


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_STATUS_zone_gains_33_48() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_STATUS.ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_STATUS_ts.zone_gains_33_48
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_STATUS() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_GAINS_33_48_STATUS.word


//ISP_STATS_ACC_8x6_CTRL_STATUS


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_STATUS_acc_mode() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_STATUS.ISP_STATS_ACC_8x6_CTRL_STATUS_ts.acc_mode


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_STATUS_acc_type() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_STATUS.ISP_STATS_ACC_8x6_CTRL_STATUS_ts.acc_type


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_STATUS_acc_color() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_STATUS.ISP_STATS_ACC_8x6_CTRL_STATUS_ts.acc_color


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_STATUS_acc_src() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_STATUS.ISP_STATS_ACC_8x6_CTRL_STATUS_ts.acc_src


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_STATUS_acc_staggered() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_STATUS.ISP_STATS_ACC_8x6_CTRL_STATUS_ts.acc_staggered
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_CTRL_STATUS() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_CTRL_STATUS.word


//ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS_acc_zone_x_offset() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS.ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS_ts.acc_zone_x_offset
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS.word = )
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETX_STATUS.word = x)


//ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS_acc_zone_y_offset() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS.ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS_ts.acc_zone_y_offset
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS() (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS.word = )
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS.word
#define Set_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS_word(x) (p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_OFFSETY_STATUS.word = x)


//ISP_STATS_ACC_8x6_ZONE_SIZEX_STATUS


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEX_STATUS_acc_zone_x_size() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEX_STATUS.ISP_STATS_ACC_8x6_ZONE_SIZEX_STATUS_ts.acc_zone_x_size
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEX_STATUS() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEX_STATUS.word


//ISP_STATS_ACC_8x6_ZONE_SIZEY_STATUS


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEY_STATUS_acc_zone_y_size() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEY_STATUS.ISP_STATS_ACC_8x6_ZONE_SIZEY_STATUS_ts.acc_zone_y_size
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ZONE_SIZEY_STATUS() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ZONE_SIZEY_STATUS.word


//ISP_STATS_ACC_8x6_ACC_TOTAL


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_TOTAL_acc_total() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_TOTAL.ISP_STATS_ACC_8x6_ACC_TOTAL_ts.acc_total
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_TOTAL() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_TOTAL.word


//ISP_STATS_ACC_8x6_ACC_ZONE_1


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_1_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_1.ISP_STATS_ACC_8x6_ACC_ZONE_1_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_1() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_1.word


//ISP_STATS_ACC_8x6_ACC_ZONE_2


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_2_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_2.ISP_STATS_ACC_8x6_ACC_ZONE_2_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_2() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_2.word


//ISP_STATS_ACC_8x6_ACC_ZONE_3


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_3_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_3.ISP_STATS_ACC_8x6_ACC_ZONE_3_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_3() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_3.word


//ISP_STATS_ACC_8x6_ACC_ZONE_4


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_4_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_4.ISP_STATS_ACC_8x6_ACC_ZONE_4_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_4() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_4.word


//ISP_STATS_ACC_8x6_ACC_ZONE_5


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_5_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_5.ISP_STATS_ACC_8x6_ACC_ZONE_5_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_5() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_5.word


//ISP_STATS_ACC_8x6_ACC_ZONE_6


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_6_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_6.ISP_STATS_ACC_8x6_ACC_ZONE_6_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_6() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_6.word


//ISP_STATS_ACC_8x6_ACC_ZONE_7


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_7_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_7.ISP_STATS_ACC_8x6_ACC_ZONE_7_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_7() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_7.word


//ISP_STATS_ACC_8x6_ACC_ZONE_8


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_8_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_8.ISP_STATS_ACC_8x6_ACC_ZONE_8_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_8() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_8.word


//ISP_STATS_ACC_8x6_ACC_ZONE_9


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_9_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_9.ISP_STATS_ACC_8x6_ACC_ZONE_9_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_9() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_9.word


//ISP_STATS_ACC_8x6_ACC_ZONE_10


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_10_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_10.ISP_STATS_ACC_8x6_ACC_ZONE_10_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_10() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_10.word


//ISP_STATS_ACC_8x6_ACC_ZONE_11


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_11_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_11.ISP_STATS_ACC_8x6_ACC_ZONE_11_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_11() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_11.word


//ISP_STATS_ACC_8x6_ACC_ZONE_12


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_12_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_12.ISP_STATS_ACC_8x6_ACC_ZONE_12_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_12() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_12.word


//ISP_STATS_ACC_8x6_ACC_ZONE_13


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_13_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_13.ISP_STATS_ACC_8x6_ACC_ZONE_13_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_13() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_13.word


//ISP_STATS_ACC_8x6_ACC_ZONE_14


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_14_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_14.ISP_STATS_ACC_8x6_ACC_ZONE_14_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_14() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_14.word


//ISP_STATS_ACC_8x6_ACC_ZONE_15


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_15_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_15.ISP_STATS_ACC_8x6_ACC_ZONE_15_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_15() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_15.word


//ISP_STATS_ACC_8x6_ACC_ZONE_16


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_16_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_16.ISP_STATS_ACC_8x6_ACC_ZONE_16_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_16() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_16.word


//ISP_STATS_ACC_8x6_ACC_ZONE_17


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_17_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_17.ISP_STATS_ACC_8x6_ACC_ZONE_17_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_17() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_17.word


//ISP_STATS_ACC_8x6_ACC_ZONE_18


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_18_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_18.ISP_STATS_ACC_8x6_ACC_ZONE_18_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_18() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_18.word


//ISP_STATS_ACC_8x6_ACC_ZONE_19


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_19_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_19.ISP_STATS_ACC_8x6_ACC_ZONE_19_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_19() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_19.word


//ISP_STATS_ACC_8x6_ACC_ZONE_20


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_20_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_20.ISP_STATS_ACC_8x6_ACC_ZONE_20_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_20() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_20.word


//ISP_STATS_ACC_8x6_ACC_ZONE_21


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_21_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_21.ISP_STATS_ACC_8x6_ACC_ZONE_21_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_21() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_21.word


//ISP_STATS_ACC_8x6_ACC_ZONE_22


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_22_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_22.ISP_STATS_ACC_8x6_ACC_ZONE_22_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_22() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_22.word


//ISP_STATS_ACC_8x6_ACC_ZONE_23


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_23_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_23.ISP_STATS_ACC_8x6_ACC_ZONE_23_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_23() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_23.word


//ISP_STATS_ACC_8x6_ACC_ZONE_24


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_24_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_24.ISP_STATS_ACC_8x6_ACC_ZONE_24_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_24() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_24.word


//ISP_STATS_ACC_8x6_ACC_ZONE_25


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_25_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_25.ISP_STATS_ACC_8x6_ACC_ZONE_25_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_25() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_25.word


//ISP_STATS_ACC_8x6_ACC_ZONE_26


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_26_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_26.ISP_STATS_ACC_8x6_ACC_ZONE_26_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_26() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_26.word


//ISP_STATS_ACC_8x6_ACC_ZONE_27


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_27_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_27.ISP_STATS_ACC_8x6_ACC_ZONE_27_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_27() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_27.word


//ISP_STATS_ACC_8x6_ACC_ZONE_28


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_28_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_28.ISP_STATS_ACC_8x6_ACC_ZONE_28_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_28() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_28.word


//ISP_STATS_ACC_8x6_ACC_ZONE_29


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_29_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_29.ISP_STATS_ACC_8x6_ACC_ZONE_29_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_29() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_29.word


//ISP_STATS_ACC_8x6_ACC_ZONE_30


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_30_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_30.ISP_STATS_ACC_8x6_ACC_ZONE_30_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_30() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_30.word


//ISP_STATS_ACC_8x6_ACC_ZONE_31


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_31_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_31.ISP_STATS_ACC_8x6_ACC_ZONE_31_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_31() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_31.word


//ISP_STATS_ACC_8x6_ACC_ZONE_32


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_32_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_32.ISP_STATS_ACC_8x6_ACC_ZONE_32_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_32() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_32.word


//ISP_STATS_ACC_8x6_ACC_ZONE_33


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_33_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_33.ISP_STATS_ACC_8x6_ACC_ZONE_33_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_33() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_33.word


//ISP_STATS_ACC_8x6_ACC_ZONE_34


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_34_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_34.ISP_STATS_ACC_8x6_ACC_ZONE_34_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_34() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_34.word


//ISP_STATS_ACC_8x6_ACC_ZONE_35


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_35_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_35.ISP_STATS_ACC_8x6_ACC_ZONE_35_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_35() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_35.word


//ISP_STATS_ACC_8x6_ACC_ZONE_36


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_36_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_36.ISP_STATS_ACC_8x6_ACC_ZONE_36_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_36() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_36.word


//ISP_STATS_ACC_8x6_ACC_ZONE_37


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_37_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_37.ISP_STATS_ACC_8x6_ACC_ZONE_37_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_37() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_37.word


//ISP_STATS_ACC_8x6_ACC_ZONE_38


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_38_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_38.ISP_STATS_ACC_8x6_ACC_ZONE_38_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_38() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_38.word


//ISP_STATS_ACC_8x6_ACC_ZONE_39


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_39_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_39.ISP_STATS_ACC_8x6_ACC_ZONE_39_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_39() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_39.word


//ISP_STATS_ACC_8x6_ACC_ZONE_40


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_40_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_40.ISP_STATS_ACC_8x6_ACC_ZONE_40_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_40() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_40.word


//ISP_STATS_ACC_8x6_ACC_ZONE_41


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_41_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_41.ISP_STATS_ACC_8x6_ACC_ZONE_41_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_41() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_41.word


//ISP_STATS_ACC_8x6_ACC_ZONE_42


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_42_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_42.ISP_STATS_ACC_8x6_ACC_ZONE_42_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_42() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_42.word


//ISP_STATS_ACC_8x6_ACC_ZONE_43


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_43_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_43.ISP_STATS_ACC_8x6_ACC_ZONE_43_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_43() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_43.word


//ISP_STATS_ACC_8x6_ACC_ZONE_44


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_44_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_44.ISP_STATS_ACC_8x6_ACC_ZONE_44_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_44() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_44.word


//ISP_STATS_ACC_8x6_ACC_ZONE_45


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_45_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_45.ISP_STATS_ACC_8x6_ACC_ZONE_45_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_45() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_45.word


//ISP_STATS_ACC_8x6_ACC_ZONE_46


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_46_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_46.ISP_STATS_ACC_8x6_ACC_ZONE_46_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_46() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_46.word


//ISP_STATS_ACC_8x6_ACC_ZONE_47


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_47_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_47.ISP_STATS_ACC_8x6_ACC_ZONE_47_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_47() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_47.word


//ISP_STATS_ACC_8x6_ACC_ZONE_48


#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_48_accu() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_48.ISP_STATS_ACC_8x6_ACC_ZONE_48_ts.accu
#define Get_ISP_STATS_ACC_8x6_ISP_STATS_ACC_8x6_ACC_ZONE_48() p_ISP_STATS_ACC_8x6_IP->ISP_STATS_ACC_8x6_ACC_ZONE_48.word

//ISP_STATS_MUX_MWWB_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_STATS_MUX_MWWB_ENABLE_ts;

}ISP_STATS_MUX_MWWB_ENABLE_tu;



//ISP_STATS_MUX_MWWB_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_STATS_MUX_MWWB_SELECT_ts;

}ISP_STATS_MUX_MWWB_SELECT_tu;

typedef struct
{
    ISP_STATS_MUX_MWWB_ENABLE_tu ISP_STATS_MUX_MWWB_ENABLE;
    ISP_STATS_MUX_MWWB_SELECT_tu ISP_STATS_MUX_MWWB_SELECT;
}ISP_STATS_MUX_MWWB_IP_ts;




//ISP_STATS_MUX_MWWB_ENABLE


#define Get_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE_mux2to1_enable() p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.ISP_STATS_MUX_MWWB_ENABLE_ts.mux2to1_enable
#define Is_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE_mux2to1_enable_DISABLE() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.ISP_STATS_MUX_MWWB_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE_mux2to1_enable__DISABLE() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.ISP_STATS_MUX_MWWB_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE_mux2to1_enable_ENABLE() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.ISP_STATS_MUX_MWWB_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE_mux2to1_enable__ENABLE() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.ISP_STATS_MUX_MWWB_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE_mux2to1_soft_reset() p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.ISP_STATS_MUX_MWWB_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.ISP_STATS_MUX_MWWB_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.ISP_STATS_MUX_MWWB_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.ISP_STATS_MUX_MWWB_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.ISP_STATS_MUX_MWWB_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE() p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.word
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_ENABLE_word(x) (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_ENABLE.word = x)


//ISP_STATS_MUX_MWWB_SELECT


#define Get_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT_mux2to1_select() p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.ISP_STATS_MUX_MWWB_SELECT_ts.mux2to1_select
#define Is_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT_mux2to1_select_IDP0() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.ISP_STATS_MUX_MWWB_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT_mux2to1_select__IDP0() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.ISP_STATS_MUX_MWWB_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT_mux2to1_select_IDP1() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.ISP_STATS_MUX_MWWB_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT_mux2to1_select__IDP1() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.ISP_STATS_MUX_MWWB_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT_mux2to1_shadow_en() p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.ISP_STATS_MUX_MWWB_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.ISP_STATS_MUX_MWWB_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.ISP_STATS_MUX_MWWB_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.ISP_STATS_MUX_MWWB_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.ISP_STATS_MUX_MWWB_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT() p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.word
#define Set_ISP_STATS_MUX_MWWB_ISP_STATS_MUX_MWWB_SELECT_word(x) (p_ISP_STATS_MUX_MWWB_IP->ISP_STATS_MUX_MWWB_SELECT.word = x)

//ISP_STATS_MPSS_ENABLE
/*Description: MPSS Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* IDP data out same as data in*/
    }ISP_STATS_MPSS_ENABLE_ts;

}ISP_STATS_MPSS_ENABLE_tu;



//ISP_STATS_MPSS_CTRL
/*Description: MPSS Control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t stgrd :1;
        /* Non Staggerred sub sampling*/
    }ISP_STATS_MPSS_CTRL_ts;

}ISP_STATS_MPSS_CTRL_tu;



//ISP_STATS_MPSS_PARAM_HOR
/*Description: Hor Sub sample parameter Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t iqval_h :4;
        /* 
        Horizontalsubsample ratio
        Interpretation of iqval_h is as follows*/
    }ISP_STATS_MPSS_PARAM_HOR_ts;

}ISP_STATS_MPSS_PARAM_HOR_tu;



//ISP_STATS_MPSS_PARAM_VER
/*Description: Ver Sub sample parameter Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t iqval_v :4;
        /* 
        Vertical subsample ratio
        Interpretation of iqval_v is as follows*/
    }ISP_STATS_MPSS_PARAM_VER_ts;

}ISP_STATS_MPSS_PARAM_VER_tu;



//ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT
/*Description: ofirstmin4 Offset Count Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ofirstmin4_offset_cnt :7;
        /* 
        Horizontal sub-sample Count to calculate number of clock pulses between ifirstmin4 and ofirstmin4 to position ofirstmin4 exactly 4 clocks before first valid ohenv
        Calculation of ofirstmin4_offset_cnt values is as follows
        No Sub Sampling, by pass mode - (ofirstmin4_offset_cnt == 0/1)
        (iqval_h == 2) => (program value for ofirstmin4_offset_cnt == 11)
        (iqval_h == 3) => (program value for ofirstmin4_offset_cnt == 23)
        (iqval_h == 4) => (program value for ofirstmin4_offset_cnt == 47)
        (iqval_h == 5) => (program value for ofirstmin4_offset_cnt == 95)
        */
    }ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT_ts;

}ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT_tu;



//ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES
/*Description: Number of Subsampled active lines at o/p MPSS. Its value is to be programmed as per the following logic: if (ver_ss_ratio > 1) { num_active_subsampled_lines = ((total_active_active_lines_from_sensor>>(ver_ss_ratio)) * 2) - 1 } else { num_active_subsampled_lines = tota_active_lines_from_sensor; }Note that vertical subsampling ratio cannot be greater than 5. This calculation is done in software. This value is used inside the hardware to generate linetype for LAST ACTIVE LINE.
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t num_active_subsampled_lines;
        /* 
        Program number of subsampled lines expected at the output of MPSS.*/
    }ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES_ts;

}ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES_tu;

typedef struct
{
    ISP_STATS_MPSS_ENABLE_tu ISP_STATS_MPSS_ENABLE;
    ISP_STATS_MPSS_CTRL_tu ISP_STATS_MPSS_CTRL;
    ISP_STATS_MPSS_PARAM_HOR_tu ISP_STATS_MPSS_PARAM_HOR;
    ISP_STATS_MPSS_PARAM_VER_tu ISP_STATS_MPSS_PARAM_VER;
    ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT_tu ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT;
    ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES_tu ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES;
}ISP_STATS_MPSS_IP_ts;




//ISP_STATS_MPSS_ENABLE


#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_ENABLE_enable() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_ENABLE.ISP_STATS_MPSS_ENABLE_ts.enable
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_ENABLE_enable_B_0x0() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_ENABLE.ISP_STATS_MPSS_ENABLE_ts.enable == enable_B_0x0)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_ENABLE_enable__B_0x0() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_ENABLE.ISP_STATS_MPSS_ENABLE_ts.enable = enable_B_0x0)
#define enable_B_0x0 0x0    //IDP data out same as data in
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_ENABLE_enable_B_0x1() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_ENABLE.ISP_STATS_MPSS_ENABLE_ts.enable == enable_B_0x1)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_ENABLE_enable__B_0x1() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_ENABLE.ISP_STATS_MPSS_ENABLE_ts.enable = enable_B_0x1)
#define enable_B_0x1 0x1    //Data sub sampled in accordance with hor/ver parameters
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_ENABLE(enable) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_ENABLE.word = (uint32_t)enable<<0)
#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_ENABLE() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_ENABLE.word
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_ENABLE_word(x) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_ENABLE.word = x)


//ISP_STATS_MPSS_CTRL


#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_CTRL_stgrd() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_CTRL.ISP_STATS_MPSS_CTRL_ts.stgrd
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_CTRL_stgrd_B_0x0() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_CTRL.ISP_STATS_MPSS_CTRL_ts.stgrd == stgrd_B_0x0)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_CTRL_stgrd__B_0x0() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_CTRL.ISP_STATS_MPSS_CTRL_ts.stgrd = stgrd_B_0x0)
#define stgrd_B_0x0 0x0    //Non Staggerred sub sampling
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_CTRL_stgrd_B_0x1() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_CTRL.ISP_STATS_MPSS_CTRL_ts.stgrd == stgrd_B_0x1)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_CTRL_stgrd__B_0x1() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_CTRL.ISP_STATS_MPSS_CTRL_ts.stgrd = stgrd_B_0x1)
#define stgrd_B_0x1 0x1    //Staggered sub sampling
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_CTRL(stgrd) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_CTRL.word = (uint32_t)stgrd<<0)
#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_CTRL() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_CTRL.word
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_CTRL_word(x) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_CTRL.word = x)


//ISP_STATS_MPSS_PARAM_HOR


#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h_B_0x0() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h == iqval_h_B_0x0)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h__B_0x0() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h = iqval_h_B_0x0)
#define iqval_h_B_0x0 0x0    //No SUb sampling, by pass mode
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h_B_0x1() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h == iqval_h_B_0x1)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h__B_0x1() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h = iqval_h_B_0x1)
#define iqval_h_B_0x1 0x1    //No SUb sampling, by pass mode
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h_B_0x2() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h == iqval_h_B_0x2)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h__B_0x2() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h = iqval_h_B_0x2)
#define iqval_h_B_0x2 0x2    //pick1 macro ( 2pixels), Leave 1 macro ( 2 pixels)
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h_B_0x3() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h == iqval_h_B_0x3)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h__B_0x3() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h = iqval_h_B_0x3)
#define iqval_h_B_0x3 0x3    //pick1 macro ( 2pixels), Leave 3 macro ( 6 pixels)
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h_B_0x4() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h == iqval_h_B_0x4)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h__B_0x4() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h = iqval_h_B_0x4)
#define iqval_h_B_0x4 0x4    //pick1 macro ( 2pixels), Leave 7 macro ( 14 pixels)
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h_B_0x5() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h == iqval_h_B_0x5)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_iqval_h__B_0x5() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.ISP_STATS_MPSS_PARAM_HOR_ts.iqval_h = iqval_h_B_0x5)
#define iqval_h_B_0x5 0x5    //pick1 macro ( 2pixels), Leave 15 macro ( 30 pixels)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR(iqval_h) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.word = (uint32_t)iqval_h<<0)
#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.word
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_HOR_word(x) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_HOR.word = x)


//ISP_STATS_MPSS_PARAM_VER


#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v_B_0x0() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v == iqval_v_B_0x0)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v__B_0x0() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v = iqval_v_B_0x0)
#define iqval_v_B_0x0 0x0    //No SUb sampling, by pass mode
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v_B_0x1() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v == iqval_v_B_0x1)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v__B_0x1() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v = iqval_v_B_0x1)
#define iqval_v_B_0x1 0x1    //No SUb sampling, by pass mode
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v_B_0x2() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v == iqval_v_B_0x2)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v__B_0x2() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v = iqval_v_B_0x2)
#define iqval_v_B_0x2 0x2    //pick1 macro ( 2lines), Leave 1 macro ( 2 lines)
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v_B_0x3() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v == iqval_v_B_0x3)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v__B_0x3() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v = iqval_v_B_0x3)
#define iqval_v_B_0x3 0x3    //pick1 macro ( 2lines), Leave 3 macro ( 6 lines)
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v_B_0x4() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v == iqval_v_B_0x4)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v__B_0x4() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v = iqval_v_B_0x4)
#define iqval_v_B_0x4 0x4    //pick1 macro ( 2lines), Leave 7 macro ( 14 lines)
#define Is_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v_B_0x5() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v == iqval_v_B_0x5)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_iqval_v__B_0x5() (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.ISP_STATS_MPSS_PARAM_VER_ts.iqval_v = iqval_v_B_0x5)
#define iqval_v_B_0x5 0x5    //pick1 macro ( 2lines), Leave 15 macro ( 30 lines)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER(iqval_v) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.word = (uint32_t)iqval_v<<0)
#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.word
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_PARAM_VER_word(x) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_PARAM_VER.word = x)


//ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT


#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT_ofirstmin4_offset_cnt() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT.ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT_ts.ofirstmin4_offset_cnt
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT_ofirstmin4_offset_cnt(x) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT.ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT_ts.ofirstmin4_offset_cnt = x)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT(ofirstmin4_offset_cnt) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT.word = (uint32_t)ofirstmin4_offset_cnt<<0)
#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT.word
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT_word(x) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_OFIRSTMIN4_OFFSET_CNT.word = x)


//ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES


#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES_num_active_subsampled_lines() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES.ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES_ts.num_active_subsampled_lines
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES_num_active_subsampled_lines(x) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES.ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES_ts.num_active_subsampled_lines = x)
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES(num_active_subsampled_lines) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES.word = (uint16_t)num_active_subsampled_lines<<0)
#define Get_ISP_STATS_MPSS_ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES() p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES.word
#define Set_ISP_STATS_MPSS_ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES_word(x) (p_ISP_STATS_MPSS_IP->ISP_STATS_MPSS_NUM_ACTIVE_SS_LINES.word = x)

//ISP_STATS_SNAIL_MWWB_ENABLE
/*Description: Enable configuration register. Soft reset register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t snailnorec_enable :1;
        /* Disable snailnorec module*/
        uint8_t reserved0 :3;
        uint8_t snailnorec_soft_reset :1;
        /* SOFT_RESET_DISABLE*/
    }ISP_STATS_SNAIL_MWWB_ENABLE_ts;

}ISP_STATS_SNAIL_MWWB_ENABLE_tu;

typedef struct
{
    ISP_STATS_SNAIL_MWWB_ENABLE_tu ISP_STATS_SNAIL_MWWB_ENABLE;
}ISP_STATS_SNAIL_MWWB_IP_ts;




//ISP_STATS_SNAIL_MWWB_ENABLE


#define Get_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE_snailnorec_enable() p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.ISP_STATS_SNAIL_MWWB_ENABLE_ts.snailnorec_enable
#define Is_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE_snailnorec_enable_DISABLE() (p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.ISP_STATS_SNAIL_MWWB_ENABLE_ts.snailnorec_enable == snailnorec_enable_DISABLE)
#define Set_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE_snailnorec_enable__DISABLE() (p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.ISP_STATS_SNAIL_MWWB_ENABLE_ts.snailnorec_enable = snailnorec_enable_DISABLE)
#define snailnorec_enable_DISABLE 0x0    //Disable snailnorec module
#define Is_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE_snailnorec_enable_ENABLE() (p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.ISP_STATS_SNAIL_MWWB_ENABLE_ts.snailnorec_enable == snailnorec_enable_ENABLE)
#define Set_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE_snailnorec_enable__ENABLE() (p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.ISP_STATS_SNAIL_MWWB_ENABLE_ts.snailnorec_enable = snailnorec_enable_ENABLE)
#define snailnorec_enable_ENABLE 0x1    //Enable snailnorec module


#define Get_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE_snailnorec_soft_reset() p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.ISP_STATS_SNAIL_MWWB_ENABLE_ts.snailnorec_soft_reset
#define Is_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE_snailnorec_soft_reset_SOFT_RESET_DISABLE() (p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.ISP_STATS_SNAIL_MWWB_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define Set_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE_snailnorec_soft_reset__SOFT_RESET_DISABLE() (p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.ISP_STATS_SNAIL_MWWB_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_DISABLE)
#define snailnorec_soft_reset_SOFT_RESET_DISABLE 0x0    //SOFT_RESET_DISABLE
#define Is_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE_snailnorec_soft_reset_SOFT_RESET_ENABLE() (p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.ISP_STATS_SNAIL_MWWB_ENABLE_ts.snailnorec_soft_reset == snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define Set_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE_snailnorec_soft_reset__SOFT_RESET_ENABLE() (p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.ISP_STATS_SNAIL_MWWB_ENABLE_ts.snailnorec_soft_reset = snailnorec_soft_reset_SOFT_RESET_ENABLE)
#define snailnorec_soft_reset_SOFT_RESET_ENABLE 0x1    //SOFT_RESET_ENABLE
#define Set_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE(snailnorec_enable,snailnorec_soft_reset) (p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.word = (uint8_t)snailnorec_enable<<0 | (uint8_t)snailnorec_soft_reset<<4)
#define Get_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE() p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.word
#define Set_ISP_STATS_SNAIL_MWWB_ISP_STATS_SNAIL_MWWB_ENABLE_word(x) (p_ISP_STATS_SNAIL_MWWB_IP->ISP_STATS_SNAIL_MWWB_ENABLE.word = x)

//ISP_STATS_MWWB_ENABLE
/*Description: MWWB Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* 
        Stats gathered if enable is One*/
    }ISP_STATS_MWWB_ENABLE_ts;

}ISP_STATS_MWWB_ENABLE_tu;



//ISP_STATS_MWWB_CTRL_STATUS
/*Description: MWWB Control Status Register .
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t fresh_stale_stats :1;
        /* Statistics gathered are for Previous Frame*/
        uint8_t zones_error :1;
        /* 
        Status bit.*/
    }ISP_STATS_MWWB_CTRL_STATUS_ts;

}ISP_STATS_MWWB_CTRL_STATUS_tu;



//ISP_STATS_MWWB_ZONE_OFFSET_VER
/*Description: MWWB Zone Vertical Offset Register. defines vertical offsets of zones in pixels.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vert_offset;
        /* 
        Zone Y (vertical) offset*/
    }ISP_STATS_MWWB_ZONE_OFFSET_VER_ts;

}ISP_STATS_MWWB_ZONE_OFFSET_VER_tu;



//ISP_STATS_MWWB_ZONE_OFFSET_HOR
/*Description: MWWB Zone Horizontal Offset Register defines horizontal offsets of zones in pixels.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t horz_offset;
        /* 
        Zone X (horizontal) offset*/
    }ISP_STATS_MWWB_ZONE_OFFSET_HOR_ts;

}ISP_STATS_MWWB_ZONE_OFFSET_HOR_tu;



//ISP_STATS_MWWB_ZONE_SIZE_VER
/*Description: MWWB Zone Vertical Size Register defines vertical size of zones in pixels.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t vert_size;
        /* 
        Zone Y (vertical) size*/
    }ISP_STATS_MWWB_ZONE_SIZE_VER_ts;

}ISP_STATS_MWWB_ZONE_SIZE_VER_tu;



//ISP_STATS_MWWB_ZONE_SIZE_HOR
/*Description: MWWB Zone Horizontal Size Register defines horizontal size of zones in pixels.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t horz_size;
        /* 
        Zone X (horizontal) size*/
    }ISP_STATS_MWWB_ZONE_SIZE_HOR_ts;

}ISP_STATS_MWWB_ZONE_SIZE_HOR_tu;



//ISP_STATS_MWWB_SATUR_THRESH
/*Description: MWWB STATS Saturation threshold Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t Satur_Thresh :12;
        /* 
        For each pixel we will add a weighted version of each of the red, green and blue channel values to the relevant red, green and blue energy accumulator if all three of the un-weighted channel values is below this programmable \qsaturation threshold\q.*/
    }ISP_STATS_MWWB_SATUR_THRESH_ts;

}ISP_STATS_MWWB_SATUR_THRESH_tu;



//ISP_STATS_MWWB_RED_TILT_GAIN
/*Description: MWWB Red Channel TILT Gain Setting
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t iRedTiltGain;
        /* 
        Red Channel TILT Gain Setting*/
    }ISP_STATS_MWWB_RED_TILT_GAIN_ts;

}ISP_STATS_MWWB_RED_TILT_GAIN_tu;



//ISP_STATS_MWWB_GREEN1_TILT_GAIN
/*Description: MWWB Green Channel 1 TILT Gain Setting
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t iGrn1TiltGain;
        /* 
        Green Channel 1 TILT Gain Setting*/
    }ISP_STATS_MWWB_GREEN1_TILT_GAIN_ts;

}ISP_STATS_MWWB_GREEN1_TILT_GAIN_tu;



//ISP_STATS_MWWB_GREEN2_TILT_GAIN
/*Description: MWWB Green Channel 2TILT Gain Setting
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t iGrn2TiltGain;
        /* 
        Green Channel 1 TILT Gain Setting*/
    }ISP_STATS_MWWB_GREEN2_TILT_GAIN_ts;

}ISP_STATS_MWWB_GREEN2_TILT_GAIN_tu;



//ISP_STATS_MWWB_BLUE_TILT_GAIN
/*Description: MWWB Blue Channel TILT Gain Setting
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t iBluTiltGain;
        /* 
        Blue Channel TILT Gain Setting*/
    }ISP_STATS_MWWB_BLUE_TILT_GAIN_ts;

}ISP_STATS_MWWB_BLUE_TILT_GAIN_tu;



//ISP_STATS_MWWB_RED_ENERGY
/*Description: MWWB Red Channel Accumulated Energy
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t oRedEnergy;
        /* 
        Red Channel Accumulated Energy*/
    }ISP_STATS_MWWB_RED_ENERGY_ts;

}ISP_STATS_MWWB_RED_ENERGY_tu;



//ISP_STATS_MWWB_GREEN1_ENERGY
/*Description: MWWB Green Channel 1 Acc Energy
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t oGrn1Energy;
        /* 
        Green Channel 1 Accumulated Energy*/
    }ISP_STATS_MWWB_GREEN1_ENERGY_ts;

}ISP_STATS_MWWB_GREEN1_ENERGY_tu;



//ISP_STATS_MWWB_GREEN2_ENERGY
/*Description: MWWB Green Channel 2 Acc Energy
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t oGrn2Energy;
        /* 
        Green Channel 2 Accumulated Energy*/
    }ISP_STATS_MWWB_GREEN2_ENERGY_ts;

}ISP_STATS_MWWB_GREEN2_ENERGY_tu;



//ISP_STATS_MWWB_BLUE_ENERGY
/*Description: MWWB Blue Channel Accumulated Energy
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t oBluEnergy;
        /* 
        Blue Channel Accumulated Energy*/
    }ISP_STATS_MWWB_BLUE_ENERGY_ts;

}ISP_STATS_MWWB_BLUE_ENERGY_tu;



//ISP_STATS_MWWB_TOTAL_PIXELS
/*Description: MWWB Total pixels. Total number of macro pixels over which the energies have been accumulated
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t total_pixels :24;
        /* 
        Total number of macro pixels over which the energies have been accumulated*/
    }ISP_STATS_MWWB_TOTAL_PIXELS_ts;

}ISP_STATS_MWWB_TOTAL_PIXELS_tu;



//ISP_STATS_MWWB_DFV
/*Description: MWWB Design for Verification register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* 
        this bit is used to enable the pulsed interrupts*/
        uint8_t dfv_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
    }ISP_STATS_MWWB_DFV_ts;

}ISP_STATS_MWWB_DFV_tu;

typedef struct
{
    ISP_STATS_MWWB_ENABLE_tu ISP_STATS_MWWB_ENABLE;
    ISP_STATS_MWWB_CTRL_STATUS_tu ISP_STATS_MWWB_CTRL_STATUS;
    ISP_STATS_MWWB_ZONE_OFFSET_VER_tu ISP_STATS_MWWB_ZONE_OFFSET_VER;
    ISP_STATS_MWWB_ZONE_OFFSET_HOR_tu ISP_STATS_MWWB_ZONE_OFFSET_HOR;
    ISP_STATS_MWWB_ZONE_SIZE_VER_tu ISP_STATS_MWWB_ZONE_SIZE_VER;
    ISP_STATS_MWWB_ZONE_SIZE_HOR_tu ISP_STATS_MWWB_ZONE_SIZE_HOR;
    ISP_STATS_MWWB_SATUR_THRESH_tu ISP_STATS_MWWB_SATUR_THRESH;
    ISP_STATS_MWWB_RED_TILT_GAIN_tu ISP_STATS_MWWB_RED_TILT_GAIN;
    ISP_STATS_MWWB_GREEN1_TILT_GAIN_tu ISP_STATS_MWWB_GREEN1_TILT_GAIN;
    ISP_STATS_MWWB_GREEN2_TILT_GAIN_tu ISP_STATS_MWWB_GREEN2_TILT_GAIN;
    ISP_STATS_MWWB_BLUE_TILT_GAIN_tu ISP_STATS_MWWB_BLUE_TILT_GAIN;
    ISP_STATS_MWWB_RED_ENERGY_tu ISP_STATS_MWWB_RED_ENERGY;
    ISP_STATS_MWWB_GREEN1_ENERGY_tu ISP_STATS_MWWB_GREEN1_ENERGY;
    ISP_STATS_MWWB_GREEN2_ENERGY_tu ISP_STATS_MWWB_GREEN2_ENERGY;
    ISP_STATS_MWWB_BLUE_ENERGY_tu ISP_STATS_MWWB_BLUE_ENERGY;
    ISP_STATS_MWWB_TOTAL_PIXELS_tu ISP_STATS_MWWB_TOTAL_PIXELS;
    ISP_STATS_MWWB_DFV_tu ISP_STATS_MWWB_DFV;
}ISP_STATS_MWWB_IP_ts;




//ISP_STATS_MWWB_ENABLE


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_ENABLE_enable() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ENABLE.ISP_STATS_MWWB_ENABLE_ts.enable
#define Is_ISP_STATS_MWWB_ISP_STATS_MWWB_ENABLE_enable_DISABLE() (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ENABLE.ISP_STATS_MWWB_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ENABLE_enable__DISABLE() (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ENABLE.ISP_STATS_MWWB_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable
#define Is_ISP_STATS_MWWB_ISP_STATS_MWWB_ENABLE_enable_ENABLE() (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ENABLE.ISP_STATS_MWWB_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ENABLE_enable__ENABLE() (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ENABLE.ISP_STATS_MWWB_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ENABLE(enable) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ENABLE.word = (uint32_t)enable<<0)
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_ENABLE() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ENABLE.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ENABLE_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ENABLE.word = x)


//ISP_STATS_MWWB_CTRL_STATUS


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_CTRL_STATUS_fresh_stale_stats() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_CTRL_STATUS.ISP_STATS_MWWB_CTRL_STATUS_ts.fresh_stale_stats
#define Is_ISP_STATS_MWWB_ISP_STATS_MWWB_CTRL_STATUS_fresh_stale_stats_B_0x0() (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_CTRL_STATUS.ISP_STATS_MWWB_CTRL_STATUS_ts.fresh_stale_stats == fresh_stale_stats_B_0x0)
#define fresh_stale_stats_B_0x0 0x0    //Statistics gathered are for Previous Frame
#define Is_ISP_STATS_MWWB_ISP_STATS_MWWB_CTRL_STATUS_fresh_stale_stats_B_0x1() (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_CTRL_STATUS.ISP_STATS_MWWB_CTRL_STATUS_ts.fresh_stale_stats == fresh_stale_stats_B_0x1)
#define fresh_stale_stats_B_0x1 0x1    //Statistics gathered are for current frame


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_CTRL_STATUS_zones_error() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_CTRL_STATUS.ISP_STATS_MWWB_CTRL_STATUS_ts.zones_error
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_CTRL_STATUS() (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_CTRL_STATUS.word = )
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_CTRL_STATUS() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_CTRL_STATUS.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_CTRL_STATUS_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_CTRL_STATUS.word = x)


//ISP_STATS_MWWB_ZONE_OFFSET_VER


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_OFFSET_VER_vert_offset() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_OFFSET_VER.ISP_STATS_MWWB_ZONE_OFFSET_VER_ts.vert_offset
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_OFFSET_VER_vert_offset(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_OFFSET_VER.ISP_STATS_MWWB_ZONE_OFFSET_VER_ts.vert_offset = x)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_OFFSET_VER(vert_offset) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_OFFSET_VER.word = (uint32_t)vert_offset<<0)
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_OFFSET_VER() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_OFFSET_VER.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_OFFSET_VER_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_OFFSET_VER.word = x)


//ISP_STATS_MWWB_ZONE_OFFSET_HOR


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_OFFSET_HOR_horz_offset() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_OFFSET_HOR.ISP_STATS_MWWB_ZONE_OFFSET_HOR_ts.horz_offset
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_OFFSET_HOR_horz_offset(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_OFFSET_HOR.ISP_STATS_MWWB_ZONE_OFFSET_HOR_ts.horz_offset = x)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_OFFSET_HOR(horz_offset) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_OFFSET_HOR.word = (uint32_t)horz_offset<<0)
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_OFFSET_HOR() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_OFFSET_HOR.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_OFFSET_HOR_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_OFFSET_HOR.word = x)


//ISP_STATS_MWWB_ZONE_SIZE_VER


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_SIZE_VER_vert_size() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_SIZE_VER.ISP_STATS_MWWB_ZONE_SIZE_VER_ts.vert_size
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_SIZE_VER_vert_size(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_SIZE_VER.ISP_STATS_MWWB_ZONE_SIZE_VER_ts.vert_size = x)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_SIZE_VER(vert_size) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_SIZE_VER.word = (uint32_t)vert_size<<0)
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_SIZE_VER() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_SIZE_VER.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_SIZE_VER_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_SIZE_VER.word = x)


//ISP_STATS_MWWB_ZONE_SIZE_HOR


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_SIZE_HOR_horz_size() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_SIZE_HOR.ISP_STATS_MWWB_ZONE_SIZE_HOR_ts.horz_size
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_SIZE_HOR_horz_size(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_SIZE_HOR.ISP_STATS_MWWB_ZONE_SIZE_HOR_ts.horz_size = x)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_SIZE_HOR(horz_size) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_SIZE_HOR.word = (uint32_t)horz_size<<0)
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_SIZE_HOR() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_SIZE_HOR.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_ZONE_SIZE_HOR_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_ZONE_SIZE_HOR.word = x)


//ISP_STATS_MWWB_SATUR_THRESH


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_SATUR_THRESH_Satur_Thresh() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_SATUR_THRESH.ISP_STATS_MWWB_SATUR_THRESH_ts.Satur_Thresh
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_SATUR_THRESH_Satur_Thresh(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_SATUR_THRESH.ISP_STATS_MWWB_SATUR_THRESH_ts.Satur_Thresh = x)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_SATUR_THRESH(Satur_Thresh) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_SATUR_THRESH.word = (uint32_t)Satur_Thresh<<0)
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_SATUR_THRESH() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_SATUR_THRESH.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_SATUR_THRESH_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_SATUR_THRESH.word = x)


//ISP_STATS_MWWB_RED_TILT_GAIN


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_RED_TILT_GAIN_iRedTiltGain() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_RED_TILT_GAIN.ISP_STATS_MWWB_RED_TILT_GAIN_ts.iRedTiltGain
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_RED_TILT_GAIN_iRedTiltGain(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_RED_TILT_GAIN.ISP_STATS_MWWB_RED_TILT_GAIN_ts.iRedTiltGain = x)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_RED_TILT_GAIN(iRedTiltGain) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_RED_TILT_GAIN.word = (uint32_t)iRedTiltGain<<0)
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_RED_TILT_GAIN() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_RED_TILT_GAIN.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_RED_TILT_GAIN_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_RED_TILT_GAIN.word = x)


//ISP_STATS_MWWB_GREEN1_TILT_GAIN


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN1_TILT_GAIN_iGrn1TiltGain() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN1_TILT_GAIN.ISP_STATS_MWWB_GREEN1_TILT_GAIN_ts.iGrn1TiltGain
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN1_TILT_GAIN_iGrn1TiltGain(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN1_TILT_GAIN.ISP_STATS_MWWB_GREEN1_TILT_GAIN_ts.iGrn1TiltGain = x)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN1_TILT_GAIN(iGrn1TiltGain) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN1_TILT_GAIN.word = (uint32_t)iGrn1TiltGain<<0)
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN1_TILT_GAIN() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN1_TILT_GAIN.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN1_TILT_GAIN_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN1_TILT_GAIN.word = x)


//ISP_STATS_MWWB_GREEN2_TILT_GAIN


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN2_TILT_GAIN_iGrn2TiltGain() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN2_TILT_GAIN.ISP_STATS_MWWB_GREEN2_TILT_GAIN_ts.iGrn2TiltGain
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN2_TILT_GAIN_iGrn2TiltGain(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN2_TILT_GAIN.ISP_STATS_MWWB_GREEN2_TILT_GAIN_ts.iGrn2TiltGain = x)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN2_TILT_GAIN(iGrn2TiltGain) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN2_TILT_GAIN.word = (uint32_t)iGrn2TiltGain<<0)
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN2_TILT_GAIN() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN2_TILT_GAIN.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN2_TILT_GAIN_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN2_TILT_GAIN.word = x)


//ISP_STATS_MWWB_BLUE_TILT_GAIN


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_BLUE_TILT_GAIN_iBluTiltGain() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_BLUE_TILT_GAIN.ISP_STATS_MWWB_BLUE_TILT_GAIN_ts.iBluTiltGain
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_BLUE_TILT_GAIN_iBluTiltGain(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_BLUE_TILT_GAIN.ISP_STATS_MWWB_BLUE_TILT_GAIN_ts.iBluTiltGain = x)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_BLUE_TILT_GAIN(iBluTiltGain) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_BLUE_TILT_GAIN.word = (uint32_t)iBluTiltGain<<0)
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_BLUE_TILT_GAIN() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_BLUE_TILT_GAIN.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_BLUE_TILT_GAIN_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_BLUE_TILT_GAIN.word = x)


//ISP_STATS_MWWB_RED_ENERGY


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_RED_ENERGY_oRedEnergy() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_RED_ENERGY.ISP_STATS_MWWB_RED_ENERGY_ts.oRedEnergy
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_RED_ENERGY() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_RED_ENERGY.word


//ISP_STATS_MWWB_GREEN1_ENERGY


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN1_ENERGY_oGrn1Energy() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN1_ENERGY.ISP_STATS_MWWB_GREEN1_ENERGY_ts.oGrn1Energy
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN1_ENERGY() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN1_ENERGY.word


//ISP_STATS_MWWB_GREEN2_ENERGY


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN2_ENERGY_oGrn2Energy() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN2_ENERGY.ISP_STATS_MWWB_GREEN2_ENERGY_ts.oGrn2Energy
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_GREEN2_ENERGY() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_GREEN2_ENERGY.word


//ISP_STATS_MWWB_BLUE_ENERGY


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_BLUE_ENERGY_oBluEnergy() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_BLUE_ENERGY.ISP_STATS_MWWB_BLUE_ENERGY_ts.oBluEnergy
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_BLUE_ENERGY() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_BLUE_ENERGY.word


//ISP_STATS_MWWB_TOTAL_PIXELS


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_TOTAL_PIXELS_total_pixels() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_TOTAL_PIXELS.ISP_STATS_MWWB_TOTAL_PIXELS_ts.total_pixels
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_TOTAL_PIXELS() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_TOTAL_PIXELS.word


//ISP_STATS_MWWB_DFV


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_DFV_dfv_enable() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_DFV.ISP_STATS_MWWB_DFV_ts.dfv_enable
#define Is_ISP_STATS_MWWB_ISP_STATS_MWWB_DFV_dfv_enable_DISABLE() (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_DFV.ISP_STATS_MWWB_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_DFV_dfv_enable__DISABLE() (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_DFV.ISP_STATS_MWWB_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable
#define Is_ISP_STATS_MWWB_ISP_STATS_MWWB_DFV_dfv_enable_ENABLE() (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_DFV.ISP_STATS_MWWB_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_DFV_dfv_enable__ENABLE() (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_DFV.ISP_STATS_MWWB_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable


#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_DFV_dfv_interrupt_ctrl() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_DFV.ISP_STATS_MWWB_DFV_ts.dfv_interrupt_ctrl
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_DFV_dfv_interrupt_ctrl(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_DFV.ISP_STATS_MWWB_DFV_ts.dfv_interrupt_ctrl = x)
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_DFV(dfv_enable,dfv_interrupt_ctrl) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_DFV.word = (uint8_t)dfv_enable<<0 | (uint8_t)dfv_interrupt_ctrl<<1)
#define Get_ISP_STATS_MWWB_ISP_STATS_MWWB_DFV() p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_DFV.word
#define Set_ISP_STATS_MWWB_ISP_STATS_MWWB_DFV_word(x) (p_ISP_STATS_MWWB_IP->ISP_STATS_MWWB_DFV.word = x)

//ISP_STATS_MUX_HIST_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_STATS_MUX_HIST_ENABLE_ts;

}ISP_STATS_MUX_HIST_ENABLE_tu;



//ISP_STATS_MUX_HIST_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_STATS_MUX_HIST_SELECT_ts;

}ISP_STATS_MUX_HIST_SELECT_tu;

typedef struct
{
    ISP_STATS_MUX_HIST_ENABLE_tu ISP_STATS_MUX_HIST_ENABLE;
    ISP_STATS_MUX_HIST_SELECT_tu ISP_STATS_MUX_HIST_SELECT;
}ISP_STATS_MUX_HIST_IP_ts;




//ISP_STATS_MUX_HIST_ENABLE


#define Get_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE_mux2to1_enable() p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.ISP_STATS_MUX_HIST_ENABLE_ts.mux2to1_enable
#define Is_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE_mux2to1_enable_DISABLE() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.ISP_STATS_MUX_HIST_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE_mux2to1_enable__DISABLE() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.ISP_STATS_MUX_HIST_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE_mux2to1_enable_ENABLE() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.ISP_STATS_MUX_HIST_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE_mux2to1_enable__ENABLE() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.ISP_STATS_MUX_HIST_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE_mux2to1_soft_reset() p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.ISP_STATS_MUX_HIST_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.ISP_STATS_MUX_HIST_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.ISP_STATS_MUX_HIST_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.ISP_STATS_MUX_HIST_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.ISP_STATS_MUX_HIST_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE() p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.word
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_ENABLE_word(x) (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_ENABLE.word = x)


//ISP_STATS_MUX_HIST_SELECT


#define Get_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT_mux2to1_select() p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.ISP_STATS_MUX_HIST_SELECT_ts.mux2to1_select
#define Is_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT_mux2to1_select_IDP0() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.ISP_STATS_MUX_HIST_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT_mux2to1_select__IDP0() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.ISP_STATS_MUX_HIST_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT_mux2to1_select_IDP1() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.ISP_STATS_MUX_HIST_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT_mux2to1_select__IDP1() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.ISP_STATS_MUX_HIST_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT_mux2to1_shadow_en() p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.ISP_STATS_MUX_HIST_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.ISP_STATS_MUX_HIST_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.ISP_STATS_MUX_HIST_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.ISP_STATS_MUX_HIST_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.ISP_STATS_MUX_HIST_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT() p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.word
#define Set_ISP_STATS_MUX_HIST_ISP_STATS_MUX_HIST_SELECT_word(x) (p_ISP_STATS_MUX_HIST_IP->ISP_STATS_MUX_HIST_SELECT.word = x)

//ISP_STATS_HIST_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable Ghistmodule*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* ghist is not under a soft reset*/
    }ISP_STATS_HIST_ENABLE_ts;

}ISP_STATS_HIST_ENABLE_tu;



//ISP_STATS_HIST_CMD
/*Description: Command register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t cmd_rwp :2;
        /* IDLE*/
    }ISP_STATS_HIST_CMD_ts;

}ISP_STATS_HIST_CMD_tu;



//ISP_STATS_HIST_X_SIZE
/*Description: ROI definition, horizontal size.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_size :13;
        /* Width of the Region Of Interest*/
    }ISP_STATS_HIST_X_SIZE_ts;

}ISP_STATS_HIST_X_SIZE_tu;



//ISP_STATS_HIST_Y_SIZE
/*Description: ROI definition, vertical size.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_size :13;
        /* Height of the Region Of Interest*/
    }ISP_STATS_HIST_Y_SIZE_ts;

}ISP_STATS_HIST_Y_SIZE_tu;



//ISP_STATS_HIST_X_OFFSET
/*Description: ROI definition, horizontal offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_offset :13;
        /* Horizontal offset of the Region Of Interest*/
    }ISP_STATS_HIST_X_OFFSET_ts;

}ISP_STATS_HIST_X_OFFSET_tu;



//ISP_STATS_HIST_Y_OFFSET
/*Description: ROI definition, vertical offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_offset :13;
        /* Vertical Offset of the Region Of Interest*/
    }ISP_STATS_HIST_Y_OFFSET_ts;

}ISP_STATS_HIST_Y_OFFSET_tu;



//ISP_STATS_HIST_PIXELIN_SHIFT
/*Description: Pixel Input Value is right shifted by index in the range [0:5].
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t pixel_shift :3;
        /* index value for the right shift*/
    }ISP_STATS_HIST_PIXELIN_SHIFT_ts;

}ISP_STATS_HIST_PIXELIN_SHIFT_tu;



//ISP_STATS_HIST_DARKEST_G
/*Description: Lowest bin index for which value in the array is not zero (channel G)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t g_dark_bin :12;
        /* Lowest bin index with non-zero value in Green channel*/
    }ISP_STATS_HIST_DARKEST_G_ts;

}ISP_STATS_HIST_DARKEST_G_tu;



//ISP_STATS_HIST_BRIGHTEST_G
/*Description: Highest bin index for which value in the array is not zero (channel G)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t g_bright_bin :12;
        /* Highest bin index with non-zero value in Green channel*/
    }ISP_STATS_HIST_BRIGHTEST_G_ts;

}ISP_STATS_HIST_BRIGHTEST_G_tu;



//ISP_STATS_HIST_HIGHEST_G
/*Description: Bin index corresponding to the maximum value in the array (channel G).
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t g_highest_bin :12;
        /* Highest bin index with non-zero value in Green channel*/
    }ISP_STATS_HIST_HIGHEST_G_ts;

}ISP_STATS_HIST_HIGHEST_G_tu;



//ISP_STATS_HIST_DARKEST_R
/*Description: Lowest bin index for which value in the array is not zero (channel R)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t red_dark_bin :12;
        /* Lowest bin index with non-zero value in Red channel*/
    }ISP_STATS_HIST_DARKEST_R_ts;

}ISP_STATS_HIST_DARKEST_R_tu;



//ISP_STATS_HIST_BRIGHTEST_R
/*Description: Highest bin index for which value in the array is not zero (channel R)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t red_bright_bin :12;
        /* Highest bin index with non-zero value in Red channel*/
    }ISP_STATS_HIST_BRIGHTEST_R_ts;

}ISP_STATS_HIST_BRIGHTEST_R_tu;



//ISP_STATS_HIST_HIGHEST_R
/*Description: Bin index corresponding to the maximum value in the array (channel R).
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t red_highest_bin :12;
        /* Highest bin index with non-zero value in Red channel*/
    }ISP_STATS_HIST_HIGHEST_R_ts;

}ISP_STATS_HIST_HIGHEST_R_tu;



//ISP_STATS_HIST_DARKEST_B
/*Description: Lowest bin index for which value in the array is not zero (channel B)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t blue_dark_bin :12;
        /* Lowest bin index with non-zero value in Blue channel*/
    }ISP_STATS_HIST_DARKEST_B_ts;

}ISP_STATS_HIST_DARKEST_B_tu;



//ISP_STATS_HIST_BRIGHTEST_B
/*Description: Highest bin index for which value in the array is not zero (channel B)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t blue_bright_bin :12;
        /* Highest bin index with non-zero value in Blue channel*/
    }ISP_STATS_HIST_BRIGHTEST_B_ts;

}ISP_STATS_HIST_BRIGHTEST_B_tu;



//ISP_STATS_HIST_HIGHEST_B
/*Description: Bin index corresponding to the maximum value in the array (channel B).
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t blue_highest_bin :12;
        /* Highest bin index with non-zero value in Blue channel*/
    }ISP_STATS_HIST_HIGHEST_B_ts;

}ISP_STATS_HIST_HIGHEST_B_tu;



//ISP_STATS_HIST_STATUS
/*Description: Value corresponding to the state of histogram computation.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t status :3;
        /* Histogram computation state*/
    }ISP_STATS_HIST_STATUS_ts;

}ISP_STATS_HIST_STATUS_tu;



//ISP_STATS_HIST_DFV
/*Description: Debug For Verification
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* Enable the dfv_interrupt*/
        uint8_t dfv_interrupt_control :1;
        /* Interrupt is generated if this bit toggles and enable is set.*/
    }ISP_STATS_HIST_DFV_ts;

}ISP_STATS_HIST_DFV_tu;

typedef struct
{
    ISP_STATS_HIST_ENABLE_tu ISP_STATS_HIST_ENABLE;
    ISP_STATS_HIST_CMD_tu ISP_STATS_HIST_CMD;
    ISP_STATS_HIST_X_SIZE_tu ISP_STATS_HIST_X_SIZE;
    ISP_STATS_HIST_Y_SIZE_tu ISP_STATS_HIST_Y_SIZE;
    ISP_STATS_HIST_X_OFFSET_tu ISP_STATS_HIST_X_OFFSET;
    ISP_STATS_HIST_Y_OFFSET_tu ISP_STATS_HIST_Y_OFFSET;
    ISP_STATS_HIST_PIXELIN_SHIFT_tu ISP_STATS_HIST_PIXELIN_SHIFT;
    ISP_STATS_HIST_DARKEST_G_tu ISP_STATS_HIST_DARKEST_G;
    ISP_STATS_HIST_BRIGHTEST_G_tu ISP_STATS_HIST_BRIGHTEST_G;
    ISP_STATS_HIST_HIGHEST_G_tu ISP_STATS_HIST_HIGHEST_G;
    ISP_STATS_HIST_DARKEST_R_tu ISP_STATS_HIST_DARKEST_R;
    ISP_STATS_HIST_BRIGHTEST_R_tu ISP_STATS_HIST_BRIGHTEST_R;
    ISP_STATS_HIST_HIGHEST_R_tu ISP_STATS_HIST_HIGHEST_R;
    ISP_STATS_HIST_DARKEST_B_tu ISP_STATS_HIST_DARKEST_B;
    ISP_STATS_HIST_BRIGHTEST_B_tu ISP_STATS_HIST_BRIGHTEST_B;
    ISP_STATS_HIST_HIGHEST_B_tu ISP_STATS_HIST_HIGHEST_B;
    ISP_STATS_HIST_STATUS_tu ISP_STATS_HIST_STATUS;
    ISP_STATS_HIST_DFV_tu ISP_STATS_HIST_DFV;
}ISP_STATS_HIST_IP_ts;




//ISP_STATS_HIST_ENABLE


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE_enable() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.ISP_STATS_HIST_ENABLE_ts.enable
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE_enable_DISABLE() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.ISP_STATS_HIST_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE_enable__DISABLE() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.ISP_STATS_HIST_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable Ghistmodule
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE_enable_ENABLE() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.ISP_STATS_HIST_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE_enable__ENABLE() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.ISP_STATS_HIST_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable Ghistmodule


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE_soft_reset() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.ISP_STATS_HIST_ENABLE_ts.soft_reset
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE_soft_reset_B_0x0() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.ISP_STATS_HIST_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE_soft_reset__B_0x0() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.ISP_STATS_HIST_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //ghist is not under a soft reset
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE_soft_reset_B_0x1() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.ISP_STATS_HIST_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE_soft_reset__B_0x1() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.ISP_STATS_HIST_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //ghist is under a soft reset
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE(enable,soft_reset) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.word
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_ENABLE_word(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_ENABLE.word = x)


//ISP_STATS_HIST_CMD


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_CMD_cmd_rwp() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_CMD.ISP_STATS_HIST_CMD_ts.cmd_rwp
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_CMD_cmd_rwp_IDLE() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_CMD.ISP_STATS_HIST_CMD_ts.cmd_rwp == cmd_rwp_IDLE)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_CMD_cmd_rwp__IDLE() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_CMD.ISP_STATS_HIST_CMD_ts.cmd_rwp = cmd_rwp_IDLE)
#define cmd_rwp_IDLE 0x0    //IDLE
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_CMD_cmd_rwp_GRAB() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_CMD.ISP_STATS_HIST_CMD_ts.cmd_rwp == cmd_rwp_GRAB)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_CMD_cmd_rwp__GRAB() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_CMD.ISP_STATS_HIST_CMD_ts.cmd_rwp = cmd_rwp_GRAB)
#define cmd_rwp_GRAB 0x1    //Continuous histogram computation. At the beginning of each frame, histogram values are reset. MCU/HOST must retrieve the histogram element values before the beginning of the next frame.
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_CMD_cmd_rwp_STILL() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_CMD.ISP_STATS_HIST_CMD_ts.cmd_rwp == cmd_rwp_STILL)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_CMD_cmd_rwp__STILL() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_CMD.ISP_STATS_HIST_CMD_ts.cmd_rwp = cmd_rwp_STILL)
#define cmd_rwp_STILL 0x2    //Single Histogram Computation. This command is only active during a single frame. The reset happens at the beginning of the frame. The histogram issued is kept unmodified till the next cmd is ordered. The MCU can thus retrieve the histogram at any time.
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_CMD(cmd_rwp) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_CMD.word = (uint32_t)cmd_rwp<<0)
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_CMD() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_CMD.word
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_CMD_word(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_CMD.word = x)


//ISP_STATS_HIST_X_SIZE


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_X_SIZE_x_size() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_X_SIZE.ISP_STATS_HIST_X_SIZE_ts.x_size
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_X_SIZE_x_size(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_X_SIZE.ISP_STATS_HIST_X_SIZE_ts.x_size = x)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_X_SIZE(x_size) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_X_SIZE.word = (uint32_t)x_size<<0)
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_X_SIZE() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_X_SIZE.word
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_X_SIZE_word(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_X_SIZE.word = x)


//ISP_STATS_HIST_Y_SIZE


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_Y_SIZE_y_size() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_Y_SIZE.ISP_STATS_HIST_Y_SIZE_ts.y_size
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_Y_SIZE_y_size(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_Y_SIZE.ISP_STATS_HIST_Y_SIZE_ts.y_size = x)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_Y_SIZE(y_size) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_Y_SIZE.word = (uint32_t)y_size<<0)
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_Y_SIZE() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_Y_SIZE.word
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_Y_SIZE_word(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_Y_SIZE.word = x)


//ISP_STATS_HIST_X_OFFSET


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_X_OFFSET_x_offset() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_X_OFFSET.ISP_STATS_HIST_X_OFFSET_ts.x_offset
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_X_OFFSET_x_offset(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_X_OFFSET.ISP_STATS_HIST_X_OFFSET_ts.x_offset = x)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_X_OFFSET(x_offset) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_X_OFFSET.word = (uint32_t)x_offset<<0)
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_X_OFFSET() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_X_OFFSET.word
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_X_OFFSET_word(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_X_OFFSET.word = x)


//ISP_STATS_HIST_Y_OFFSET


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_Y_OFFSET_y_offset() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_Y_OFFSET.ISP_STATS_HIST_Y_OFFSET_ts.y_offset
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_Y_OFFSET_y_offset(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_Y_OFFSET.ISP_STATS_HIST_Y_OFFSET_ts.y_offset = x)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_Y_OFFSET(y_offset) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_Y_OFFSET.word = (uint32_t)y_offset<<0)
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_Y_OFFSET() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_Y_OFFSET.word
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_Y_OFFSET_word(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_Y_OFFSET.word = x)


//ISP_STATS_HIST_PIXELIN_SHIFT


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_PIXELIN_SHIFT_pixel_shift() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_PIXELIN_SHIFT.ISP_STATS_HIST_PIXELIN_SHIFT_ts.pixel_shift
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_PIXELIN_SHIFT_pixel_shift(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_PIXELIN_SHIFT.ISP_STATS_HIST_PIXELIN_SHIFT_ts.pixel_shift = x)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_PIXELIN_SHIFT(pixel_shift) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_PIXELIN_SHIFT.word = (uint32_t)pixel_shift<<0)
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_PIXELIN_SHIFT() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_PIXELIN_SHIFT.word
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_PIXELIN_SHIFT_word(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_PIXELIN_SHIFT.word = x)


//ISP_STATS_HIST_DARKEST_G


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_DARKEST_G_g_dark_bin() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DARKEST_G.ISP_STATS_HIST_DARKEST_G_ts.g_dark_bin
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_DARKEST_G() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DARKEST_G.word


//ISP_STATS_HIST_BRIGHTEST_G


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_BRIGHTEST_G_g_bright_bin() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_BRIGHTEST_G.ISP_STATS_HIST_BRIGHTEST_G_ts.g_bright_bin
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_BRIGHTEST_G() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_BRIGHTEST_G.word


//ISP_STATS_HIST_HIGHEST_G


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_HIGHEST_G_g_highest_bin() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_HIGHEST_G.ISP_STATS_HIST_HIGHEST_G_ts.g_highest_bin
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_HIGHEST_G() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_HIGHEST_G.word


//ISP_STATS_HIST_DARKEST_R


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_DARKEST_R_red_dark_bin() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DARKEST_R.ISP_STATS_HIST_DARKEST_R_ts.red_dark_bin
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_DARKEST_R() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DARKEST_R.word


//ISP_STATS_HIST_BRIGHTEST_R


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_BRIGHTEST_R_red_bright_bin() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_BRIGHTEST_R.ISP_STATS_HIST_BRIGHTEST_R_ts.red_bright_bin
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_BRIGHTEST_R() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_BRIGHTEST_R.word


//ISP_STATS_HIST_HIGHEST_R


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_HIGHEST_R_red_highest_bin() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_HIGHEST_R.ISP_STATS_HIST_HIGHEST_R_ts.red_highest_bin
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_HIGHEST_R() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_HIGHEST_R.word


//ISP_STATS_HIST_DARKEST_B


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_DARKEST_B_blue_dark_bin() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DARKEST_B.ISP_STATS_HIST_DARKEST_B_ts.blue_dark_bin
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_DARKEST_B() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DARKEST_B.word


//ISP_STATS_HIST_BRIGHTEST_B


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_BRIGHTEST_B_blue_bright_bin() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_BRIGHTEST_B.ISP_STATS_HIST_BRIGHTEST_B_ts.blue_bright_bin
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_BRIGHTEST_B() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_BRIGHTEST_B.word


//ISP_STATS_HIST_HIGHEST_B


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_HIGHEST_B_blue_highest_bin() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_HIGHEST_B.ISP_STATS_HIST_HIGHEST_B_ts.blue_highest_bin
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_HIGHEST_B() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_HIGHEST_B.word


//ISP_STATS_HIST_STATUS


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_STATUS_status() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_STATUS.ISP_STATS_HIST_STATUS_ts.status
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_STATUS_status_IDLE() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_STATUS.ISP_STATS_HIST_STATUS_ts.status == status_IDLE)
#define status_IDLE 0x0    //Block is idle and no data are gathered
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_STATUS_status_READY() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_STATUS.ISP_STATS_HIST_STATUS_ts.status == status_READY)
#define status_READY 0x1    //Block is waiting for data to start gathering histogram
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_STATUS_status_ON_PROGRESS() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_STATUS.ISP_STATS_HIST_STATUS_ts.status == status_ON_PROGRESS)
#define status_ON_PROGRESS 0x2    //Histogram is being gathered
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_STATUS_status_COMPLETED() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_STATUS.ISP_STATS_HIST_STATUS_ts.status == status_COMPLETED)
#define status_COMPLETED 0x3    //Histogram has been gathered and MCU/Host can retrieve the data
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_STATUS() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_STATUS.word


//ISP_STATS_HIST_DFV


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_DFV_dfv_enable() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DFV.ISP_STATS_HIST_DFV_ts.dfv_enable
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_DFV_dfv_enable_DISABLE() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DFV.ISP_STATS_HIST_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_DFV_dfv_enable__DISABLE() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DFV.ISP_STATS_HIST_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable Debug For Verification features
#define Is_ISP_STATS_HIST_ISP_STATS_HIST_DFV_dfv_enable_ENABLE() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DFV.ISP_STATS_HIST_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_DFV_dfv_enable__ENABLE() (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DFV.ISP_STATS_HIST_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable Debug For Verification features


#define Get_ISP_STATS_HIST_ISP_STATS_HIST_DFV_dfv_interrupt_control() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DFV.ISP_STATS_HIST_DFV_ts.dfv_interrupt_control
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_DFV_dfv_interrupt_control(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DFV.ISP_STATS_HIST_DFV_ts.dfv_interrupt_control = x)
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_DFV(dfv_enable,dfv_interrupt_control) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DFV.word = (uint8_t)dfv_enable<<0 | (uint8_t)dfv_interrupt_control<<1)
#define Get_ISP_STATS_HIST_ISP_STATS_HIST_DFV() p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DFV.word
#define Set_ISP_STATS_HIST_ISP_STATS_HIST_DFV_word(x) (p_ISP_STATS_HIST_IP->ISP_STATS_HIST_DFV.word = x)

//ISP_STATS_MUX_GLACE_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_STATS_MUX_GLACE_ENABLE_ts;

}ISP_STATS_MUX_GLACE_ENABLE_tu;



//ISP_STATS_MUX_GLACE_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_STATS_MUX_GLACE_SELECT_ts;

}ISP_STATS_MUX_GLACE_SELECT_tu;

typedef struct
{
    ISP_STATS_MUX_GLACE_ENABLE_tu ISP_STATS_MUX_GLACE_ENABLE;
    ISP_STATS_MUX_GLACE_SELECT_tu ISP_STATS_MUX_GLACE_SELECT;
}ISP_STATS_MUX_GLACE_IP_ts;




//ISP_STATS_MUX_GLACE_ENABLE


#define Get_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE_mux2to1_enable() p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.ISP_STATS_MUX_GLACE_ENABLE_ts.mux2to1_enable
#define Is_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE_mux2to1_enable_DISABLE() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.ISP_STATS_MUX_GLACE_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE_mux2to1_enable__DISABLE() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.ISP_STATS_MUX_GLACE_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE_mux2to1_enable_ENABLE() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.ISP_STATS_MUX_GLACE_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE_mux2to1_enable__ENABLE() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.ISP_STATS_MUX_GLACE_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE_mux2to1_soft_reset() p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.ISP_STATS_MUX_GLACE_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.ISP_STATS_MUX_GLACE_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.ISP_STATS_MUX_GLACE_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.ISP_STATS_MUX_GLACE_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.ISP_STATS_MUX_GLACE_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE() p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.word
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_ENABLE_word(x) (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_ENABLE.word = x)


//ISP_STATS_MUX_GLACE_SELECT


#define Get_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT_mux2to1_select() p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.ISP_STATS_MUX_GLACE_SELECT_ts.mux2to1_select
#define Is_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT_mux2to1_select_IDP0() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.ISP_STATS_MUX_GLACE_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT_mux2to1_select__IDP0() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.ISP_STATS_MUX_GLACE_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT_mux2to1_select_IDP1() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.ISP_STATS_MUX_GLACE_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT_mux2to1_select__IDP1() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.ISP_STATS_MUX_GLACE_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT_mux2to1_shadow_en() p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.ISP_STATS_MUX_GLACE_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.ISP_STATS_MUX_GLACE_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.ISP_STATS_MUX_GLACE_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.ISP_STATS_MUX_GLACE_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.ISP_STATS_MUX_GLACE_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT() p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.word
#define Set_ISP_STATS_MUX_GLACE_ISP_STATS_MUX_GLACE_SELECT_word(x) (p_ISP_STATS_MUX_GLACE_IP->ISP_STATS_MUX_GLACE_SELECT.word = x)

//ISP_STATS_GLACE_ACC_ENABLE
/*Description: Glace accumulation enable configuration register. When this bit is enables, the block starts accumulating pixel values at the start of next frame. To read the mean and saturation registers, this bit must be set low.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_ACC_ENABLE :1;
        /* . This signal is set low at reset*/
        uint8_t reserved0 :3;
        uint8_t SOFT_RESET :1;
        /* 
        This signal is set low at reset*/
    }ISP_STATS_GLACE_ACC_ENABLE_ts;

}ISP_STATS_GLACE_ACC_ENABLE_tu;



//ISP_STATS_GLACE_DFV
/*Description: Design for verification register, used to verify interrupt
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_DFV_ENABLE :1;
        /* Disable DFV for glace stats*/
        uint8_t GLACE_DFV_INTERRUPT_ENABLE :1;
        /* 
        When the register value change, interrupt is set to activ*/
    }ISP_STATS_GLACE_DFV_ts;

}ISP_STATS_GLACE_DFV_tu;



//ISP_STATS_GLACE_H_ROI_START
/*Description: Glace horizontal region of interest start
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t GLACE_H_ROI_START :13;
        /* . This field specifies at which horizontal coordinate the pixels start being accumulated.*/
    }ISP_STATS_GLACE_H_ROI_START_ts;

}ISP_STATS_GLACE_H_ROI_START_tu;



//ISP_STATS_GLACE_V_ROI_START
/*Description: Glace verticalregion of interest start
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t GLACE_V_ROI_START :13;
        /* . This field specifies at which vertical coordinate the pixels start being accumulated.*/
    }ISP_STATS_GLACE_V_ROI_START_ts;

}ISP_STATS_GLACE_V_ROI_START_tu;



//ISP_STATS_GLACE_H_BLK_SIZE
/*Description: Glace horizontal block size
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_H_BLK_SIZE;
        /* . This field specifies the horizontal size of the blocks in the grid. The maximum size is 128. The "real" usable maximum value depends on ACCU_RAM_ADDRESS_W, with GLACE_H_BLK_SIZE that can be expressed on ACCU_RAM_ADDRESS_W bits.*/
    }ISP_STATS_GLACE_H_BLK_SIZE_ts;

}ISP_STATS_GLACE_H_BLK_SIZE_tu;



//ISP_STATS_GLACE_V_BLK_SIZE
/*Description: Glace vertical block size
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_V_BLK_SIZE;
        /* . This field specifies the vertical size of the blocks in the grid. The maximum size is 128.*/
    }ISP_STATS_GLACE_V_BLK_SIZE_ts;

}ISP_STATS_GLACE_V_BLK_SIZE_tu;



//ISP_STATS_GLACE_H_GRID_SIZE
/*Description: Glace horizontal grid size
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_H_GRID_SIZE;
        /* . This field specifies the horizontal grid size, thus the number of blocks in an horizontal stripe.*/
    }ISP_STATS_GLACE_H_GRID_SIZE_ts;

}ISP_STATS_GLACE_H_GRID_SIZE_tu;



//ISP_STATS_GLACE_V_GRID_SIZE
/*Description: Glace vertical grid size
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_V_GRID_SIZE;
        /* . This field specifies the vertical grid size.*/
    }ISP_STATS_GLACE_V_GRID_SIZE_ts;

}ISP_STATS_GLACE_V_GRID_SIZE_tu;



//ISP_STATS_GLACE_SAT_LEVEL_R
/*Description: Define lower pixel threshold to be considered as saturated for red pixels
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_SAT_LEVEL_R;
        /* . This field specifies the pixel value starting from which a red pixel is considered saturated. The default value is 0xFF, maximum pixel value on 8 bits.*/
    }ISP_STATS_GLACE_SAT_LEVEL_R_ts;

}ISP_STATS_GLACE_SAT_LEVEL_R_tu;



//ISP_STATS_GLACE_SAT_LEVEL_G
/*Description: Define lower pixel threshold to be considered as saturated for green pixels
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_SAT_LEVEL_G;
        /* . This field specifies the pixel value starting from which a green pixel is considered saturated. The default value is 0xFF, maximum pixel value on 8 bits.*/
    }ISP_STATS_GLACE_SAT_LEVEL_G_ts;

}ISP_STATS_GLACE_SAT_LEVEL_G_tu;



//ISP_STATS_GLACE_SAT_LEVEL_B
/*Description: Define lower pixel threshold to be considered as saturated for blue pixels
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_SAT_LEVEL_B;
        /* . This field specifies the pixel value starting from which a blue pixel is considered saturated. The default value is 0xFF, maximum pixel value on 8 bits.*/
    }ISP_STATS_GLACE_SAT_LEVEL_B_ts;

}ISP_STATS_GLACE_SAT_LEVEL_B_tu;



//ISP_STATS_GLACE_AV_MULT
/*Description: Glace multiplier parameter used to calculate the mean of R, G, B values per block.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t GLACE_AV_MULT;
    }ISP_STATS_GLACE_AV_MULT_ts;

}ISP_STATS_GLACE_AV_MULT_tu;



//ISP_STATS_GLACE_AV_SHIFT
/*Description: Glace shift number. The mean value of accumulated pixels is multiplied and the right shifted of GLACE_AV_SHIFT bits.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t GLACE_AV_SHIFT;
    }ISP_STATS_GLACE_AV_SHIFT_ts;

}ISP_STATS_GLACE_AV_SHIFT_tu;



//ISP_STATS_GLACE_AV_MULT_WIDTH
/*Description: Glace multiplier width, which is read by the firmware in order to know what the bigger possible multiplier is.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_AV_MULT_WIDTH;
    }ISP_STATS_GLACE_AV_MULT_WIDTH_ts;

}ISP_STATS_GLACE_AV_MULT_WIDTH_tu;



//ISP_STATS_GLACE_AV_SHIFT_WIDTH
/*Description: Glace width shift number, which is read by the firmware in order to know what the bigger possible shift is.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t GLACE_AV_SHIFT_WIDTH;
    }ISP_STATS_GLACE_AV_SHIFT_WIDTH_ts;

}ISP_STATS_GLACE_AV_SHIFT_WIDTH_tu;

typedef struct
{
    ISP_STATS_GLACE_ACC_ENABLE_tu ISP_STATS_GLACE_ACC_ENABLE;
    ISP_STATS_GLACE_DFV_tu ISP_STATS_GLACE_DFV;
    ISP_STATS_GLACE_H_ROI_START_tu ISP_STATS_GLACE_H_ROI_START;
    ISP_STATS_GLACE_V_ROI_START_tu ISP_STATS_GLACE_V_ROI_START;
    ISP_STATS_GLACE_H_BLK_SIZE_tu ISP_STATS_GLACE_H_BLK_SIZE;
    ISP_STATS_GLACE_V_BLK_SIZE_tu ISP_STATS_GLACE_V_BLK_SIZE;
    ISP_STATS_GLACE_H_GRID_SIZE_tu ISP_STATS_GLACE_H_GRID_SIZE;
    ISP_STATS_GLACE_V_GRID_SIZE_tu ISP_STATS_GLACE_V_GRID_SIZE;
    ISP_STATS_GLACE_SAT_LEVEL_R_tu ISP_STATS_GLACE_SAT_LEVEL_R;
    ISP_STATS_GLACE_SAT_LEVEL_G_tu ISP_STATS_GLACE_SAT_LEVEL_G;
    ISP_STATS_GLACE_SAT_LEVEL_B_tu ISP_STATS_GLACE_SAT_LEVEL_B;
    ISP_STATS_GLACE_AV_MULT_tu ISP_STATS_GLACE_AV_MULT;
    ISP_STATS_GLACE_AV_SHIFT_tu ISP_STATS_GLACE_AV_SHIFT;
    ISP_STATS_GLACE_AV_MULT_WIDTH_tu ISP_STATS_GLACE_AV_MULT_WIDTH;
    ISP_STATS_GLACE_AV_SHIFT_WIDTH_tu ISP_STATS_GLACE_AV_SHIFT_WIDTH;
}ISP_STATS_GLACE_IP_ts;




//ISP_STATS_GLACE_ACC_ENABLE


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE_GLACE_ACC_ENABLE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.ISP_STATS_GLACE_ACC_ENABLE_ts.GLACE_ACC_ENABLE
#define Is_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE_GLACE_ACC_ENABLE_DISABLE() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.ISP_STATS_GLACE_ACC_ENABLE_ts.GLACE_ACC_ENABLE == GLACE_ACC_ENABLE_DISABLE)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE_GLACE_ACC_ENABLE__DISABLE() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.ISP_STATS_GLACE_ACC_ENABLE_ts.GLACE_ACC_ENABLE = GLACE_ACC_ENABLE_DISABLE)
#define GLACE_ACC_ENABLE_DISABLE 0x0    //Disable Glace Accumulation
#define Is_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE_GLACE_ACC_ENABLE_ENABLE() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.ISP_STATS_GLACE_ACC_ENABLE_ts.GLACE_ACC_ENABLE == GLACE_ACC_ENABLE_ENABLE)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE_GLACE_ACC_ENABLE__ENABLE() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.ISP_STATS_GLACE_ACC_ENABLE_ts.GLACE_ACC_ENABLE = GLACE_ACC_ENABLE_ENABLE)
#define GLACE_ACC_ENABLE_ENABLE 0x1    //Enable Glace Accumulation


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE_SOFT_RESET() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.ISP_STATS_GLACE_ACC_ENABLE_ts.SOFT_RESET
#define Is_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE_SOFT_RESET_B_0x0() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.ISP_STATS_GLACE_ACC_ENABLE_ts.SOFT_RESET == SOFT_RESET_B_0x0)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE_SOFT_RESET__B_0x0() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.ISP_STATS_GLACE_ACC_ENABLE_ts.SOFT_RESET = SOFT_RESET_B_0x0)
#define SOFT_RESET_B_0x0 0x0    //Soft reset disabled
#define Is_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE_SOFT_RESET_B_0x1() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.ISP_STATS_GLACE_ACC_ENABLE_ts.SOFT_RESET == SOFT_RESET_B_0x1)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE_SOFT_RESET__B_0x1() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.ISP_STATS_GLACE_ACC_ENABLE_ts.SOFT_RESET = SOFT_RESET_B_0x1)
#define SOFT_RESET_B_0x1 0x1    //Soft reset enabled
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE(GLACE_ACC_ENABLE,SOFT_RESET) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.word = (uint32_t)GLACE_ACC_ENABLE<<0 | (uint32_t)SOFT_RESET<<4)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_ACC_ENABLE_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_ACC_ENABLE.word = x)


//ISP_STATS_GLACE_DFV


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_DFV_GLACE_DFV_ENABLE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_DFV.ISP_STATS_GLACE_DFV_ts.GLACE_DFV_ENABLE
#define Is_ISP_STATS_GLACE_ISP_STATS_GLACE_DFV_GLACE_DFV_ENABLE_DISABLE() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_DFV.ISP_STATS_GLACE_DFV_ts.GLACE_DFV_ENABLE == GLACE_DFV_ENABLE_DISABLE)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_DFV_GLACE_DFV_ENABLE__DISABLE() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_DFV.ISP_STATS_GLACE_DFV_ts.GLACE_DFV_ENABLE = GLACE_DFV_ENABLE_DISABLE)
#define GLACE_DFV_ENABLE_DISABLE 0x0    //Disable DFV for glace stats
#define Is_ISP_STATS_GLACE_ISP_STATS_GLACE_DFV_GLACE_DFV_ENABLE_ENABLE() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_DFV.ISP_STATS_GLACE_DFV_ts.GLACE_DFV_ENABLE == GLACE_DFV_ENABLE_ENABLE)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_DFV_GLACE_DFV_ENABLE__ENABLE() (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_DFV.ISP_STATS_GLACE_DFV_ts.GLACE_DFV_ENABLE = GLACE_DFV_ENABLE_ENABLE)
#define GLACE_DFV_ENABLE_ENABLE 0x1    //Enable DFV for glace stats


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_DFV_GLACE_DFV_INTERRUPT_ENABLE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_DFV.ISP_STATS_GLACE_DFV_ts.GLACE_DFV_INTERRUPT_ENABLE
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_DFV_GLACE_DFV_INTERRUPT_ENABLE(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_DFV.ISP_STATS_GLACE_DFV_ts.GLACE_DFV_INTERRUPT_ENABLE = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_DFV(GLACE_DFV_ENABLE,GLACE_DFV_INTERRUPT_ENABLE) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_DFV.word = (uint32_t)GLACE_DFV_ENABLE<<0 | (uint32_t)GLACE_DFV_INTERRUPT_ENABLE<<1)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_DFV() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_DFV.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_DFV_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_DFV.word = x)


//ISP_STATS_GLACE_H_ROI_START


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_H_ROI_START_GLACE_H_ROI_START() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_ROI_START.ISP_STATS_GLACE_H_ROI_START_ts.GLACE_H_ROI_START
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_H_ROI_START_GLACE_H_ROI_START(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_ROI_START.ISP_STATS_GLACE_H_ROI_START_ts.GLACE_H_ROI_START = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_H_ROI_START(GLACE_H_ROI_START) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_ROI_START.word = (uint32_t)GLACE_H_ROI_START<<0)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_H_ROI_START() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_ROI_START.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_H_ROI_START_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_ROI_START.word = x)


//ISP_STATS_GLACE_V_ROI_START


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_V_ROI_START_GLACE_V_ROI_START() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_ROI_START.ISP_STATS_GLACE_V_ROI_START_ts.GLACE_V_ROI_START
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_V_ROI_START_GLACE_V_ROI_START(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_ROI_START.ISP_STATS_GLACE_V_ROI_START_ts.GLACE_V_ROI_START = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_V_ROI_START(GLACE_V_ROI_START) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_ROI_START.word = (uint32_t)GLACE_V_ROI_START<<0)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_V_ROI_START() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_ROI_START.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_V_ROI_START_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_ROI_START.word = x)


//ISP_STATS_GLACE_H_BLK_SIZE


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_H_BLK_SIZE_GLACE_H_BLK_SIZE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_BLK_SIZE.ISP_STATS_GLACE_H_BLK_SIZE_ts.GLACE_H_BLK_SIZE
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_H_BLK_SIZE_GLACE_H_BLK_SIZE(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_BLK_SIZE.ISP_STATS_GLACE_H_BLK_SIZE_ts.GLACE_H_BLK_SIZE = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_H_BLK_SIZE(GLACE_H_BLK_SIZE) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_BLK_SIZE.word = (uint32_t)GLACE_H_BLK_SIZE<<0)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_H_BLK_SIZE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_BLK_SIZE.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_H_BLK_SIZE_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_BLK_SIZE.word = x)


//ISP_STATS_GLACE_V_BLK_SIZE


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_V_BLK_SIZE_GLACE_V_BLK_SIZE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_BLK_SIZE.ISP_STATS_GLACE_V_BLK_SIZE_ts.GLACE_V_BLK_SIZE
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_V_BLK_SIZE_GLACE_V_BLK_SIZE(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_BLK_SIZE.ISP_STATS_GLACE_V_BLK_SIZE_ts.GLACE_V_BLK_SIZE = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_V_BLK_SIZE(GLACE_V_BLK_SIZE) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_BLK_SIZE.word = (uint32_t)GLACE_V_BLK_SIZE<<0)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_V_BLK_SIZE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_BLK_SIZE.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_V_BLK_SIZE_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_BLK_SIZE.word = x)


//ISP_STATS_GLACE_H_GRID_SIZE


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_H_GRID_SIZE_GLACE_H_GRID_SIZE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_GRID_SIZE.ISP_STATS_GLACE_H_GRID_SIZE_ts.GLACE_H_GRID_SIZE
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_H_GRID_SIZE_GLACE_H_GRID_SIZE(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_GRID_SIZE.ISP_STATS_GLACE_H_GRID_SIZE_ts.GLACE_H_GRID_SIZE = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_H_GRID_SIZE(GLACE_H_GRID_SIZE) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_GRID_SIZE.word = (uint32_t)GLACE_H_GRID_SIZE<<0)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_H_GRID_SIZE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_GRID_SIZE.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_H_GRID_SIZE_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_H_GRID_SIZE.word = x)


//ISP_STATS_GLACE_V_GRID_SIZE


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_V_GRID_SIZE_GLACE_V_GRID_SIZE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_GRID_SIZE.ISP_STATS_GLACE_V_GRID_SIZE_ts.GLACE_V_GRID_SIZE
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_V_GRID_SIZE_GLACE_V_GRID_SIZE(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_GRID_SIZE.ISP_STATS_GLACE_V_GRID_SIZE_ts.GLACE_V_GRID_SIZE = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_V_GRID_SIZE(GLACE_V_GRID_SIZE) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_GRID_SIZE.word = (uint32_t)GLACE_V_GRID_SIZE<<0)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_V_GRID_SIZE() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_GRID_SIZE.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_V_GRID_SIZE_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_V_GRID_SIZE.word = x)


//ISP_STATS_GLACE_SAT_LEVEL_R


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_R_GLACE_SAT_LEVEL_R() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_R.ISP_STATS_GLACE_SAT_LEVEL_R_ts.GLACE_SAT_LEVEL_R
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_R_GLACE_SAT_LEVEL_R(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_R.ISP_STATS_GLACE_SAT_LEVEL_R_ts.GLACE_SAT_LEVEL_R = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_R(GLACE_SAT_LEVEL_R) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_R.word = (uint32_t)GLACE_SAT_LEVEL_R<<0)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_R() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_R.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_R_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_R.word = x)


//ISP_STATS_GLACE_SAT_LEVEL_G


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_G_GLACE_SAT_LEVEL_G() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_G.ISP_STATS_GLACE_SAT_LEVEL_G_ts.GLACE_SAT_LEVEL_G
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_G_GLACE_SAT_LEVEL_G(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_G.ISP_STATS_GLACE_SAT_LEVEL_G_ts.GLACE_SAT_LEVEL_G = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_G(GLACE_SAT_LEVEL_G) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_G.word = (uint32_t)GLACE_SAT_LEVEL_G<<0)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_G() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_G.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_G_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_G.word = x)


//ISP_STATS_GLACE_SAT_LEVEL_B


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_B_GLACE_SAT_LEVEL_B() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_B.ISP_STATS_GLACE_SAT_LEVEL_B_ts.GLACE_SAT_LEVEL_B
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_B_GLACE_SAT_LEVEL_B(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_B.ISP_STATS_GLACE_SAT_LEVEL_B_ts.GLACE_SAT_LEVEL_B = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_B(GLACE_SAT_LEVEL_B) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_B.word = (uint32_t)GLACE_SAT_LEVEL_B<<0)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_B() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_B.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_SAT_LEVEL_B_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_SAT_LEVEL_B.word = x)


//ISP_STATS_GLACE_AV_MULT


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_MULT_GLACE_AV_MULT() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_MULT.ISP_STATS_GLACE_AV_MULT_ts.GLACE_AV_MULT
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_MULT_GLACE_AV_MULT(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_MULT.ISP_STATS_GLACE_AV_MULT_ts.GLACE_AV_MULT = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_MULT(GLACE_AV_MULT) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_MULT.word = (uint32_t)GLACE_AV_MULT<<0)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_MULT() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_MULT.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_MULT_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_MULT.word = x)


//ISP_STATS_GLACE_AV_SHIFT


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_SHIFT_GLACE_AV_SHIFT() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_SHIFT.ISP_STATS_GLACE_AV_SHIFT_ts.GLACE_AV_SHIFT
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_SHIFT_GLACE_AV_SHIFT(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_SHIFT.ISP_STATS_GLACE_AV_SHIFT_ts.GLACE_AV_SHIFT = x)
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_SHIFT(GLACE_AV_SHIFT) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_SHIFT.word = (uint32_t)GLACE_AV_SHIFT<<0)
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_SHIFT() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_SHIFT.word
#define Set_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_SHIFT_word(x) (p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_SHIFT.word = x)


//ISP_STATS_GLACE_AV_MULT_WIDTH


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_MULT_WIDTH_GLACE_AV_MULT_WIDTH() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_MULT_WIDTH.ISP_STATS_GLACE_AV_MULT_WIDTH_ts.GLACE_AV_MULT_WIDTH
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_MULT_WIDTH() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_MULT_WIDTH.word


//ISP_STATS_GLACE_AV_SHIFT_WIDTH


#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_SHIFT_WIDTH_GLACE_AV_SHIFT_WIDTH() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_SHIFT_WIDTH.ISP_STATS_GLACE_AV_SHIFT_WIDTH_ts.GLACE_AV_SHIFT_WIDTH
#define Get_ISP_STATS_GLACE_ISP_STATS_GLACE_AV_SHIFT_WIDTH() p_ISP_STATS_GLACE_IP->ISP_STATS_GLACE_AV_SHIFT_WIDTH.word

//ISP_STATS_MPSS_GLACE_ENABLE
/*Description: MPSS Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* IDP data out same as data in*/
    }ISP_STATS_MPSS_GLACE_ENABLE_ts;

}ISP_STATS_MPSS_GLACE_ENABLE_tu;



//ISP_STATS_MPSS_GLACE_CTRL
/*Description: MPSS Control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t stgrd :1;
        /* Non Staggerred sub sampling*/
    }ISP_STATS_MPSS_GLACE_CTRL_ts;

}ISP_STATS_MPSS_GLACE_CTRL_tu;



//ISP_STATS_MPSS_GLACE_PARAM_HOR
/*Description: Hor Sub sample parameter Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t iqval_h :4;
        /* 
        Horizontalsubsample ratio
        Interpretation of iqval_h is as follows*/
    }ISP_STATS_MPSS_GLACE_PARAM_HOR_ts;

}ISP_STATS_MPSS_GLACE_PARAM_HOR_tu;



//ISP_STATS_MPSS_GLACE_PARAM_VER
/*Description: Ver Sub sample parameter Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t iqval_v :4;
        /* 
        Vertical subsample ratio
        Interpretation of iqval_v is as follows*/
    }ISP_STATS_MPSS_GLACE_PARAM_VER_ts;

}ISP_STATS_MPSS_GLACE_PARAM_VER_tu;



//ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT
/*Description: ofirstmin4 Offset Count Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t ofirstmin4_offset_cnt :7;
        /* 
        Horizontal sub-sample Count to calculate number of clock pulses between ifirstmin4 and ofirstmin4 to position ofirstmin4 exactly 4 clocks before first valid ohenv
        Calculation of ofirstmin4_offset_cnt values is as follows
        No Sub Sampling, by pass mode - (ofirstmin4_offset_cnt == 0/1)
        (iqval_h == 2) => (program value for ofirstmin4_offset_cnt == 11)
        (iqval_h == 3) => (program value for ofirstmin4_offset_cnt == 23)
        (iqval_h == 4) => (program value for ofirstmin4_offset_cnt == 47)
        (iqval_h == 5) => (program value for ofirstmin4_offset_cnt == 95)
        */
    }ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT_ts;

}ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT_tu;



//ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES
/*Description: Number of Subsampled active lines at o/p MPSS. Its value is to be programmed as per the following logic: if (ver_ss_ratio > 1) { num_active_subsampled_lines = ((total_active_active_lines_from_sensor>>(ver_ss_ratio)) * 2) - 1 } else { num_active_subsampled_lines = tota_active_lines_from_sensor; }Note that vertical subsampling ratio cannot be greater than 5. This calculation is done in software. This value is used inside the hardware to generate linetype for LAST ACTIVE LINE.
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t num_active_subsampled_lines;
        /* 
        Program number of subsampled lines expected at the output of MPSS.*/
    }ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES_ts;

}ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES_tu;

typedef struct
{
    ISP_STATS_MPSS_GLACE_ENABLE_tu ISP_STATS_MPSS_GLACE_ENABLE;
    ISP_STATS_MPSS_GLACE_CTRL_tu ISP_STATS_MPSS_GLACE_CTRL;
    ISP_STATS_MPSS_GLACE_PARAM_HOR_tu ISP_STATS_MPSS_GLACE_PARAM_HOR;
    ISP_STATS_MPSS_GLACE_PARAM_VER_tu ISP_STATS_MPSS_GLACE_PARAM_VER;
    ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT_tu ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT;
    ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES_tu ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES;
}ISP_STATS_MPSS_GLACE_IP_ts;




//ISP_STATS_MPSS_GLACE_ENABLE


#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_ENABLE_enable() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_ENABLE.ISP_STATS_MPSS_GLACE_ENABLE_ts.enable
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_ENABLE_enable_B_0x0() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_ENABLE.ISP_STATS_MPSS_GLACE_ENABLE_ts.enable == enable_B_0x0)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_ENABLE_enable__B_0x0() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_ENABLE.ISP_STATS_MPSS_GLACE_ENABLE_ts.enable = enable_B_0x0)
#define enable_B_0x0 0x0    //IDP data out same as data in
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_ENABLE_enable_B_0x1() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_ENABLE.ISP_STATS_MPSS_GLACE_ENABLE_ts.enable == enable_B_0x1)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_ENABLE_enable__B_0x1() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_ENABLE.ISP_STATS_MPSS_GLACE_ENABLE_ts.enable = enable_B_0x1)
#define enable_B_0x1 0x1    //Data sub sampled in accordance with hor/ver parameters
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_ENABLE(enable) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_ENABLE.word = (uint32_t)enable<<0)
#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_ENABLE() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_ENABLE.word
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_ENABLE_word(x) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_ENABLE.word = x)


//ISP_STATS_MPSS_GLACE_CTRL


#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_CTRL_stgrd() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_CTRL.ISP_STATS_MPSS_GLACE_CTRL_ts.stgrd
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_CTRL_stgrd_B_0x0() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_CTRL.ISP_STATS_MPSS_GLACE_CTRL_ts.stgrd == stgrd_B_0x0)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_CTRL_stgrd__B_0x0() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_CTRL.ISP_STATS_MPSS_GLACE_CTRL_ts.stgrd = stgrd_B_0x0)
#define stgrd_B_0x0 0x0    //Non Staggerred sub sampling
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_CTRL_stgrd_B_0x1() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_CTRL.ISP_STATS_MPSS_GLACE_CTRL_ts.stgrd == stgrd_B_0x1)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_CTRL_stgrd__B_0x1() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_CTRL.ISP_STATS_MPSS_GLACE_CTRL_ts.stgrd = stgrd_B_0x1)
#define stgrd_B_0x1 0x1    //Staggered sub sampling
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_CTRL(stgrd) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_CTRL.word = (uint32_t)stgrd<<0)
#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_CTRL() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_CTRL.word
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_CTRL_word(x) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_CTRL.word = x)


//ISP_STATS_MPSS_GLACE_PARAM_HOR


#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h_B_0x0() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h == iqval_h_B_0x0)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h__B_0x0() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h = iqval_h_B_0x0)
#define iqval_h_B_0x0 0x0    //No SUb sampling, by pass mode
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h_B_0x1() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h == iqval_h_B_0x1)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h__B_0x1() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h = iqval_h_B_0x1)
#define iqval_h_B_0x1 0x1    //No SUb sampling, by pass mode
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h_B_0x2() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h == iqval_h_B_0x2)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h__B_0x2() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h = iqval_h_B_0x2)
#define iqval_h_B_0x2 0x2    //pick1 macro ( 2pixels), Leave 1 macro ( 2 pixels)
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h_B_0x3() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h == iqval_h_B_0x3)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h__B_0x3() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h = iqval_h_B_0x3)
#define iqval_h_B_0x3 0x3    //pick1 macro ( 2pixels), Leave 3 macro ( 6 pixels)
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h_B_0x4() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h == iqval_h_B_0x4)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h__B_0x4() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h = iqval_h_B_0x4)
#define iqval_h_B_0x4 0x4    //pick1 macro ( 2pixels), Leave 7 macro ( 14 pixels)
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h_B_0x5() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h == iqval_h_B_0x5)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_iqval_h__B_0x5() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.ISP_STATS_MPSS_GLACE_PARAM_HOR_ts.iqval_h = iqval_h_B_0x5)
#define iqval_h_B_0x5 0x5    //pick1 macro ( 2pixels), Leave 15 macro ( 30 pixels)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR(iqval_h) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.word = (uint32_t)iqval_h<<0)
#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.word
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_HOR_word(x) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_HOR.word = x)


//ISP_STATS_MPSS_GLACE_PARAM_VER


#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v_B_0x0() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v == iqval_v_B_0x0)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v__B_0x0() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v = iqval_v_B_0x0)
#define iqval_v_B_0x0 0x0    //No SUb sampling, by pass mode
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v_B_0x1() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v == iqval_v_B_0x1)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v__B_0x1() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v = iqval_v_B_0x1)
#define iqval_v_B_0x1 0x1    //No SUb sampling, by pass mode
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v_B_0x2() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v == iqval_v_B_0x2)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v__B_0x2() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v = iqval_v_B_0x2)
#define iqval_v_B_0x2 0x2    //pick1 macro ( 2lines), Leave 1 macro ( 2 lines)
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v_B_0x3() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v == iqval_v_B_0x3)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v__B_0x3() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v = iqval_v_B_0x3)
#define iqval_v_B_0x3 0x3    //pick1 macro ( 2lines), Leave 3 macro ( 6 lines)
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v_B_0x4() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v == iqval_v_B_0x4)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v__B_0x4() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v = iqval_v_B_0x4)
#define iqval_v_B_0x4 0x4    //pick1 macro ( 2lines), Leave 7 macro ( 14 lines)
#define Is_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v_B_0x5() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v == iqval_v_B_0x5)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_iqval_v__B_0x5() (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.ISP_STATS_MPSS_GLACE_PARAM_VER_ts.iqval_v = iqval_v_B_0x5)
#define iqval_v_B_0x5 0x5    //pick1 macro ( 2lines), Leave 15 macro ( 30 lines)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER(iqval_v) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.word = (uint32_t)iqval_v<<0)
#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.word
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_PARAM_VER_word(x) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_PARAM_VER.word = x)


//ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT


#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT_ofirstmin4_offset_cnt() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT.ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT_ts.ofirstmin4_offset_cnt
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT_ofirstmin4_offset_cnt(x) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT.ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT_ts.ofirstmin4_offset_cnt = x)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT(ofirstmin4_offset_cnt) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT.word = (uint32_t)ofirstmin4_offset_cnt<<0)
#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT.word
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT_word(x) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_OFIRSTMIN4_OFFSET_CNT.word = x)


//ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES


#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES_num_active_subsampled_lines() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES.ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES_ts.num_active_subsampled_lines
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES_num_active_subsampled_lines(x) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES.ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES_ts.num_active_subsampled_lines = x)
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES(num_active_subsampled_lines) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES.word = (uint16_t)num_active_subsampled_lines<<0)
#define Get_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES() p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES.word
#define Set_ISP_STATS_MPSS_GLACE_ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES_word(x) (p_ISP_STATS_MPSS_GLACE_IP->ISP_STATS_MPSS_GLACE_NUM_ACTIVE_SS_LINES.word = x)

//ISP_STATS_AF_ENABLE
/*Description: AF Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* 
        Stats gathered if enable is One*/
    }ISP_STATS_AF_ENABLE_ts;

}ISP_STATS_AF_ENABLE_tu;



//ISP_STATS_AF_STATS_ZONE_CTRL
/*Description: AF stats zone control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t coring_en :1;
        /* Coring disabled for focus measure*/
        uint8_t abs_square_en :1;
        /* Square value accumulated for autofocus stats*/
        uint8_t light_change_stats_en :1;
        /* 
        Enable / disable Light change detection statistics accumulation for all the selected zones. This bit is sampled at the start of every active frame.*/
    }ISP_STATS_AF_STATS_ZONE_CTRL_ts;

}ISP_STATS_AF_STATS_ZONE_CTRL_tu;



//ISP_STATS_AF_STATS_ZONE_ENABLE
/*Description: AF zone Enable Register
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_enable :10;
        /* Zone Disable*/
    }ISP_STATS_AF_STATS_ZONE_ENABLE_ts;

}ISP_STATS_AF_STATS_ZONE_ENABLE_tu;



//ISP_STATS_AF_CORING
/*Description: AF Coring Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t coring_value;
        /* 
        Coring value. If coring is enabled, focus measure will be clipped with this value.*/
    }ISP_STATS_AF_CORING_ts;

}ISP_STATS_AF_CORING_tu;



//ISP_STATS_AF_ZONE_X_START_OFFSET_0
/*Description: AF Zone x start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_start;
        /* 
        X offset for start of the zone*/
    }ISP_STATS_AF_ZONE_X_START_OFFSET_0_ts;

}ISP_STATS_AF_ZONE_X_START_OFFSET_0_tu;



//ISP_STATS_AF_ZONE_Y_START_OFFSET_0
/*Description: AF Zone y start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_start;
        /* 
        Y offset for start of the zone*/
    }ISP_STATS_AF_ZONE_Y_START_OFFSET_0_ts;

}ISP_STATS_AF_ZONE_Y_START_OFFSET_0_tu;



//ISP_STATS_AF_ZONE_X_END_OFFSET_0
/*Description: AF Zone x end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_end;
        /* 
        x offset for end of the zone*/
    }ISP_STATS_AF_ZONE_X_END_OFFSET_0_ts;

}ISP_STATS_AF_ZONE_X_END_OFFSET_0_tu;



//ISP_STATS_AF_ZONE_Y_END_OFFSET_0
/*Description: AF Zone y end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_end;
        /* 
        Y offset for end of the zone*/
    }ISP_STATS_AF_ZONE_Y_END_OFFSET_0_ts;

}ISP_STATS_AF_ZONE_Y_END_OFFSET_0_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_0
/*Description: AF zone acc value focus
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_focus;
        /* 
        Accumulated value of the normalized focus statistics for the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the focus stats is enabled.*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_0_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_0_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_0
/*Description: AF zone acc value light change
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_light_change;
        /* 
        Average of the green pixel values in the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the light change detection stats is enabled*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_0_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_0_tu;



//ISP_STATS_AF_ZONE_X_START_OFFSET_1
/*Description: AF Zone x start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_start;
        /* 
        X offset for start of the zone*/
    }ISP_STATS_AF_ZONE_X_START_OFFSET_1_ts;

}ISP_STATS_AF_ZONE_X_START_OFFSET_1_tu;



//ISP_STATS_AF_ZONE_Y_START_OFFSET_1
/*Description: AF Zone y start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_start;
        /* 
        Y offset for start of the zone*/
    }ISP_STATS_AF_ZONE_Y_START_OFFSET_1_ts;

}ISP_STATS_AF_ZONE_Y_START_OFFSET_1_tu;



//ISP_STATS_AF_ZONE_X_END_OFFSET_1
/*Description: AF Zone x end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_end;
        /* 
        x offset for end of the zone*/
    }ISP_STATS_AF_ZONE_X_END_OFFSET_1_ts;

}ISP_STATS_AF_ZONE_X_END_OFFSET_1_tu;



//ISP_STATS_AF_ZONE_Y_END_OFFSET_1
/*Description: AF Zone y end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_end;
        /* 
        Y offset for end of the zone*/
    }ISP_STATS_AF_ZONE_Y_END_OFFSET_1_ts;

}ISP_STATS_AF_ZONE_Y_END_OFFSET_1_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_1
/*Description: AF zone acc value focus
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_focus;
        /* 
        Accumulated value of the normalized focus statistics for the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the focus stats is enabled.*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_1_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_1_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_1
/*Description: AF zone acc value light change
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_light_change;
        /* 
        Average of the green pixel values in the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the light change detection stats is enabled*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_1_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_1_tu;



//ISP_STATS_AF_ZONE_X_START_OFFSET_2
/*Description: AF Zone x start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_start;
        /* 
        X offset for start of the zone*/
    }ISP_STATS_AF_ZONE_X_START_OFFSET_2_ts;

}ISP_STATS_AF_ZONE_X_START_OFFSET_2_tu;



//ISP_STATS_AF_ZONE_Y_START_OFFSET_2
/*Description: AF Zone y start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_start;
        /* 
        Y offset for start of the zone*/
    }ISP_STATS_AF_ZONE_Y_START_OFFSET_2_ts;

}ISP_STATS_AF_ZONE_Y_START_OFFSET_2_tu;



//ISP_STATS_AF_ZONE_X_END_OFFSET_2
/*Description: AF Zone x end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_end;
        /* 
        x offset for end of the zone*/
    }ISP_STATS_AF_ZONE_X_END_OFFSET_2_ts;

}ISP_STATS_AF_ZONE_X_END_OFFSET_2_tu;



//ISP_STATS_AF_ZONE_Y_END_OFFSET_2
/*Description: AF Zone y end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_end;
        /* 
        Y offset for end of the zone*/
    }ISP_STATS_AF_ZONE_Y_END_OFFSET_2_ts;

}ISP_STATS_AF_ZONE_Y_END_OFFSET_2_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_2
/*Description: AF zone acc value focus
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_focus;
        /* 
        Accumulated value of the normalized focus statistics for the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the focus stats is enabled.*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_2_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_2_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_2
/*Description: AF zone acc value light change
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_light_change;
        /* 
        Average of the green pixel values in the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the light change detection stats is enabled*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_2_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_2_tu;



//ISP_STATS_AF_ZONE_X_START_OFFSET_3
/*Description: AF Zone x start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_start;
        /* 
        X offset for start of the zone*/
    }ISP_STATS_AF_ZONE_X_START_OFFSET_3_ts;

}ISP_STATS_AF_ZONE_X_START_OFFSET_3_tu;



//ISP_STATS_AF_ZONE_Y_START_OFFSET_3
/*Description: AF Zone y start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_start;
        /* 
        Y offset for start of the zone*/
    }ISP_STATS_AF_ZONE_Y_START_OFFSET_3_ts;

}ISP_STATS_AF_ZONE_Y_START_OFFSET_3_tu;



//ISP_STATS_AF_ZONE_X_END_OFFSET_3
/*Description: AF Zone x end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_end;
        /* 
        x offset for end of the zone*/
    }ISP_STATS_AF_ZONE_X_END_OFFSET_3_ts;

}ISP_STATS_AF_ZONE_X_END_OFFSET_3_tu;



//ISP_STATS_AF_ZONE_Y_END_OFFSET_3
/*Description: AF Zone y end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_end;
        /* 
        Y offset for end of the zone*/
    }ISP_STATS_AF_ZONE_Y_END_OFFSET_3_ts;

}ISP_STATS_AF_ZONE_Y_END_OFFSET_3_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_3
/*Description: AF zone acc value focus
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_focus;
        /* 
        Accumulated value of the normalized focus statistics for the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the focus stats is enabled.*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_3_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_3_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_3
/*Description: AF zone acc value light change
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_light_change;
        /* 
        Average of the green pixel values in the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the light change detection stats is enabled*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_3_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_3_tu;



//ISP_STATS_AF_ZONE_X_START_OFFSET_4
/*Description: AF Zone x start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_start;
        /* 
        X offset for start of the zone*/
    }ISP_STATS_AF_ZONE_X_START_OFFSET_4_ts;

}ISP_STATS_AF_ZONE_X_START_OFFSET_4_tu;



//ISP_STATS_AF_ZONE_Y_START_OFFSET_4
/*Description: AF Zone y start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_start;
        /* 
        Y offset for start of the zone*/
    }ISP_STATS_AF_ZONE_Y_START_OFFSET_4_ts;

}ISP_STATS_AF_ZONE_Y_START_OFFSET_4_tu;



//ISP_STATS_AF_ZONE_X_END_OFFSET_4
/*Description: AF Zone x end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_end;
        /* 
        x offset for end of the zone*/
    }ISP_STATS_AF_ZONE_X_END_OFFSET_4_ts;

}ISP_STATS_AF_ZONE_X_END_OFFSET_4_tu;



//ISP_STATS_AF_ZONE_Y_END_OFFSET_4
/*Description: AF Zone y end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_end;
        /* 
        Y offset for end of the zone*/
    }ISP_STATS_AF_ZONE_Y_END_OFFSET_4_ts;

}ISP_STATS_AF_ZONE_Y_END_OFFSET_4_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_4
/*Description: AF zone acc value focus
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_focus;
        /* 
        Accumulated value of the normalized focus statistics for the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the focus stats is enabled.*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_4_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_4_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_4
/*Description: AF zone acc value light change
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_light_change;
        /* 
        Average of the green pixel values in the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the light change detection stats is enabled*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_4_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_4_tu;



//ISP_STATS_AF_ZONE_X_START_OFFSET_5
/*Description: AF Zone x start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_start;
        /* 
        X offset for start of the zone*/
    }ISP_STATS_AF_ZONE_X_START_OFFSET_5_ts;

}ISP_STATS_AF_ZONE_X_START_OFFSET_5_tu;



//ISP_STATS_AF_ZONE_Y_START_OFFSET_5
/*Description: AF Zone y start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_start;
        /* 
        Y offset for start of the zone*/
    }ISP_STATS_AF_ZONE_Y_START_OFFSET_5_ts;

}ISP_STATS_AF_ZONE_Y_START_OFFSET_5_tu;



//ISP_STATS_AF_ZONE_X_END_OFFSET_5
/*Description: AF Zone x end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_end;
        /* 
        x offset for end of the zone*/
    }ISP_STATS_AF_ZONE_X_END_OFFSET_5_ts;

}ISP_STATS_AF_ZONE_X_END_OFFSET_5_tu;



//ISP_STATS_AF_ZONE_Y_END_OFFSET_5
/*Description: AF Zone y end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_end;
        /* 
        Y offset for end of the zone*/
    }ISP_STATS_AF_ZONE_Y_END_OFFSET_5_ts;

}ISP_STATS_AF_ZONE_Y_END_OFFSET_5_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_5
/*Description: AF zone acc value focus
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_focus;
        /* 
        Accumulated value of the normalized focus statistics for the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the focus stats is enabled.*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_5_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_5_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_5
/*Description: AF zone acc value light change
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_light_change;
        /* 
        Average of the green pixel values in the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the light change detection stats is enabled*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_5_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_5_tu;



//ISP_STATS_AF_ZONE_X_START_OFFSET_6
/*Description: AF Zone x start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_start;
        /* 
        X offset for start of the zone*/
    }ISP_STATS_AF_ZONE_X_START_OFFSET_6_ts;

}ISP_STATS_AF_ZONE_X_START_OFFSET_6_tu;



//ISP_STATS_AF_ZONE_Y_START_OFFSET_6
/*Description: AF Zone y start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_start;
        /* 
        Y offset for start of the zone*/
    }ISP_STATS_AF_ZONE_Y_START_OFFSET_6_ts;

}ISP_STATS_AF_ZONE_Y_START_OFFSET_6_tu;



//ISP_STATS_AF_ZONE_X_END_OFFSET_6
/*Description: AF Zone x end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_end;
        /* 
        x offset for end of the zone*/
    }ISP_STATS_AF_ZONE_X_END_OFFSET_6_ts;

}ISP_STATS_AF_ZONE_X_END_OFFSET_6_tu;



//ISP_STATS_AF_ZONE_Y_END_OFFSET_6
/*Description: AF Zone y end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_end;
        /* 
        Y offset for end of the zone*/
    }ISP_STATS_AF_ZONE_Y_END_OFFSET_6_ts;

}ISP_STATS_AF_ZONE_Y_END_OFFSET_6_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_6
/*Description: AF zone acc value focus
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_focus;
        /* 
        Accumulated value of the normalized focus statistics for the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the focus stats is enabled.*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_6_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_6_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_6
/*Description: AF zone acc value light change
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_light_change;
        /* 
        Average of the green pixel values in the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the light change detection stats is enabled*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_6_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_6_tu;



//ISP_STATS_AF_ZONE_X_START_OFFSET_7
/*Description: AF Zone x start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_start;
        /* 
        X offset for start of the zone*/
    }ISP_STATS_AF_ZONE_X_START_OFFSET_7_ts;

}ISP_STATS_AF_ZONE_X_START_OFFSET_7_tu;



//ISP_STATS_AF_ZONE_Y_START_OFFSET_7
/*Description: AF Zone y start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_start;
        /* 
        Y offset for start of the zone*/
    }ISP_STATS_AF_ZONE_Y_START_OFFSET_7_ts;

}ISP_STATS_AF_ZONE_Y_START_OFFSET_7_tu;



//ISP_STATS_AF_ZONE_X_END_OFFSET_7
/*Description: AF Zone x end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_end;
        /* 
        x offset for end of the zone*/
    }ISP_STATS_AF_ZONE_X_END_OFFSET_7_ts;

}ISP_STATS_AF_ZONE_X_END_OFFSET_7_tu;



//ISP_STATS_AF_ZONE_Y_END_OFFSET_7
/*Description: AF Zone y end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_end;
        /* 
        Y offset for end of the zone*/
    }ISP_STATS_AF_ZONE_Y_END_OFFSET_7_ts;

}ISP_STATS_AF_ZONE_Y_END_OFFSET_7_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_7
/*Description: AF zone acc value focus
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_focus;
        /* 
        Accumulated value of the normalized focus statistics for the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the focus stats is enabled.*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_7_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_7_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_7
/*Description: AF zone acc value light change
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_light_change;
        /* 
        Average of the green pixel values in the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the light change detection stats is enabled*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_7_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_7_tu;



//ISP_STATS_AF_ZONE_X_START_OFFSET_8
/*Description: AF Zone x start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_start;
        /* 
        X offset for start of the zone*/
    }ISP_STATS_AF_ZONE_X_START_OFFSET_8_ts;

}ISP_STATS_AF_ZONE_X_START_OFFSET_8_tu;



//ISP_STATS_AF_ZONE_Y_START_OFFSET_8
/*Description: AF Zone y start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_start;
        /* 
        Y offset for start of the zone*/
    }ISP_STATS_AF_ZONE_Y_START_OFFSET_8_ts;

}ISP_STATS_AF_ZONE_Y_START_OFFSET_8_tu;



//ISP_STATS_AF_ZONE_X_END_OFFSET_8
/*Description: AF Zone x end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_end;
        /* 
        x offset for end of the zone*/
    }ISP_STATS_AF_ZONE_X_END_OFFSET_8_ts;

}ISP_STATS_AF_ZONE_X_END_OFFSET_8_tu;



//ISP_STATS_AF_ZONE_Y_END_OFFSET_8
/*Description: AF Zone y end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_end;
        /* 
        Y offset for end of the zone*/
    }ISP_STATS_AF_ZONE_Y_END_OFFSET_8_ts;

}ISP_STATS_AF_ZONE_Y_END_OFFSET_8_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_8
/*Description: AF zone acc value focus
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_focus;
        /* 
        Accumulated value of the normalized focus statistics for the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the focus stats is enabled.*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_8_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_8_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_8
/*Description: AF zone acc value light change
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_light_change;
        /* 
        Average of the green pixel values in the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the light change detection stats is enabled*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_8_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_8_tu;



//ISP_STATS_AF_ZONE_X_START_OFFSET_9
/*Description: AF Zone x start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_start;
        /* 
        X offset for start of the zone*/
    }ISP_STATS_AF_ZONE_X_START_OFFSET_9_ts;

}ISP_STATS_AF_ZONE_X_START_OFFSET_9_tu;



//ISP_STATS_AF_ZONE_Y_START_OFFSET_9
/*Description: AF Zone y start Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_start;
        /* 
        Y offset for start of the zone*/
    }ISP_STATS_AF_ZONE_Y_START_OFFSET_9_ts;

}ISP_STATS_AF_ZONE_Y_START_OFFSET_9_tu;



//ISP_STATS_AF_ZONE_X_END_OFFSET_9
/*Description: AF Zone x end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_end;
        /* 
        x offset for end of the zone*/
    }ISP_STATS_AF_ZONE_X_END_OFFSET_9_ts;

}ISP_STATS_AF_ZONE_X_END_OFFSET_9_tu;



//ISP_STATS_AF_ZONE_Y_END_OFFSET_9
/*Description: AF Zone y end Offset.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_end;
        /* 
        Y offset for end of the zone*/
    }ISP_STATS_AF_ZONE_Y_END_OFFSET_9_ts;

}ISP_STATS_AF_ZONE_Y_END_OFFSET_9_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_9
/*Description: AF zone acc value focus
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_focus;
        /* 
        Accumulated value of the normalized focus statistics for the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the focus stats is enabled.*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_9_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_9_tu;



//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_9
/*Description: AF zone acc value light change
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_value_light_change;
        /* 
        Average of the green pixel values in the zone. This value is valid immediately after the zone_ready status bit is set for the zone n and if the light change detection stats is enabled*/
    }ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_9_ts;

}ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_9_tu;



//ISP_STATS_AF_DFV
/*Description: AF Design for Verification register.
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* 
        this bit is used to enable the pulsed interrupts*/
        uint8_t dfv_0_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
        uint8_t dfv_1_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
        uint8_t dfv_2_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
        uint8_t dfv_3_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
        uint8_t dfv_4_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
        uint8_t dfv_5_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
        uint8_t dfv_6_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
        uint8_t dfv_7_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
        uint8_t dfv_8_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
        uint8_t dfv_9_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
    }ISP_STATS_AF_DFV_ts;

}ISP_STATS_AF_DFV_tu;

typedef struct
{
    ISP_STATS_AF_ENABLE_tu ISP_STATS_AF_ENABLE;
    ISP_STATS_AF_STATS_ZONE_CTRL_tu ISP_STATS_AF_STATS_ZONE_CTRL;
    ISP_STATS_AF_STATS_ZONE_ENABLE_tu ISP_STATS_AF_STATS_ZONE_ENABLE;
    ISP_STATS_AF_CORING_tu ISP_STATS_AF_CORING;
    ISP_STATS_AF_ZONE_X_START_OFFSET_0_tu ISP_STATS_AF_ZONE_X_START_OFFSET_0;
    ISP_STATS_AF_ZONE_Y_START_OFFSET_0_tu ISP_STATS_AF_ZONE_Y_START_OFFSET_0;
    ISP_STATS_AF_ZONE_X_END_OFFSET_0_tu ISP_STATS_AF_ZONE_X_END_OFFSET_0;
    ISP_STATS_AF_ZONE_Y_END_OFFSET_0_tu ISP_STATS_AF_ZONE_Y_END_OFFSET_0;
    ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_0_tu ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_0;
    ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_0_tu ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_0;
    ISP_STATS_AF_ZONE_X_START_OFFSET_1_tu ISP_STATS_AF_ZONE_X_START_OFFSET_1;
    ISP_STATS_AF_ZONE_Y_START_OFFSET_1_tu ISP_STATS_AF_ZONE_Y_START_OFFSET_1;
    ISP_STATS_AF_ZONE_X_END_OFFSET_1_tu ISP_STATS_AF_ZONE_X_END_OFFSET_1;
    ISP_STATS_AF_ZONE_Y_END_OFFSET_1_tu ISP_STATS_AF_ZONE_Y_END_OFFSET_1;
    ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_1_tu ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_1;
    ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_1_tu ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_1;
    ISP_STATS_AF_ZONE_X_START_OFFSET_2_tu ISP_STATS_AF_ZONE_X_START_OFFSET_2;
    ISP_STATS_AF_ZONE_Y_START_OFFSET_2_tu ISP_STATS_AF_ZONE_Y_START_OFFSET_2;
    ISP_STATS_AF_ZONE_X_END_OFFSET_2_tu ISP_STATS_AF_ZONE_X_END_OFFSET_2;
    ISP_STATS_AF_ZONE_Y_END_OFFSET_2_tu ISP_STATS_AF_ZONE_Y_END_OFFSET_2;
    ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_2_tu ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_2;
    ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_2_tu ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_2;
    ISP_STATS_AF_ZONE_X_START_OFFSET_3_tu ISP_STATS_AF_ZONE_X_START_OFFSET_3;
    ISP_STATS_AF_ZONE_Y_START_OFFSET_3_tu ISP_STATS_AF_ZONE_Y_START_OFFSET_3;
    ISP_STATS_AF_ZONE_X_END_OFFSET_3_tu ISP_STATS_AF_ZONE_X_END_OFFSET_3;
    ISP_STATS_AF_ZONE_Y_END_OFFSET_3_tu ISP_STATS_AF_ZONE_Y_END_OFFSET_3;
    ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_3_tu ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_3;
    ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_3_tu ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_3;
    ISP_STATS_AF_ZONE_X_START_OFFSET_4_tu ISP_STATS_AF_ZONE_X_START_OFFSET_4;
    ISP_STATS_AF_ZONE_Y_START_OFFSET_4_tu ISP_STATS_AF_ZONE_Y_START_OFFSET_4;
    ISP_STATS_AF_ZONE_X_END_OFFSET_4_tu ISP_STATS_AF_ZONE_X_END_OFFSET_4;
    ISP_STATS_AF_ZONE_Y_END_OFFSET_4_tu ISP_STATS_AF_ZONE_Y_END_OFFSET_4;
    ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_4_tu ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_4;
    ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_4_tu ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_4;
    ISP_STATS_AF_ZONE_X_START_OFFSET_5_tu ISP_STATS_AF_ZONE_X_START_OFFSET_5;
    ISP_STATS_AF_ZONE_Y_START_OFFSET_5_tu ISP_STATS_AF_ZONE_Y_START_OFFSET_5;
    ISP_STATS_AF_ZONE_X_END_OFFSET_5_tu ISP_STATS_AF_ZONE_X_END_OFFSET_5;
    ISP_STATS_AF_ZONE_Y_END_OFFSET_5_tu ISP_STATS_AF_ZONE_Y_END_OFFSET_5;
    ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_5_tu ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_5;
    ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_5_tu ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_5;
    ISP_STATS_AF_ZONE_X_START_OFFSET_6_tu ISP_STATS_AF_ZONE_X_START_OFFSET_6;
    ISP_STATS_AF_ZONE_Y_START_OFFSET_6_tu ISP_STATS_AF_ZONE_Y_START_OFFSET_6;
    ISP_STATS_AF_ZONE_X_END_OFFSET_6_tu ISP_STATS_AF_ZONE_X_END_OFFSET_6;
    ISP_STATS_AF_ZONE_Y_END_OFFSET_6_tu ISP_STATS_AF_ZONE_Y_END_OFFSET_6;
    ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_6_tu ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_6;
    ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_6_tu ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_6;
    ISP_STATS_AF_ZONE_X_START_OFFSET_7_tu ISP_STATS_AF_ZONE_X_START_OFFSET_7;
    ISP_STATS_AF_ZONE_Y_START_OFFSET_7_tu ISP_STATS_AF_ZONE_Y_START_OFFSET_7;
    ISP_STATS_AF_ZONE_X_END_OFFSET_7_tu ISP_STATS_AF_ZONE_X_END_OFFSET_7;
    ISP_STATS_AF_ZONE_Y_END_OFFSET_7_tu ISP_STATS_AF_ZONE_Y_END_OFFSET_7;
    ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_7_tu ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_7;
    ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_7_tu ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_7;
    ISP_STATS_AF_ZONE_X_START_OFFSET_8_tu ISP_STATS_AF_ZONE_X_START_OFFSET_8;
    ISP_STATS_AF_ZONE_Y_START_OFFSET_8_tu ISP_STATS_AF_ZONE_Y_START_OFFSET_8;
    ISP_STATS_AF_ZONE_X_END_OFFSET_8_tu ISP_STATS_AF_ZONE_X_END_OFFSET_8;
    ISP_STATS_AF_ZONE_Y_END_OFFSET_8_tu ISP_STATS_AF_ZONE_Y_END_OFFSET_8;
    ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_8_tu ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_8;
    ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_8_tu ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_8;
    ISP_STATS_AF_ZONE_X_START_OFFSET_9_tu ISP_STATS_AF_ZONE_X_START_OFFSET_9;
    ISP_STATS_AF_ZONE_Y_START_OFFSET_9_tu ISP_STATS_AF_ZONE_Y_START_OFFSET_9;
    ISP_STATS_AF_ZONE_X_END_OFFSET_9_tu ISP_STATS_AF_ZONE_X_END_OFFSET_9;
    ISP_STATS_AF_ZONE_Y_END_OFFSET_9_tu ISP_STATS_AF_ZONE_Y_END_OFFSET_9;
    ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_9_tu ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_9;
    ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_9_tu ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_9;
    ISP_STATS_AF_DFV_tu ISP_STATS_AF_DFV;
}ISP_STATS_AF_IP_ts;




//ISP_STATS_AF_ENABLE


#define Get_ISP_STATS_AF_ISP_STATS_AF_ENABLE_enable() p_ISP_STATS_AF_IP->ISP_STATS_AF_ENABLE.ISP_STATS_AF_ENABLE_ts.enable
#define Is_ISP_STATS_AF_ISP_STATS_AF_ENABLE_enable_DISABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_ENABLE.ISP_STATS_AF_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ENABLE_enable__DISABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_ENABLE.ISP_STATS_AF_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable
#define Is_ISP_STATS_AF_ISP_STATS_AF_ENABLE_enable_ENABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_ENABLE.ISP_STATS_AF_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ENABLE_enable__ENABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_ENABLE.ISP_STATS_AF_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable
#define Set_ISP_STATS_AF_ISP_STATS_AF_ENABLE(enable) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ENABLE.word = (uint32_t)enable<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ENABLE() p_ISP_STATS_AF_IP->ISP_STATS_AF_ENABLE.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ENABLE_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ENABLE.word = x)


//ISP_STATS_AF_STATS_ZONE_CTRL


#define Get_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_coring_en() p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.coring_en
#define Is_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_coring_en_B_0x0() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.coring_en == coring_en_B_0x0)
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_coring_en__B_0x0() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.coring_en = coring_en_B_0x0)
#define coring_en_B_0x0 0x0    //Coring disabled for focus measure
#define Is_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_coring_en_B_0x1() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.coring_en == coring_en_B_0x1)
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_coring_en__B_0x1() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.coring_en = coring_en_B_0x1)
#define coring_en_B_0x1 0x1    //Coring enabled for focus measure


#define Get_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_abs_square_en() p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.abs_square_en
#define Is_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_abs_square_en_B_0x0() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.abs_square_en == abs_square_en_B_0x0)
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_abs_square_en__B_0x0() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.abs_square_en = abs_square_en_B_0x0)
#define abs_square_en_B_0x0 0x0    //Square value accumulated for autofocus stats
#define Is_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_abs_square_en_B_0x1() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.abs_square_en == abs_square_en_B_0x1)
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_abs_square_en__B_0x1() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.abs_square_en = abs_square_en_B_0x1)
#define abs_square_en_B_0x1 0x1    //Absolute value accumulated for autofocus stats


#define Get_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_light_change_stats_en() p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.light_change_stats_en
#define Is_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_light_change_stats_en_DISABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.light_change_stats_en == light_change_stats_en_DISABLE)
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_light_change_stats_en__DISABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.light_change_stats_en = light_change_stats_en_DISABLE)
#define light_change_stats_en_DISABLE 0x0    //Disable
#define Is_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_light_change_stats_en_Enable() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.light_change_stats_en == light_change_stats_en_Enable)
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_light_change_stats_en__Enable() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.ISP_STATS_AF_STATS_ZONE_CTRL_ts.light_change_stats_en = light_change_stats_en_Enable)
#define light_change_stats_en_Enable 0x1    //Enable
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL(coring_en,abs_square_en,light_change_stats_en) (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.word = (uint32_t)coring_en<<0 | (uint32_t)abs_square_en<<1 | (uint32_t)light_change_stats_en<<2)
#define Get_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL() p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_CTRL_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_CTRL.word = x)


//ISP_STATS_AF_STATS_ZONE_ENABLE


#define Get_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_ENABLE_zone_enable() p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_ENABLE.ISP_STATS_AF_STATS_ZONE_ENABLE_ts.zone_enable
#define Is_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_ENABLE_zone_enable_DISABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_ENABLE.ISP_STATS_AF_STATS_ZONE_ENABLE_ts.zone_enable == zone_enable_DISABLE)
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_ENABLE_zone_enable__DISABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_ENABLE.ISP_STATS_AF_STATS_ZONE_ENABLE_ts.zone_enable = zone_enable_DISABLE)
#define zone_enable_DISABLE 0x0    //Zone Disable
#define Is_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_ENABLE_zone_enable_Enable() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_ENABLE.ISP_STATS_AF_STATS_ZONE_ENABLE_ts.zone_enable == zone_enable_Enable)
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_ENABLE_zone_enable__Enable() (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_ENABLE.ISP_STATS_AF_STATS_ZONE_ENABLE_ts.zone_enable = zone_enable_Enable)
#define zone_enable_Enable 0x1    //Zone enable
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_ENABLE(zone_enable) (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_ENABLE.word = (uint32_t)zone_enable<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_ENABLE() p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_ENABLE.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_STATS_ZONE_ENABLE_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_STATS_ZONE_ENABLE.word = x)


//ISP_STATS_AF_CORING


#define Get_ISP_STATS_AF_ISP_STATS_AF_CORING_coring_value() p_ISP_STATS_AF_IP->ISP_STATS_AF_CORING.ISP_STATS_AF_CORING_ts.coring_value
#define Set_ISP_STATS_AF_ISP_STATS_AF_CORING_coring_value(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_CORING.ISP_STATS_AF_CORING_ts.coring_value = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_CORING(coring_value) (p_ISP_STATS_AF_IP->ISP_STATS_AF_CORING.word = (uint32_t)coring_value<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_CORING() p_ISP_STATS_AF_IP->ISP_STATS_AF_CORING.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_CORING_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_CORING.word = x)


//ISP_STATS_AF_ZONE_X_START_OFFSET_0


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_0_x_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_0.ISP_STATS_AF_ZONE_X_START_OFFSET_0_ts.x_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_0_x_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_0.ISP_STATS_AF_ZONE_X_START_OFFSET_0_ts.x_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_0(x_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_0.word = (uint32_t)x_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_0() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_0.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_0_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_0.word = x)


//ISP_STATS_AF_ZONE_Y_START_OFFSET_0


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_0_y_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_0.ISP_STATS_AF_ZONE_Y_START_OFFSET_0_ts.y_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_0_y_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_0.ISP_STATS_AF_ZONE_Y_START_OFFSET_0_ts.y_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_0(y_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_0.word = (uint32_t)y_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_0() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_0.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_0_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_0.word = x)


//ISP_STATS_AF_ZONE_X_END_OFFSET_0


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_0_x_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_0.ISP_STATS_AF_ZONE_X_END_OFFSET_0_ts.x_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_0_x_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_0.ISP_STATS_AF_ZONE_X_END_OFFSET_0_ts.x_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_0(x_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_0.word = (uint32_t)x_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_0() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_0.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_0_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_0.word = x)


//ISP_STATS_AF_ZONE_Y_END_OFFSET_0


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_0_y_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_0.ISP_STATS_AF_ZONE_Y_END_OFFSET_0_ts.y_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_0_y_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_0.ISP_STATS_AF_ZONE_Y_END_OFFSET_0_ts.y_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_0(y_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_0.word = (uint32_t)y_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_0() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_0.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_0_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_0.word = x)


//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_0


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_0_acc_value_focus() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_0.ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_0_ts.acc_value_focus
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_0() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_0.word


//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_0


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_0_acc_value_light_change() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_0.ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_0_ts.acc_value_light_change
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_0() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_0.word


//ISP_STATS_AF_ZONE_X_START_OFFSET_1


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_1_x_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_1.ISP_STATS_AF_ZONE_X_START_OFFSET_1_ts.x_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_1_x_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_1.ISP_STATS_AF_ZONE_X_START_OFFSET_1_ts.x_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_1(x_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_1.word = (uint32_t)x_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_1() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_1.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_1_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_1.word = x)


//ISP_STATS_AF_ZONE_Y_START_OFFSET_1


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_1_y_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_1.ISP_STATS_AF_ZONE_Y_START_OFFSET_1_ts.y_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_1_y_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_1.ISP_STATS_AF_ZONE_Y_START_OFFSET_1_ts.y_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_1(y_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_1.word = (uint32_t)y_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_1() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_1.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_1_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_1.word = x)


//ISP_STATS_AF_ZONE_X_END_OFFSET_1


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_1_x_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_1.ISP_STATS_AF_ZONE_X_END_OFFSET_1_ts.x_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_1_x_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_1.ISP_STATS_AF_ZONE_X_END_OFFSET_1_ts.x_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_1(x_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_1.word = (uint32_t)x_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_1() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_1.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_1_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_1.word = x)


//ISP_STATS_AF_ZONE_Y_END_OFFSET_1


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_1_y_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_1.ISP_STATS_AF_ZONE_Y_END_OFFSET_1_ts.y_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_1_y_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_1.ISP_STATS_AF_ZONE_Y_END_OFFSET_1_ts.y_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_1(y_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_1.word = (uint32_t)y_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_1() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_1.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_1_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_1.word = x)


//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_1


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_1_acc_value_focus() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_1.ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_1_ts.acc_value_focus
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_1() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_1.word


//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_1


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_1_acc_value_light_change() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_1.ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_1_ts.acc_value_light_change
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_1() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_1.word


//ISP_STATS_AF_ZONE_X_START_OFFSET_2


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_2_x_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_2.ISP_STATS_AF_ZONE_X_START_OFFSET_2_ts.x_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_2_x_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_2.ISP_STATS_AF_ZONE_X_START_OFFSET_2_ts.x_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_2(x_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_2.word = (uint32_t)x_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_2() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_2.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_2_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_2.word = x)


//ISP_STATS_AF_ZONE_Y_START_OFFSET_2


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_2_y_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_2.ISP_STATS_AF_ZONE_Y_START_OFFSET_2_ts.y_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_2_y_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_2.ISP_STATS_AF_ZONE_Y_START_OFFSET_2_ts.y_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_2(y_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_2.word = (uint32_t)y_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_2() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_2.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_2_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_2.word = x)


//ISP_STATS_AF_ZONE_X_END_OFFSET_2


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_2_x_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_2.ISP_STATS_AF_ZONE_X_END_OFFSET_2_ts.x_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_2_x_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_2.ISP_STATS_AF_ZONE_X_END_OFFSET_2_ts.x_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_2(x_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_2.word = (uint32_t)x_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_2() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_2.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_2_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_2.word = x)


//ISP_STATS_AF_ZONE_Y_END_OFFSET_2


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_2_y_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_2.ISP_STATS_AF_ZONE_Y_END_OFFSET_2_ts.y_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_2_y_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_2.ISP_STATS_AF_ZONE_Y_END_OFFSET_2_ts.y_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_2(y_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_2.word = (uint32_t)y_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_2() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_2.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_2_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_2.word = x)


//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_2


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_2_acc_value_focus() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_2.ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_2_ts.acc_value_focus
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_2() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_2.word


//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_2


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_2_acc_value_light_change() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_2.ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_2_ts.acc_value_light_change
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_2() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_2.word


//ISP_STATS_AF_ZONE_X_START_OFFSET_3


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_3_x_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_3.ISP_STATS_AF_ZONE_X_START_OFFSET_3_ts.x_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_3_x_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_3.ISP_STATS_AF_ZONE_X_START_OFFSET_3_ts.x_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_3(x_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_3.word = (uint32_t)x_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_3() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_3.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_3_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_3.word = x)


//ISP_STATS_AF_ZONE_Y_START_OFFSET_3


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_3_y_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_3.ISP_STATS_AF_ZONE_Y_START_OFFSET_3_ts.y_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_3_y_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_3.ISP_STATS_AF_ZONE_Y_START_OFFSET_3_ts.y_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_3(y_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_3.word = (uint32_t)y_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_3() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_3.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_3_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_3.word = x)


//ISP_STATS_AF_ZONE_X_END_OFFSET_3


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_3_x_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_3.ISP_STATS_AF_ZONE_X_END_OFFSET_3_ts.x_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_3_x_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_3.ISP_STATS_AF_ZONE_X_END_OFFSET_3_ts.x_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_3(x_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_3.word = (uint32_t)x_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_3() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_3.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_3_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_3.word = x)


//ISP_STATS_AF_ZONE_Y_END_OFFSET_3


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_3_y_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_3.ISP_STATS_AF_ZONE_Y_END_OFFSET_3_ts.y_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_3_y_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_3.ISP_STATS_AF_ZONE_Y_END_OFFSET_3_ts.y_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_3(y_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_3.word = (uint32_t)y_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_3() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_3.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_3_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_3.word = x)


//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_3


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_3_acc_value_focus() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_3.ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_3_ts.acc_value_focus
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_3() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_3.word


//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_3


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_3_acc_value_light_change() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_3.ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_3_ts.acc_value_light_change
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_3() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_3.word


//ISP_STATS_AF_ZONE_X_START_OFFSET_4


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_4_x_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_4.ISP_STATS_AF_ZONE_X_START_OFFSET_4_ts.x_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_4_x_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_4.ISP_STATS_AF_ZONE_X_START_OFFSET_4_ts.x_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_4(x_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_4.word = (uint32_t)x_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_4() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_4.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_4_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_4.word = x)


//ISP_STATS_AF_ZONE_Y_START_OFFSET_4


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_4_y_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_4.ISP_STATS_AF_ZONE_Y_START_OFFSET_4_ts.y_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_4_y_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_4.ISP_STATS_AF_ZONE_Y_START_OFFSET_4_ts.y_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_4(y_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_4.word = (uint32_t)y_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_4() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_4.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_4_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_4.word = x)


//ISP_STATS_AF_ZONE_X_END_OFFSET_4


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_4_x_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_4.ISP_STATS_AF_ZONE_X_END_OFFSET_4_ts.x_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_4_x_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_4.ISP_STATS_AF_ZONE_X_END_OFFSET_4_ts.x_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_4(x_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_4.word = (uint32_t)x_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_4() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_4.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_4_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_4.word = x)


//ISP_STATS_AF_ZONE_Y_END_OFFSET_4


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_4_y_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_4.ISP_STATS_AF_ZONE_Y_END_OFFSET_4_ts.y_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_4_y_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_4.ISP_STATS_AF_ZONE_Y_END_OFFSET_4_ts.y_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_4(y_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_4.word = (uint32_t)y_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_4() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_4.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_4_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_4.word = x)


//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_4


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_4_acc_value_focus() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_4.ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_4_ts.acc_value_focus
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_4() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_4.word


//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_4


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_4_acc_value_light_change() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_4.ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_4_ts.acc_value_light_change
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_4() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_4.word


//ISP_STATS_AF_ZONE_X_START_OFFSET_5


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_5_x_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_5.ISP_STATS_AF_ZONE_X_START_OFFSET_5_ts.x_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_5_x_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_5.ISP_STATS_AF_ZONE_X_START_OFFSET_5_ts.x_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_5(x_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_5.word = (uint32_t)x_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_5() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_5.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_5_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_5.word = x)


//ISP_STATS_AF_ZONE_Y_START_OFFSET_5


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_5_y_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_5.ISP_STATS_AF_ZONE_Y_START_OFFSET_5_ts.y_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_5_y_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_5.ISP_STATS_AF_ZONE_Y_START_OFFSET_5_ts.y_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_5(y_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_5.word = (uint32_t)y_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_5() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_5.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_5_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_5.word = x)


//ISP_STATS_AF_ZONE_X_END_OFFSET_5


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_5_x_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_5.ISP_STATS_AF_ZONE_X_END_OFFSET_5_ts.x_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_5_x_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_5.ISP_STATS_AF_ZONE_X_END_OFFSET_5_ts.x_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_5(x_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_5.word = (uint32_t)x_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_5() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_5.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_5_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_5.word = x)


//ISP_STATS_AF_ZONE_Y_END_OFFSET_5


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_5_y_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_5.ISP_STATS_AF_ZONE_Y_END_OFFSET_5_ts.y_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_5_y_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_5.ISP_STATS_AF_ZONE_Y_END_OFFSET_5_ts.y_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_5(y_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_5.word = (uint32_t)y_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_5() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_5.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_5_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_5.word = x)


//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_5


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_5_acc_value_focus() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_5.ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_5_ts.acc_value_focus
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_5() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_5.word


//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_5


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_5_acc_value_light_change() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_5.ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_5_ts.acc_value_light_change
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_5() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_5.word


//ISP_STATS_AF_ZONE_X_START_OFFSET_6


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_6_x_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_6.ISP_STATS_AF_ZONE_X_START_OFFSET_6_ts.x_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_6_x_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_6.ISP_STATS_AF_ZONE_X_START_OFFSET_6_ts.x_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_6(x_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_6.word = (uint32_t)x_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_6() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_6.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_6_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_6.word = x)


//ISP_STATS_AF_ZONE_Y_START_OFFSET_6


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_6_y_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_6.ISP_STATS_AF_ZONE_Y_START_OFFSET_6_ts.y_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_6_y_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_6.ISP_STATS_AF_ZONE_Y_START_OFFSET_6_ts.y_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_6(y_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_6.word = (uint32_t)y_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_6() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_6.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_6_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_6.word = x)


//ISP_STATS_AF_ZONE_X_END_OFFSET_6


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_6_x_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_6.ISP_STATS_AF_ZONE_X_END_OFFSET_6_ts.x_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_6_x_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_6.ISP_STATS_AF_ZONE_X_END_OFFSET_6_ts.x_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_6(x_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_6.word = (uint32_t)x_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_6() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_6.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_6_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_6.word = x)


//ISP_STATS_AF_ZONE_Y_END_OFFSET_6


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_6_y_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_6.ISP_STATS_AF_ZONE_Y_END_OFFSET_6_ts.y_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_6_y_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_6.ISP_STATS_AF_ZONE_Y_END_OFFSET_6_ts.y_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_6(y_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_6.word = (uint32_t)y_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_6() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_6.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_6_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_6.word = x)


//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_6


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_6_acc_value_focus() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_6.ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_6_ts.acc_value_focus
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_6() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_6.word


//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_6


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_6_acc_value_light_change() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_6.ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_6_ts.acc_value_light_change
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_6() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_6.word


//ISP_STATS_AF_ZONE_X_START_OFFSET_7


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_7_x_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_7.ISP_STATS_AF_ZONE_X_START_OFFSET_7_ts.x_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_7_x_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_7.ISP_STATS_AF_ZONE_X_START_OFFSET_7_ts.x_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_7(x_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_7.word = (uint32_t)x_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_7() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_7.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_7_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_7.word = x)


//ISP_STATS_AF_ZONE_Y_START_OFFSET_7


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_7_y_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_7.ISP_STATS_AF_ZONE_Y_START_OFFSET_7_ts.y_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_7_y_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_7.ISP_STATS_AF_ZONE_Y_START_OFFSET_7_ts.y_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_7(y_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_7.word = (uint32_t)y_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_7() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_7.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_7_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_7.word = x)


//ISP_STATS_AF_ZONE_X_END_OFFSET_7


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_7_x_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_7.ISP_STATS_AF_ZONE_X_END_OFFSET_7_ts.x_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_7_x_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_7.ISP_STATS_AF_ZONE_X_END_OFFSET_7_ts.x_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_7(x_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_7.word = (uint32_t)x_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_7() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_7.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_7_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_7.word = x)


//ISP_STATS_AF_ZONE_Y_END_OFFSET_7


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_7_y_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_7.ISP_STATS_AF_ZONE_Y_END_OFFSET_7_ts.y_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_7_y_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_7.ISP_STATS_AF_ZONE_Y_END_OFFSET_7_ts.y_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_7(y_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_7.word = (uint32_t)y_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_7() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_7.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_7_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_7.word = x)


//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_7


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_7_acc_value_focus() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_7.ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_7_ts.acc_value_focus
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_7() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_7.word


//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_7


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_7_acc_value_light_change() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_7.ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_7_ts.acc_value_light_change
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_7() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_7.word


//ISP_STATS_AF_ZONE_X_START_OFFSET_8


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_8_x_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_8.ISP_STATS_AF_ZONE_X_START_OFFSET_8_ts.x_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_8_x_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_8.ISP_STATS_AF_ZONE_X_START_OFFSET_8_ts.x_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_8(x_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_8.word = (uint32_t)x_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_8() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_8.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_8_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_8.word = x)


//ISP_STATS_AF_ZONE_Y_START_OFFSET_8


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_8_y_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_8.ISP_STATS_AF_ZONE_Y_START_OFFSET_8_ts.y_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_8_y_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_8.ISP_STATS_AF_ZONE_Y_START_OFFSET_8_ts.y_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_8(y_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_8.word = (uint32_t)y_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_8() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_8.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_8_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_8.word = x)


//ISP_STATS_AF_ZONE_X_END_OFFSET_8


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_8_x_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_8.ISP_STATS_AF_ZONE_X_END_OFFSET_8_ts.x_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_8_x_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_8.ISP_STATS_AF_ZONE_X_END_OFFSET_8_ts.x_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_8(x_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_8.word = (uint32_t)x_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_8() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_8.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_8_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_8.word = x)


//ISP_STATS_AF_ZONE_Y_END_OFFSET_8


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_8_y_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_8.ISP_STATS_AF_ZONE_Y_END_OFFSET_8_ts.y_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_8_y_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_8.ISP_STATS_AF_ZONE_Y_END_OFFSET_8_ts.y_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_8(y_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_8.word = (uint32_t)y_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_8() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_8.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_8_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_8.word = x)


//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_8


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_8_acc_value_focus() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_8.ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_8_ts.acc_value_focus
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_8() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_8.word


//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_8


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_8_acc_value_light_change() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_8.ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_8_ts.acc_value_light_change
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_8() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_8.word


//ISP_STATS_AF_ZONE_X_START_OFFSET_9


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_9_x_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_9.ISP_STATS_AF_ZONE_X_START_OFFSET_9_ts.x_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_9_x_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_9.ISP_STATS_AF_ZONE_X_START_OFFSET_9_ts.x_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_9(x_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_9.word = (uint32_t)x_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_9() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_9.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_START_OFFSET_9_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_START_OFFSET_9.word = x)


//ISP_STATS_AF_ZONE_Y_START_OFFSET_9


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_9_y_start() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_9.ISP_STATS_AF_ZONE_Y_START_OFFSET_9_ts.y_start
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_9_y_start(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_9.ISP_STATS_AF_ZONE_Y_START_OFFSET_9_ts.y_start = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_9(y_start) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_9.word = (uint32_t)y_start<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_9() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_9.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_START_OFFSET_9_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_START_OFFSET_9.word = x)


//ISP_STATS_AF_ZONE_X_END_OFFSET_9


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_9_x_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_9.ISP_STATS_AF_ZONE_X_END_OFFSET_9_ts.x_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_9_x_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_9.ISP_STATS_AF_ZONE_X_END_OFFSET_9_ts.x_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_9(x_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_9.word = (uint32_t)x_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_9() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_9.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_X_END_OFFSET_9_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_X_END_OFFSET_9.word = x)


//ISP_STATS_AF_ZONE_Y_END_OFFSET_9


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_9_y_end() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_9.ISP_STATS_AF_ZONE_Y_END_OFFSET_9_ts.y_end
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_9_y_end(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_9.ISP_STATS_AF_ZONE_Y_END_OFFSET_9_ts.y_end = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_9(y_end) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_9.word = (uint32_t)y_end<<0)
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_9() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_9.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_ZONE_Y_END_OFFSET_9_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_Y_END_OFFSET_9.word = x)


//ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_9


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_9_acc_value_focus() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_9.ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_9_ts.acc_value_focus
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_9() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_FOCUS_9.word


//ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_9


#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_9_acc_value_light_change() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_9.ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_9_ts.acc_value_light_change
#define Get_ISP_STATS_AF_ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_9() p_ISP_STATS_AF_IP->ISP_STATS_AF_ZONE_ACC_VALUE_LIGHT_CHANGE_9.word


//ISP_STATS_AF_DFV


#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_enable() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_enable
#define Is_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_enable_DISABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_enable__DISABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable
#define Is_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_enable_ENABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_enable__ENABLE() (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable


#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_0_interrupt_ctrl() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_0_interrupt_ctrl
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_0_interrupt_ctrl(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_0_interrupt_ctrl = x)


#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_1_interrupt_ctrl() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_1_interrupt_ctrl
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_1_interrupt_ctrl(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_1_interrupt_ctrl = x)


#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_2_interrupt_ctrl() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_2_interrupt_ctrl
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_2_interrupt_ctrl(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_2_interrupt_ctrl = x)


#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_3_interrupt_ctrl() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_3_interrupt_ctrl
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_3_interrupt_ctrl(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_3_interrupt_ctrl = x)


#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_4_interrupt_ctrl() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_4_interrupt_ctrl
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_4_interrupt_ctrl(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_4_interrupt_ctrl = x)


#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_5_interrupt_ctrl() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_5_interrupt_ctrl
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_5_interrupt_ctrl(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_5_interrupt_ctrl = x)


#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_6_interrupt_ctrl() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_6_interrupt_ctrl
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_6_interrupt_ctrl(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_6_interrupt_ctrl = x)


#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_7_interrupt_ctrl() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_7_interrupt_ctrl
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_7_interrupt_ctrl(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_7_interrupt_ctrl = x)


#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_8_interrupt_ctrl() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_8_interrupt_ctrl
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_8_interrupt_ctrl(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_8_interrupt_ctrl = x)


#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_9_interrupt_ctrl() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_9_interrupt_ctrl
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_dfv_9_interrupt_ctrl(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.ISP_STATS_AF_DFV_ts.dfv_9_interrupt_ctrl = x)
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV(dfv_enable,dfv_0_interrupt_ctrl,dfv_1_interrupt_ctrl,dfv_2_interrupt_ctrl,dfv_3_interrupt_ctrl,dfv_4_interrupt_ctrl,dfv_5_interrupt_ctrl,dfv_6_interrupt_ctrl,dfv_7_interrupt_ctrl,dfv_8_interrupt_ctrl,dfv_9_interrupt_ctrl) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.word = (uint16_t)dfv_enable<<0 | (uint16_t)dfv_0_interrupt_ctrl<<1 | (uint16_t)dfv_1_interrupt_ctrl<<2 | (uint16_t)dfv_2_interrupt_ctrl<<3 | (uint16_t)dfv_3_interrupt_ctrl<<4 | (uint16_t)dfv_4_interrupt_ctrl<<5 | (uint16_t)dfv_5_interrupt_ctrl<<6 | (uint16_t)dfv_6_interrupt_ctrl<<7 | (uint16_t)dfv_7_interrupt_ctrl<<8 | (uint16_t)dfv_8_interrupt_ctrl<<9 | (uint16_t)dfv_9_interrupt_ctrl<<10)
#define Get_ISP_STATS_AF_ISP_STATS_AF_DFV() p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.word
#define Set_ISP_STATS_AF_ISP_STATS_AF_DFV_word(x) (p_ISP_STATS_AF_IP->ISP_STATS_AF_DFV.word = x)

//ISP_STATS_SKINTONE_ENABLE
/*Description: skin enable register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* 
        this bit is used to enable the block operations*/
    }ISP_STATS_SKINTONE_ENABLE_ts;

}ISP_STATS_SKINTONE_ENABLE_tu;



//ISP_STATS_SKINTONE_ZONE_VERT_OFFSET
/*Description: Defines the Vertical offset of the zones, in pixels.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_y_offset;
        /* 
        zoneVerticalOffset. Defines the vertical offset to the start of the zones e.g. if set to 5, then 5 lines will be skipped before the zones start.*/
    }ISP_STATS_SKINTONE_ZONE_VERT_OFFSET_ts;

}ISP_STATS_SKINTONE_ZONE_VERT_OFFSET_tu;



//ISP_STATS_SKINTONE_ZONE_HOR_OFFSET
/*Description: Defines the horizontall offset of the zones, in pixels.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_x_offset;
        /* 
        zoneHorizontalOffset. Defines the horizontal offset to the start of the zones e.g. if set to 3, then 3 pixels will be skipped before the zones start.*/
    }ISP_STATS_SKINTONE_ZONE_HOR_OFFSET_ts;

}ISP_STATS_SKINTONE_ZONE_HOR_OFFSET_tu;



//ISP_STATS_SKINTONE_ZONE_VERT_SIZE
/*Description: Defines the Vertical size of the zones, in pixels.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_y_size;
        /* 
        zoneVerticalSize. Defines the vertical size of the zones, in lines.
        vertical size must be even number.However, if vertical size is programmed with odd number, it will be considered as a minus 1 of the odd number.
        It must be programmed above 2 value.
        e.g; If vertical size =9, it will be considered as a 8.(9-1)*/
    }ISP_STATS_SKINTONE_ZONE_VERT_SIZE_ts;

}ISP_STATS_SKINTONE_ZONE_VERT_SIZE_tu;



//ISP_STATS_SKINTONE_ZONE_HOR_SIZE
/*Description: Defines the horizontal/Vertical size of the zones, in pixels.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t zone_x_size;
        /* 
        zoneHorizontalSize. Defines the horizontal size of the zones, in pixels.
        horizontal size must be even number.However, if horizontal size is programmed with odd number, it will be considered as a minus 1 of the odd number.
        It must be programmed above 1 value.
        e.g: If zoneHorizontalSize = 5.
        it will be considered as 4(5 - 1).*/
    }ISP_STATS_SKINTONE_ZONE_HOR_SIZE_ts;

}ISP_STATS_SKINTONE_ZONE_HOR_SIZE_tu;



//ISP_STATS_SKINTONE_THRESHOLD
/*Description: skin threshold for identifying skin pixel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t skinTresh;
        /* 
        skin threshold for identifying skin pixel*/
    }ISP_STATS_SKINTONE_THRESHOLD_ts;

}ISP_STATS_SKINTONE_THRESHOLD_tu;



//ISP_STATS_SKINTONE_PATTERN
/*Description: patternl register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t pattern :2;
        /* 
        Input bayer Pattern combination (pixel colour order)*/
    }ISP_STATS_SKINTONE_PATTERN_ts;

}ISP_STATS_SKINTONE_PATTERN_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_0
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_0_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_0_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_1
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_1_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_1_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_2
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_2_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_2_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_3
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_3_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_3_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_4
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_4_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_4_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_5
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_5_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_5_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_6
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_6_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_6_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_7
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_7_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_7_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_8
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_8_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_8_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_9
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_9_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_9_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_10
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_10_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_10_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_11
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_11_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_11_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_12
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_12_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_12_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_13
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_13_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_13_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_14
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_14_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_14_tu;



//ISP_STATS_SKINTONE_ACC_SKIN_15
/*Description: Total number of pixels within a block with G values > Saturation threshold.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t acc_skin :26;
    }ISP_STATS_SKINTONE_ACC_SKIN_15_ts;

}ISP_STATS_SKINTONE_ACC_SKIN_15_tu;



//ISP_STATS_SKINTONE_STATUS
/*Description: skin enable register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t zones_error :1;
        /* 
        ndicates an invalid line has been encountered. Zones should always be centred in the active pixels region only.*/
    }ISP_STATS_SKINTONE_STATUS_ts;

}ISP_STATS_SKINTONE_STATUS_tu;



//ISP_STATS_SKINTONE_DFV
/*Description: Design For Verificationregister.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* 
        this bit is used to enable the pulsed interrupts*/
        uint8_t dfv_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
    }ISP_STATS_SKINTONE_DFV_ts;

}ISP_STATS_SKINTONE_DFV_tu;

typedef struct
{
    ISP_STATS_SKINTONE_ENABLE_tu ISP_STATS_SKINTONE_ENABLE;
    ISP_STATS_SKINTONE_ZONE_VERT_OFFSET_tu ISP_STATS_SKINTONE_ZONE_VERT_OFFSET;
    ISP_STATS_SKINTONE_ZONE_HOR_OFFSET_tu ISP_STATS_SKINTONE_ZONE_HOR_OFFSET;
    ISP_STATS_SKINTONE_ZONE_VERT_SIZE_tu ISP_STATS_SKINTONE_ZONE_VERT_SIZE;
    ISP_STATS_SKINTONE_ZONE_HOR_SIZE_tu ISP_STATS_SKINTONE_ZONE_HOR_SIZE;
    ISP_STATS_SKINTONE_THRESHOLD_tu ISP_STATS_SKINTONE_THRESHOLD;
    ISP_STATS_SKINTONE_PATTERN_tu ISP_STATS_SKINTONE_PATTERN;
    ISP_STATS_SKINTONE_ACC_SKIN_0_tu ISP_STATS_SKINTONE_ACC_SKIN_0;
    ISP_STATS_SKINTONE_ACC_SKIN_1_tu ISP_STATS_SKINTONE_ACC_SKIN_1;
    ISP_STATS_SKINTONE_ACC_SKIN_2_tu ISP_STATS_SKINTONE_ACC_SKIN_2;
    ISP_STATS_SKINTONE_ACC_SKIN_3_tu ISP_STATS_SKINTONE_ACC_SKIN_3;
    ISP_STATS_SKINTONE_ACC_SKIN_4_tu ISP_STATS_SKINTONE_ACC_SKIN_4;
    ISP_STATS_SKINTONE_ACC_SKIN_5_tu ISP_STATS_SKINTONE_ACC_SKIN_5;
    ISP_STATS_SKINTONE_ACC_SKIN_6_tu ISP_STATS_SKINTONE_ACC_SKIN_6;
    ISP_STATS_SKINTONE_ACC_SKIN_7_tu ISP_STATS_SKINTONE_ACC_SKIN_7;
    ISP_STATS_SKINTONE_ACC_SKIN_8_tu ISP_STATS_SKINTONE_ACC_SKIN_8;
    ISP_STATS_SKINTONE_ACC_SKIN_9_tu ISP_STATS_SKINTONE_ACC_SKIN_9;
    ISP_STATS_SKINTONE_ACC_SKIN_10_tu ISP_STATS_SKINTONE_ACC_SKIN_10;
    ISP_STATS_SKINTONE_ACC_SKIN_11_tu ISP_STATS_SKINTONE_ACC_SKIN_11;
    ISP_STATS_SKINTONE_ACC_SKIN_12_tu ISP_STATS_SKINTONE_ACC_SKIN_12;
    ISP_STATS_SKINTONE_ACC_SKIN_13_tu ISP_STATS_SKINTONE_ACC_SKIN_13;
    ISP_STATS_SKINTONE_ACC_SKIN_14_tu ISP_STATS_SKINTONE_ACC_SKIN_14;
    ISP_STATS_SKINTONE_ACC_SKIN_15_tu ISP_STATS_SKINTONE_ACC_SKIN_15;
    ISP_STATS_SKINTONE_STATUS_tu ISP_STATS_SKINTONE_STATUS;
    ISP_STATS_SKINTONE_DFV_tu ISP_STATS_SKINTONE_DFV;
}ISP_STATS_SKINTONE_IP_ts;




//ISP_STATS_SKINTONE_ENABLE


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ENABLE_enable() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ENABLE.ISP_STATS_SKINTONE_ENABLE_ts.enable
#define Is_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ENABLE_enable_DISABLE() (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ENABLE.ISP_STATS_SKINTONE_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ENABLE_enable__DISABLE() (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ENABLE.ISP_STATS_SKINTONE_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable
#define Is_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ENABLE_enable_ENABLE() (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ENABLE.ISP_STATS_SKINTONE_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ENABLE_enable__ENABLE() (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ENABLE.ISP_STATS_SKINTONE_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ENABLE(enable) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ENABLE.word = (uint32_t)enable<<0)
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ENABLE() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ENABLE.word
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ENABLE_word(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ENABLE.word = x)


//ISP_STATS_SKINTONE_ZONE_VERT_OFFSET


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_VERT_OFFSET_zone_y_offset() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_VERT_OFFSET.ISP_STATS_SKINTONE_ZONE_VERT_OFFSET_ts.zone_y_offset
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_VERT_OFFSET_zone_y_offset(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_VERT_OFFSET.ISP_STATS_SKINTONE_ZONE_VERT_OFFSET_ts.zone_y_offset = x)
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_VERT_OFFSET(zone_y_offset) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_VERT_OFFSET.word = (uint32_t)zone_y_offset<<0)
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_VERT_OFFSET() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_VERT_OFFSET.word
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_VERT_OFFSET_word(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_VERT_OFFSET.word = x)


//ISP_STATS_SKINTONE_ZONE_HOR_OFFSET


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_HOR_OFFSET_zone_x_offset() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_HOR_OFFSET.ISP_STATS_SKINTONE_ZONE_HOR_OFFSET_ts.zone_x_offset
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_HOR_OFFSET_zone_x_offset(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_HOR_OFFSET.ISP_STATS_SKINTONE_ZONE_HOR_OFFSET_ts.zone_x_offset = x)
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_HOR_OFFSET(zone_x_offset) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_HOR_OFFSET.word = (uint32_t)zone_x_offset<<0)
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_HOR_OFFSET() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_HOR_OFFSET.word
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_HOR_OFFSET_word(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_HOR_OFFSET.word = x)


//ISP_STATS_SKINTONE_ZONE_VERT_SIZE


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_VERT_SIZE_zone_y_size() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_VERT_SIZE.ISP_STATS_SKINTONE_ZONE_VERT_SIZE_ts.zone_y_size
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_VERT_SIZE_zone_y_size(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_VERT_SIZE.ISP_STATS_SKINTONE_ZONE_VERT_SIZE_ts.zone_y_size = x)
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_VERT_SIZE(zone_y_size) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_VERT_SIZE.word = (uint32_t)zone_y_size<<0)
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_VERT_SIZE() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_VERT_SIZE.word
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_VERT_SIZE_word(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_VERT_SIZE.word = x)


//ISP_STATS_SKINTONE_ZONE_HOR_SIZE


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_HOR_SIZE_zone_x_size() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_HOR_SIZE.ISP_STATS_SKINTONE_ZONE_HOR_SIZE_ts.zone_x_size
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_HOR_SIZE_zone_x_size(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_HOR_SIZE.ISP_STATS_SKINTONE_ZONE_HOR_SIZE_ts.zone_x_size = x)
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_HOR_SIZE(zone_x_size) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_HOR_SIZE.word = (uint32_t)zone_x_size<<0)
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_HOR_SIZE() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_HOR_SIZE.word
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ZONE_HOR_SIZE_word(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ZONE_HOR_SIZE.word = x)


//ISP_STATS_SKINTONE_THRESHOLD


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_THRESHOLD_skinTresh() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_THRESHOLD.ISP_STATS_SKINTONE_THRESHOLD_ts.skinTresh
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_THRESHOLD_skinTresh(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_THRESHOLD.ISP_STATS_SKINTONE_THRESHOLD_ts.skinTresh = x)
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_THRESHOLD(skinTresh) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_THRESHOLD.word = (uint32_t)skinTresh<<0)
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_THRESHOLD() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_THRESHOLD.word
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_THRESHOLD_word(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_THRESHOLD.word = x)


//ISP_STATS_SKINTONE_PATTERN


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_PATTERN_pattern() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_PATTERN.ISP_STATS_SKINTONE_PATTERN_ts.pattern
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_PATTERN_pattern(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_PATTERN.ISP_STATS_SKINTONE_PATTERN_ts.pattern = x)
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_PATTERN(pattern) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_PATTERN.word = (uint32_t)pattern<<0)
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_PATTERN() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_PATTERN.word
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_PATTERN_word(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_PATTERN.word = x)


//ISP_STATS_SKINTONE_ACC_SKIN_0


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_0_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_0.ISP_STATS_SKINTONE_ACC_SKIN_0_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_0() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_0.word


//ISP_STATS_SKINTONE_ACC_SKIN_1


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_1_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_1.ISP_STATS_SKINTONE_ACC_SKIN_1_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_1() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_1.word


//ISP_STATS_SKINTONE_ACC_SKIN_2


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_2_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_2.ISP_STATS_SKINTONE_ACC_SKIN_2_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_2() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_2.word


//ISP_STATS_SKINTONE_ACC_SKIN_3


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_3_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_3.ISP_STATS_SKINTONE_ACC_SKIN_3_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_3() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_3.word


//ISP_STATS_SKINTONE_ACC_SKIN_4


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_4_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_4.ISP_STATS_SKINTONE_ACC_SKIN_4_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_4() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_4.word


//ISP_STATS_SKINTONE_ACC_SKIN_5


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_5_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_5.ISP_STATS_SKINTONE_ACC_SKIN_5_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_5() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_5.word


//ISP_STATS_SKINTONE_ACC_SKIN_6


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_6_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_6.ISP_STATS_SKINTONE_ACC_SKIN_6_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_6() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_6.word


//ISP_STATS_SKINTONE_ACC_SKIN_7


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_7_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_7.ISP_STATS_SKINTONE_ACC_SKIN_7_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_7() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_7.word


//ISP_STATS_SKINTONE_ACC_SKIN_8


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_8_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_8.ISP_STATS_SKINTONE_ACC_SKIN_8_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_8() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_8.word


//ISP_STATS_SKINTONE_ACC_SKIN_9


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_9_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_9.ISP_STATS_SKINTONE_ACC_SKIN_9_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_9() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_9.word


//ISP_STATS_SKINTONE_ACC_SKIN_10


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_10_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_10.ISP_STATS_SKINTONE_ACC_SKIN_10_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_10() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_10.word


//ISP_STATS_SKINTONE_ACC_SKIN_11


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_11_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_11.ISP_STATS_SKINTONE_ACC_SKIN_11_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_11() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_11.word


//ISP_STATS_SKINTONE_ACC_SKIN_12


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_12_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_12.ISP_STATS_SKINTONE_ACC_SKIN_12_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_12() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_12.word


//ISP_STATS_SKINTONE_ACC_SKIN_13


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_13_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_13.ISP_STATS_SKINTONE_ACC_SKIN_13_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_13() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_13.word


//ISP_STATS_SKINTONE_ACC_SKIN_14


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_14_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_14.ISP_STATS_SKINTONE_ACC_SKIN_14_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_14() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_14.word


//ISP_STATS_SKINTONE_ACC_SKIN_15


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_15_acc_skin() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_15.ISP_STATS_SKINTONE_ACC_SKIN_15_ts.acc_skin
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_ACC_SKIN_15() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_ACC_SKIN_15.word


//ISP_STATS_SKINTONE_STATUS


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_STATUS_zones_error() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_STATUS.ISP_STATS_SKINTONE_STATUS_ts.zones_error
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_STATUS() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_STATUS.word


//ISP_STATS_SKINTONE_DFV


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_DFV_dfv_enable() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_DFV.ISP_STATS_SKINTONE_DFV_ts.dfv_enable
#define Is_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_DFV_dfv_enable_DISABLE() (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_DFV.ISP_STATS_SKINTONE_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_DFV_dfv_enable__DISABLE() (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_DFV.ISP_STATS_SKINTONE_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable
#define Is_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_DFV_dfv_enable_ENABLE() (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_DFV.ISP_STATS_SKINTONE_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_DFV_dfv_enable__ENABLE() (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_DFV.ISP_STATS_SKINTONE_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable


#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_DFV_dfv_interrupt_ctrl() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_DFV.ISP_STATS_SKINTONE_DFV_ts.dfv_interrupt_ctrl
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_DFV_dfv_interrupt_ctrl(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_DFV.ISP_STATS_SKINTONE_DFV_ts.dfv_interrupt_ctrl = x)
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_DFV(dfv_enable,dfv_interrupt_ctrl) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_DFV.word = (uint8_t)dfv_enable<<0 | (uint8_t)dfv_interrupt_ctrl<<1)
#define Get_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_DFV() p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_DFV.word
#define Set_ISP_STATS_SKINTONE_ISP_STATS_SKINTONE_DFV_word(x) (p_ISP_STATS_SKINTONE_IP->ISP_STATS_SKINTONE_DFV.word = x)

//ISP_ITPOINT_DMCE_IN_ENABLE
/*Description: itpoint Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable itpoint module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* itpoint functions normally*/
    }ISP_ITPOINT_DMCE_IN_ENABLE_ts;

}ISP_ITPOINT_DMCE_IN_ENABLE_tu;



//ISP_ITPOINT_DMCE_IN_PIX_POS
/*Description: itpoint pixel position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_pos :13;
        /* 
        position of pixel for interrupt generation*/
    }ISP_ITPOINT_DMCE_IN_PIX_POS_ts;

}ISP_ITPOINT_DMCE_IN_PIX_POS_tu;



//ISP_ITPOINT_DMCE_IN_LINE_POS
/*Description: itpoint line position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_pos :13;
        /* 
        position of linefor interrupt generation*/
    }ISP_ITPOINT_DMCE_IN_LINE_POS_ts;

}ISP_ITPOINT_DMCE_IN_LINE_POS_tu;



//ISP_ITPOINT_DMCE_IN_PIX_CNT
/*Description: current position of pixel for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_cnt :13;
        /* 
        current x position of pixel for the frame.For (X,Y) where X is image width, Y is image height, image first pix postion will be 1, last line position will be X. Programming X= 0 is invalid*/
    }ISP_ITPOINT_DMCE_IN_PIX_CNT_ts;

}ISP_ITPOINT_DMCE_IN_PIX_CNT_tu;



//ISP_ITPOINT_DMCE_IN_LINE_CNT
/*Description: current position of line for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_cnt :13;
        /* 
        current y position of linefor the frame.For (X,Y) where X is image width, Y is image height, image first line position will be 1, last line position will be Y. Programming Y = 0 is invalid.*/
    }ISP_ITPOINT_DMCE_IN_LINE_CNT_ts;

}ISP_ITPOINT_DMCE_IN_LINE_CNT_tu;



//ISP_ITPOINT_DMCE_IN_FRAME_CNT
/*Description: itpoint frame count
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t frame_cnt;
        /* 
        frame counter for counting number of frame being passed through this module.*/
    }ISP_ITPOINT_DMCE_IN_FRAME_CNT_ts;

}ISP_ITPOINT_DMCE_IN_FRAME_CNT_tu;



//ISP_ITPOINT_DMCE_IN_DFV
/*Description: itpointDesign for Verification register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* 
        this bit is used to enable the pulsed interrupts*/
        uint8_t dfv_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
    }ISP_ITPOINT_DMCE_IN_DFV_ts;

}ISP_ITPOINT_DMCE_IN_DFV_tu;

typedef struct
{
    ISP_ITPOINT_DMCE_IN_ENABLE_tu ISP_ITPOINT_DMCE_IN_ENABLE;
    ISP_ITPOINT_DMCE_IN_PIX_POS_tu ISP_ITPOINT_DMCE_IN_PIX_POS;
    ISP_ITPOINT_DMCE_IN_LINE_POS_tu ISP_ITPOINT_DMCE_IN_LINE_POS;
    ISP_ITPOINT_DMCE_IN_PIX_CNT_tu ISP_ITPOINT_DMCE_IN_PIX_CNT;
    ISP_ITPOINT_DMCE_IN_LINE_CNT_tu ISP_ITPOINT_DMCE_IN_LINE_CNT;
    ISP_ITPOINT_DMCE_IN_FRAME_CNT_tu ISP_ITPOINT_DMCE_IN_FRAME_CNT;
    ISP_ITPOINT_DMCE_IN_DFV_tu ISP_ITPOINT_DMCE_IN_DFV;
}ISP_ITPOINT_DMCE_IN_IP_ts;




//ISP_ITPOINT_DMCE_IN_ENABLE


#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE_enable() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.ISP_ITPOINT_DMCE_IN_ENABLE_ts.enable
#define Is_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE_enable_DISABLE() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.ISP_ITPOINT_DMCE_IN_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE_enable__DISABLE() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.ISP_ITPOINT_DMCE_IN_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable itpoint module
#define Is_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE_enable_ENABLE() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.ISP_ITPOINT_DMCE_IN_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE_enable__ENABLE() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.ISP_ITPOINT_DMCE_IN_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable itpoint module


#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE_soft_reset() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.ISP_ITPOINT_DMCE_IN_ENABLE_ts.soft_reset
#define Is_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE_soft_reset_B_0x0() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.ISP_ITPOINT_DMCE_IN_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE_soft_reset__B_0x0() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.ISP_ITPOINT_DMCE_IN_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //itpoint functions normally
#define Is_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE_soft_reset_B_0x1() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.ISP_ITPOINT_DMCE_IN_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE_soft_reset__B_0x1() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.ISP_ITPOINT_DMCE_IN_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //All outputs are assigned reset value (And, as soon as soft_reset is again made 0, it switches to normal functional mode waiting for start of frame)
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE(enable,soft_reset) (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.word
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_ENABLE_word(x) (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_ENABLE.word = x)


//ISP_ITPOINT_DMCE_IN_PIX_POS


#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_PIX_POS_pix_pos() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_PIX_POS.ISP_ITPOINT_DMCE_IN_PIX_POS_ts.pix_pos
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_PIX_POS_pix_pos(x) (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_PIX_POS.ISP_ITPOINT_DMCE_IN_PIX_POS_ts.pix_pos = x)
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_PIX_POS(pix_pos) (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_PIX_POS.word = (uint32_t)pix_pos<<0)
#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_PIX_POS() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_PIX_POS.word
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_PIX_POS_word(x) (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_PIX_POS.word = x)


//ISP_ITPOINT_DMCE_IN_LINE_POS


#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_LINE_POS_line_pos() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_LINE_POS.ISP_ITPOINT_DMCE_IN_LINE_POS_ts.line_pos
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_LINE_POS_line_pos(x) (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_LINE_POS.ISP_ITPOINT_DMCE_IN_LINE_POS_ts.line_pos = x)
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_LINE_POS(line_pos) (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_LINE_POS.word = (uint32_t)line_pos<<0)
#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_LINE_POS() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_LINE_POS.word
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_LINE_POS_word(x) (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_LINE_POS.word = x)


//ISP_ITPOINT_DMCE_IN_PIX_CNT


#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_PIX_CNT_pix_cnt() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_PIX_CNT.ISP_ITPOINT_DMCE_IN_PIX_CNT_ts.pix_cnt
#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_PIX_CNT() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_PIX_CNT.word


//ISP_ITPOINT_DMCE_IN_LINE_CNT


#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_LINE_CNT_line_cnt() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_LINE_CNT.ISP_ITPOINT_DMCE_IN_LINE_CNT_ts.line_cnt
#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_LINE_CNT() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_LINE_CNT.word


//ISP_ITPOINT_DMCE_IN_FRAME_CNT


#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_FRAME_CNT_frame_cnt() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_FRAME_CNT.ISP_ITPOINT_DMCE_IN_FRAME_CNT_ts.frame_cnt
#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_FRAME_CNT() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_FRAME_CNT.word


//ISP_ITPOINT_DMCE_IN_DFV


#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_DFV_dfv_enable() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_DFV.ISP_ITPOINT_DMCE_IN_DFV_ts.dfv_enable
#define Is_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_DFV_dfv_enable_DISABLE() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_DFV.ISP_ITPOINT_DMCE_IN_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_DFV_dfv_enable__DISABLE() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_DFV.ISP_ITPOINT_DMCE_IN_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable
#define Is_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_DFV_dfv_enable_ENABLE() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_DFV.ISP_ITPOINT_DMCE_IN_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_DFV_dfv_enable__ENABLE() (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_DFV.ISP_ITPOINT_DMCE_IN_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable


#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_DFV_dfv_interrupt_ctrl() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_DFV.ISP_ITPOINT_DMCE_IN_DFV_ts.dfv_interrupt_ctrl
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_DFV_dfv_interrupt_ctrl(x) (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_DFV.ISP_ITPOINT_DMCE_IN_DFV_ts.dfv_interrupt_ctrl = x)
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_DFV(dfv_enable,dfv_interrupt_ctrl) (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_DFV.word = (uint8_t)dfv_enable<<0 | (uint8_t)dfv_interrupt_ctrl<<1)
#define Get_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_DFV() p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_DFV.word
#define Set_ISP_ITPOINT_DMCE_IN_ISP_ITPOINT_DMCE_IN_DFV_word(x) (p_ISP_ITPOINT_DMCE_IN_IP->ISP_ITPOINT_DMCE_IN_DFV.word = x)

//ISP_ITPOINT_DMCE_OUT_ENABLE
/*Description: itpoint Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable itpoint module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* itpoint functions normally*/
    }ISP_ITPOINT_DMCE_OUT_ENABLE_ts;

}ISP_ITPOINT_DMCE_OUT_ENABLE_tu;



//ISP_ITPOINT_DMCE_OUT_PIX_POS
/*Description: itpoint pixel position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_pos :13;
        /* 
        position of pixel for interrupt generation*/
    }ISP_ITPOINT_DMCE_OUT_PIX_POS_ts;

}ISP_ITPOINT_DMCE_OUT_PIX_POS_tu;



//ISP_ITPOINT_DMCE_OUT_LINE_POS
/*Description: itpoint line position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_pos :13;
        /* 
        position of linefor interrupt generation*/
    }ISP_ITPOINT_DMCE_OUT_LINE_POS_ts;

}ISP_ITPOINT_DMCE_OUT_LINE_POS_tu;



//ISP_ITPOINT_DMCE_OUT_PIX_CNT
/*Description: current position of pixel for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_cnt :13;
        /* 
        current x position of pixel for the frame.For (X,Y) where X is image width, Y is image height, image first pix postion will be 1, last line position will be X. Programming X= 0 is invalid*/
    }ISP_ITPOINT_DMCE_OUT_PIX_CNT_ts;

}ISP_ITPOINT_DMCE_OUT_PIX_CNT_tu;



//ISP_ITPOINT_DMCE_OUT_LINE_CNT
/*Description: current position of line for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_cnt :13;
        /* 
        current y position of linefor the frame.For (X,Y) where X is image width, Y is image height, image first line position will be 1, last line position will be Y. Programming Y = 0 is invalid.*/
    }ISP_ITPOINT_DMCE_OUT_LINE_CNT_ts;

}ISP_ITPOINT_DMCE_OUT_LINE_CNT_tu;



//ISP_ITPOINT_DMCE_OUT_FRAME_CNT
/*Description: itpoint frame count
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t frame_cnt;
        /* 
        frame counter for counting number of frame being passed through this module.*/
    }ISP_ITPOINT_DMCE_OUT_FRAME_CNT_ts;

}ISP_ITPOINT_DMCE_OUT_FRAME_CNT_tu;



//ISP_ITPOINT_DMCE_OUT_DFV
/*Description: itpointDesign for Verification register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* 
        this bit is used to enable the pulsed interrupts*/
        uint8_t dfv_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
    }ISP_ITPOINT_DMCE_OUT_DFV_ts;

}ISP_ITPOINT_DMCE_OUT_DFV_tu;

typedef struct
{
    ISP_ITPOINT_DMCE_OUT_ENABLE_tu ISP_ITPOINT_DMCE_OUT_ENABLE;
    ISP_ITPOINT_DMCE_OUT_PIX_POS_tu ISP_ITPOINT_DMCE_OUT_PIX_POS;
    ISP_ITPOINT_DMCE_OUT_LINE_POS_tu ISP_ITPOINT_DMCE_OUT_LINE_POS;
    ISP_ITPOINT_DMCE_OUT_PIX_CNT_tu ISP_ITPOINT_DMCE_OUT_PIX_CNT;
    ISP_ITPOINT_DMCE_OUT_LINE_CNT_tu ISP_ITPOINT_DMCE_OUT_LINE_CNT;
    ISP_ITPOINT_DMCE_OUT_FRAME_CNT_tu ISP_ITPOINT_DMCE_OUT_FRAME_CNT;
    ISP_ITPOINT_DMCE_OUT_DFV_tu ISP_ITPOINT_DMCE_OUT_DFV;
}ISP_ITPOINT_DMCE_OUT_IP_ts;




//ISP_ITPOINT_DMCE_OUT_ENABLE


#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE_enable() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.ISP_ITPOINT_DMCE_OUT_ENABLE_ts.enable
#define Is_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE_enable_DISABLE() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.ISP_ITPOINT_DMCE_OUT_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE_enable__DISABLE() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.ISP_ITPOINT_DMCE_OUT_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable itpoint module
#define Is_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE_enable_ENABLE() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.ISP_ITPOINT_DMCE_OUT_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE_enable__ENABLE() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.ISP_ITPOINT_DMCE_OUT_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable itpoint module


#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE_soft_reset() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.ISP_ITPOINT_DMCE_OUT_ENABLE_ts.soft_reset
#define Is_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE_soft_reset_B_0x0() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.ISP_ITPOINT_DMCE_OUT_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE_soft_reset__B_0x0() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.ISP_ITPOINT_DMCE_OUT_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //itpoint functions normally
#define Is_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE_soft_reset_B_0x1() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.ISP_ITPOINT_DMCE_OUT_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE_soft_reset__B_0x1() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.ISP_ITPOINT_DMCE_OUT_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //All outputs are assigned reset value (And, as soon as soft_reset is again made 0, it switches to normal functional mode waiting for start of frame)
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE(enable,soft_reset) (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.word
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_ENABLE_word(x) (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_ENABLE.word = x)


//ISP_ITPOINT_DMCE_OUT_PIX_POS


#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_PIX_POS_pix_pos() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_PIX_POS.ISP_ITPOINT_DMCE_OUT_PIX_POS_ts.pix_pos
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_PIX_POS_pix_pos(x) (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_PIX_POS.ISP_ITPOINT_DMCE_OUT_PIX_POS_ts.pix_pos = x)
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_PIX_POS(pix_pos) (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_PIX_POS.word = (uint32_t)pix_pos<<0)
#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_PIX_POS() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_PIX_POS.word
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_PIX_POS_word(x) (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_PIX_POS.word = x)


//ISP_ITPOINT_DMCE_OUT_LINE_POS


#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_LINE_POS_line_pos() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_LINE_POS.ISP_ITPOINT_DMCE_OUT_LINE_POS_ts.line_pos
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_LINE_POS_line_pos(x) (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_LINE_POS.ISP_ITPOINT_DMCE_OUT_LINE_POS_ts.line_pos = x)
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_LINE_POS(line_pos) (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_LINE_POS.word = (uint32_t)line_pos<<0)
#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_LINE_POS() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_LINE_POS.word
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_LINE_POS_word(x) (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_LINE_POS.word = x)


//ISP_ITPOINT_DMCE_OUT_PIX_CNT


#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_PIX_CNT_pix_cnt() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_PIX_CNT.ISP_ITPOINT_DMCE_OUT_PIX_CNT_ts.pix_cnt
#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_PIX_CNT() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_PIX_CNT.word


//ISP_ITPOINT_DMCE_OUT_LINE_CNT


#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_LINE_CNT_line_cnt() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_LINE_CNT.ISP_ITPOINT_DMCE_OUT_LINE_CNT_ts.line_cnt
#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_LINE_CNT() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_LINE_CNT.word


//ISP_ITPOINT_DMCE_OUT_FRAME_CNT


#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_FRAME_CNT_frame_cnt() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_FRAME_CNT.ISP_ITPOINT_DMCE_OUT_FRAME_CNT_ts.frame_cnt
#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_FRAME_CNT() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_FRAME_CNT.word


//ISP_ITPOINT_DMCE_OUT_DFV


#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_DFV_dfv_enable() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_DFV.ISP_ITPOINT_DMCE_OUT_DFV_ts.dfv_enable
#define Is_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_DFV_dfv_enable_DISABLE() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_DFV.ISP_ITPOINT_DMCE_OUT_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_DFV_dfv_enable__DISABLE() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_DFV.ISP_ITPOINT_DMCE_OUT_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable
#define Is_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_DFV_dfv_enable_ENABLE() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_DFV.ISP_ITPOINT_DMCE_OUT_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_DFV_dfv_enable__ENABLE() (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_DFV.ISP_ITPOINT_DMCE_OUT_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable


#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_DFV_dfv_interrupt_ctrl() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_DFV.ISP_ITPOINT_DMCE_OUT_DFV_ts.dfv_interrupt_ctrl
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_DFV_dfv_interrupt_ctrl(x) (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_DFV.ISP_ITPOINT_DMCE_OUT_DFV_ts.dfv_interrupt_ctrl = x)
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_DFV(dfv_enable,dfv_interrupt_ctrl) (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_DFV.word = (uint8_t)dfv_enable<<0 | (uint8_t)dfv_interrupt_ctrl<<1)
#define Get_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_DFV() p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_DFV.word
#define Set_ISP_ITPOINT_DMCE_OUT_ISP_ITPOINT_DMCE_OUT_DFV_word(x) (p_ISP_ITPOINT_DMCE_OUT_IP->ISP_ITPOINT_DMCE_OUT_DFV.word = x)

//ISP_ITPOINT_RGB_STORE_ENABLE
/*Description: itpoint Enable Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable itpoint module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* itpoint functions normally*/
    }ISP_ITPOINT_RGB_STORE_ENABLE_ts;

}ISP_ITPOINT_RGB_STORE_ENABLE_tu;



//ISP_ITPOINT_RGB_STORE_PIX_POS
/*Description: itpoint pixel position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_pos :13;
        /* 
        position of pixel for interrupt generation*/
    }ISP_ITPOINT_RGB_STORE_PIX_POS_ts;

}ISP_ITPOINT_RGB_STORE_PIX_POS_tu;



//ISP_ITPOINT_RGB_STORE_LINE_POS
/*Description: itpoint line position for interrupt point
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_pos :13;
        /* 
        position of linefor interrupt generation*/
    }ISP_ITPOINT_RGB_STORE_LINE_POS_ts;

}ISP_ITPOINT_RGB_STORE_LINE_POS_tu;



//ISP_ITPOINT_RGB_STORE_PIX_CNT
/*Description: current position of pixel for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t pix_cnt :13;
        /* 
        current x position of pixel for the frame.For (X,Y) where X is image width, Y is image height, image first pix postion will be 1, last line position will be X. Programming X= 0 is invalid*/
    }ISP_ITPOINT_RGB_STORE_PIX_CNT_ts;

}ISP_ITPOINT_RGB_STORE_PIX_CNT_tu;



//ISP_ITPOINT_RGB_STORE_LINE_CNT
/*Description: current position of line for the frame
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t line_cnt :13;
        /* 
        current y position of linefor the frame.For (X,Y) where X is image width, Y is image height, image first line position will be 1, last line position will be Y. Programming Y = 0 is invalid.*/
    }ISP_ITPOINT_RGB_STORE_LINE_CNT_ts;

}ISP_ITPOINT_RGB_STORE_LINE_CNT_tu;



//ISP_ITPOINT_RGB_STORE_FRAME_CNT
/*Description: itpoint frame count
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t frame_cnt;
        /* 
        frame counter for counting number of frame being passed through this module.*/
    }ISP_ITPOINT_RGB_STORE_FRAME_CNT_ts;

}ISP_ITPOINT_RGB_STORE_FRAME_CNT_tu;



//ISP_ITPOINT_RGB_STORE_DFV
/*Description: itpointDesign for Verification register.
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* 
        this bit is used to enable the pulsed interrupts*/
        uint8_t dfv_interrupt_ctrl :1;
        /* 
        the toggling of this bit is used to generate a pulsed interrupt whenever dfv_enable = 1*/
    }ISP_ITPOINT_RGB_STORE_DFV_ts;

}ISP_ITPOINT_RGB_STORE_DFV_tu;

typedef struct
{
    ISP_ITPOINT_RGB_STORE_ENABLE_tu ISP_ITPOINT_RGB_STORE_ENABLE;
    ISP_ITPOINT_RGB_STORE_PIX_POS_tu ISP_ITPOINT_RGB_STORE_PIX_POS;
    ISP_ITPOINT_RGB_STORE_LINE_POS_tu ISP_ITPOINT_RGB_STORE_LINE_POS;
    ISP_ITPOINT_RGB_STORE_PIX_CNT_tu ISP_ITPOINT_RGB_STORE_PIX_CNT;
    ISP_ITPOINT_RGB_STORE_LINE_CNT_tu ISP_ITPOINT_RGB_STORE_LINE_CNT;
    ISP_ITPOINT_RGB_STORE_FRAME_CNT_tu ISP_ITPOINT_RGB_STORE_FRAME_CNT;
    ISP_ITPOINT_RGB_STORE_DFV_tu ISP_ITPOINT_RGB_STORE_DFV;
}ISP_ITPOINT_RGB_STORE_IP_ts;




//ISP_ITPOINT_RGB_STORE_ENABLE


#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE_enable() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.ISP_ITPOINT_RGB_STORE_ENABLE_ts.enable
#define Is_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE_enable_DISABLE() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.ISP_ITPOINT_RGB_STORE_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE_enable__DISABLE() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.ISP_ITPOINT_RGB_STORE_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable itpoint module
#define Is_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE_enable_ENABLE() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.ISP_ITPOINT_RGB_STORE_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE_enable__ENABLE() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.ISP_ITPOINT_RGB_STORE_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable itpoint module


#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE_soft_reset() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.ISP_ITPOINT_RGB_STORE_ENABLE_ts.soft_reset
#define Is_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE_soft_reset_B_0x0() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.ISP_ITPOINT_RGB_STORE_ENABLE_ts.soft_reset == soft_reset_B_0x0)
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE_soft_reset__B_0x0() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.ISP_ITPOINT_RGB_STORE_ENABLE_ts.soft_reset = soft_reset_B_0x0)
#define soft_reset_B_0x0 0x0    //itpoint functions normally
#define Is_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE_soft_reset_B_0x1() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.ISP_ITPOINT_RGB_STORE_ENABLE_ts.soft_reset == soft_reset_B_0x1)
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE_soft_reset__B_0x1() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.ISP_ITPOINT_RGB_STORE_ENABLE_ts.soft_reset = soft_reset_B_0x1)
#define soft_reset_B_0x1 0x1    //All outputs are assigned reset value (And, as soon as soft_reset is again made 0, it switches to normal functional mode waiting for start of frame)
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE(enable,soft_reset) (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.word
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_ENABLE_word(x) (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_ENABLE.word = x)


//ISP_ITPOINT_RGB_STORE_PIX_POS


#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_PIX_POS_pix_pos() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_PIX_POS.ISP_ITPOINT_RGB_STORE_PIX_POS_ts.pix_pos
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_PIX_POS_pix_pos(x) (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_PIX_POS.ISP_ITPOINT_RGB_STORE_PIX_POS_ts.pix_pos = x)
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_PIX_POS(pix_pos) (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_PIX_POS.word = (uint32_t)pix_pos<<0)
#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_PIX_POS() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_PIX_POS.word
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_PIX_POS_word(x) (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_PIX_POS.word = x)


//ISP_ITPOINT_RGB_STORE_LINE_POS


#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_LINE_POS_line_pos() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_LINE_POS.ISP_ITPOINT_RGB_STORE_LINE_POS_ts.line_pos
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_LINE_POS_line_pos(x) (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_LINE_POS.ISP_ITPOINT_RGB_STORE_LINE_POS_ts.line_pos = x)
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_LINE_POS(line_pos) (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_LINE_POS.word = (uint32_t)line_pos<<0)
#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_LINE_POS() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_LINE_POS.word
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_LINE_POS_word(x) (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_LINE_POS.word = x)


//ISP_ITPOINT_RGB_STORE_PIX_CNT


#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_PIX_CNT_pix_cnt() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_PIX_CNT.ISP_ITPOINT_RGB_STORE_PIX_CNT_ts.pix_cnt
#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_PIX_CNT() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_PIX_CNT.word


//ISP_ITPOINT_RGB_STORE_LINE_CNT


#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_LINE_CNT_line_cnt() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_LINE_CNT.ISP_ITPOINT_RGB_STORE_LINE_CNT_ts.line_cnt
#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_LINE_CNT() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_LINE_CNT.word


//ISP_ITPOINT_RGB_STORE_FRAME_CNT


#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_FRAME_CNT_frame_cnt() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_FRAME_CNT.ISP_ITPOINT_RGB_STORE_FRAME_CNT_ts.frame_cnt
#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_FRAME_CNT() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_FRAME_CNT.word


//ISP_ITPOINT_RGB_STORE_DFV


#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_DFV_dfv_enable() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_DFV.ISP_ITPOINT_RGB_STORE_DFV_ts.dfv_enable
#define Is_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_DFV_dfv_enable_DISABLE() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_DFV.ISP_ITPOINT_RGB_STORE_DFV_ts.dfv_enable == dfv_enable_DISABLE)
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_DFV_dfv_enable__DISABLE() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_DFV.ISP_ITPOINT_RGB_STORE_DFV_ts.dfv_enable = dfv_enable_DISABLE)
#define dfv_enable_DISABLE 0x0    //Disable
#define Is_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_DFV_dfv_enable_ENABLE() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_DFV.ISP_ITPOINT_RGB_STORE_DFV_ts.dfv_enable == dfv_enable_ENABLE)
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_DFV_dfv_enable__ENABLE() (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_DFV.ISP_ITPOINT_RGB_STORE_DFV_ts.dfv_enable = dfv_enable_ENABLE)
#define dfv_enable_ENABLE 0x1    //Enable


#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_DFV_dfv_interrupt_ctrl() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_DFV.ISP_ITPOINT_RGB_STORE_DFV_ts.dfv_interrupt_ctrl
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_DFV_dfv_interrupt_ctrl(x) (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_DFV.ISP_ITPOINT_RGB_STORE_DFV_ts.dfv_interrupt_ctrl = x)
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_DFV(dfv_enable,dfv_interrupt_ctrl) (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_DFV.word = (uint8_t)dfv_enable<<0 | (uint8_t)dfv_interrupt_ctrl<<1)
#define Get_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_DFV() p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_DFV.word
#define Set_ISP_ITPOINT_RGB_STORE_ISP_ITPOINT_RGB_STORE_DFV_word(x) (p_ISP_ITPOINT_RGB_STORE_IP->ISP_ITPOINT_RGB_STORE_DFV.word = x)

//ISP_SMIARX3D_CTRL
/*Description: Rx Streaming control
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t rx_start :1;
        /* Start Rx - can be cleared after setting. Both rx_stop and rx_abort must be cleared before Rx will start*/
        uint8_t reserved0 :7;
        uint8_t rx_stop :1;
        /* Stop Rx (at end of current frame)rx_abort control must be cleared for the end-of-frame stop.Overides the rx_start control*/
        uint8_t reserved1 :7;
        uint8_t rx_abort :1;
        /* Stop Rx immediatly Overrides both rx_stop and rx_start controls*/
    }ISP_SMIARX3D_CTRL_ts;

}ISP_SMIARX3D_CTRL_tu;



//ISP_SMIARX3D_SETUP
/*Description: Rx Status
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t ip_pix_width :4;
        /* width of received pixel data (number of bits per pixel) - 6,7,8,10 or 12*/
        uint8_t op_pix_width :4;
        /* width of output pixel data from SMIA Rx*/
        uint8_t parallel_enable :1;
        /* Enable parallel interface input.*/
        uint8_t vsync_polarity :1;
        /* Polarity of input VSYNC:*/
        uint8_t hsync_polarity :1;
        /* Polarity of input HSYNC:*/
        uint8_t ds_mode :1;
        /* Select whether data strobe encoding is enabled for selected CCP input*/
        uint8_t dcpx_enable :1;
        /* Bayer decompression module enable*/
        uint8_t ccp_sel :1;
        /* Select which CCP input (0 or 1) is input to deserialiser (star_decoder)Note: this signal is not used by the Rx, it is provided to control an external module*/
        uint8_t reset_ccp_rx_n :1;
        /* May be connected to the CCP receivers to clear out their state in the event of lost synchronisationNote: this signal is not used by the Rx, it is provided to control an external module*/
        uint8_t reserved0 :1;
        uint8_t auto_sync :1;
        /* Rx Synchronisation source:*/
        uint8_t pattern_type :3;
        /* Test pattern selection:*/
        uint8_t no_sof :1;
        /* Allow operation with no status-line in data-stream (must override all frame-setup registers).If set, must override all frame-setup registers.*/
        uint8_t reserved1 :3;
        uint8_t clr_ccp_shift_sync :1;
        /* Clear CCP Shifted Sync-code flagNote: this signal is not used by the Rx, it is provided to control an external module*/
        uint8_t clr_ccp_crc_error :1;
        /* Clear CCP CRC Error flagNote: this signal is not used by the Rx, it is provided to control an external module*/
        uint8_t clr_pixel_sync_error :1;
        /* Clear Unpack pixel Sync error flag*/
        uint8_t clr_aborted_iframe :1;
        /* Clears aborted interframe flag*/
        uint8_t clr_insuff_iline :1;
        /* Clears insufficient interline flag*/
        uint8_t fifo_rd_rst :1;
        /* Resets input data fifo*/
    }ISP_SMIARX3D_SETUP_ts;

}ISP_SMIARX3D_SETUP_tu;



//ISP_SMIARX3D_FRAME_CTRL
/*Description: Frame control register
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t latency_lines;
        /* Number of lines to wait after image capture before attempting to grab the next frame (safety factor)*/
        uint8_t stream_size;
        /* Set the number of frames to stream. When set to zero, stream continuous video*/
        uint8_t start_grab_dly;
        /* Number of frames (from sensor) to skip before streaming data*/
        uint8_t ffhc_control :2;
        /* Controls frame-format h-crop (see Design Reference*/
        uint8_t stop_at_interframe :1;
        /* When stopping Rx, stop at the start of interframe, rather than at the end of interframe.*/
    }ISP_SMIARX3D_FRAME_CTRL_ts;

}ISP_SMIARX3D_FRAME_CTRL_tu;



//ISP_SMIARX3D_STATUS
/*Description: Status of the Rx block
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t frame_counter;
        /* Count of frames streamed through Rx*/
        uint8_t rx_state :2;
        /* Current state of the idp_gen module*/
        uint8_t ff_state :3;
        /* Current state of the frame formatter machine*/
        uint8_t snoop_state :3;
        /* Current state of the snoop module*/
        uint8_t fifo_rd_usedw :5;
        /* Rx fifo used words*/
        uint8_t fifo_empty :1;
        /* Rx fifo empty*/
        uint8_t reserved0 :2;
        uint8_t pixel_sync_error :1;
        /* SMIA decoder detected a pixel synchronisation error.*/
        uint8_t aborted_iframe :1;
        /* Aborted interframe flag.A new input frame has arrived before the full requested frame (line_length x frame_length) has completed.Status only, not an error.*/
        uint8_t insuff_iline :1;
        /* Insufficient interline error flag.The input data has fewer than 6-pixels of interline time.*/
        uint8_t fifo_under :1;
        /* Input data fifo has under-flowed*/
        uint8_t fifo_over :1;
        /* Input data fifo has over-flowed*/
    }ISP_SMIARX3D_STATUS_ts;

}ISP_SMIARX3D_STATUS_tu;



//ISP_SMIARX3D_TPAT_DATA_RG
/*Description: Test Data for pixels in Red/Green line
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t tpat_data_gir :13;
        /* Test data value for GIR pixels*/
        uint8_t reserved0 :3;
        uint16_t tpat_data_red :13;
        /* Test data value for RED pixels*/
    }ISP_SMIARX3D_TPAT_DATA_RG_ts;

}ISP_SMIARX3D_TPAT_DATA_RG_tu;



//ISP_SMIARX3D_TPAT_DATA_BG
/*Description: Test Data for pixels in Blue/Green line
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t tpat_data_gib :13;
        uint8_t reserved0 :3;
        uint16_t tpat_data_blu :13;
    }ISP_SMIARX3D_TPAT_DATA_BG_ts;

}ISP_SMIARX3D_TPAT_DATA_BG_tu;



//ISP_SMIARX3D_TPAT_HCUR_WP
/*Description: Test pattern Horizontal cursor control
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t tpat_hcur_posn :13;
        uint8_t reserved0 :3;
        uint16_t tpat_hcur_width :13;
    }ISP_SMIARX3D_TPAT_HCUR_WP_ts;

}ISP_SMIARX3D_TPAT_HCUR_WP_tu;



//ISP_SMIARX3D_TPAT_VCUR_WP
/*Description: Test pattern Horizontal cursor control
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t tpat_vcur_posn :13;
        /* Vertical cursor position in pixels.*/
        uint8_t reserved0 :3;
        uint16_t tpat_vcur_width :13;
        /* Vertical cursor width in pixels*/
    }ISP_SMIARX3D_TPAT_VCUR_WP_ts;

}ISP_SMIARX3D_TPAT_VCUR_WP_tu;



//ISP_SMIARX3D_CCP_STATUS
/*Description: Status of the CCPRx
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t ccp_channel :4;
        /* CCP Channel extracted from sync-codes.Note: this signal is not generated by the Rx, it is provided by an external module*/
        uint8_t reserved0 :4;
        uint8_t ccp_false_sync :1;
        /* CCP Rx detected a false sync-codeNote: this signal is not generated by the Rx, it is provided by an external module*/
        uint8_t ccp_shift_sync :1;
        /* CCP Rx detected a shifted sync-codeNote: this signal is not generated by the Rx, it is provided by an external module*/
        uint8_t ccp_crc_error :1;
        /* CCP Rx detected a CRC error in the received line.Note: this signal is not generated by the Rx, it is provided by an external module*/
    }ISP_SMIARX3D_CCP_STATUS_ts;

}ISP_SMIARX3D_CCP_STATUS_tu;



//ISP_SMIARX3D_HK_REQ_ADDR_0
/*Description: Programmable address to extract from status line data
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hk_req_addr;
    }ISP_SMIARX3D_HK_REQ_ADDR_0_ts;

}ISP_SMIARX3D_HK_REQ_ADDR_0_tu;



//ISP_SMIARX3D_HK_REQ_ADDR_1
/*Description: Programmable address to extract from status line data
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hk_req_addr;
    }ISP_SMIARX3D_HK_REQ_ADDR_1_ts;

}ISP_SMIARX3D_HK_REQ_ADDR_1_tu;



//ISP_SMIARX3D_HK_REQ_ADDR_2
/*Description: Programmable address to extract from status line data
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hk_req_addr;
    }ISP_SMIARX3D_HK_REQ_ADDR_2_ts;

}ISP_SMIARX3D_HK_REQ_ADDR_2_tu;



//ISP_SMIARX3D_HK_REQ_ADDR_3
/*Description: Programmable address to extract from status line data
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t hk_req_addr;
    }ISP_SMIARX3D_HK_REQ_ADDR_3_ts;

}ISP_SMIARX3D_HK_REQ_ADDR_3_tu;



//ISP_SMIARX3D_HK_REQ_DATA_0
/*Description: Data extracted from Status Line
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t hk_req_data;
    }ISP_SMIARX3D_HK_REQ_DATA_0_ts;

}ISP_SMIARX3D_HK_REQ_DATA_0_tu;



//ISP_SMIARX3D_HK_REQ_DATA_1
/*Description: Data extracted from Status Line
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t hk_req_data;
    }ISP_SMIARX3D_HK_REQ_DATA_1_ts;

}ISP_SMIARX3D_HK_REQ_DATA_1_tu;



//ISP_SMIARX3D_HK_REQ_DATA_2
/*Description: Data extracted from Status Line
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t hk_req_data;
    }ISP_SMIARX3D_HK_REQ_DATA_2_ts;

}ISP_SMIARX3D_HK_REQ_DATA_2_tu;



//ISP_SMIARX3D_HK_REQ_DATA_3
/*Description: Data extracted from Status Line
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t hk_req_data;
    }ISP_SMIARX3D_HK_REQ_DATA_3_ts;

}ISP_SMIARX3D_HK_REQ_DATA_3_tu;



//ISP_SMIARX3D_INT_COUNT_0
/*Description: Parameter used with rx_pix_count to generate an interrupt
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t pix_count;
        /* Programs the pixel count for Rx interrupt n*/
        uint16_t line_count;
        /* Programs the line count for Rx interrupt n*/
    }ISP_SMIARX3D_INT_COUNT_0_ts;

}ISP_SMIARX3D_INT_COUNT_0_tu;



//ISP_SMIARX3D_INT_COUNT_1
/*Description: Parameter used with rx_pix_count to generate an interrupt
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t pix_count;
        /* Programs the pixel count for Rx interrupt n*/
        uint16_t line_count;
        /* Programs the line count for Rx interrupt n*/
    }ISP_SMIARX3D_INT_COUNT_1_ts;

}ISP_SMIARX3D_INT_COUNT_1_tu;



//ISP_SMIARX3D_INT_COUNT_2
/*Description: Parameter used with rx_pix_count to generate an interrupt
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t pix_count;
        /* Programs the pixel count for Rx interrupt n*/
        uint16_t line_count;
        /* Programs the line count for Rx interrupt n*/
    }ISP_SMIARX3D_INT_COUNT_2_ts;

}ISP_SMIARX3D_INT_COUNT_2_tu;



//ISP_SMIARX3D_INT_COUNT_3
/*Description: Parameter used with rx_pix_count to generate an interrupt
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t pix_count;
        /* Programs the pixel count for Rx interrupt n*/
        uint16_t line_count;
        /* Programs the line count for Rx interrupt n*/
    }ISP_SMIARX3D_INT_COUNT_3_ts;

}ISP_SMIARX3D_INT_COUNT_3_tu;



//ISP_SMIARX3D_DFV
/*Description: Interrupt control register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t dfv_enable :1;
        /* DFV feature enable*/
        uint8_t dfv_count_0_interrupt_ctrl :1;
        /* Counter n Interrupt DFV control. A count_n interrupt is generated everytime its associated control bit value changes*/
        uint8_t dfv_count_1_interrupt_ctrl :1;
        /* Counter n Interrupt DFV control. A count_n interrupt is generated everytime its associated control bit value changes*/
        uint8_t dfv_count_2_interrupt_ctrl :1;
        /* Counter n Interrupt DFV control. A count_n interrupt is generated everytime its associated control bit value changes*/
        uint8_t dfv_count_3_interrupt_ctrl :1;
        /* Counter n Interrupt DFV control. A count_n interrupt is generated everytime its associated control bit value changes*/
        uint8_t dfv_seq_complete_interrupt_ctrl :1;
        /* Sequence Complete DFV control. A seq_complete interrupt is generated everytime this control bit value changes*/
    }ISP_SMIARX3D_DFV_ts;

}ISP_SMIARX3D_DFV_tu;



//ISP_SMIARX3D_COUNT_INT_EN
/*Description: Interrupt enable control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t rx_line_count_0_int_en :1;
        /* Counter n interrupt enable*/
        uint8_t rx_line_count_1_int_en :1;
        /* Counter n interrupt enable*/
        uint8_t rx_line_count_2_int_en :1;
        /* Counter n interrupt enable*/
        uint8_t rx_line_count_3_int_en :1;
        /* Counter n interrupt enable*/
        uint8_t rx_seq_complete_int_en :1;
        /* Sequence complete interrupt enable*/
    }ISP_SMIARX3D_COUNT_INT_EN_ts;

}ISP_SMIARX3D_COUNT_INT_EN_tu;



//ISP_SMIARX3D_OVERRIDE
/*Description: Device ID value from status line
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t override :23;
        /* If one bit is set then snooped value is overriden.
        Bit 22: y odd increment LSBit\\
        Bit 21: y even increment LSBit\\
        Bit 20: x odd increment LSBit\\
        Bit 19: x even increment LSBit\\
        Bit 18: pixel order\\
        Bit 17: line length\\
        Bit 16: field length\\
        Bit 15: SMIA descriptor 14\\
        Bit 14: SMIA descriptor 13\\
        Bit 13: SMIA descriptor 12\\
        Bit 12: SMIA descriptor 11\\
        Bit 11: SMIA descriptor 10\\
        Bit 10: SMIA descriptor 9\\
        Bit 9: SMIA descriptor 8\\
        Bit 8: SMIA descriptor 7\\
        Bit 7: SMIA descriptor 6\\
        Bit 6: SMIA descriptor 5\\
        Bit 5: SMIA descriptor 4\\
        Bit 4: SMIA descriptor 3\\
        Bit 3: SMIA descriptor 2\\
        Bit 2: SMIA descriptor 1\\
        Bit 1: SMIA descriptor 0\\
        Bit 0: SMIA model subtype*/
    }ISP_SMIARX3D_OVERRIDE_ts;

}ISP_SMIARX3D_OVERRIDE_tu;



//ISP_SMIARX3D_SENSOR_ID
/*Description: Device ID value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t sensor_id;
    }ISP_SMIARX3D_SENSOR_ID_ts;

}ISP_SMIARX3D_SENSOR_ID_tu;



//ISP_SMIARX3D_PIXEL_ORDER
/*Description: Color Pixel order
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t pixel_order :2;
        /* Pixel order from status line*/
        uint8_t reserved0 :6;
        uint8_t pixel_order_ovr :2;
        /* Pixel order value for override*/
    }ISP_SMIARX3D_PIXEL_ORDER_ts;

}ISP_SMIARX3D_PIXEL_ORDER_tu;



//ISP_SMIARX3D_AUTO_HENV_LENGTH
/*Description: Number of pixels in active henv output from idp_gen when running in auto_sync mode (see RX_SETUP register)
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t auto_henv_length :13;
    }ISP_SMIARX3D_AUTO_HENV_LENGTH_ts;

}ISP_SMIARX3D_AUTO_HENV_LENGTH_tu;



//ISP_SMIARX3D_FRAME_LENGTH
/*Description: Frame Length
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t frame_length;
        /* Frame length value from status line*/
        uint16_t frame_length_ovr;
        /* Frame length value for override*/
    }ISP_SMIARX3D_FRAME_LENGTH_ts;

}ISP_SMIARX3D_FRAME_LENGTH_tu;



//ISP_SMIARX3D_LINE_LENGTH
/*Description: Line Length
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t line_length;
        /* Line length value from status line*/
        uint16_t line_length_ovr;
        /* Line length value for override*/
    }ISP_SMIARX3D_LINE_LENGTH_ts;

}ISP_SMIARX3D_LINE_LENGTH_tu;



//ISP_SMIARX3D_X_ADDR_START
/*Description: X address start value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_addr_start;
    }ISP_SMIARX3D_X_ADDR_START_ts;

}ISP_SMIARX3D_X_ADDR_START_tu;



//ISP_SMIARX3D_Y_ADDR_START
/*Description: Y address start from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_addr_start;
    }ISP_SMIARX3D_Y_ADDR_START_ts;

}ISP_SMIARX3D_Y_ADDR_START_tu;



//ISP_SMIARX3D_X_ADDR_END
/*Description: X address end value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_addr_end;
    }ISP_SMIARX3D_X_ADDR_END_ts;

}ISP_SMIARX3D_X_ADDR_END_tu;



//ISP_SMIARX3D_Y_ADDR_END
/*Description: Y address end value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_addr_end;
    }ISP_SMIARX3D_Y_ADDR_END_ts;

}ISP_SMIARX3D_Y_ADDR_END_tu;



//ISP_SMIARX3D_X_OUTPUT_SIZE
/*Description: X output size value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t x_output_size;
    }ISP_SMIARX3D_X_OUTPUT_SIZE_ts;

}ISP_SMIARX3D_X_OUTPUT_SIZE_tu;



//ISP_SMIARX3D_Y_OUTPUT_SIZE
/*Description: Y output size value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t y_output_size;
    }ISP_SMIARX3D_Y_OUTPUT_SIZE_ts;

}ISP_SMIARX3D_Y_OUTPUT_SIZE_tu;



//ISP_SMIARX3D_ADDR_INCREMENTS
/*Description: Address increments control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t x_even_inc_lsb :1;
        /* X Address even increment value from status line*/
        uint8_t x_even_inc_lsb_ovr :1;
        /* X Address even increment value for override*/
        uint8_t x_odd_inc_lsb :1;
        /* X Address odd increment value from status line*/
        uint8_t x_odd_inc_lsb_ovr :1;
        /* X Address odd increment value for override*/
        uint8_t y_even_inc_lsb :1;
        /* Y Address even increment value from status line*/
        uint8_t y_even_inc_lsb_ovr :1;
        /* Y Address even increment value for override*/
        uint8_t y_odd_inc_lsb :1;
        /* Y Address odd increment value from status line*/
        uint8_t y_odd_inc_lsb_ovr :1;
        /* Y Address odd increment value for override*/
    }ISP_SMIARX3D_ADDR_INCREMENTS_ts;

}ISP_SMIARX3D_ADDR_INCREMENTS_tu;



//ISP_SMIARX3D_FINE_EXPOSURE
/*Description: Fine exposure value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t fine_exposure;
    }ISP_SMIARX3D_FINE_EXPOSURE_ts;

}ISP_SMIARX3D_FINE_EXPOSURE_tu;



//ISP_SMIARX3D_COARSE_EXPOSURE
/*Description: Coarse exposure from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t coarse_exposure;
    }ISP_SMIARX3D_COARSE_EXPOSURE_ts;

}ISP_SMIARX3D_COARSE_EXPOSURE_tu;



//ISP_SMIARX3D_ANALOG_GAIN
/*Description: Analogue Gain value from status line
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t analog_gain;
    }ISP_SMIARX3D_ANALOG_GAIN_ts;

}ISP_SMIARX3D_ANALOG_GAIN_tu;



//ISP_SMIARX3D_MODEL_SUBTYPE
/*Description: SMIA Frame Format Model Subtype
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t frame_format_model_subtype;
        /* Frame format subtype value from status line*/
        uint8_t frame_format_model_subtype_ovr;
        /* Frame format subtype value for override*/
    }ISP_SMIARX3D_MODEL_SUBTYPE_ts;

}ISP_SMIARX3D_MODEL_SUBTYPE_tu;



//ISP_SMIARX3D_DESCRIPTOR_0
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_0_ts;

}ISP_SMIARX3D_DESCRIPTOR_0_tu;



//ISP_SMIARX3D_DESCRIPTOR_1
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_1_ts;

}ISP_SMIARX3D_DESCRIPTOR_1_tu;



//ISP_SMIARX3D_DESCRIPTOR_2
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_2_ts;

}ISP_SMIARX3D_DESCRIPTOR_2_tu;



//ISP_SMIARX3D_DESCRIPTOR_3
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_3_ts;

}ISP_SMIARX3D_DESCRIPTOR_3_tu;



//ISP_SMIARX3D_DESCRIPTOR_4
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_4_ts;

}ISP_SMIARX3D_DESCRIPTOR_4_tu;



//ISP_SMIARX3D_DESCRIPTOR_5
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_5_ts;

}ISP_SMIARX3D_DESCRIPTOR_5_tu;



//ISP_SMIARX3D_DESCRIPTOR_6
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_6_ts;

}ISP_SMIARX3D_DESCRIPTOR_6_tu;



//ISP_SMIARX3D_DESCRIPTOR_7
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_7_ts;

}ISP_SMIARX3D_DESCRIPTOR_7_tu;



//ISP_SMIARX3D_DESCRIPTOR_8
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_8_ts;

}ISP_SMIARX3D_DESCRIPTOR_8_tu;



//ISP_SMIARX3D_DESCRIPTOR_9
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_9_ts;

}ISP_SMIARX3D_DESCRIPTOR_9_tu;



//ISP_SMIARX3D_DESCRIPTOR_10
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_10_ts;

}ISP_SMIARX3D_DESCRIPTOR_10_tu;



//ISP_SMIARX3D_DESCRIPTOR_11
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_11_ts;

}ISP_SMIARX3D_DESCRIPTOR_11_tu;



//ISP_SMIARX3D_DESCRIPTOR_12
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_12_ts;

}ISP_SMIARX3D_DESCRIPTOR_12_tu;



//ISP_SMIARX3D_DESCRIPTOR_13
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_13_ts;

}ISP_SMIARX3D_DESCRIPTOR_13_tu;



//ISP_SMIARX3D_DESCRIPTOR_14
/*Description: SMIA Frame Format Descriptor (snooped from status line),
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t frame_format_descriptor;
        /* Frame format descriptor from status line
        [15:12] - Pixel/Line Code,
        [11:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_14_ts;

}ISP_SMIARX3D_DESCRIPTOR_14_tu;



//ISP_SMIARX3D_TYPE_TRANS_1
/*Description: Defines translation SMIA to IDP linetype
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint8_t type_trans_mspec_4 :3;
        /* IDP LineType value for SMIA MAN_SPEC_4 lines*/
        uint8_t reserved0 :1;
        uint8_t type_trans_mspec_5 :3;
        /* IDP LineType value for SMIA MAN_SPEC_5 lines*/
        uint8_t reserved1 :1;
        uint8_t type_trans_mspec_6 :3;
        /* IDP LineType value for SMIA MAN_SPEC_6 lines*/
    }ISP_SMIARX3D_TYPE_TRANS_1_ts;

}ISP_SMIARX3D_TYPE_TRANS_1_tu;



//ISP_SMIARX3D_TYPE_TRANS_0
/*Description: Defines translation SMIA to IDP linetype
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t type_trans_black :3;
        /* IDP LineType value for SMIA BLACK lines*/
        uint8_t reserved0 :1;
        uint8_t type_trans_dark :3;
        /* IDP LineType value for SMIA DARK lines*/
        uint8_t reserved1 :1;
        uint8_t type_trans_visible :3;
        /* IDP LineType value for SMIA VISIBLE lines*/
        uint8_t reserved2 :1;
        uint8_t type_trans_dummy :3;
        /* IDP LineType value for SMIA DUMMY lines*/
        uint8_t reserved3 :1;
        uint8_t type_trans_mspec_0 :3;
        /* IDP LineType value for SMIA MAN_SPEC_0 lines*/
        uint8_t reserved4 :1;
        uint8_t type_trans_mspec_1 :3;
        /* IDP LineType value for SMIA MAN_SPEC_1 lines*/
        uint8_t reserved5 :1;
        uint8_t type_trans_mspec_2 :3;
        /* IDP LineType value for SMIA MAN_SPEC_2 lines*/
        uint8_t reserved6 :1;
        uint8_t type_trans_mspec_3 :3;
        /* IDP LineType value for SMIA MAN_SPEC_3 lines*/
    }ISP_SMIARX3D_TYPE_TRANS_0_ts;

}ISP_SMIARX3D_TYPE_TRANS_0_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_0
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_0_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_0_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_1
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_1_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_1_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_2
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_2_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_2_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_3
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_3_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_3_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_4
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_4_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_4_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_5
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_5_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_5_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_6
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_6_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_6_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_7
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_7_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_7_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_8
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_8_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_8_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_9
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_9_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_9_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_10
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_10_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_10_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_11
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_11_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_11_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_12
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_12_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_12_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_13
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_13_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_13_tu;



//ISP_SMIARX3D_DESCRIPTOR_OVR_14
/*Description: Overridden SMIA Frame Format Descriptor,
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t frame_format_descriptor_ovr :17;
        /* Frame format descriptor for override
        [16:13] - Pixel/Line Code
        [12:0] - Number of pixels/lines*/
    }ISP_SMIARX3D_DESCRIPTOR_OVR_14_ts;

}ISP_SMIARX3D_DESCRIPTOR_OVR_14_tu;

typedef struct
{
    ISP_SMIARX3D_CTRL_tu ISP_SMIARX3D_CTRL;
    ISP_SMIARX3D_SETUP_tu ISP_SMIARX3D_SETUP;
    ISP_SMIARX3D_FRAME_CTRL_tu ISP_SMIARX3D_FRAME_CTRL;
    ISP_SMIARX3D_STATUS_tu ISP_SMIARX3D_STATUS;
    ISP_SMIARX3D_TPAT_DATA_RG_tu ISP_SMIARX3D_TPAT_DATA_RG;
    ISP_SMIARX3D_TPAT_DATA_BG_tu ISP_SMIARX3D_TPAT_DATA_BG;
    ISP_SMIARX3D_TPAT_HCUR_WP_tu ISP_SMIARX3D_TPAT_HCUR_WP;
    ISP_SMIARX3D_TPAT_VCUR_WP_tu ISP_SMIARX3D_TPAT_VCUR_WP;
    ISP_SMIARX3D_CCP_STATUS_tu ISP_SMIARX3D_CCP_STATUS;
    ISP_SMIARX3D_HK_REQ_ADDR_0_tu ISP_SMIARX3D_HK_REQ_ADDR_0;
    ISP_SMIARX3D_HK_REQ_ADDR_1_tu ISP_SMIARX3D_HK_REQ_ADDR_1;
    ISP_SMIARX3D_HK_REQ_ADDR_2_tu ISP_SMIARX3D_HK_REQ_ADDR_2;
    ISP_SMIARX3D_HK_REQ_ADDR_3_tu ISP_SMIARX3D_HK_REQ_ADDR_3;
    ISP_SMIARX3D_HK_REQ_DATA_0_tu ISP_SMIARX3D_HK_REQ_DATA_0;
    ISP_SMIARX3D_HK_REQ_DATA_1_tu ISP_SMIARX3D_HK_REQ_DATA_1;
    ISP_SMIARX3D_HK_REQ_DATA_2_tu ISP_SMIARX3D_HK_REQ_DATA_2;
    ISP_SMIARX3D_HK_REQ_DATA_3_tu ISP_SMIARX3D_HK_REQ_DATA_3;
    ISP_SMIARX3D_INT_COUNT_0_tu ISP_SMIARX3D_INT_COUNT_0;
    ISP_SMIARX3D_INT_COUNT_1_tu ISP_SMIARX3D_INT_COUNT_1;
    ISP_SMIARX3D_INT_COUNT_2_tu ISP_SMIARX3D_INT_COUNT_2;
    ISP_SMIARX3D_INT_COUNT_3_tu ISP_SMIARX3D_INT_COUNT_3;
    ISP_SMIARX3D_DFV_tu ISP_SMIARX3D_DFV;
    ISP_SMIARX3D_COUNT_INT_EN_tu ISP_SMIARX3D_COUNT_INT_EN;
    ISP_SMIARX3D_OVERRIDE_tu ISP_SMIARX3D_OVERRIDE;
    ISP_SMIARX3D_SENSOR_ID_tu ISP_SMIARX3D_SENSOR_ID;
    ISP_SMIARX3D_PIXEL_ORDER_tu ISP_SMIARX3D_PIXEL_ORDER;
    ISP_SMIARX3D_AUTO_HENV_LENGTH_tu ISP_SMIARX3D_AUTO_HENV_LENGTH;
    ISP_SMIARX3D_FRAME_LENGTH_tu ISP_SMIARX3D_FRAME_LENGTH;
    ISP_SMIARX3D_LINE_LENGTH_tu ISP_SMIARX3D_LINE_LENGTH;
    ISP_SMIARX3D_X_ADDR_START_tu ISP_SMIARX3D_X_ADDR_START;
    ISP_SMIARX3D_Y_ADDR_START_tu ISP_SMIARX3D_Y_ADDR_START;
    ISP_SMIARX3D_X_ADDR_END_tu ISP_SMIARX3D_X_ADDR_END;
    ISP_SMIARX3D_Y_ADDR_END_tu ISP_SMIARX3D_Y_ADDR_END;
    ISP_SMIARX3D_X_OUTPUT_SIZE_tu ISP_SMIARX3D_X_OUTPUT_SIZE;
    ISP_SMIARX3D_Y_OUTPUT_SIZE_tu ISP_SMIARX3D_Y_OUTPUT_SIZE;
    ISP_SMIARX3D_ADDR_INCREMENTS_tu ISP_SMIARX3D_ADDR_INCREMENTS;
    ISP_SMIARX3D_FINE_EXPOSURE_tu ISP_SMIARX3D_FINE_EXPOSURE;
    ISP_SMIARX3D_COARSE_EXPOSURE_tu ISP_SMIARX3D_COARSE_EXPOSURE;
    ISP_SMIARX3D_ANALOG_GAIN_tu ISP_SMIARX3D_ANALOG_GAIN;
    ISP_SMIARX3D_MODEL_SUBTYPE_tu ISP_SMIARX3D_MODEL_SUBTYPE;
    ISP_SMIARX3D_DESCRIPTOR_0_tu ISP_SMIARX3D_DESCRIPTOR_0;
    ISP_SMIARX3D_DESCRIPTOR_1_tu ISP_SMIARX3D_DESCRIPTOR_1;
    ISP_SMIARX3D_DESCRIPTOR_2_tu ISP_SMIARX3D_DESCRIPTOR_2;
    ISP_SMIARX3D_DESCRIPTOR_3_tu ISP_SMIARX3D_DESCRIPTOR_3;
    ISP_SMIARX3D_DESCRIPTOR_4_tu ISP_SMIARX3D_DESCRIPTOR_4;
    ISP_SMIARX3D_DESCRIPTOR_5_tu ISP_SMIARX3D_DESCRIPTOR_5;
    ISP_SMIARX3D_DESCRIPTOR_6_tu ISP_SMIARX3D_DESCRIPTOR_6;
    ISP_SMIARX3D_DESCRIPTOR_7_tu ISP_SMIARX3D_DESCRIPTOR_7;
    ISP_SMIARX3D_DESCRIPTOR_8_tu ISP_SMIARX3D_DESCRIPTOR_8;
    ISP_SMIARX3D_DESCRIPTOR_9_tu ISP_SMIARX3D_DESCRIPTOR_9;
    ISP_SMIARX3D_DESCRIPTOR_10_tu ISP_SMIARX3D_DESCRIPTOR_10;
    ISP_SMIARX3D_DESCRIPTOR_11_tu ISP_SMIARX3D_DESCRIPTOR_11;
    ISP_SMIARX3D_DESCRIPTOR_12_tu ISP_SMIARX3D_DESCRIPTOR_12;
    ISP_SMIARX3D_DESCRIPTOR_13_tu ISP_SMIARX3D_DESCRIPTOR_13;
    ISP_SMIARX3D_DESCRIPTOR_14_tu ISP_SMIARX3D_DESCRIPTOR_14;
    ISP_SMIARX3D_TYPE_TRANS_1_tu ISP_SMIARX3D_TYPE_TRANS_1;
    ISP_SMIARX3D_TYPE_TRANS_0_tu ISP_SMIARX3D_TYPE_TRANS_0;
    ISP_SMIARX3D_DESCRIPTOR_OVR_0_tu ISP_SMIARX3D_DESCRIPTOR_OVR_0;
    ISP_SMIARX3D_DESCRIPTOR_OVR_1_tu ISP_SMIARX3D_DESCRIPTOR_OVR_1;
    ISP_SMIARX3D_DESCRIPTOR_OVR_2_tu ISP_SMIARX3D_DESCRIPTOR_OVR_2;
    ISP_SMIARX3D_DESCRIPTOR_OVR_3_tu ISP_SMIARX3D_DESCRIPTOR_OVR_3;
    ISP_SMIARX3D_DESCRIPTOR_OVR_4_tu ISP_SMIARX3D_DESCRIPTOR_OVR_4;
    ISP_SMIARX3D_DESCRIPTOR_OVR_5_tu ISP_SMIARX3D_DESCRIPTOR_OVR_5;
    ISP_SMIARX3D_DESCRIPTOR_OVR_6_tu ISP_SMIARX3D_DESCRIPTOR_OVR_6;
    ISP_SMIARX3D_DESCRIPTOR_OVR_7_tu ISP_SMIARX3D_DESCRIPTOR_OVR_7;
    ISP_SMIARX3D_DESCRIPTOR_OVR_8_tu ISP_SMIARX3D_DESCRIPTOR_OVR_8;
    ISP_SMIARX3D_DESCRIPTOR_OVR_9_tu ISP_SMIARX3D_DESCRIPTOR_OVR_9;
    ISP_SMIARX3D_DESCRIPTOR_OVR_10_tu ISP_SMIARX3D_DESCRIPTOR_OVR_10;
    ISP_SMIARX3D_DESCRIPTOR_OVR_11_tu ISP_SMIARX3D_DESCRIPTOR_OVR_11;
    ISP_SMIARX3D_DESCRIPTOR_OVR_12_tu ISP_SMIARX3D_DESCRIPTOR_OVR_12;
    ISP_SMIARX3D_DESCRIPTOR_OVR_13_tu ISP_SMIARX3D_DESCRIPTOR_OVR_13;
    ISP_SMIARX3D_DESCRIPTOR_OVR_14_tu ISP_SMIARX3D_DESCRIPTOR_OVR_14;
}ISP_SMIARX3D_IP_ts;




//ISP_SMIARX3D_CTRL


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_CTRL_rx_start() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CTRL.ISP_SMIARX3D_CTRL_ts.rx_start
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_CTRL_rx_start(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CTRL.ISP_SMIARX3D_CTRL_ts.rx_start = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_CTRL_rx_stop() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CTRL.ISP_SMIARX3D_CTRL_ts.rx_stop
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_CTRL_rx_stop(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CTRL.ISP_SMIARX3D_CTRL_ts.rx_stop = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_CTRL_rx_abort() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CTRL.ISP_SMIARX3D_CTRL_ts.rx_abort
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_CTRL_rx_abort(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CTRL.ISP_SMIARX3D_CTRL_ts.rx_abort = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_CTRL(rx_start,rx_stop,rx_abort) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CTRL.word = (uint32_t)rx_start<<0 | (uint32_t)rx_stop<<8 | (uint32_t)rx_abort<<16)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_CTRL() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CTRL.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_CTRL_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CTRL.word = x)


//ISP_SMIARX3D_SETUP


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ip_pix_width() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ip_pix_width
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ip_pix_width_B_0x6() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ip_pix_width == ip_pix_width_B_0x6)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ip_pix_width__B_0x6() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ip_pix_width = ip_pix_width_B_0x6)
#define ip_pix_width_B_0x6 0x6    //(6_BITS)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ip_pix_width_B_0x7() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ip_pix_width == ip_pix_width_B_0x7)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ip_pix_width__B_0x7() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ip_pix_width = ip_pix_width_B_0x7)
#define ip_pix_width_B_0x7 0x7    //(7_BITS)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ip_pix_width_B_0x8() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ip_pix_width == ip_pix_width_B_0x8)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ip_pix_width__B_0x8() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ip_pix_width = ip_pix_width_B_0x8)
#define ip_pix_width_B_0x8 0x8    //(8_BITS)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ip_pix_width_B_0xA() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ip_pix_width == ip_pix_width_B_0xA)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ip_pix_width__B_0xA() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ip_pix_width = ip_pix_width_B_0xA)
#define ip_pix_width_B_0xA 0xA    //(10_BITS)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ip_pix_width_B_0xC() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ip_pix_width == ip_pix_width_B_0xC)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ip_pix_width__B_0xC() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ip_pix_width = ip_pix_width_B_0xC)
#define ip_pix_width_B_0xC 0xC    //(12_BITS)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_op_pix_width() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.op_pix_width
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_op_pix_width_B_0x6() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.op_pix_width == op_pix_width_B_0x6)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_op_pix_width__B_0x6() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.op_pix_width = op_pix_width_B_0x6)
#define op_pix_width_B_0x6 0x6    //(6_BITS)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_op_pix_width_B_0x7() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.op_pix_width == op_pix_width_B_0x7)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_op_pix_width__B_0x7() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.op_pix_width = op_pix_width_B_0x7)
#define op_pix_width_B_0x7 0x7    //(7_BITS)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_op_pix_width_B_0x8() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.op_pix_width == op_pix_width_B_0x8)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_op_pix_width__B_0x8() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.op_pix_width = op_pix_width_B_0x8)
#define op_pix_width_B_0x8 0x8    //(8_BITS)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_op_pix_width_B_0xA() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.op_pix_width == op_pix_width_B_0xA)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_op_pix_width__B_0xA() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.op_pix_width = op_pix_width_B_0xA)
#define op_pix_width_B_0xA 0xA    //(10_BITS)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_op_pix_width_B_0xC() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.op_pix_width == op_pix_width_B_0xC)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_op_pix_width__B_0xC() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.op_pix_width = op_pix_width_B_0xC)
#define op_pix_width_B_0xC 0xC    //(12_BITS)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_parallel_enable() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.parallel_enable
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_parallel_enable(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.parallel_enable = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_vsync_polarity() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.vsync_polarity
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_vsync_polarity_ACTIVE_LOW() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.vsync_polarity == vsync_polarity_ACTIVE_LOW)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_vsync_polarity__ACTIVE_LOW() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.vsync_polarity = vsync_polarity_ACTIVE_LOW)
#define vsync_polarity_ACTIVE_LOW 0x0    //Active Low
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_vsync_polarity_ACTIVE_HIGH() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.vsync_polarity == vsync_polarity_ACTIVE_HIGH)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_vsync_polarity__ACTIVE_HIGH() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.vsync_polarity = vsync_polarity_ACTIVE_HIGH)
#define vsync_polarity_ACTIVE_HIGH 0x1    //Active High


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_hsync_polarity() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.hsync_polarity
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_hsync_polarity_ACTIVE_LOW() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.hsync_polarity == hsync_polarity_ACTIVE_LOW)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_hsync_polarity__ACTIVE_LOW() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.hsync_polarity = hsync_polarity_ACTIVE_LOW)
#define hsync_polarity_ACTIVE_LOW 0x0    //Active Low
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_hsync_polarity_ACTIVE_HIGH() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.hsync_polarity == hsync_polarity_ACTIVE_HIGH)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_hsync_polarity__ACTIVE_HIGH() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.hsync_polarity = hsync_polarity_ACTIVE_HIGH)
#define hsync_polarity_ACTIVE_HIGH 0x1    //Active High


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ds_mode() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ds_mode
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ds_mode_DISABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ds_mode == ds_mode_DISABLE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ds_mode__DISABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ds_mode = ds_mode_DISABLE)
#define ds_mode_DISABLE 0x0    //Disable Data/Strobe encoding
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ds_mode_ENABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ds_mode == ds_mode_ENABLE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ds_mode__ENABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ds_mode = ds_mode_ENABLE)
#define ds_mode_ENABLE 0x1    //Enable Data/Strobe encoding


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_dcpx_enable() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.dcpx_enable
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_dcpx_enable_DISABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.dcpx_enable == dcpx_enable_DISABLE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_dcpx_enable__DISABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.dcpx_enable = dcpx_enable_DISABLE)
#define dcpx_enable_DISABLE 0x0    //Disable bayer decompression
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_dcpx_enable_ENABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.dcpx_enable == dcpx_enable_ENABLE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_dcpx_enable__ENABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.dcpx_enable = dcpx_enable_ENABLE)
#define dcpx_enable_ENABLE 0x1    //Enable bayer decompression


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ccp_sel() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ccp_sel
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_ccp_sel(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.ccp_sel = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_reset_ccp_rx_n() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.reset_ccp_rx_n
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_reset_ccp_rx_n(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.reset_ccp_rx_n = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_auto_sync() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.auto_sync
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_auto_sync_SYNCHRO_SENSOR() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.auto_sync == auto_sync_SYNCHRO_SENSOR)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_auto_sync__SYNCHRO_SENSOR() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.auto_sync = auto_sync_SYNCHRO_SENSOR)
#define auto_sync_SYNCHRO_SENSOR 0x0    //Sensor (Serial or Parallel)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_auto_sync_SYNCHRO_AUTO() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.auto_sync == auto_sync_SYNCHRO_AUTO)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_auto_sync__SYNCHRO_AUTO() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.auto_sync = auto_sync_SYNCHRO_AUTO)
#define auto_sync_SYNCHRO_AUTO 0x1    //Auto on rx_start


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type_PATTERN_DISABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type == pattern_type_PATTERN_DISABLE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type__PATTERN_DISABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type = pattern_type_PATTERN_DISABLE)
#define pattern_type_PATTERN_DISABLE 0x0    //Disabled
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type_PATTERN_COLOUR_BAR() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type == pattern_type_PATTERN_COLOUR_BAR)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type__PATTERN_COLOUR_BAR() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type = pattern_type_PATTERN_COLOUR_BAR)
#define pattern_type_PATTERN_COLOUR_BAR 0x1    //Colour Bars
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type_PATTERN_GRAD_BAR() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type == pattern_type_PATTERN_GRAD_BAR)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type__PATTERN_GRAD_BAR() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type = pattern_type_PATTERN_GRAD_BAR)
#define pattern_type_PATTERN_GRAD_BAR 0x2    //Graduated Colour Bars
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type_PATTERN_DIAG_GREY() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type == pattern_type_PATTERN_DIAG_GREY)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type__PATTERN_DIAG_GREY() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type = pattern_type_PATTERN_DIAG_GREY)
#define pattern_type_PATTERN_DIAG_GREY 0x3    //Diagonal Greyscale
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type_PATTERN_PSEUDORANDOM() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type == pattern_type_PATTERN_PSEUDORANDOM)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type__PATTERN_PSEUDORANDOM() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type = pattern_type_PATTERN_PSEUDORANDOM)
#define pattern_type_PATTERN_PSEUDORANDOM 0x4    //Pseudo-random
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type_PATTERN_HOR_GREY() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type == pattern_type_PATTERN_HOR_GREY)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type__PATTERN_HOR_GREY() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type = pattern_type_PATTERN_HOR_GREY)
#define pattern_type_PATTERN_HOR_GREY 0x5    //Horizontal Greyscale
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type_PATTERN_VERT_GREY() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type == pattern_type_PATTERN_VERT_GREY)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type__PATTERN_VERT_GREY() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type = pattern_type_PATTERN_VERT_GREY)
#define pattern_type_PATTERN_VERT_GREY 0x6    //Vertical Greyscale
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type_PATTERN_SOLID() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type == pattern_type_PATTERN_SOLID)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_pattern_type__PATTERN_SOLID() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.pattern_type = pattern_type_PATTERN_SOLID)
#define pattern_type_PATTERN_SOLID 0x7    //Solid colour


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_no_sof() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.no_sof
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_no_sof(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.no_sof = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_clr_ccp_shift_sync() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.clr_ccp_shift_sync
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_clr_ccp_shift_sync(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.clr_ccp_shift_sync = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_clr_ccp_crc_error() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.clr_ccp_crc_error
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_clr_ccp_crc_error(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.clr_ccp_crc_error = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_clr_pixel_sync_error() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.clr_pixel_sync_error
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_clr_pixel_sync_error(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.clr_pixel_sync_error = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_clr_aborted_iframe() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.clr_aborted_iframe
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_clr_aborted_iframe(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.clr_aborted_iframe = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_clr_insuff_iline() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.clr_insuff_iline
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_clr_insuff_iline(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.clr_insuff_iline = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_fifo_rd_rst() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.fifo_rd_rst
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_fifo_rd_rst(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.ISP_SMIARX3D_SETUP_ts.fifo_rd_rst = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP(ip_pix_width,op_pix_width,parallel_enable,vsync_polarity,hsync_polarity,ds_mode,dcpx_enable,ccp_sel,reset_ccp_rx_n,auto_sync,pattern_type,no_sof,clr_ccp_shift_sync,clr_ccp_crc_error,clr_pixel_sync_error,clr_aborted_iframe,clr_insuff_iline,fifo_rd_rst) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.word = (uint32_t)ip_pix_width<<0 | (uint32_t)op_pix_width<<4 | (uint32_t)parallel_enable<<8 | (uint32_t)vsync_polarity<<9 | (uint32_t)hsync_polarity<<10 | (uint32_t)ds_mode<<11 | (uint32_t)dcpx_enable<<12 | (uint32_t)ccp_sel<<13 | (uint32_t)reset_ccp_rx_n<<14 | (uint32_t)auto_sync<<16 | (uint32_t)pattern_type<<17 | (uint32_t)no_sof<<20 | (uint32_t)clr_ccp_shift_sync<<24 | (uint32_t)clr_ccp_crc_error<<25 | (uint32_t)clr_pixel_sync_error<<26 | (uint32_t)clr_aborted_iframe<<27 | (uint32_t)clr_insuff_iline<<28 | (uint32_t)fifo_rd_rst<<29)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SETUP() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_SETUP_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SETUP.word = x)


//ISP_SMIARX3D_FRAME_CTRL


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_latency_lines() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.latency_lines
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_latency_lines(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.latency_lines = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_stream_size() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.stream_size
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_stream_size(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.stream_size = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_start_grab_dly() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.start_grab_dly
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_start_grab_dly(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.start_grab_dly = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_ffhc_control() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.ffhc_control
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_ffhc_control_FFHC_DISABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.ffhc_control == ffhc_control_FFHC_DISABLE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_ffhc_control__FFHC_DISABLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.ffhc_control = ffhc_control_FFHC_DISABLE)
#define ffhc_control_FFHC_DISABLE 0x0    //Disable/Bypass
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_ffhc_control_FFHC_FULL_AUTO() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.ffhc_control == ffhc_control_FFHC_FULL_AUTO)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_ffhc_control__FFHC_FULL_AUTO() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.ffhc_control = ffhc_control_FFHC_FULL_AUTO)
#define ffhc_control_FFHC_FULL_AUTO 0x1    //Fully automatic
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_ffhc_control_FFHC_SEMI_AUTO() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.ffhc_control == ffhc_control_FFHC_SEMI_AUTO)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_ffhc_control__FFHC_SEMI_AUTO() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.ffhc_control = ffhc_control_FFHC_SEMI_AUTO)
#define ffhc_control_FFHC_SEMI_AUTO 0x2    //Semi-automatic (Static SOL columns)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_ffhc_control_FFHC_MANUAL() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.ffhc_control == ffhc_control_FFHC_MANUAL)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_ffhc_control__FFHC_MANUAL() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.ffhc_control = ffhc_control_FFHC_MANUAL)
#define ffhc_control_FFHC_MANUAL 0x3    //Manual (Static SOL and EOL columns)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_stop_at_interframe() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.stop_at_interframe
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_stop_at_interframe(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.ISP_SMIARX3D_FRAME_CTRL_ts.stop_at_interframe = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL(latency_lines,stream_size,start_grab_dly,ffhc_control,stop_at_interframe) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.word = (uint32_t)latency_lines<<0 | (uint32_t)stream_size<<8 | (uint32_t)start_grab_dly<<16 | (uint32_t)ffhc_control<<24 | (uint32_t)stop_at_interframe<<26)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_CTRL_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_CTRL.word = x)


//ISP_SMIARX3D_STATUS


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_frame_counter() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.frame_counter


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_rx_state() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.rx_state
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_rx_state_GEN_IDLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.rx_state == rx_state_GEN_IDLE)
#define rx_state_GEN_IDLE 0x0    //Idle
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_rx_state_GEN_WAITVSTART() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.rx_state == rx_state_GEN_WAITVSTART)
#define rx_state_GEN_WAITVSTART 0x1    //wait vstart
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_rx_state_GEN_RUNNING() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.rx_state == rx_state_GEN_RUNNING)
#define rx_state_GEN_RUNNING 0x2    //running
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_rx_state_GEN_WAITFRAME() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.rx_state == rx_state_GEN_WAITFRAME)
#define rx_state_GEN_WAITFRAME 0x3    //wait frame


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_ff_state() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.ff_state
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_ff_state_FF_IDLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.ff_state == ff_state_FF_IDLE)
#define ff_state_FF_IDLE 0x0    //Idle
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_ff_state_FF_WAIT_EOSD() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.ff_state == ff_state_FF_WAIT_EOSD)
#define ff_state_FF_WAIT_EOSD 0x1    //Waiting for end of status/Data
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_ff_state_FF_FIRSTLINE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.ff_state == ff_state_FF_FIRSTLINE)
#define ff_state_FF_FIRSTLINE 0x2    //First line of frame (1-cycle state)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_ff_state_FF_TRANSLATE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.ff_state == ff_state_FF_TRANSLATE)
#define ff_state_FF_TRANSLATE 0x3    //Translate current row/descriptor
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_ff_state_FF_UPDATE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.ff_state == ff_state_FF_UPDATE)
#define ff_state_FF_UPDATE 0x4    //Update row/descriptor
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_ff_state_FF_INTERFRAME() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.ff_state == ff_state_FF_INTERFRAME)
#define ff_state_FF_INTERFRAME 0x5    //Interframe


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_snoop_state() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.snoop_state
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_snoop_state_SNOOP_IDLE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.snoop_state == snoop_state_SNOOP_IDLE)
#define snoop_state_SNOOP_IDLE 0x0    //Idle
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_snoop_state_SNOOP_TAG_LSN() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.snoop_state == snoop_state_SNOOP_TAG_LSN)
#define snoop_state_SNOOP_TAG_LSN 0x1    //Data tag (LS-Nibble)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_snoop_state_SNOOP_TAG() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.snoop_state == snoop_state_SNOOP_TAG)
#define snoop_state_SNOOP_TAG 0x2    //Data Tag
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_snoop_state_SNOOP_REG_LSM() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.snoop_state == snoop_state_SNOOP_REG_LSM)
#define snoop_state_SNOOP_REG_LSM 0x3    //Register Data (LS-Nibble)
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_snoop_state_SNOOP_REG() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.snoop_state == snoop_state_SNOOP_REG)
#define snoop_state_SNOOP_REG 0x4    //Register Data


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_fifo_rd_usedw() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.fifo_rd_usedw


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_fifo_empty() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.fifo_empty


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_pixel_sync_error() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.pixel_sync_error


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_aborted_iframe() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.aborted_iframe


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_insuff_iline() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.insuff_iline


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_fifo_under() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.fifo_under


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS_fifo_over() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.ISP_SMIARX3D_STATUS_ts.fifo_over
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_STATUS() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_STATUS.word


//ISP_SMIARX3D_TPAT_DATA_RG


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_RG_tpat_data_gir() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_RG.ISP_SMIARX3D_TPAT_DATA_RG_ts.tpat_data_gir
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_RG_tpat_data_gir(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_RG.ISP_SMIARX3D_TPAT_DATA_RG_ts.tpat_data_gir = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_RG_tpat_data_red() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_RG.ISP_SMIARX3D_TPAT_DATA_RG_ts.tpat_data_red
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_RG_tpat_data_red(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_RG.ISP_SMIARX3D_TPAT_DATA_RG_ts.tpat_data_red = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_RG(tpat_data_gir,tpat_data_red) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_RG.word = (uint32_t)tpat_data_gir<<0 | (uint32_t)tpat_data_red<<16)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_RG() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_RG.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_RG_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_RG.word = x)


//ISP_SMIARX3D_TPAT_DATA_BG


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_BG_tpat_data_gib() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_BG.ISP_SMIARX3D_TPAT_DATA_BG_ts.tpat_data_gib
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_BG_tpat_data_gib(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_BG.ISP_SMIARX3D_TPAT_DATA_BG_ts.tpat_data_gib = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_BG_tpat_data_blu() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_BG.ISP_SMIARX3D_TPAT_DATA_BG_ts.tpat_data_blu
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_BG_tpat_data_blu(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_BG.ISP_SMIARX3D_TPAT_DATA_BG_ts.tpat_data_blu = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_BG(tpat_data_gib,tpat_data_blu) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_BG.word = (uint32_t)tpat_data_gib<<0 | (uint32_t)tpat_data_blu<<16)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_BG() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_BG.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_DATA_BG_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_DATA_BG.word = x)


//ISP_SMIARX3D_TPAT_HCUR_WP


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_HCUR_WP_tpat_hcur_posn() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_HCUR_WP.ISP_SMIARX3D_TPAT_HCUR_WP_ts.tpat_hcur_posn
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_HCUR_WP_tpat_hcur_posn(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_HCUR_WP.ISP_SMIARX3D_TPAT_HCUR_WP_ts.tpat_hcur_posn = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_HCUR_WP_tpat_hcur_width() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_HCUR_WP.ISP_SMIARX3D_TPAT_HCUR_WP_ts.tpat_hcur_width
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_HCUR_WP_tpat_hcur_width(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_HCUR_WP.ISP_SMIARX3D_TPAT_HCUR_WP_ts.tpat_hcur_width = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_HCUR_WP(tpat_hcur_posn,tpat_hcur_width) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_HCUR_WP.word = (uint32_t)tpat_hcur_posn<<0 | (uint32_t)tpat_hcur_width<<16)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_HCUR_WP() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_HCUR_WP.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_HCUR_WP_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_HCUR_WP.word = x)


//ISP_SMIARX3D_TPAT_VCUR_WP


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_VCUR_WP_tpat_vcur_posn() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_VCUR_WP.ISP_SMIARX3D_TPAT_VCUR_WP_ts.tpat_vcur_posn
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_VCUR_WP_tpat_vcur_posn(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_VCUR_WP.ISP_SMIARX3D_TPAT_VCUR_WP_ts.tpat_vcur_posn = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_VCUR_WP_tpat_vcur_width() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_VCUR_WP.ISP_SMIARX3D_TPAT_VCUR_WP_ts.tpat_vcur_width
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_VCUR_WP_tpat_vcur_width(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_VCUR_WP.ISP_SMIARX3D_TPAT_VCUR_WP_ts.tpat_vcur_width = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_VCUR_WP(tpat_vcur_posn,tpat_vcur_width) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_VCUR_WP.word = (uint32_t)tpat_vcur_posn<<0 | (uint32_t)tpat_vcur_width<<16)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_VCUR_WP() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_VCUR_WP.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TPAT_VCUR_WP_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TPAT_VCUR_WP.word = x)


//ISP_SMIARX3D_CCP_STATUS


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_CCP_STATUS_ccp_channel() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CCP_STATUS.ISP_SMIARX3D_CCP_STATUS_ts.ccp_channel


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_CCP_STATUS_ccp_false_sync() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CCP_STATUS.ISP_SMIARX3D_CCP_STATUS_ts.ccp_false_sync


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_CCP_STATUS_ccp_shift_sync() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CCP_STATUS.ISP_SMIARX3D_CCP_STATUS_ts.ccp_shift_sync


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_CCP_STATUS_ccp_crc_error() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CCP_STATUS.ISP_SMIARX3D_CCP_STATUS_ts.ccp_crc_error
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_CCP_STATUS() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_CCP_STATUS.word


//ISP_SMIARX3D_HK_REQ_ADDR_0


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_0_hk_req_addr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_0.ISP_SMIARX3D_HK_REQ_ADDR_0_ts.hk_req_addr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_0_hk_req_addr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_0.ISP_SMIARX3D_HK_REQ_ADDR_0_ts.hk_req_addr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_0(hk_req_addr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_0.word = (uint32_t)hk_req_addr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_0() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_0.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_0_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_0.word = x)


//ISP_SMIARX3D_HK_REQ_ADDR_1


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_1_hk_req_addr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_1.ISP_SMIARX3D_HK_REQ_ADDR_1_ts.hk_req_addr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_1_hk_req_addr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_1.ISP_SMIARX3D_HK_REQ_ADDR_1_ts.hk_req_addr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_1(hk_req_addr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_1.word = (uint32_t)hk_req_addr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_1() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_1.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_1_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_1.word = x)


//ISP_SMIARX3D_HK_REQ_ADDR_2


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_2_hk_req_addr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_2.ISP_SMIARX3D_HK_REQ_ADDR_2_ts.hk_req_addr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_2_hk_req_addr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_2.ISP_SMIARX3D_HK_REQ_ADDR_2_ts.hk_req_addr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_2(hk_req_addr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_2.word = (uint32_t)hk_req_addr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_2() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_2.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_2_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_2.word = x)


//ISP_SMIARX3D_HK_REQ_ADDR_3


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_3_hk_req_addr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_3.ISP_SMIARX3D_HK_REQ_ADDR_3_ts.hk_req_addr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_3_hk_req_addr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_3.ISP_SMIARX3D_HK_REQ_ADDR_3_ts.hk_req_addr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_3(hk_req_addr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_3.word = (uint32_t)hk_req_addr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_3() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_3.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_ADDR_3_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_ADDR_3.word = x)


//ISP_SMIARX3D_HK_REQ_DATA_0


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_0_hk_req_data() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_0.ISP_SMIARX3D_HK_REQ_DATA_0_ts.hk_req_data
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_0() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_0.word = )
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_0() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_0.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_0_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_0.word = x)


//ISP_SMIARX3D_HK_REQ_DATA_1


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_1_hk_req_data() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_1.ISP_SMIARX3D_HK_REQ_DATA_1_ts.hk_req_data
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_1() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_1.word = )
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_1() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_1.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_1_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_1.word = x)


//ISP_SMIARX3D_HK_REQ_DATA_2


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_2_hk_req_data() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_2.ISP_SMIARX3D_HK_REQ_DATA_2_ts.hk_req_data
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_2() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_2.word = )
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_2() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_2.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_2_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_2.word = x)


//ISP_SMIARX3D_HK_REQ_DATA_3


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_3_hk_req_data() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_3.ISP_SMIARX3D_HK_REQ_DATA_3_ts.hk_req_data
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_3() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_3.word = )
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_3() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_3.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_HK_REQ_DATA_3_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_HK_REQ_DATA_3.word = x)


//ISP_SMIARX3D_INT_COUNT_0


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_0_pix_count() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_0.ISP_SMIARX3D_INT_COUNT_0_ts.pix_count
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_0_pix_count(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_0.ISP_SMIARX3D_INT_COUNT_0_ts.pix_count = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_0_line_count() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_0.ISP_SMIARX3D_INT_COUNT_0_ts.line_count
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_0_line_count(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_0.ISP_SMIARX3D_INT_COUNT_0_ts.line_count = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_0(pix_count,line_count) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_0.word = (uint32_t)pix_count<<0 | (uint32_t)line_count<<16)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_0() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_0.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_0_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_0.word = x)


//ISP_SMIARX3D_INT_COUNT_1


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_1_pix_count() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_1.ISP_SMIARX3D_INT_COUNT_1_ts.pix_count
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_1_pix_count(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_1.ISP_SMIARX3D_INT_COUNT_1_ts.pix_count = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_1_line_count() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_1.ISP_SMIARX3D_INT_COUNT_1_ts.line_count
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_1_line_count(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_1.ISP_SMIARX3D_INT_COUNT_1_ts.line_count = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_1(pix_count,line_count) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_1.word = (uint32_t)pix_count<<0 | (uint32_t)line_count<<16)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_1() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_1.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_1_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_1.word = x)


//ISP_SMIARX3D_INT_COUNT_2


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_2_pix_count() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_2.ISP_SMIARX3D_INT_COUNT_2_ts.pix_count
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_2_pix_count(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_2.ISP_SMIARX3D_INT_COUNT_2_ts.pix_count = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_2_line_count() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_2.ISP_SMIARX3D_INT_COUNT_2_ts.line_count
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_2_line_count(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_2.ISP_SMIARX3D_INT_COUNT_2_ts.line_count = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_2(pix_count,line_count) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_2.word = (uint32_t)pix_count<<0 | (uint32_t)line_count<<16)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_2() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_2.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_2_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_2.word = x)


//ISP_SMIARX3D_INT_COUNT_3


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_3_pix_count() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_3.ISP_SMIARX3D_INT_COUNT_3_ts.pix_count
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_3_pix_count(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_3.ISP_SMIARX3D_INT_COUNT_3_ts.pix_count = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_3_line_count() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_3.ISP_SMIARX3D_INT_COUNT_3_ts.line_count
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_3_line_count(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_3.ISP_SMIARX3D_INT_COUNT_3_ts.line_count = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_3(pix_count,line_count) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_3.word = (uint32_t)pix_count<<0 | (uint32_t)line_count<<16)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_3() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_3.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_INT_COUNT_3_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_INT_COUNT_3.word = x)


//ISP_SMIARX3D_DFV


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_enable() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_enable
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_enable(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_enable = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_count_0_interrupt_ctrl() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_count_0_interrupt_ctrl
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_count_0_interrupt_ctrl(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_count_0_interrupt_ctrl = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_count_1_interrupt_ctrl() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_count_1_interrupt_ctrl
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_count_1_interrupt_ctrl(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_count_1_interrupt_ctrl = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_count_2_interrupt_ctrl() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_count_2_interrupt_ctrl
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_count_2_interrupt_ctrl(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_count_2_interrupt_ctrl = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_count_3_interrupt_ctrl() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_count_3_interrupt_ctrl
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_count_3_interrupt_ctrl(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_count_3_interrupt_ctrl = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_seq_complete_interrupt_ctrl() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_seq_complete_interrupt_ctrl
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DFV_dfv_seq_complete_interrupt_ctrl(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.ISP_SMIARX3D_DFV_ts.dfv_seq_complete_interrupt_ctrl = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DFV(dfv_enable,dfv_count_0_interrupt_ctrl,dfv_count_1_interrupt_ctrl,dfv_count_2_interrupt_ctrl,dfv_count_3_interrupt_ctrl,dfv_seq_complete_interrupt_ctrl) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.word = (uint32_t)dfv_enable<<0 | (uint32_t)dfv_count_0_interrupt_ctrl<<1 | (uint32_t)dfv_count_1_interrupt_ctrl<<2 | (uint32_t)dfv_count_2_interrupt_ctrl<<3 | (uint32_t)dfv_count_3_interrupt_ctrl<<4 | (uint32_t)dfv_seq_complete_interrupt_ctrl<<5)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DFV() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DFV_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DFV.word = x)


//ISP_SMIARX3D_COUNT_INT_EN


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN_rx_line_count_0_int_en() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.ISP_SMIARX3D_COUNT_INT_EN_ts.rx_line_count_0_int_en
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN_rx_line_count_0_int_en(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.ISP_SMIARX3D_COUNT_INT_EN_ts.rx_line_count_0_int_en = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN_rx_line_count_1_int_en() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.ISP_SMIARX3D_COUNT_INT_EN_ts.rx_line_count_1_int_en
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN_rx_line_count_1_int_en(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.ISP_SMIARX3D_COUNT_INT_EN_ts.rx_line_count_1_int_en = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN_rx_line_count_2_int_en() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.ISP_SMIARX3D_COUNT_INT_EN_ts.rx_line_count_2_int_en
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN_rx_line_count_2_int_en(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.ISP_SMIARX3D_COUNT_INT_EN_ts.rx_line_count_2_int_en = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN_rx_line_count_3_int_en() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.ISP_SMIARX3D_COUNT_INT_EN_ts.rx_line_count_3_int_en
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN_rx_line_count_3_int_en(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.ISP_SMIARX3D_COUNT_INT_EN_ts.rx_line_count_3_int_en = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN_rx_seq_complete_int_en() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.ISP_SMIARX3D_COUNT_INT_EN_ts.rx_seq_complete_int_en
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN_rx_seq_complete_int_en(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.ISP_SMIARX3D_COUNT_INT_EN_ts.rx_seq_complete_int_en = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN(rx_line_count_0_int_en,rx_line_count_1_int_en,rx_line_count_2_int_en,rx_line_count_3_int_en,rx_seq_complete_int_en) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.word = (uint32_t)rx_line_count_0_int_en<<0 | (uint32_t)rx_line_count_1_int_en<<1 | (uint32_t)rx_line_count_2_int_en<<2 | (uint32_t)rx_line_count_3_int_en<<3 | (uint32_t)rx_seq_complete_int_en<<4)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_COUNT_INT_EN_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COUNT_INT_EN.word = x)


//ISP_SMIARX3D_OVERRIDE


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_OVERRIDE_override() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_OVERRIDE.ISP_SMIARX3D_OVERRIDE_ts.override
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_OVERRIDE_override(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_OVERRIDE.ISP_SMIARX3D_OVERRIDE_ts.override = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_OVERRIDE(override) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_OVERRIDE.word = (uint32_t)override<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_OVERRIDE() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_OVERRIDE.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_OVERRIDE_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_OVERRIDE.word = x)


//ISP_SMIARX3D_SENSOR_ID


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SENSOR_ID_sensor_id() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SENSOR_ID.ISP_SMIARX3D_SENSOR_ID_ts.sensor_id
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_SENSOR_ID() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_SENSOR_ID.word


//ISP_SMIARX3D_PIXEL_ORDER


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_B_0x0() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order == pixel_order_B_0x0)
#define pixel_order_B_0x0 0x0    //GR
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_B_0x1() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order == pixel_order_B_0x1)
#define pixel_order_B_0x1 0x1    //RG
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_B_0x2() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order == pixel_order_B_0x2)
#define pixel_order_B_0x2 0x2    //BG
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_B_0x3() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order == pixel_order_B_0x3)
#define pixel_order_B_0x3 0x3    //GB


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order_ovr
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_ovr_B_0x0() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order_ovr == pixel_order_ovr_B_0x0)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_ovr__B_0x0() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order_ovr = pixel_order_ovr_B_0x0)
#define pixel_order_ovr_B_0x0 0x0    //GR
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_ovr_B_0x1() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order_ovr == pixel_order_ovr_B_0x1)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_ovr__B_0x1() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order_ovr = pixel_order_ovr_B_0x1)
#define pixel_order_ovr_B_0x1 0x1    //RG
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_ovr_B_0x2() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order_ovr == pixel_order_ovr_B_0x2)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_ovr__B_0x2() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order_ovr = pixel_order_ovr_B_0x2)
#define pixel_order_ovr_B_0x2 0x2    //BG
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_ovr_B_0x3() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order_ovr == pixel_order_ovr_B_0x3)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_pixel_order_ovr__B_0x3() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.ISP_SMIARX3D_PIXEL_ORDER_ts.pixel_order_ovr = pixel_order_ovr_B_0x3)
#define pixel_order_ovr_B_0x3 0x3    //GB
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER(pixel_order_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.word = (uint32_t)pixel_order_ovr<<8)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_PIXEL_ORDER_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_PIXEL_ORDER.word = x)


//ISP_SMIARX3D_AUTO_HENV_LENGTH


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_AUTO_HENV_LENGTH_auto_henv_length() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_AUTO_HENV_LENGTH.ISP_SMIARX3D_AUTO_HENV_LENGTH_ts.auto_henv_length
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_AUTO_HENV_LENGTH_auto_henv_length(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_AUTO_HENV_LENGTH.ISP_SMIARX3D_AUTO_HENV_LENGTH_ts.auto_henv_length = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_AUTO_HENV_LENGTH(auto_henv_length) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_AUTO_HENV_LENGTH.word = (uint32_t)auto_henv_length<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_AUTO_HENV_LENGTH() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_AUTO_HENV_LENGTH.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_AUTO_HENV_LENGTH_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_AUTO_HENV_LENGTH.word = x)


//ISP_SMIARX3D_FRAME_LENGTH


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_LENGTH_frame_length() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_LENGTH.ISP_SMIARX3D_FRAME_LENGTH_ts.frame_length


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_LENGTH_frame_length_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_LENGTH.ISP_SMIARX3D_FRAME_LENGTH_ts.frame_length_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_LENGTH_frame_length_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_LENGTH.ISP_SMIARX3D_FRAME_LENGTH_ts.frame_length_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_LENGTH(frame_length_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_LENGTH.word = (uint32_t)frame_length_ovr<<16)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_LENGTH() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_LENGTH.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_FRAME_LENGTH_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FRAME_LENGTH.word = x)


//ISP_SMIARX3D_LINE_LENGTH


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_LINE_LENGTH_line_length() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_LINE_LENGTH.ISP_SMIARX3D_LINE_LENGTH_ts.line_length


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_LINE_LENGTH_line_length_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_LINE_LENGTH.ISP_SMIARX3D_LINE_LENGTH_ts.line_length_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_LINE_LENGTH_line_length_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_LINE_LENGTH.ISP_SMIARX3D_LINE_LENGTH_ts.line_length_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_LINE_LENGTH(line_length_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_LINE_LENGTH.word = (uint32_t)line_length_ovr<<16)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_LINE_LENGTH() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_LINE_LENGTH.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_LINE_LENGTH_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_LINE_LENGTH.word = x)


//ISP_SMIARX3D_X_ADDR_START


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_X_ADDR_START_x_addr_start() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_X_ADDR_START.ISP_SMIARX3D_X_ADDR_START_ts.x_addr_start
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_X_ADDR_START() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_X_ADDR_START.word


//ISP_SMIARX3D_Y_ADDR_START


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_Y_ADDR_START_y_addr_start() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_Y_ADDR_START.ISP_SMIARX3D_Y_ADDR_START_ts.y_addr_start
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_Y_ADDR_START() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_Y_ADDR_START.word


//ISP_SMIARX3D_X_ADDR_END


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_X_ADDR_END_x_addr_end() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_X_ADDR_END.ISP_SMIARX3D_X_ADDR_END_ts.x_addr_end
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_X_ADDR_END() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_X_ADDR_END.word


//ISP_SMIARX3D_Y_ADDR_END


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_Y_ADDR_END_y_addr_end() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_Y_ADDR_END.ISP_SMIARX3D_Y_ADDR_END_ts.y_addr_end
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_Y_ADDR_END() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_Y_ADDR_END.word


//ISP_SMIARX3D_X_OUTPUT_SIZE


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_X_OUTPUT_SIZE_x_output_size() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_X_OUTPUT_SIZE.ISP_SMIARX3D_X_OUTPUT_SIZE_ts.x_output_size
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_X_OUTPUT_SIZE() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_X_OUTPUT_SIZE.word


//ISP_SMIARX3D_Y_OUTPUT_SIZE


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_Y_OUTPUT_SIZE_y_output_size() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_Y_OUTPUT_SIZE.ISP_SMIARX3D_Y_OUTPUT_SIZE_ts.y_output_size
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_Y_OUTPUT_SIZE() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_Y_OUTPUT_SIZE.word


//ISP_SMIARX3D_ADDR_INCREMENTS


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_x_even_inc_lsb() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.x_even_inc_lsb


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_x_even_inc_lsb_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.x_even_inc_lsb_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_x_even_inc_lsb_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.x_even_inc_lsb_ovr = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_x_odd_inc_lsb() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.x_odd_inc_lsb


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_x_odd_inc_lsb_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.x_odd_inc_lsb_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_x_odd_inc_lsb_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.x_odd_inc_lsb_ovr = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_y_even_inc_lsb() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.y_even_inc_lsb


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_y_even_inc_lsb_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.y_even_inc_lsb_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_y_even_inc_lsb_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.y_even_inc_lsb_ovr = x)


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_y_odd_inc_lsb() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.y_odd_inc_lsb


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_y_odd_inc_lsb_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.y_odd_inc_lsb_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_y_odd_inc_lsb_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.ISP_SMIARX3D_ADDR_INCREMENTS_ts.y_odd_inc_lsb_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS(x_even_inc_lsb_ovr,x_odd_inc_lsb_ovr,y_even_inc_lsb_ovr,y_odd_inc_lsb_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.word = (uint32_t)x_even_inc_lsb_ovr<<1 | (uint32_t)x_odd_inc_lsb_ovr<<3 | (uint32_t)y_even_inc_lsb_ovr<<5 | (uint32_t)y_odd_inc_lsb_ovr<<7)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_ADDR_INCREMENTS_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ADDR_INCREMENTS.word = x)


//ISP_SMIARX3D_FINE_EXPOSURE


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_FINE_EXPOSURE_fine_exposure() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FINE_EXPOSURE.ISP_SMIARX3D_FINE_EXPOSURE_ts.fine_exposure
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_FINE_EXPOSURE() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_FINE_EXPOSURE.word


//ISP_SMIARX3D_COARSE_EXPOSURE


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_COARSE_EXPOSURE_coarse_exposure() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COARSE_EXPOSURE.ISP_SMIARX3D_COARSE_EXPOSURE_ts.coarse_exposure
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_COARSE_EXPOSURE() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_COARSE_EXPOSURE.word


//ISP_SMIARX3D_ANALOG_GAIN


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_ANALOG_GAIN_analog_gain() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ANALOG_GAIN.ISP_SMIARX3D_ANALOG_GAIN_ts.analog_gain
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_ANALOG_GAIN() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_ANALOG_GAIN.word


//ISP_SMIARX3D_MODEL_SUBTYPE


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_MODEL_SUBTYPE_frame_format_model_subtype() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_MODEL_SUBTYPE.ISP_SMIARX3D_MODEL_SUBTYPE_ts.frame_format_model_subtype


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_MODEL_SUBTYPE_frame_format_model_subtype_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_MODEL_SUBTYPE.ISP_SMIARX3D_MODEL_SUBTYPE_ts.frame_format_model_subtype_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_MODEL_SUBTYPE_frame_format_model_subtype_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_MODEL_SUBTYPE.ISP_SMIARX3D_MODEL_SUBTYPE_ts.frame_format_model_subtype_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_MODEL_SUBTYPE(frame_format_model_subtype_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_MODEL_SUBTYPE.word = (uint32_t)frame_format_model_subtype_ovr<<8)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_MODEL_SUBTYPE() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_MODEL_SUBTYPE.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_MODEL_SUBTYPE_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_MODEL_SUBTYPE.word = x)


//ISP_SMIARX3D_DESCRIPTOR_0


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_0_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_0.ISP_SMIARX3D_DESCRIPTOR_0_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_0() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_0.word


//ISP_SMIARX3D_DESCRIPTOR_1


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_1_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_1.ISP_SMIARX3D_DESCRIPTOR_1_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_1() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_1.word


//ISP_SMIARX3D_DESCRIPTOR_2


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_2_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_2.ISP_SMIARX3D_DESCRIPTOR_2_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_2() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_2.word


//ISP_SMIARX3D_DESCRIPTOR_3


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_3_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_3.ISP_SMIARX3D_DESCRIPTOR_3_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_3() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_3.word


//ISP_SMIARX3D_DESCRIPTOR_4


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_4_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_4.ISP_SMIARX3D_DESCRIPTOR_4_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_4() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_4.word


//ISP_SMIARX3D_DESCRIPTOR_5


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_5_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_5.ISP_SMIARX3D_DESCRIPTOR_5_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_5() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_5.word


//ISP_SMIARX3D_DESCRIPTOR_6


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_6_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_6.ISP_SMIARX3D_DESCRIPTOR_6_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_6() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_6.word


//ISP_SMIARX3D_DESCRIPTOR_7


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_7_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_7.ISP_SMIARX3D_DESCRIPTOR_7_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_7() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_7.word


//ISP_SMIARX3D_DESCRIPTOR_8


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_8_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_8.ISP_SMIARX3D_DESCRIPTOR_8_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_8() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_8.word


//ISP_SMIARX3D_DESCRIPTOR_9


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_9_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_9.ISP_SMIARX3D_DESCRIPTOR_9_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_9() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_9.word


//ISP_SMIARX3D_DESCRIPTOR_10


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_10_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_10.ISP_SMIARX3D_DESCRIPTOR_10_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_10() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_10.word


//ISP_SMIARX3D_DESCRIPTOR_11


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_11_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_11.ISP_SMIARX3D_DESCRIPTOR_11_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_11() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_11.word


//ISP_SMIARX3D_DESCRIPTOR_12


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_12_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_12.ISP_SMIARX3D_DESCRIPTOR_12_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_12() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_12.word


//ISP_SMIARX3D_DESCRIPTOR_13


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_13_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_13.ISP_SMIARX3D_DESCRIPTOR_13_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_13() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_13.word


//ISP_SMIARX3D_DESCRIPTOR_14


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_14_frame_format_descriptor() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_14.ISP_SMIARX3D_DESCRIPTOR_14_ts.frame_format_descriptor
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_14() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_14.word


//ISP_SMIARX3D_TYPE_TRANS_1


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_4() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_4
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_4_BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_4 == type_trans_mspec_4_BLANK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_4__BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_4 = type_trans_mspec_4_BLANK)
#define type_trans_mspec_4_BLANK 0x0    //MAN_SPEC_4 lines will be converted to BLANK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_4_BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_4 == type_trans_mspec_4_BLACK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_4__BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_4 = type_trans_mspec_4_BLACK)
#define type_trans_mspec_4_BLACK 0x1    //MAN_SPEC_4 lines will be converted to BLACK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_4_DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_4 == type_trans_mspec_4_DARK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_4__DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_4 = type_trans_mspec_4_DARK)
#define type_trans_mspec_4_DARK 0x2    //MAN_SPEC_4 lines will be converted to DARK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_4_ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_4 == type_trans_mspec_4_ACTIVE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_4__ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_4 = type_trans_mspec_4_ACTIVE)
#define type_trans_mspec_4_ACTIVE 0x3    //MAN_SPEC_4 lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_5() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_5
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_5_BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_5 == type_trans_mspec_5_BLANK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_5__BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_5 = type_trans_mspec_5_BLANK)
#define type_trans_mspec_5_BLANK 0x0    //MAN_SPEC_5 lines will be converted to BLANK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_5_BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_5 == type_trans_mspec_5_BLACK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_5__BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_5 = type_trans_mspec_5_BLACK)
#define type_trans_mspec_5_BLACK 0x1    //MAN_SPEC_5 lines will be converted to BLACK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_5_DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_5 == type_trans_mspec_5_DARK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_5__DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_5 = type_trans_mspec_5_DARK)
#define type_trans_mspec_5_DARK 0x2    //MAN_SPEC_5 lines will be converted to DARK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_5_ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_5 == type_trans_mspec_5_ACTIVE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_5__ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_5 = type_trans_mspec_5_ACTIVE)
#define type_trans_mspec_5_ACTIVE 0x3    //MAN_SPEC_5 lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_6() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_6
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_6_BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_6 == type_trans_mspec_6_BLANK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_6__BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_6 = type_trans_mspec_6_BLANK)
#define type_trans_mspec_6_BLANK 0x0    //MAN_SPEC_6 lines will be converted to BLANK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_6_BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_6 == type_trans_mspec_6_BLACK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_6__BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_6 = type_trans_mspec_6_BLACK)
#define type_trans_mspec_6_BLACK 0x1    //MAN_SPEC_6 lines will be converted to BLACK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_6_DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_6 == type_trans_mspec_6_DARK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_6__DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_6 = type_trans_mspec_6_DARK)
#define type_trans_mspec_6_DARK 0x2    //MAN_SPEC_6 lines will be converted to DARK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_6_ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_6 == type_trans_mspec_6_ACTIVE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_type_trans_mspec_6__ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.ISP_SMIARX3D_TYPE_TRANS_1_ts.type_trans_mspec_6 = type_trans_mspec_6_ACTIVE)
#define type_trans_mspec_6_ACTIVE 0x3    //MAN_SPEC_6 lines will be converted to ACTIVE lines
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1(type_trans_mspec_4,type_trans_mspec_5,type_trans_mspec_6) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.word = (uint16_t)type_trans_mspec_4<<0 | (uint16_t)type_trans_mspec_5<<4 | (uint16_t)type_trans_mspec_6<<8)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_1_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_1.word = x)


//ISP_SMIARX3D_TYPE_TRANS_0


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_black() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_black
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_black_BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_black == type_trans_black_BLANK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_black__BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_black = type_trans_black_BLANK)
#define type_trans_black_BLANK 0x0    //BLACK lines will be converted to BLANK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_black_BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_black == type_trans_black_BLACK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_black__BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_black = type_trans_black_BLACK)
#define type_trans_black_BLACK 0x1    //BLACK lines will be converted to BLACK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_black_DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_black == type_trans_black_DARK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_black__DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_black = type_trans_black_DARK)
#define type_trans_black_DARK 0x2    //BLACK lines will be converted to DARK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_black_ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_black == type_trans_black_ACTIVE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_black__ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_black = type_trans_black_ACTIVE)
#define type_trans_black_ACTIVE 0x3    //BLACK lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dark() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dark
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dark_BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dark == type_trans_dark_BLANK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dark__BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dark = type_trans_dark_BLANK)
#define type_trans_dark_BLANK 0x0    //DARK lines will be converted to BLANK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dark_BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dark == type_trans_dark_BLACK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dark__BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dark = type_trans_dark_BLACK)
#define type_trans_dark_BLACK 0x1    //DARK lines will be converted to BLACK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dark_DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dark == type_trans_dark_DARK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dark__DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dark = type_trans_dark_DARK)
#define type_trans_dark_DARK 0x2    //DARK lines will be converted to DARK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dark_ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dark == type_trans_dark_ACTIVE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dark__ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dark = type_trans_dark_ACTIVE)
#define type_trans_dark_ACTIVE 0x3    //DARK lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_visible() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_visible
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_visible_BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_visible == type_trans_visible_BLANK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_visible__BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_visible = type_trans_visible_BLANK)
#define type_trans_visible_BLANK 0x0    //VISIBLE lines will be converted to BLANK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_visible_BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_visible == type_trans_visible_BLACK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_visible__BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_visible = type_trans_visible_BLACK)
#define type_trans_visible_BLACK 0x1    //VISIBLE lines will be converted to BLACK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_visible_DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_visible == type_trans_visible_DARK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_visible__DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_visible = type_trans_visible_DARK)
#define type_trans_visible_DARK 0x2    //VISIBLE lines will be converted to DARK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_visible_ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_visible == type_trans_visible_ACTIVE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_visible__ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_visible = type_trans_visible_ACTIVE)
#define type_trans_visible_ACTIVE 0x3    //VISIBLE lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dummy() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dummy
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dummy_BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dummy == type_trans_dummy_BLANK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dummy__BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dummy = type_trans_dummy_BLANK)
#define type_trans_dummy_BLANK 0x0    //DUMMY lines will be converted to BLANK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dummy_BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dummy == type_trans_dummy_BLACK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dummy__BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dummy = type_trans_dummy_BLACK)
#define type_trans_dummy_BLACK 0x1    //DUMMY lines will be converted to BLACK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dummy_DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dummy == type_trans_dummy_DARK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dummy__DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dummy = type_trans_dummy_DARK)
#define type_trans_dummy_DARK 0x2    //DUMMY lines will be converted to DARK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dummy_ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dummy == type_trans_dummy_ACTIVE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_dummy__ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_dummy = type_trans_dummy_ACTIVE)
#define type_trans_dummy_ACTIVE 0x3    //DUMMY lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_0() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_0
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_0_BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_0 == type_trans_mspec_0_BLANK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_0__BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_0 = type_trans_mspec_0_BLANK)
#define type_trans_mspec_0_BLANK 0x0    //MAN_SPEC_0 lines will be converted to BLANK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_0_BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_0 == type_trans_mspec_0_BLACK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_0__BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_0 = type_trans_mspec_0_BLACK)
#define type_trans_mspec_0_BLACK 0x1    //MAN_SPEC_0 lines will be converted to BLACK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_0_DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_0 == type_trans_mspec_0_DARK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_0__DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_0 = type_trans_mspec_0_DARK)
#define type_trans_mspec_0_DARK 0x2    //MAN_SPEC_0 lines will be converted to DARK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_0_ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_0 == type_trans_mspec_0_ACTIVE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_0__ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_0 = type_trans_mspec_0_ACTIVE)
#define type_trans_mspec_0_ACTIVE 0x3    //MAN_SPEC_0 lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_1() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_1
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_1_BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_1 == type_trans_mspec_1_BLANK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_1__BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_1 = type_trans_mspec_1_BLANK)
#define type_trans_mspec_1_BLANK 0x0    //MAN_SPEC_1 lines will be converted to BLANK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_1_BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_1 == type_trans_mspec_1_BLACK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_1__BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_1 = type_trans_mspec_1_BLACK)
#define type_trans_mspec_1_BLACK 0x1    //MAN_SPEC_1 lines will be converted to BLACK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_1_DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_1 == type_trans_mspec_1_DARK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_1__DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_1 = type_trans_mspec_1_DARK)
#define type_trans_mspec_1_DARK 0x2    //MAN_SPEC_1 lines will be converted to DARK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_1_ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_1 == type_trans_mspec_1_ACTIVE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_1__ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_1 = type_trans_mspec_1_ACTIVE)
#define type_trans_mspec_1_ACTIVE 0x3    //MAN_SPEC_1 lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_2() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_2
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_2_BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_2 == type_trans_mspec_2_BLANK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_2__BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_2 = type_trans_mspec_2_BLANK)
#define type_trans_mspec_2_BLANK 0x0    //MAN_SPEC_2 lines will be converted to BLANK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_2_BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_2 == type_trans_mspec_2_BLACK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_2__BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_2 = type_trans_mspec_2_BLACK)
#define type_trans_mspec_2_BLACK 0x1    //MAN_SPEC_2 lines will be converted to BLACK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_2_DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_2 == type_trans_mspec_2_DARK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_2__DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_2 = type_trans_mspec_2_DARK)
#define type_trans_mspec_2_DARK 0x2    //MAN_SPEC_2 lines will be converted to DARK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_2_ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_2 == type_trans_mspec_2_ACTIVE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_2__ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_2 = type_trans_mspec_2_ACTIVE)
#define type_trans_mspec_2_ACTIVE 0x3    //MAN_SPEC_2 lines will be converted to ACTIVE lines


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_3() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_3
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_3_BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_3 == type_trans_mspec_3_BLANK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_3__BLANK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_3 = type_trans_mspec_3_BLANK)
#define type_trans_mspec_3_BLANK 0x0    //MAN_SPEC_3 lines will be converted to BLANK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_3_BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_3 == type_trans_mspec_3_BLACK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_3__BLACK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_3 = type_trans_mspec_3_BLACK)
#define type_trans_mspec_3_BLACK 0x1    //MAN_SPEC_3 lines will be converted to BLACK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_3_DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_3 == type_trans_mspec_3_DARK)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_3__DARK() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_3 = type_trans_mspec_3_DARK)
#define type_trans_mspec_3_DARK 0x2    //MAN_SPEC_3 lines will be converted to DARK lines
#define Is_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_3_ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_3 == type_trans_mspec_3_ACTIVE)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_type_trans_mspec_3__ACTIVE() (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.ISP_SMIARX3D_TYPE_TRANS_0_ts.type_trans_mspec_3 = type_trans_mspec_3_ACTIVE)
#define type_trans_mspec_3_ACTIVE 0x3    //MAN_SPEC_3 lines will be converted to ACTIVE lines
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0(type_trans_black,type_trans_dark,type_trans_visible,type_trans_dummy,type_trans_mspec_0,type_trans_mspec_1,type_trans_mspec_2,type_trans_mspec_3) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.word = (uint32_t)type_trans_black<<0 | (uint32_t)type_trans_dark<<4 | (uint32_t)type_trans_visible<<8 | (uint32_t)type_trans_dummy<<12 | (uint32_t)type_trans_mspec_0<<16 | (uint32_t)type_trans_mspec_1<<20 | (uint32_t)type_trans_mspec_2<<24 | (uint32_t)type_trans_mspec_3<<28)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_TYPE_TRANS_0_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_TYPE_TRANS_0.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_0


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_0_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_0.ISP_SMIARX3D_DESCRIPTOR_OVR_0_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_0_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_0.ISP_SMIARX3D_DESCRIPTOR_OVR_0_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_0(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_0.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_0() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_0.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_0_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_0.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_1


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_1_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_1.ISP_SMIARX3D_DESCRIPTOR_OVR_1_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_1_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_1.ISP_SMIARX3D_DESCRIPTOR_OVR_1_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_1(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_1.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_1() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_1.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_1_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_1.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_2


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_2_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_2.ISP_SMIARX3D_DESCRIPTOR_OVR_2_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_2_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_2.ISP_SMIARX3D_DESCRIPTOR_OVR_2_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_2(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_2.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_2() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_2.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_2_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_2.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_3


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_3_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_3.ISP_SMIARX3D_DESCRIPTOR_OVR_3_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_3_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_3.ISP_SMIARX3D_DESCRIPTOR_OVR_3_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_3(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_3.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_3() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_3.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_3_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_3.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_4


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_4_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_4.ISP_SMIARX3D_DESCRIPTOR_OVR_4_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_4_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_4.ISP_SMIARX3D_DESCRIPTOR_OVR_4_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_4(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_4.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_4() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_4.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_4_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_4.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_5


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_5_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_5.ISP_SMIARX3D_DESCRIPTOR_OVR_5_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_5_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_5.ISP_SMIARX3D_DESCRIPTOR_OVR_5_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_5(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_5.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_5() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_5.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_5_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_5.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_6


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_6_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_6.ISP_SMIARX3D_DESCRIPTOR_OVR_6_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_6_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_6.ISP_SMIARX3D_DESCRIPTOR_OVR_6_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_6(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_6.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_6() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_6.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_6_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_6.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_7


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_7_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_7.ISP_SMIARX3D_DESCRIPTOR_OVR_7_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_7_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_7.ISP_SMIARX3D_DESCRIPTOR_OVR_7_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_7(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_7.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_7() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_7.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_7_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_7.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_8


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_8_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_8.ISP_SMIARX3D_DESCRIPTOR_OVR_8_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_8_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_8.ISP_SMIARX3D_DESCRIPTOR_OVR_8_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_8(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_8.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_8() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_8.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_8_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_8.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_9


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_9_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_9.ISP_SMIARX3D_DESCRIPTOR_OVR_9_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_9_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_9.ISP_SMIARX3D_DESCRIPTOR_OVR_9_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_9(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_9.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_9() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_9.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_9_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_9.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_10


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_10_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_10.ISP_SMIARX3D_DESCRIPTOR_OVR_10_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_10_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_10.ISP_SMIARX3D_DESCRIPTOR_OVR_10_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_10(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_10.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_10() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_10.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_10_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_10.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_11


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_11_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_11.ISP_SMIARX3D_DESCRIPTOR_OVR_11_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_11_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_11.ISP_SMIARX3D_DESCRIPTOR_OVR_11_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_11(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_11.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_11() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_11.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_11_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_11.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_12


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_12_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_12.ISP_SMIARX3D_DESCRIPTOR_OVR_12_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_12_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_12.ISP_SMIARX3D_DESCRIPTOR_OVR_12_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_12(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_12.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_12() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_12.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_12_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_12.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_13


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_13_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_13.ISP_SMIARX3D_DESCRIPTOR_OVR_13_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_13_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_13.ISP_SMIARX3D_DESCRIPTOR_OVR_13_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_13(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_13.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_13() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_13.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_13_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_13.word = x)


//ISP_SMIARX3D_DESCRIPTOR_OVR_14


#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_14_frame_format_descriptor_ovr() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_14.ISP_SMIARX3D_DESCRIPTOR_OVR_14_ts.frame_format_descriptor_ovr
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_14_frame_format_descriptor_ovr(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_14.ISP_SMIARX3D_DESCRIPTOR_OVR_14_ts.frame_format_descriptor_ovr = x)
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_14(frame_format_descriptor_ovr) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_14.word = (uint32_t)frame_format_descriptor_ovr<<0)
#define Get_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_14() p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_14.word
#define Set_ISP_SMIARX3D_ISP_SMIARX3D_DESCRIPTOR_OVR_14_word(x) (p_ISP_SMIARX3D_IP->ISP_SMIARX3D_DESCRIPTOR_OVR_14.word = x)

//ISP_CE0_RGB2YUV_MATRIX_ENABLE
/*Description: Matrix Control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable Matrix module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* Soft reset deasserted*/
    }ISP_CE0_RGB2YUV_MATRIX_ENABLE_ts;

}ISP_CE0_RGB2YUV_MATRIX_ENABLE_tu;



//ISP_CE0_RGB2YUV_MATRIX_RCOF00
/*Description: On-diagonal Matrix coefficient (0,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof00;
        /* Matrix Coefficient (0,0).*/
    }ISP_CE0_RGB2YUV_MATRIX_RCOF00_ts;

}ISP_CE0_RGB2YUV_MATRIX_RCOF00_tu;



//ISP_CE0_RGB2YUV_MATRIX_RCOF01
/*Description: Off-diagonal Matrix coefficient (0,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof01;
        /* Matrix Coefficient (0,1).*/
    }ISP_CE0_RGB2YUV_MATRIX_RCOF01_ts;

}ISP_CE0_RGB2YUV_MATRIX_RCOF01_tu;



//ISP_CE0_RGB2YUV_MATRIX_RCOF02
/*Description: Off-diagonal Matrix coefficient (0,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof02;
        /* Matrix Coefficient (0,2).*/
    }ISP_CE0_RGB2YUV_MATRIX_RCOF02_ts;

}ISP_CE0_RGB2YUV_MATRIX_RCOF02_tu;



//ISP_CE0_RGB2YUV_MATRIX_RCOF10
/*Description: Off-diagonal Matrix coefficient (1,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof10;
        /* Matrix Coefficient (1,0).*/
    }ISP_CE0_RGB2YUV_MATRIX_RCOF10_ts;

}ISP_CE0_RGB2YUV_MATRIX_RCOF10_tu;



//ISP_CE0_RGB2YUV_MATRIX_RCOF11
/*Description: On-diagonal Matrix coefficient (1,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof11;
        /* Matrix Coefficient (1,1).*/
    }ISP_CE0_RGB2YUV_MATRIX_RCOF11_ts;

}ISP_CE0_RGB2YUV_MATRIX_RCOF11_tu;



//ISP_CE0_RGB2YUV_MATRIX_RCOF12
/*Description: Off-diagonal Matrix coefficient (1,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof12;
        /* Matrix Coefficient (1,2).*/
    }ISP_CE0_RGB2YUV_MATRIX_RCOF12_ts;

}ISP_CE0_RGB2YUV_MATRIX_RCOF12_tu;



//ISP_CE0_RGB2YUV_MATRIX_RCOF20
/*Description: Off-diagonal Matrix coefficient (2,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof20;
        /* Matrix Coefficient (2,0).*/
    }ISP_CE0_RGB2YUV_MATRIX_RCOF20_ts;

}ISP_CE0_RGB2YUV_MATRIX_RCOF20_tu;



//ISP_CE0_RGB2YUV_MATRIX_RCOF21
/*Description: Off-diagonal Matrix coefficient (2,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof21;
        /* Matrix Coefficient (2,1).*/
    }ISP_CE0_RGB2YUV_MATRIX_RCOF21_ts;

}ISP_CE0_RGB2YUV_MATRIX_RCOF21_tu;



//ISP_CE0_RGB2YUV_MATRIX_RCOF22
/*Description: On-diagonal Matrix coefficient (2,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof22;
        /* Matrix Coefficient (2,2).*/
    }ISP_CE0_RGB2YUV_MATRIX_RCOF22_ts;

}ISP_CE0_RGB2YUV_MATRIX_RCOF22_tu;



//ISP_CE0_RGB2YUV_MATRIX_R_OFFSET
/*Description: Offset for R data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t r_offset :13;
        /* offset for R data*/
    }ISP_CE0_RGB2YUV_MATRIX_R_OFFSET_ts;

}ISP_CE0_RGB2YUV_MATRIX_R_OFFSET_tu;



//ISP_CE0_RGB2YUV_MATRIX_G_OFFSET
/*Description: Offset for G data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t g_offset :13;
        /* offset for G data*/
    }ISP_CE0_RGB2YUV_MATRIX_G_OFFSET_ts;

}ISP_CE0_RGB2YUV_MATRIX_G_OFFSET_tu;



//ISP_CE0_RGB2YUV_MATRIX_B_OFFSET
/*Description: Offset for B data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit































Synthesis Results
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t b_offset :13;
        /* offset for B data*/
    }ISP_CE0_RGB2YUV_MATRIX_B_OFFSET_ts;

}ISP_CE0_RGB2YUV_MATRIX_B_OFFSET_tu;

typedef struct
{
    ISP_CE0_RGB2YUV_MATRIX_ENABLE_tu ISP_CE0_RGB2YUV_MATRIX_ENABLE;
    ISP_CE0_RGB2YUV_MATRIX_RCOF00_tu ISP_CE0_RGB2YUV_MATRIX_RCOF00;
    ISP_CE0_RGB2YUV_MATRIX_RCOF01_tu ISP_CE0_RGB2YUV_MATRIX_RCOF01;
    ISP_CE0_RGB2YUV_MATRIX_RCOF02_tu ISP_CE0_RGB2YUV_MATRIX_RCOF02;
    ISP_CE0_RGB2YUV_MATRIX_RCOF10_tu ISP_CE0_RGB2YUV_MATRIX_RCOF10;
    ISP_CE0_RGB2YUV_MATRIX_RCOF11_tu ISP_CE0_RGB2YUV_MATRIX_RCOF11;
    ISP_CE0_RGB2YUV_MATRIX_RCOF12_tu ISP_CE0_RGB2YUV_MATRIX_RCOF12;
    ISP_CE0_RGB2YUV_MATRIX_RCOF20_tu ISP_CE0_RGB2YUV_MATRIX_RCOF20;
    ISP_CE0_RGB2YUV_MATRIX_RCOF21_tu ISP_CE0_RGB2YUV_MATRIX_RCOF21;
    ISP_CE0_RGB2YUV_MATRIX_RCOF22_tu ISP_CE0_RGB2YUV_MATRIX_RCOF22;
    ISP_CE0_RGB2YUV_MATRIX_R_OFFSET_tu ISP_CE0_RGB2YUV_MATRIX_R_OFFSET;
    ISP_CE0_RGB2YUV_MATRIX_G_OFFSET_tu ISP_CE0_RGB2YUV_MATRIX_G_OFFSET;
    ISP_CE0_RGB2YUV_MATRIX_B_OFFSET_tu ISP_CE0_RGB2YUV_MATRIX_B_OFFSET;
}ISP_CE0_RGB2YUV_MATRIX_IP_ts;




//ISP_CE0_RGB2YUV_MATRIX_ENABLE


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE_enable() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.ISP_CE0_RGB2YUV_MATRIX_ENABLE_ts.enable
#define Is_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE_enable_DISABLE() (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.ISP_CE0_RGB2YUV_MATRIX_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE_enable__DISABLE() (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.ISP_CE0_RGB2YUV_MATRIX_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable Matrix module
#define Is_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE_enable_ENABLE() (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.ISP_CE0_RGB2YUV_MATRIX_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE_enable__ENABLE() (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.ISP_CE0_RGB2YUV_MATRIX_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable Matrix module


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE_soft_reset() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.ISP_CE0_RGB2YUV_MATRIX_ENABLE_ts.soft_reset
#define Is_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE_soft_reset_DISABLE() (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.ISP_CE0_RGB2YUV_MATRIX_ENABLE_ts.soft_reset == soft_reset_DISABLE)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE_soft_reset__DISABLE() (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.ISP_CE0_RGB2YUV_MATRIX_ENABLE_ts.soft_reset = soft_reset_DISABLE)
#define soft_reset_DISABLE 0x0    //Soft reset deasserted
#define Is_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE_soft_reset_ENABLE() (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.ISP_CE0_RGB2YUV_MATRIX_ENABLE_ts.soft_reset == soft_reset_ENABLE)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE_soft_reset__ENABLE() (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.ISP_CE0_RGB2YUV_MATRIX_ENABLE_ts.soft_reset = soft_reset_ENABLE)
#define soft_reset_ENABLE 0x1    //Soft reset asserted
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE(enable,soft_reset) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_ENABLE_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_ENABLE.word = x)


//ISP_CE0_RGB2YUV_MATRIX_RCOF00


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF00_rcof00() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF00.ISP_CE0_RGB2YUV_MATRIX_RCOF00_ts.rcof00
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF00_rcof00(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF00.ISP_CE0_RGB2YUV_MATRIX_RCOF00_ts.rcof00 = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF00(rcof00) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF00.word = (uint32_t)rcof00<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF00() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF00.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF00_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF00.word = x)


//ISP_CE0_RGB2YUV_MATRIX_RCOF01


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF01_rcof01() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF01.ISP_CE0_RGB2YUV_MATRIX_RCOF01_ts.rcof01
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF01_rcof01(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF01.ISP_CE0_RGB2YUV_MATRIX_RCOF01_ts.rcof01 = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF01(rcof01) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF01.word = (uint32_t)rcof01<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF01() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF01.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF01_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF01.word = x)


//ISP_CE0_RGB2YUV_MATRIX_RCOF02


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF02_rcof02() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF02.ISP_CE0_RGB2YUV_MATRIX_RCOF02_ts.rcof02
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF02_rcof02(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF02.ISP_CE0_RGB2YUV_MATRIX_RCOF02_ts.rcof02 = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF02(rcof02) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF02.word = (uint32_t)rcof02<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF02() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF02.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF02_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF02.word = x)


//ISP_CE0_RGB2YUV_MATRIX_RCOF10


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF10_rcof10() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF10.ISP_CE0_RGB2YUV_MATRIX_RCOF10_ts.rcof10
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF10_rcof10(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF10.ISP_CE0_RGB2YUV_MATRIX_RCOF10_ts.rcof10 = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF10(rcof10) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF10.word = (uint32_t)rcof10<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF10() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF10.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF10_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF10.word = x)


//ISP_CE0_RGB2YUV_MATRIX_RCOF11


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF11_rcof11() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF11.ISP_CE0_RGB2YUV_MATRIX_RCOF11_ts.rcof11
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF11_rcof11(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF11.ISP_CE0_RGB2YUV_MATRIX_RCOF11_ts.rcof11 = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF11(rcof11) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF11.word = (uint32_t)rcof11<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF11() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF11.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF11_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF11.word = x)


//ISP_CE0_RGB2YUV_MATRIX_RCOF12


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF12_rcof12() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF12.ISP_CE0_RGB2YUV_MATRIX_RCOF12_ts.rcof12
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF12_rcof12(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF12.ISP_CE0_RGB2YUV_MATRIX_RCOF12_ts.rcof12 = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF12(rcof12) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF12.word = (uint32_t)rcof12<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF12() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF12.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF12_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF12.word = x)


//ISP_CE0_RGB2YUV_MATRIX_RCOF20


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF20_rcof20() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF20.ISP_CE0_RGB2YUV_MATRIX_RCOF20_ts.rcof20
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF20_rcof20(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF20.ISP_CE0_RGB2YUV_MATRIX_RCOF20_ts.rcof20 = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF20(rcof20) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF20.word = (uint32_t)rcof20<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF20() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF20.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF20_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF20.word = x)


//ISP_CE0_RGB2YUV_MATRIX_RCOF21


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF21_rcof21() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF21.ISP_CE0_RGB2YUV_MATRIX_RCOF21_ts.rcof21
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF21_rcof21(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF21.ISP_CE0_RGB2YUV_MATRIX_RCOF21_ts.rcof21 = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF21(rcof21) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF21.word = (uint32_t)rcof21<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF21() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF21.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF21_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF21.word = x)


//ISP_CE0_RGB2YUV_MATRIX_RCOF22


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF22_rcof22() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF22.ISP_CE0_RGB2YUV_MATRIX_RCOF22_ts.rcof22
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF22_rcof22(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF22.ISP_CE0_RGB2YUV_MATRIX_RCOF22_ts.rcof22 = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF22(rcof22) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF22.word = (uint32_t)rcof22<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF22() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF22.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_RCOF22_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_RCOF22.word = x)


//ISP_CE0_RGB2YUV_MATRIX_R_OFFSET


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_R_OFFSET_r_offset() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_R_OFFSET.ISP_CE0_RGB2YUV_MATRIX_R_OFFSET_ts.r_offset
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_R_OFFSET_r_offset(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_R_OFFSET.ISP_CE0_RGB2YUV_MATRIX_R_OFFSET_ts.r_offset = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_R_OFFSET(r_offset) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_R_OFFSET.word = (uint32_t)r_offset<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_R_OFFSET() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_R_OFFSET.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_R_OFFSET_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_R_OFFSET.word = x)


//ISP_CE0_RGB2YUV_MATRIX_G_OFFSET


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_G_OFFSET_g_offset() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_G_OFFSET.ISP_CE0_RGB2YUV_MATRIX_G_OFFSET_ts.g_offset
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_G_OFFSET_g_offset(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_G_OFFSET.ISP_CE0_RGB2YUV_MATRIX_G_OFFSET_ts.g_offset = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_G_OFFSET(g_offset) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_G_OFFSET.word = (uint32_t)g_offset<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_G_OFFSET() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_G_OFFSET.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_G_OFFSET_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_G_OFFSET.word = x)


//ISP_CE0_RGB2YUV_MATRIX_B_OFFSET


#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_B_OFFSET_b_offset() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_B_OFFSET.ISP_CE0_RGB2YUV_MATRIX_B_OFFSET_ts.b_offset
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_B_OFFSET_b_offset(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_B_OFFSET.ISP_CE0_RGB2YUV_MATRIX_B_OFFSET_ts.b_offset = x)
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_B_OFFSET(b_offset) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_B_OFFSET.word = (uint16_t)b_offset<<0)
#define Get_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_B_OFFSET() p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_B_OFFSET.word
#define Set_ISP_CE0_RGB2YUV_MATRIX_ISP_CE0_RGB2YUV_MATRIX_B_OFFSET_word(x) (p_ISP_CE0_RGB2YUV_MATRIX_IP->ISP_CE0_RGB2YUV_MATRIX_B_OFFSET.word = x)

//ISP_CE0_NORCOS_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_enable :1;
        /* Disable norcos luma module*/
        uint8_t norcos_chroma_enable :1;
        /* Disable norcos luma module*/
        uint8_t norcos_yuv422_enable :1;
        uint8_t reserved0 :1;
        uint8_t norcos_luma_soft_reset :1;
        uint8_t norcos_chroma_soft_reset :1;
    }ISP_CE0_NORCOS_ENABLE_ts;

}ISP_CE0_NORCOS_ENABLE_tu;



//ISP_CE0_NORCOS_VERSION
/*Description: Version register.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t status_version :4;
        /* status_version of the IP*/
        uint8_t status_state :4;
        /* status_state of the IP*/
        uint8_t patch_version;
        /* Patch Version of the IP*/
        uint8_t minor_version;
        /* Minor Version of the IP*/
        uint8_t major_version;
        /* Major Version of the IP*/
    }ISP_CE0_NORCOS_VERSION_ts;

}ISP_CE0_NORCOS_VERSION_tu;



//ISP_CE0_NORCOS_OUTPUT_CONTROL
/*Description: Norcos output control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_output_mode :3;
        /* Bypass norcos filter*/
    }ISP_CE0_NORCOS_OUTPUT_CONTROL_ts;

}ISP_CE0_NORCOS_OUTPUT_CONTROL_tu;



//ISP_CE0_NORCOS_LUMA_CTRL
/*Description: Norcos luma control
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t norcos_luma_bypass_filters :1;
        /* bypass all filters*/
        uint8_t norcos_luma_bypass_med :1;
        /* bypass median filter*/
        uint8_t norcos_luma_bypass_average :1;
        /* bypass average filter*/
        uint8_t norcos_luma_bypass_adaptive :1;
        /* bypass adaptative filter*/
        uint8_t norcos_luma_norcos_mode :1;
        /* set light(1) or strong(0) mode*/
        uint8_t norcos_luma_pseudo_noise :1;
        /* enable speudo genrator base of LSFR28*/
        uint8_t reserved0 :2;
        uint8_t norcos_luma_bypass_peaking :1;
        /* Disable peaking filters*/
        uint8_t norcos_luma_bypass_unsharp :1;
        /* Disable unsharp filters*/
        uint8_t reserved1 :2;
        uint8_t norcos_luma_fullpeak :1;
        /* Enable the peaking on all the data otherwise it performs only on adaptive filter*/
        uint8_t norcos_luma_lapcorrector :1;
        /* Correct sharpening versus local environement*/
    }ISP_CE0_NORCOS_LUMA_CTRL_ts;

}ISP_CE0_NORCOS_LUMA_CTRL_tu;



//ISP_CE0_NORCOS_LUMA_FLAT_PARAM
/*Description: Pourcentage of Luma pixels in the kernel which have to be under the flat detectionGrad param
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_flat_param :6;
        /* 
        This setting gives the minimum number of pixels in the kernel whose value meets the Flat detection grade criteria. Given that we work on a 5*5 pixels kernel, the maximum value is 25 (the central pixel is not concerned).The minimum value is zero.*/
    }ISP_CE0_NORCOS_LUMA_FLAT_PARAM_ts;

}ISP_CE0_NORCOS_LUMA_FLAT_PARAM_tu;



//ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE
/*Description: Flat Detection Grade LumaChannel
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_flat_detect_grade;
        /* . This setting is the threshold for the difference between the central pixel and each of the pixels in the surrounding kernel.*/
    }ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE_ts;

}ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE_tu;



//ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE
/*Description: Impulse noise
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_impulse_noise;
    }ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE_ts;

}ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE_tu;



//ISP_CE0_NORCOS_LUMA_SHARP_GRADE
/*Description: Sharp Grade
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_sharp_grade;
    }ISP_CE0_NORCOS_LUMA_SHARP_GRADE_ts;

}ISP_CE0_NORCOS_LUMA_SHARP_GRADE_tu;



//ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE
/*Description: unSharp Grade
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_unsharp_grade :4;
    }ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE_ts;

}ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE_tu;



//ISP_CE0_NORCOS_LUMA_NOISE_LEVEL
/*Description: random noise level
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_noiselevel;
    }ISP_CE0_NORCOS_LUMA_NOISE_LEVEL_ts;

}ISP_CE0_NORCOS_LUMA_NOISE_LEVEL_tu;



//ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH
/*Description: Luma Impulse noise threshold
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_noiselevelth;
    }ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH_ts;

}ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH_tu;



//ISP_CE0_NORCOS_LUMA_TX
/*Description: Enable Peaking 5x5 (tx=0%) versus 3x3 (tx= 100% => 128) or mixed them
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_tx :7;
    }ISP_CE0_NORCOS_LUMA_TX_ts;

}ISP_CE0_NORCOS_LUMA_TX_tu;



//ISP_CE0_NORCOS_LUMA_IPK_LOW
/*Description: Peaking Low Threshold
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_ipk_low;
    }ISP_CE0_NORCOS_LUMA_IPK_LOW_ts;

}ISP_CE0_NORCOS_LUMA_IPK_LOW_tu;



//ISP_CE0_NORCOS_LUMA_IPK_HIGH
/*Description: Peaking High Threshold
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_ipk_high;
    }ISP_CE0_NORCOS_LUMA_IPK_HIGH_ts;

}ISP_CE0_NORCOS_LUMA_IPK_HIGH_tu;



//ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN
/*Description: control de gain applied over the max Value => Limit the overshoot
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_oshoot_gain :5;
    }ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN_ts;

}ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN_tu;



//ISP_CE0_NORCOS_CHROMA_CTRL
/*Description: Norcos Chroma control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_chroma_bypass_filters :1;
        /* bypass all filters*/
        uint8_t norcos_chroma_bypass_med :1;
        /* bypass median filter*/
        uint8_t norcos_chroma_bypass_average :1;
        /* bypass average filter*/
        uint8_t norcos_chroma_bypass_adaptive :1;
        /* bypass adaptative filter*/
        uint8_t norcos_chroma_norcos_mode :1;
        /* set light(1) or strong(0) mode*/
        uint8_t norcos_chroma_swap_cb_cr :1;
        /* swap cb and cr in cb cr merge module*/
    }ISP_CE0_NORCOS_CHROMA_CTRL_ts;

}ISP_CE0_NORCOS_CHROMA_CTRL_tu;



//ISP_CE0_NORCOS_CHROMA_FLAT_PARAM
/*Description: Pourcentage of chroma pixels in the kernel which have to be under the flat detectionGrad param
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_chroma_flat_param :6;
        /* 
        This setting gives the minimum number of pixels in the kernel whose value meets the Flat detection grade criteria. Given that we work on a 7*5 pixels kernel, the maximum value is 35 (the central pixel is not concerned).The minimum value is zero.*/
    }ISP_CE0_NORCOS_CHROMA_FLAT_PARAM_ts;

}ISP_CE0_NORCOS_CHROMA_FLAT_PARAM_tu;



//ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE
/*Description: Flat Detection Grade ChromaChannel
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_chroma_flat_detect_grade;
        /* . This setting is the threshold for the difference between the central pixel and each of the pixels in the surrounding kernel.*/
    }ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE_ts;

}ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE_tu;



//ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE
/*Description: Impulse noise
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_chroma_impulse_noise;
    }ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE_ts;

}ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE_tu;



//ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH
/*Description: Chroma Impulse noise threshold
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_chroma_noiselevelth;
    }ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH_ts;

}ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH_tu;

typedef struct
{
    ISP_CE0_NORCOS_ENABLE_tu ISP_CE0_NORCOS_ENABLE;
    ISP_CE0_NORCOS_VERSION_tu ISP_CE0_NORCOS_VERSION;
    ISP_CE0_NORCOS_OUTPUT_CONTROL_tu ISP_CE0_NORCOS_OUTPUT_CONTROL;
    ISP_CE0_NORCOS_LUMA_CTRL_tu ISP_CE0_NORCOS_LUMA_CTRL;
    ISP_CE0_NORCOS_LUMA_FLAT_PARAM_tu ISP_CE0_NORCOS_LUMA_FLAT_PARAM;
    ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE_tu ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE;
    ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE_tu ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE;
    ISP_CE0_NORCOS_LUMA_SHARP_GRADE_tu ISP_CE0_NORCOS_LUMA_SHARP_GRADE;
    ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE_tu ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE;
    ISP_CE0_NORCOS_LUMA_NOISE_LEVEL_tu ISP_CE0_NORCOS_LUMA_NOISE_LEVEL;
    ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH_tu ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH;
    ISP_CE0_NORCOS_LUMA_TX_tu ISP_CE0_NORCOS_LUMA_TX;
    ISP_CE0_NORCOS_LUMA_IPK_LOW_tu ISP_CE0_NORCOS_LUMA_IPK_LOW;
    ISP_CE0_NORCOS_LUMA_IPK_HIGH_tu ISP_CE0_NORCOS_LUMA_IPK_HIGH;
    ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN_tu ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN;
    ISP_CE0_NORCOS_CHROMA_CTRL_tu ISP_CE0_NORCOS_CHROMA_CTRL;
    ISP_CE0_NORCOS_CHROMA_FLAT_PARAM_tu ISP_CE0_NORCOS_CHROMA_FLAT_PARAM;
    ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE_tu ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE;
    ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE_tu ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE;
    ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH_tu ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH;
}ISP_CE0_NORCOS_IP_ts;




//ISP_CE0_NORCOS_ENABLE

#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_luma_enable() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_luma_enable
#define Is_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_luma_enable_DISABLE() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_luma_enable == norcos_luma_enable_DISABLE)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_luma_enable__DISABLE() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_luma_enable = norcos_luma_enable_DISABLE)
#define norcos_luma_enable_DISABLE 0x0    //Disable norcos luma module
#define Is_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_luma_enable_ENABLE() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_luma_enable == norcos_luma_enable_ENABLE)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_luma_enable__ENABLE() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_luma_enable = norcos_luma_enable_ENABLE)
#define norcos_luma_enable_ENABLE 0x1    //Enable norcos luma module


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_chroma_enable() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_chroma_enable
#define Is_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_chroma_enable_DISABLE() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_chroma_enable == norcos_chroma_enable_DISABLE)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_chroma_enable__DISABLE() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_chroma_enable = norcos_chroma_enable_DISABLE)
#define norcos_chroma_enable_DISABLE 0x0    //Disable norcos luma module
#define Is_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_chroma_enable_ENABLE() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_chroma_enable == norcos_chroma_enable_ENABLE)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_chroma_enable__ENABLE() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_chroma_enable = norcos_chroma_enable_ENABLE)
#define norcos_chroma_enable_ENABLE 0x1    //Enable norcos luma module


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_yuv422_enable() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_yuv422_enable
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_yuv422_enable(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_yuv422_enable = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_luma_soft_reset() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_luma_soft_reset
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_luma_soft_reset(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_luma_soft_reset = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_chroma_soft_reset() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_chroma_soft_reset
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_norcos_chroma_soft_reset(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.ISP_CE0_NORCOS_ENABLE_ts.norcos_chroma_soft_reset = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE(norcos_luma_enable,norcos_chroma_enable,norcos_yuv422_enable,norcos_luma_soft_reset,norcos_chroma_soft_reset) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.word = (uint32_t)norcos_luma_enable<<0 | (uint32_t)norcos_chroma_enable<<1 | (uint32_t)norcos_yuv422_enable<<2 | (uint32_t)norcos_luma_soft_reset<<4 | (uint32_t)norcos_chroma_soft_reset<<5)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_ENABLE_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_ENABLE.word = x)


//ISP_CE0_NORCOS_VERSION


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_VERSION_status_version() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_VERSION.ISP_CE0_NORCOS_VERSION_ts.status_version


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_VERSION_status_state() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_VERSION.ISP_CE0_NORCOS_VERSION_ts.status_state


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_VERSION_patch_version() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_VERSION.ISP_CE0_NORCOS_VERSION_ts.patch_version


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_VERSION_minor_version() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_VERSION.ISP_CE0_NORCOS_VERSION_ts.minor_version


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_VERSION_major_version() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_VERSION.ISP_CE0_NORCOS_VERSION_ts.major_version
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_VERSION() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_VERSION.word


//ISP_CE0_NORCOS_OUTPUT_CONTROL


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_OUTPUT_CONTROL_norcos_output_mode() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_OUTPUT_CONTROL.ISP_CE0_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode
#define Is_ISP_CE0_NORCOS_ISP_CE0_NORCOS_OUTPUT_CONTROL_norcos_output_mode_Bypass() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_OUTPUT_CONTROL.ISP_CE0_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode == norcos_output_mode_Bypass)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_OUTPUT_CONTROL_norcos_output_mode__Bypass() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_OUTPUT_CONTROL.ISP_CE0_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode = norcos_output_mode_Bypass)
#define norcos_output_mode_Bypass 0x0    //Bypass norcos filter
#define Is_ISP_CE0_NORCOS_ISP_CE0_NORCOS_OUTPUT_CONTROL_norcos_output_mode_B_0x1() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_OUTPUT_CONTROL.ISP_CE0_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode == norcos_output_mode_B_0x1)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_OUTPUT_CONTROL_norcos_output_mode__B_0x1() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_OUTPUT_CONTROL.ISP_CE0_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode = norcos_output_mode_B_0x1)
#define norcos_output_mode_B_0x1 0x1    //YUV422
#define Is_ISP_CE0_NORCOS_ISP_CE0_NORCOS_OUTPUT_CONTROL_norcos_output_mode_B_0x2() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_OUTPUT_CONTROL.ISP_CE0_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode == norcos_output_mode_B_0x2)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_OUTPUT_CONTROL_norcos_output_mode__B_0x2() (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_OUTPUT_CONTROL.ISP_CE0_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode = norcos_output_mode_B_0x2)
#define norcos_output_mode_B_0x2 0x2    //YUV420
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_OUTPUT_CONTROL(norcos_output_mode) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_OUTPUT_CONTROL.word = (uint32_t)norcos_output_mode<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_OUTPUT_CONTROL() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_OUTPUT_CONTROL.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_OUTPUT_CONTROL_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_OUTPUT_CONTROL.word = x)


//ISP_CE0_NORCOS_LUMA_CTRL


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_filters() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_filters
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_filters(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_filters = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_med() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_med
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_med(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_med = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_average() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_average
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_average(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_average = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_adaptive() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_adaptive
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_adaptive(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_adaptive = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_norcos_mode() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_norcos_mode
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_norcos_mode(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_norcos_mode = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_pseudo_noise() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_pseudo_noise
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_pseudo_noise(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_pseudo_noise = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_peaking() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_peaking
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_peaking(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_peaking = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_unsharp() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_unsharp
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_bypass_unsharp(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_unsharp = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_fullpeak() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_fullpeak
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_fullpeak(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_fullpeak = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_lapcorrector() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_lapcorrector
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_norcos_luma_lapcorrector(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.ISP_CE0_NORCOS_LUMA_CTRL_ts.norcos_luma_lapcorrector = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL(norcos_luma_bypass_filters,norcos_luma_bypass_med,norcos_luma_bypass_average,norcos_luma_bypass_adaptive,norcos_luma_norcos_mode,norcos_luma_pseudo_noise,norcos_luma_bypass_peaking,norcos_luma_bypass_unsharp,norcos_luma_fullpeak,norcos_luma_lapcorrector) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.word = (uint32_t)norcos_luma_bypass_filters<<0 | (uint32_t)norcos_luma_bypass_med<<1 | (uint32_t)norcos_luma_bypass_average<<2 | (uint32_t)norcos_luma_bypass_adaptive<<3 | (uint32_t)norcos_luma_norcos_mode<<4 | (uint32_t)norcos_luma_pseudo_noise<<5 | (uint32_t)norcos_luma_bypass_peaking<<8 | (uint32_t)norcos_luma_bypass_unsharp<<9 | (uint32_t)norcos_luma_fullpeak<<12 | (uint32_t)norcos_luma_lapcorrector<<13)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_CTRL_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_CTRL.word = x)


//ISP_CE0_NORCOS_LUMA_FLAT_PARAM


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_FLAT_PARAM_norcos_luma_flat_param() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_FLAT_PARAM.ISP_CE0_NORCOS_LUMA_FLAT_PARAM_ts.norcos_luma_flat_param
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_FLAT_PARAM_norcos_luma_flat_param(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_FLAT_PARAM.ISP_CE0_NORCOS_LUMA_FLAT_PARAM_ts.norcos_luma_flat_param = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_FLAT_PARAM(norcos_luma_flat_param) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_FLAT_PARAM.word = (uint32_t)norcos_luma_flat_param<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_FLAT_PARAM() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_FLAT_PARAM.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_FLAT_PARAM_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_FLAT_PARAM.word = x)


//ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE_norcos_luma_flat_detect_grade() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE.ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE_ts.norcos_luma_flat_detect_grade
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE_norcos_luma_flat_detect_grade(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE.ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE_ts.norcos_luma_flat_detect_grade = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE(norcos_luma_flat_detect_grade) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE.word = (uint32_t)norcos_luma_flat_detect_grade<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_FLAT_DETECT_GRADE.word = x)


//ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE_norcos_luma_impulse_noise() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE.ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE_ts.norcos_luma_impulse_noise
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE_norcos_luma_impulse_noise(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE.ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE_ts.norcos_luma_impulse_noise = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE(norcos_luma_impulse_noise) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE.word = (uint32_t)norcos_luma_impulse_noise<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IMPULSE_NOISE.word = x)


//ISP_CE0_NORCOS_LUMA_SHARP_GRADE


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_SHARP_GRADE_norcos_luma_sharp_grade() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_SHARP_GRADE.ISP_CE0_NORCOS_LUMA_SHARP_GRADE_ts.norcos_luma_sharp_grade
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_SHARP_GRADE_norcos_luma_sharp_grade(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_SHARP_GRADE.ISP_CE0_NORCOS_LUMA_SHARP_GRADE_ts.norcos_luma_sharp_grade = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_SHARP_GRADE(norcos_luma_sharp_grade) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_SHARP_GRADE.word = (uint32_t)norcos_luma_sharp_grade<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_SHARP_GRADE() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_SHARP_GRADE.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_SHARP_GRADE_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_SHARP_GRADE.word = x)


//ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE_norcos_luma_unsharp_grade() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE.ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE_ts.norcos_luma_unsharp_grade
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE_norcos_luma_unsharp_grade(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE.ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE_ts.norcos_luma_unsharp_grade = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE(norcos_luma_unsharp_grade) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE.word = (uint32_t)norcos_luma_unsharp_grade<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_UNSHARP_GRADE.word = x)


//ISP_CE0_NORCOS_LUMA_NOISE_LEVEL


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_NOISE_LEVEL_norcos_luma_noiselevel() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_NOISE_LEVEL.ISP_CE0_NORCOS_LUMA_NOISE_LEVEL_ts.norcos_luma_noiselevel
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_NOISE_LEVEL_norcos_luma_noiselevel(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_NOISE_LEVEL.ISP_CE0_NORCOS_LUMA_NOISE_LEVEL_ts.norcos_luma_noiselevel = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_NOISE_LEVEL(norcos_luma_noiselevel) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_NOISE_LEVEL.word = (uint32_t)norcos_luma_noiselevel<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_NOISE_LEVEL() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_NOISE_LEVEL.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_NOISE_LEVEL_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_NOISE_LEVEL.word = x)


//ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH_norcos_luma_noiselevelth() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH.ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH_ts.norcos_luma_noiselevelth
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH_norcos_luma_noiselevelth(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH.ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH_ts.norcos_luma_noiselevelth = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH(norcos_luma_noiselevelth) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH.word = (uint32_t)norcos_luma_noiselevelth<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_NOISE_LEVELTH.word = x)


//ISP_CE0_NORCOS_LUMA_TX


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_TX_norcos_luma_tx() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_TX.ISP_CE0_NORCOS_LUMA_TX_ts.norcos_luma_tx
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_TX_norcos_luma_tx(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_TX.ISP_CE0_NORCOS_LUMA_TX_ts.norcos_luma_tx = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_TX(norcos_luma_tx) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_TX.word = (uint32_t)norcos_luma_tx<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_TX() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_TX.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_TX_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_TX.word = x)


//ISP_CE0_NORCOS_LUMA_IPK_LOW


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IPK_LOW_norcos_luma_ipk_low() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IPK_LOW.ISP_CE0_NORCOS_LUMA_IPK_LOW_ts.norcos_luma_ipk_low
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IPK_LOW_norcos_luma_ipk_low(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IPK_LOW.ISP_CE0_NORCOS_LUMA_IPK_LOW_ts.norcos_luma_ipk_low = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IPK_LOW(norcos_luma_ipk_low) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IPK_LOW.word = (uint32_t)norcos_luma_ipk_low<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IPK_LOW() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IPK_LOW.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IPK_LOW_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IPK_LOW.word = x)


//ISP_CE0_NORCOS_LUMA_IPK_HIGH


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IPK_HIGH_norcos_luma_ipk_high() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IPK_HIGH.ISP_CE0_NORCOS_LUMA_IPK_HIGH_ts.norcos_luma_ipk_high
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IPK_HIGH_norcos_luma_ipk_high(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IPK_HIGH.ISP_CE0_NORCOS_LUMA_IPK_HIGH_ts.norcos_luma_ipk_high = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IPK_HIGH(norcos_luma_ipk_high) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IPK_HIGH.word = (uint32_t)norcos_luma_ipk_high<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IPK_HIGH() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IPK_HIGH.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_IPK_HIGH_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_IPK_HIGH.word = x)


//ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN_norcos_luma_oshoot_gain() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN.ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN_ts.norcos_luma_oshoot_gain
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN_norcos_luma_oshoot_gain(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN.ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN_ts.norcos_luma_oshoot_gain = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN(norcos_luma_oshoot_gain) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN.word = (uint32_t)norcos_luma_oshoot_gain<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_LUMA_OSHOOT_GAIN.word = x)


//ISP_CE0_NORCOS_CHROMA_CTRL


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_filters() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_filters
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_filters(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_filters = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_med() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_med
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_med(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_med = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_average() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_average
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_average(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_average = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_adaptive() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_adaptive
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_adaptive(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_adaptive = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_norcos_mode() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_norcos_mode
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_norcos_mode(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_norcos_mode = x)


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_swap_cb_cr() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_swap_cb_cr
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_norcos_chroma_swap_cb_cr(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.ISP_CE0_NORCOS_CHROMA_CTRL_ts.norcos_chroma_swap_cb_cr = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL(norcos_chroma_bypass_filters,norcos_chroma_bypass_med,norcos_chroma_bypass_average,norcos_chroma_bypass_adaptive,norcos_chroma_norcos_mode,norcos_chroma_swap_cb_cr) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.word = (uint32_t)norcos_chroma_bypass_filters<<0 | (uint32_t)norcos_chroma_bypass_med<<1 | (uint32_t)norcos_chroma_bypass_average<<2 | (uint32_t)norcos_chroma_bypass_adaptive<<3 | (uint32_t)norcos_chroma_norcos_mode<<4 | (uint32_t)norcos_chroma_swap_cb_cr<<5)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_CTRL_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_CTRL.word = x)


//ISP_CE0_NORCOS_CHROMA_FLAT_PARAM


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_FLAT_PARAM_norcos_chroma_flat_param() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_FLAT_PARAM.ISP_CE0_NORCOS_CHROMA_FLAT_PARAM_ts.norcos_chroma_flat_param
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_FLAT_PARAM_norcos_chroma_flat_param(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_FLAT_PARAM.ISP_CE0_NORCOS_CHROMA_FLAT_PARAM_ts.norcos_chroma_flat_param = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_FLAT_PARAM(norcos_chroma_flat_param) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_FLAT_PARAM.word = (uint32_t)norcos_chroma_flat_param<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_FLAT_PARAM() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_FLAT_PARAM.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_FLAT_PARAM_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_FLAT_PARAM.word = x)


//ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE_norcos_chroma_flat_detect_grade() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE.ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE_ts.norcos_chroma_flat_detect_grade
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE_norcos_chroma_flat_detect_grade(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE.ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE_ts.norcos_chroma_flat_detect_grade = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE(norcos_chroma_flat_detect_grade) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE.word = (uint32_t)norcos_chroma_flat_detect_grade<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_FLAT_DETECT_GRADE.word = x)


//ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE_norcos_chroma_impulse_noise() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE.ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE_ts.norcos_chroma_impulse_noise
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE_norcos_chroma_impulse_noise(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE.ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE_ts.norcos_chroma_impulse_noise = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE(norcos_chroma_impulse_noise) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE.word = (uint32_t)norcos_chroma_impulse_noise<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_IMPULSE_NOISE.word = x)


//ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH


#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH_norcos_chroma_noiselevelth() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH.ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH_ts.norcos_chroma_noiselevelth
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH_norcos_chroma_noiselevelth(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH.ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH_ts.norcos_chroma_noiselevelth = x)
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH(norcos_chroma_noiselevelth) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH.word = (uint8_t)norcos_chroma_noiselevelth<<0)
#define Get_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH() p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH.word
#define Set_ISP_CE0_NORCOS_ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH_word(x) (p_ISP_CE0_NORCOS_IP->ISP_CE0_NORCOS_CHROMA_NOISE_LEVELTH.word = x)

//ISP_CE0_YUV2RGB_MATRIX_ENABLE
/*Description: Matrix Control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable Matrix module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* Soft reset deasserted*/
    }ISP_CE0_YUV2RGB_MATRIX_ENABLE_ts;

}ISP_CE0_YUV2RGB_MATRIX_ENABLE_tu;



//ISP_CE0_YUV2RGB_MATRIX_RCOF00
/*Description: On-diagonal Matrix coefficient (0,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof00;
        /* Matrix Coefficient (0,0).*/
    }ISP_CE0_YUV2RGB_MATRIX_RCOF00_ts;

}ISP_CE0_YUV2RGB_MATRIX_RCOF00_tu;



//ISP_CE0_YUV2RGB_MATRIX_RCOF01
/*Description: Off-diagonal Matrix coefficient (0,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof01;
        /* Matrix Coefficient (0,1).*/
    }ISP_CE0_YUV2RGB_MATRIX_RCOF01_ts;

}ISP_CE0_YUV2RGB_MATRIX_RCOF01_tu;



//ISP_CE0_YUV2RGB_MATRIX_RCOF02
/*Description: Off-diagonal Matrix coefficient (0,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof02;
        /* Matrix Coefficient (0,2).*/
    }ISP_CE0_YUV2RGB_MATRIX_RCOF02_ts;

}ISP_CE0_YUV2RGB_MATRIX_RCOF02_tu;



//ISP_CE0_YUV2RGB_MATRIX_RCOF10
/*Description: Off-diagonal Matrix coefficient (1,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof10;
        /* Matrix Coefficient (1,0).*/
    }ISP_CE0_YUV2RGB_MATRIX_RCOF10_ts;

}ISP_CE0_YUV2RGB_MATRIX_RCOF10_tu;



//ISP_CE0_YUV2RGB_MATRIX_RCOF11
/*Description: On-diagonal Matrix coefficient (1,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof11;
        /* Matrix Coefficient (1,1).*/
    }ISP_CE0_YUV2RGB_MATRIX_RCOF11_ts;

}ISP_CE0_YUV2RGB_MATRIX_RCOF11_tu;



//ISP_CE0_YUV2RGB_MATRIX_RCOF12
/*Description: Off-diagonal Matrix coefficient (1,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof12;
        /* Matrix Coefficient (1,2).*/
    }ISP_CE0_YUV2RGB_MATRIX_RCOF12_ts;

}ISP_CE0_YUV2RGB_MATRIX_RCOF12_tu;



//ISP_CE0_YUV2RGB_MATRIX_RCOF20
/*Description: Off-diagonal Matrix coefficient (2,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof20;
        /* Matrix Coefficient (2,0).*/
    }ISP_CE0_YUV2RGB_MATRIX_RCOF20_ts;

}ISP_CE0_YUV2RGB_MATRIX_RCOF20_tu;



//ISP_CE0_YUV2RGB_MATRIX_RCOF21
/*Description: Off-diagonal Matrix coefficient (2,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof21;
        /* Matrix Coefficient (2,1).*/
    }ISP_CE0_YUV2RGB_MATRIX_RCOF21_ts;

}ISP_CE0_YUV2RGB_MATRIX_RCOF21_tu;



//ISP_CE0_YUV2RGB_MATRIX_RCOF22
/*Description: On-diagonal Matrix coefficient (2,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof22;
        /* Matrix Coefficient (2,2).*/
    }ISP_CE0_YUV2RGB_MATRIX_RCOF22_ts;

}ISP_CE0_YUV2RGB_MATRIX_RCOF22_tu;



//ISP_CE0_YUV2RGB_MATRIX_R_OFFSET
/*Description: Offset for R data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t r_offset :13;
        /* offset for R data*/
    }ISP_CE0_YUV2RGB_MATRIX_R_OFFSET_ts;

}ISP_CE0_YUV2RGB_MATRIX_R_OFFSET_tu;



//ISP_CE0_YUV2RGB_MATRIX_G_OFFSET
/*Description: Offset for G data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t g_offset :13;
        /* offset for G data*/
    }ISP_CE0_YUV2RGB_MATRIX_G_OFFSET_ts;

}ISP_CE0_YUV2RGB_MATRIX_G_OFFSET_tu;



//ISP_CE0_YUV2RGB_MATRIX_B_OFFSET
/*Description: Offset for B data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit































Synthesis Results
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t b_offset :13;
        /* offset for B data*/
    }ISP_CE0_YUV2RGB_MATRIX_B_OFFSET_ts;

}ISP_CE0_YUV2RGB_MATRIX_B_OFFSET_tu;

typedef struct
{
    ISP_CE0_YUV2RGB_MATRIX_ENABLE_tu ISP_CE0_YUV2RGB_MATRIX_ENABLE;
    ISP_CE0_YUV2RGB_MATRIX_RCOF00_tu ISP_CE0_YUV2RGB_MATRIX_RCOF00;
    ISP_CE0_YUV2RGB_MATRIX_RCOF01_tu ISP_CE0_YUV2RGB_MATRIX_RCOF01;
    ISP_CE0_YUV2RGB_MATRIX_RCOF02_tu ISP_CE0_YUV2RGB_MATRIX_RCOF02;
    ISP_CE0_YUV2RGB_MATRIX_RCOF10_tu ISP_CE0_YUV2RGB_MATRIX_RCOF10;
    ISP_CE0_YUV2RGB_MATRIX_RCOF11_tu ISP_CE0_YUV2RGB_MATRIX_RCOF11;
    ISP_CE0_YUV2RGB_MATRIX_RCOF12_tu ISP_CE0_YUV2RGB_MATRIX_RCOF12;
    ISP_CE0_YUV2RGB_MATRIX_RCOF20_tu ISP_CE0_YUV2RGB_MATRIX_RCOF20;
    ISP_CE0_YUV2RGB_MATRIX_RCOF21_tu ISP_CE0_YUV2RGB_MATRIX_RCOF21;
    ISP_CE0_YUV2RGB_MATRIX_RCOF22_tu ISP_CE0_YUV2RGB_MATRIX_RCOF22;
    ISP_CE0_YUV2RGB_MATRIX_R_OFFSET_tu ISP_CE0_YUV2RGB_MATRIX_R_OFFSET;
    ISP_CE0_YUV2RGB_MATRIX_G_OFFSET_tu ISP_CE0_YUV2RGB_MATRIX_G_OFFSET;
    ISP_CE0_YUV2RGB_MATRIX_B_OFFSET_tu ISP_CE0_YUV2RGB_MATRIX_B_OFFSET;
}ISP_CE0_YUV2RGB_MATRIX_IP_ts;




//ISP_CE0_YUV2RGB_MATRIX_ENABLE


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE_enable() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.ISP_CE0_YUV2RGB_MATRIX_ENABLE_ts.enable
#define Is_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE_enable_DISABLE() (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.ISP_CE0_YUV2RGB_MATRIX_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE_enable__DISABLE() (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.ISP_CE0_YUV2RGB_MATRIX_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable Matrix module
#define Is_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE_enable_ENABLE() (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.ISP_CE0_YUV2RGB_MATRIX_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE_enable__ENABLE() (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.ISP_CE0_YUV2RGB_MATRIX_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable Matrix module


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE_soft_reset() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.ISP_CE0_YUV2RGB_MATRIX_ENABLE_ts.soft_reset
#define Is_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE_soft_reset_DISABLE() (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.ISP_CE0_YUV2RGB_MATRIX_ENABLE_ts.soft_reset == soft_reset_DISABLE)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE_soft_reset__DISABLE() (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.ISP_CE0_YUV2RGB_MATRIX_ENABLE_ts.soft_reset = soft_reset_DISABLE)
#define soft_reset_DISABLE 0x0    //Soft reset deasserted
#define Is_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE_soft_reset_ENABLE() (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.ISP_CE0_YUV2RGB_MATRIX_ENABLE_ts.soft_reset == soft_reset_ENABLE)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE_soft_reset__ENABLE() (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.ISP_CE0_YUV2RGB_MATRIX_ENABLE_ts.soft_reset = soft_reset_ENABLE)
#define soft_reset_ENABLE 0x1    //Soft reset asserted
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE(enable,soft_reset) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_ENABLE_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_ENABLE.word = x)


//ISP_CE0_YUV2RGB_MATRIX_RCOF00


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF00_rcof00() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF00.ISP_CE0_YUV2RGB_MATRIX_RCOF00_ts.rcof00
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF00_rcof00(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF00.ISP_CE0_YUV2RGB_MATRIX_RCOF00_ts.rcof00 = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF00(rcof00) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF00.word = (uint32_t)rcof00<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF00() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF00.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF00_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF00.word = x)


//ISP_CE0_YUV2RGB_MATRIX_RCOF01


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF01_rcof01() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF01.ISP_CE0_YUV2RGB_MATRIX_RCOF01_ts.rcof01
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF01_rcof01(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF01.ISP_CE0_YUV2RGB_MATRIX_RCOF01_ts.rcof01 = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF01(rcof01) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF01.word = (uint32_t)rcof01<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF01() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF01.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF01_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF01.word = x)


//ISP_CE0_YUV2RGB_MATRIX_RCOF02


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF02_rcof02() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF02.ISP_CE0_YUV2RGB_MATRIX_RCOF02_ts.rcof02
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF02_rcof02(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF02.ISP_CE0_YUV2RGB_MATRIX_RCOF02_ts.rcof02 = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF02(rcof02) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF02.word = (uint32_t)rcof02<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF02() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF02.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF02_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF02.word = x)


//ISP_CE0_YUV2RGB_MATRIX_RCOF10


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF10_rcof10() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF10.ISP_CE0_YUV2RGB_MATRIX_RCOF10_ts.rcof10
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF10_rcof10(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF10.ISP_CE0_YUV2RGB_MATRIX_RCOF10_ts.rcof10 = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF10(rcof10) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF10.word = (uint32_t)rcof10<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF10() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF10.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF10_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF10.word = x)


//ISP_CE0_YUV2RGB_MATRIX_RCOF11


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF11_rcof11() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF11.ISP_CE0_YUV2RGB_MATRIX_RCOF11_ts.rcof11
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF11_rcof11(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF11.ISP_CE0_YUV2RGB_MATRIX_RCOF11_ts.rcof11 = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF11(rcof11) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF11.word = (uint32_t)rcof11<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF11() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF11.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF11_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF11.word = x)


//ISP_CE0_YUV2RGB_MATRIX_RCOF12


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF12_rcof12() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF12.ISP_CE0_YUV2RGB_MATRIX_RCOF12_ts.rcof12
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF12_rcof12(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF12.ISP_CE0_YUV2RGB_MATRIX_RCOF12_ts.rcof12 = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF12(rcof12) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF12.word = (uint32_t)rcof12<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF12() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF12.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF12_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF12.word = x)


//ISP_CE0_YUV2RGB_MATRIX_RCOF20


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF20_rcof20() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF20.ISP_CE0_YUV2RGB_MATRIX_RCOF20_ts.rcof20
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF20_rcof20(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF20.ISP_CE0_YUV2RGB_MATRIX_RCOF20_ts.rcof20 = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF20(rcof20) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF20.word = (uint32_t)rcof20<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF20() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF20.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF20_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF20.word = x)


//ISP_CE0_YUV2RGB_MATRIX_RCOF21


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF21_rcof21() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF21.ISP_CE0_YUV2RGB_MATRIX_RCOF21_ts.rcof21
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF21_rcof21(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF21.ISP_CE0_YUV2RGB_MATRIX_RCOF21_ts.rcof21 = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF21(rcof21) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF21.word = (uint32_t)rcof21<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF21() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF21.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF21_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF21.word = x)


//ISP_CE0_YUV2RGB_MATRIX_RCOF22


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF22_rcof22() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF22.ISP_CE0_YUV2RGB_MATRIX_RCOF22_ts.rcof22
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF22_rcof22(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF22.ISP_CE0_YUV2RGB_MATRIX_RCOF22_ts.rcof22 = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF22(rcof22) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF22.word = (uint32_t)rcof22<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF22() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF22.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_RCOF22_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_RCOF22.word = x)


//ISP_CE0_YUV2RGB_MATRIX_R_OFFSET


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_R_OFFSET_r_offset() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_R_OFFSET.ISP_CE0_YUV2RGB_MATRIX_R_OFFSET_ts.r_offset
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_R_OFFSET_r_offset(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_R_OFFSET.ISP_CE0_YUV2RGB_MATRIX_R_OFFSET_ts.r_offset = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_R_OFFSET(r_offset) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_R_OFFSET.word = (uint32_t)r_offset<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_R_OFFSET() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_R_OFFSET.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_R_OFFSET_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_R_OFFSET.word = x)


//ISP_CE0_YUV2RGB_MATRIX_G_OFFSET


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_G_OFFSET_g_offset() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_G_OFFSET.ISP_CE0_YUV2RGB_MATRIX_G_OFFSET_ts.g_offset
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_G_OFFSET_g_offset(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_G_OFFSET.ISP_CE0_YUV2RGB_MATRIX_G_OFFSET_ts.g_offset = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_G_OFFSET(g_offset) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_G_OFFSET.word = (uint32_t)g_offset<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_G_OFFSET() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_G_OFFSET.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_G_OFFSET_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_G_OFFSET.word = x)


//ISP_CE0_YUV2RGB_MATRIX_B_OFFSET


#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_B_OFFSET_b_offset() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_B_OFFSET.ISP_CE0_YUV2RGB_MATRIX_B_OFFSET_ts.b_offset
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_B_OFFSET_b_offset(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_B_OFFSET.ISP_CE0_YUV2RGB_MATRIX_B_OFFSET_ts.b_offset = x)
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_B_OFFSET(b_offset) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_B_OFFSET.word = (uint16_t)b_offset<<0)
#define Get_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_B_OFFSET() p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_B_OFFSET.word
#define Set_ISP_CE0_YUV2RGB_MATRIX_ISP_CE0_YUV2RGB_MATRIX_B_OFFSET_word(x) (p_ISP_CE0_YUV2RGB_MATRIX_IP->ISP_CE0_YUV2RGB_MATRIX_B_OFFSET.word = x)

//ISP_CE0_MUX_0_UNPEAKING_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE0_MUX_0_UNPEAKING_ENABLE_ts;

}ISP_CE0_MUX_0_UNPEAKING_ENABLE_tu;



//ISP_CE0_MUX_0_UNPEAKING_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE0_MUX_0_UNPEAKING_SELECT_ts;

}ISP_CE0_MUX_0_UNPEAKING_SELECT_tu;

typedef struct
{
    ISP_CE0_MUX_0_UNPEAKING_ENABLE_tu ISP_CE0_MUX_0_UNPEAKING_ENABLE;
    ISP_CE0_MUX_0_UNPEAKING_SELECT_tu ISP_CE0_MUX_0_UNPEAKING_SELECT;
}ISP_CE0_MUX_0_UNPEAKING_IP_ts;




//ISP_CE0_MUX_0_UNPEAKING_ENABLE


#define Get_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE_mux2to1_enable() p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.ISP_CE0_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.ISP_CE0_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.ISP_CE0_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.ISP_CE0_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.ISP_CE0_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE_mux2to1_soft_reset() p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.ISP_CE0_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.ISP_CE0_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.ISP_CE0_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.ISP_CE0_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.ISP_CE0_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE() p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.word
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_ENABLE_word(x) (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_ENABLE.word = x)


//ISP_CE0_MUX_0_UNPEAKING_SELECT


#define Get_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT_mux2to1_select() p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.ISP_CE0_MUX_0_UNPEAKING_SELECT_ts.mux2to1_select
#define Is_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT_mux2to1_select_IDP0() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.ISP_CE0_MUX_0_UNPEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT_mux2to1_select__IDP0() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.ISP_CE0_MUX_0_UNPEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT_mux2to1_select_IDP1() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.ISP_CE0_MUX_0_UNPEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT_mux2to1_select__IDP1() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.ISP_CE0_MUX_0_UNPEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT_mux2to1_shadow_en() p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.ISP_CE0_MUX_0_UNPEAKING_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.ISP_CE0_MUX_0_UNPEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.ISP_CE0_MUX_0_UNPEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.ISP_CE0_MUX_0_UNPEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.ISP_CE0_MUX_0_UNPEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT() p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.word
#define Set_ISP_CE0_MUX_0_UNPEAKING_ISP_CE0_MUX_0_UNPEAKING_SELECT_word(x) (p_ISP_CE0_MUX_0_UNPEAKING_IP->ISP_CE0_MUX_0_UNPEAKING_SELECT.word = x)

//ISP_CE0_MUX_1_UNPEAKING_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE0_MUX_1_UNPEAKING_ENABLE_ts;

}ISP_CE0_MUX_1_UNPEAKING_ENABLE_tu;



//ISP_CE0_MUX_1_UNPEAKING_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE0_MUX_1_UNPEAKING_SELECT_ts;

}ISP_CE0_MUX_1_UNPEAKING_SELECT_tu;

typedef struct
{
    ISP_CE0_MUX_1_UNPEAKING_ENABLE_tu ISP_CE0_MUX_1_UNPEAKING_ENABLE;
    ISP_CE0_MUX_1_UNPEAKING_SELECT_tu ISP_CE0_MUX_1_UNPEAKING_SELECT;
}ISP_CE0_MUX_1_UNPEAKING_IP_ts;




//ISP_CE0_MUX_1_UNPEAKING_ENABLE


#define Get_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE_mux2to1_enable() p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.ISP_CE0_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.ISP_CE0_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.ISP_CE0_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.ISP_CE0_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.ISP_CE0_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE_mux2to1_soft_reset() p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.ISP_CE0_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.ISP_CE0_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.ISP_CE0_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.ISP_CE0_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.ISP_CE0_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE() p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.word
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_ENABLE_word(x) (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_ENABLE.word = x)


//ISP_CE0_MUX_1_UNPEAKING_SELECT


#define Get_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT_mux2to1_select() p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.ISP_CE0_MUX_1_UNPEAKING_SELECT_ts.mux2to1_select
#define Is_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT_mux2to1_select_IDP0() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.ISP_CE0_MUX_1_UNPEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT_mux2to1_select__IDP0() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.ISP_CE0_MUX_1_UNPEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT_mux2to1_select_IDP1() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.ISP_CE0_MUX_1_UNPEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT_mux2to1_select__IDP1() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.ISP_CE0_MUX_1_UNPEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT_mux2to1_shadow_en() p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.ISP_CE0_MUX_1_UNPEAKING_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.ISP_CE0_MUX_1_UNPEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.ISP_CE0_MUX_1_UNPEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.ISP_CE0_MUX_1_UNPEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.ISP_CE0_MUX_1_UNPEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT() p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.word
#define Set_ISP_CE0_MUX_1_UNPEAKING_ISP_CE0_MUX_1_UNPEAKING_SELECT_word(x) (p_ISP_CE0_MUX_1_UNPEAKING_IP->ISP_CE0_MUX_1_UNPEAKING_SELECT.word = x)

//ISP_CE0_MUX_0_PEAKING_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE0_MUX_0_PEAKING_ENABLE_ts;

}ISP_CE0_MUX_0_PEAKING_ENABLE_tu;



//ISP_CE0_MUX_0_PEAKING_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE0_MUX_0_PEAKING_SELECT_ts;

}ISP_CE0_MUX_0_PEAKING_SELECT_tu;

typedef struct
{
    ISP_CE0_MUX_0_PEAKING_ENABLE_tu ISP_CE0_MUX_0_PEAKING_ENABLE;
    ISP_CE0_MUX_0_PEAKING_SELECT_tu ISP_CE0_MUX_0_PEAKING_SELECT;
}ISP_CE0_MUX_0_PEAKING_IP_ts;




//ISP_CE0_MUX_0_PEAKING_ENABLE


#define Get_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE_mux2to1_enable() p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.ISP_CE0_MUX_0_PEAKING_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.ISP_CE0_MUX_0_PEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.ISP_CE0_MUX_0_PEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.ISP_CE0_MUX_0_PEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.ISP_CE0_MUX_0_PEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE_mux2to1_soft_reset() p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.ISP_CE0_MUX_0_PEAKING_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.ISP_CE0_MUX_0_PEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.ISP_CE0_MUX_0_PEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.ISP_CE0_MUX_0_PEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.ISP_CE0_MUX_0_PEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE() p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.word
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_ENABLE_word(x) (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_ENABLE.word = x)


//ISP_CE0_MUX_0_PEAKING_SELECT


#define Get_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT_mux2to1_select() p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.ISP_CE0_MUX_0_PEAKING_SELECT_ts.mux2to1_select
#define Is_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT_mux2to1_select_IDP0() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.ISP_CE0_MUX_0_PEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT_mux2to1_select__IDP0() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.ISP_CE0_MUX_0_PEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT_mux2to1_select_IDP1() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.ISP_CE0_MUX_0_PEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT_mux2to1_select__IDP1() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.ISP_CE0_MUX_0_PEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT_mux2to1_shadow_en() p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.ISP_CE0_MUX_0_PEAKING_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.ISP_CE0_MUX_0_PEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.ISP_CE0_MUX_0_PEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.ISP_CE0_MUX_0_PEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.ISP_CE0_MUX_0_PEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT() p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.word
#define Set_ISP_CE0_MUX_0_PEAKING_ISP_CE0_MUX_0_PEAKING_SELECT_word(x) (p_ISP_CE0_MUX_0_PEAKING_IP->ISP_CE0_MUX_0_PEAKING_SELECT.word = x)

//ISP_CE0_MUX_1_PEAKING_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE0_MUX_1_PEAKING_ENABLE_ts;

}ISP_CE0_MUX_1_PEAKING_ENABLE_tu;



//ISP_CE0_MUX_1_PEAKING_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE0_MUX_1_PEAKING_SELECT_ts;

}ISP_CE0_MUX_1_PEAKING_SELECT_tu;

typedef struct
{
    ISP_CE0_MUX_1_PEAKING_ENABLE_tu ISP_CE0_MUX_1_PEAKING_ENABLE;
    ISP_CE0_MUX_1_PEAKING_SELECT_tu ISP_CE0_MUX_1_PEAKING_SELECT;
}ISP_CE0_MUX_1_PEAKING_IP_ts;




//ISP_CE0_MUX_1_PEAKING_ENABLE


#define Get_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE_mux2to1_enable() p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.ISP_CE0_MUX_1_PEAKING_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.ISP_CE0_MUX_1_PEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.ISP_CE0_MUX_1_PEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.ISP_CE0_MUX_1_PEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.ISP_CE0_MUX_1_PEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE_mux2to1_soft_reset() p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.ISP_CE0_MUX_1_PEAKING_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.ISP_CE0_MUX_1_PEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.ISP_CE0_MUX_1_PEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.ISP_CE0_MUX_1_PEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.ISP_CE0_MUX_1_PEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE() p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.word
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_ENABLE_word(x) (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_ENABLE.word = x)


//ISP_CE0_MUX_1_PEAKING_SELECT


#define Get_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT_mux2to1_select() p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.ISP_CE0_MUX_1_PEAKING_SELECT_ts.mux2to1_select
#define Is_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT_mux2to1_select_IDP0() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.ISP_CE0_MUX_1_PEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT_mux2to1_select__IDP0() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.ISP_CE0_MUX_1_PEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT_mux2to1_select_IDP1() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.ISP_CE0_MUX_1_PEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT_mux2to1_select__IDP1() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.ISP_CE0_MUX_1_PEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT_mux2to1_shadow_en() p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.ISP_CE0_MUX_1_PEAKING_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.ISP_CE0_MUX_1_PEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.ISP_CE0_MUX_1_PEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.ISP_CE0_MUX_1_PEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.ISP_CE0_MUX_1_PEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT() p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.word
#define Set_ISP_CE0_MUX_1_PEAKING_ISP_CE0_MUX_1_PEAKING_SELECT_word(x) (p_ISP_CE0_MUX_1_PEAKING_IP->ISP_CE0_MUX_1_PEAKING_SELECT.word = x)

//ISP_CE1_RGB2YUV_MATRIX_ENABLE
/*Description: Matrix Control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable Matrix module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* Soft reset deasserted*/
    }ISP_CE1_RGB2YUV_MATRIX_ENABLE_ts;

}ISP_CE1_RGB2YUV_MATRIX_ENABLE_tu;



//ISP_CE1_RGB2YUV_MATRIX_RCOF00
/*Description: On-diagonal Matrix coefficient (0,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof00;
        /* Matrix Coefficient (0,0).*/
    }ISP_CE1_RGB2YUV_MATRIX_RCOF00_ts;

}ISP_CE1_RGB2YUV_MATRIX_RCOF00_tu;



//ISP_CE1_RGB2YUV_MATRIX_RCOF01
/*Description: Off-diagonal Matrix coefficient (0,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof01;
        /* Matrix Coefficient (0,1).*/
    }ISP_CE1_RGB2YUV_MATRIX_RCOF01_ts;

}ISP_CE1_RGB2YUV_MATRIX_RCOF01_tu;



//ISP_CE1_RGB2YUV_MATRIX_RCOF02
/*Description: Off-diagonal Matrix coefficient (0,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof02;
        /* Matrix Coefficient (0,2).*/
    }ISP_CE1_RGB2YUV_MATRIX_RCOF02_ts;

}ISP_CE1_RGB2YUV_MATRIX_RCOF02_tu;



//ISP_CE1_RGB2YUV_MATRIX_RCOF10
/*Description: Off-diagonal Matrix coefficient (1,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof10;
        /* Matrix Coefficient (1,0).*/
    }ISP_CE1_RGB2YUV_MATRIX_RCOF10_ts;

}ISP_CE1_RGB2YUV_MATRIX_RCOF10_tu;



//ISP_CE1_RGB2YUV_MATRIX_RCOF11
/*Description: On-diagonal Matrix coefficient (1,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof11;
        /* Matrix Coefficient (1,1).*/
    }ISP_CE1_RGB2YUV_MATRIX_RCOF11_ts;

}ISP_CE1_RGB2YUV_MATRIX_RCOF11_tu;



//ISP_CE1_RGB2YUV_MATRIX_RCOF12
/*Description: Off-diagonal Matrix coefficient (1,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof12;
        /* Matrix Coefficient (1,2).*/
    }ISP_CE1_RGB2YUV_MATRIX_RCOF12_ts;

}ISP_CE1_RGB2YUV_MATRIX_RCOF12_tu;



//ISP_CE1_RGB2YUV_MATRIX_RCOF20
/*Description: Off-diagonal Matrix coefficient (2,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof20;
        /* Matrix Coefficient (2,0).*/
    }ISP_CE1_RGB2YUV_MATRIX_RCOF20_ts;

}ISP_CE1_RGB2YUV_MATRIX_RCOF20_tu;



//ISP_CE1_RGB2YUV_MATRIX_RCOF21
/*Description: Off-diagonal Matrix coefficient (2,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof21;
        /* Matrix Coefficient (2,1).*/
    }ISP_CE1_RGB2YUV_MATRIX_RCOF21_ts;

}ISP_CE1_RGB2YUV_MATRIX_RCOF21_tu;



//ISP_CE1_RGB2YUV_MATRIX_RCOF22
/*Description: On-diagonal Matrix coefficient (2,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof22;
        /* Matrix Coefficient (2,2).*/
    }ISP_CE1_RGB2YUV_MATRIX_RCOF22_ts;

}ISP_CE1_RGB2YUV_MATRIX_RCOF22_tu;



//ISP_CE1_RGB2YUV_MATRIX_R_OFFSET
/*Description: Offset for R data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t r_offset :13;
        /* offset for R data*/
    }ISP_CE1_RGB2YUV_MATRIX_R_OFFSET_ts;

}ISP_CE1_RGB2YUV_MATRIX_R_OFFSET_tu;



//ISP_CE1_RGB2YUV_MATRIX_G_OFFSET
/*Description: Offset for G data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t g_offset :13;
        /* offset for G data*/
    }ISP_CE1_RGB2YUV_MATRIX_G_OFFSET_ts;

}ISP_CE1_RGB2YUV_MATRIX_G_OFFSET_tu;



//ISP_CE1_RGB2YUV_MATRIX_B_OFFSET
/*Description: Offset for B data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit































Synthesis Results
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t b_offset :13;
        /* offset for B data*/
    }ISP_CE1_RGB2YUV_MATRIX_B_OFFSET_ts;

}ISP_CE1_RGB2YUV_MATRIX_B_OFFSET_tu;

typedef struct
{
    ISP_CE1_RGB2YUV_MATRIX_ENABLE_tu ISP_CE1_RGB2YUV_MATRIX_ENABLE;
    ISP_CE1_RGB2YUV_MATRIX_RCOF00_tu ISP_CE1_RGB2YUV_MATRIX_RCOF00;
    ISP_CE1_RGB2YUV_MATRIX_RCOF01_tu ISP_CE1_RGB2YUV_MATRIX_RCOF01;
    ISP_CE1_RGB2YUV_MATRIX_RCOF02_tu ISP_CE1_RGB2YUV_MATRIX_RCOF02;
    ISP_CE1_RGB2YUV_MATRIX_RCOF10_tu ISP_CE1_RGB2YUV_MATRIX_RCOF10;
    ISP_CE1_RGB2YUV_MATRIX_RCOF11_tu ISP_CE1_RGB2YUV_MATRIX_RCOF11;
    ISP_CE1_RGB2YUV_MATRIX_RCOF12_tu ISP_CE1_RGB2YUV_MATRIX_RCOF12;
    ISP_CE1_RGB2YUV_MATRIX_RCOF20_tu ISP_CE1_RGB2YUV_MATRIX_RCOF20;
    ISP_CE1_RGB2YUV_MATRIX_RCOF21_tu ISP_CE1_RGB2YUV_MATRIX_RCOF21;
    ISP_CE1_RGB2YUV_MATRIX_RCOF22_tu ISP_CE1_RGB2YUV_MATRIX_RCOF22;
    ISP_CE1_RGB2YUV_MATRIX_R_OFFSET_tu ISP_CE1_RGB2YUV_MATRIX_R_OFFSET;
    ISP_CE1_RGB2YUV_MATRIX_G_OFFSET_tu ISP_CE1_RGB2YUV_MATRIX_G_OFFSET;
    ISP_CE1_RGB2YUV_MATRIX_B_OFFSET_tu ISP_CE1_RGB2YUV_MATRIX_B_OFFSET;
}ISP_CE1_RGB2YUV_MATRIX_IP_ts;




//ISP_CE1_RGB2YUV_MATRIX_ENABLE


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE_enable() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.ISP_CE1_RGB2YUV_MATRIX_ENABLE_ts.enable
#define Is_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE_enable_DISABLE() (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.ISP_CE1_RGB2YUV_MATRIX_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE_enable__DISABLE() (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.ISP_CE1_RGB2YUV_MATRIX_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable Matrix module
#define Is_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE_enable_ENABLE() (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.ISP_CE1_RGB2YUV_MATRIX_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE_enable__ENABLE() (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.ISP_CE1_RGB2YUV_MATRIX_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable Matrix module


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE_soft_reset() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.ISP_CE1_RGB2YUV_MATRIX_ENABLE_ts.soft_reset
#define Is_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE_soft_reset_DISABLE() (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.ISP_CE1_RGB2YUV_MATRIX_ENABLE_ts.soft_reset == soft_reset_DISABLE)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE_soft_reset__DISABLE() (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.ISP_CE1_RGB2YUV_MATRIX_ENABLE_ts.soft_reset = soft_reset_DISABLE)
#define soft_reset_DISABLE 0x0    //Soft reset deasserted
#define Is_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE_soft_reset_ENABLE() (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.ISP_CE1_RGB2YUV_MATRIX_ENABLE_ts.soft_reset == soft_reset_ENABLE)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE_soft_reset__ENABLE() (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.ISP_CE1_RGB2YUV_MATRIX_ENABLE_ts.soft_reset = soft_reset_ENABLE)
#define soft_reset_ENABLE 0x1    //Soft reset asserted
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE(enable,soft_reset) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_ENABLE_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_ENABLE.word = x)


//ISP_CE1_RGB2YUV_MATRIX_RCOF00


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF00_rcof00() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF00.ISP_CE1_RGB2YUV_MATRIX_RCOF00_ts.rcof00
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF00_rcof00(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF00.ISP_CE1_RGB2YUV_MATRIX_RCOF00_ts.rcof00 = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF00(rcof00) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF00.word = (uint32_t)rcof00<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF00() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF00.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF00_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF00.word = x)


//ISP_CE1_RGB2YUV_MATRIX_RCOF01


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF01_rcof01() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF01.ISP_CE1_RGB2YUV_MATRIX_RCOF01_ts.rcof01
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF01_rcof01(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF01.ISP_CE1_RGB2YUV_MATRIX_RCOF01_ts.rcof01 = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF01(rcof01) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF01.word = (uint32_t)rcof01<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF01() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF01.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF01_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF01.word = x)


//ISP_CE1_RGB2YUV_MATRIX_RCOF02


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF02_rcof02() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF02.ISP_CE1_RGB2YUV_MATRIX_RCOF02_ts.rcof02
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF02_rcof02(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF02.ISP_CE1_RGB2YUV_MATRIX_RCOF02_ts.rcof02 = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF02(rcof02) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF02.word = (uint32_t)rcof02<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF02() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF02.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF02_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF02.word = x)


//ISP_CE1_RGB2YUV_MATRIX_RCOF10


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF10_rcof10() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF10.ISP_CE1_RGB2YUV_MATRIX_RCOF10_ts.rcof10
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF10_rcof10(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF10.ISP_CE1_RGB2YUV_MATRIX_RCOF10_ts.rcof10 = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF10(rcof10) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF10.word = (uint32_t)rcof10<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF10() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF10.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF10_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF10.word = x)


//ISP_CE1_RGB2YUV_MATRIX_RCOF11


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF11_rcof11() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF11.ISP_CE1_RGB2YUV_MATRIX_RCOF11_ts.rcof11
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF11_rcof11(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF11.ISP_CE1_RGB2YUV_MATRIX_RCOF11_ts.rcof11 = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF11(rcof11) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF11.word = (uint32_t)rcof11<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF11() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF11.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF11_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF11.word = x)


//ISP_CE1_RGB2YUV_MATRIX_RCOF12


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF12_rcof12() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF12.ISP_CE1_RGB2YUV_MATRIX_RCOF12_ts.rcof12
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF12_rcof12(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF12.ISP_CE1_RGB2YUV_MATRIX_RCOF12_ts.rcof12 = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF12(rcof12) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF12.word = (uint32_t)rcof12<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF12() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF12.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF12_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF12.word = x)


//ISP_CE1_RGB2YUV_MATRIX_RCOF20


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF20_rcof20() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF20.ISP_CE1_RGB2YUV_MATRIX_RCOF20_ts.rcof20
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF20_rcof20(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF20.ISP_CE1_RGB2YUV_MATRIX_RCOF20_ts.rcof20 = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF20(rcof20) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF20.word = (uint32_t)rcof20<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF20() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF20.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF20_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF20.word = x)


//ISP_CE1_RGB2YUV_MATRIX_RCOF21


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF21_rcof21() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF21.ISP_CE1_RGB2YUV_MATRIX_RCOF21_ts.rcof21
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF21_rcof21(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF21.ISP_CE1_RGB2YUV_MATRIX_RCOF21_ts.rcof21 = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF21(rcof21) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF21.word = (uint32_t)rcof21<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF21() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF21.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF21_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF21.word = x)


//ISP_CE1_RGB2YUV_MATRIX_RCOF22


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF22_rcof22() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF22.ISP_CE1_RGB2YUV_MATRIX_RCOF22_ts.rcof22
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF22_rcof22(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF22.ISP_CE1_RGB2YUV_MATRIX_RCOF22_ts.rcof22 = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF22(rcof22) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF22.word = (uint32_t)rcof22<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF22() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF22.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_RCOF22_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_RCOF22.word = x)


//ISP_CE1_RGB2YUV_MATRIX_R_OFFSET


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_R_OFFSET_r_offset() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_R_OFFSET.ISP_CE1_RGB2YUV_MATRIX_R_OFFSET_ts.r_offset
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_R_OFFSET_r_offset(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_R_OFFSET.ISP_CE1_RGB2YUV_MATRIX_R_OFFSET_ts.r_offset = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_R_OFFSET(r_offset) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_R_OFFSET.word = (uint32_t)r_offset<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_R_OFFSET() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_R_OFFSET.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_R_OFFSET_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_R_OFFSET.word = x)


//ISP_CE1_RGB2YUV_MATRIX_G_OFFSET


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_G_OFFSET_g_offset() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_G_OFFSET.ISP_CE1_RGB2YUV_MATRIX_G_OFFSET_ts.g_offset
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_G_OFFSET_g_offset(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_G_OFFSET.ISP_CE1_RGB2YUV_MATRIX_G_OFFSET_ts.g_offset = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_G_OFFSET(g_offset) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_G_OFFSET.word = (uint32_t)g_offset<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_G_OFFSET() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_G_OFFSET.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_G_OFFSET_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_G_OFFSET.word = x)


//ISP_CE1_RGB2YUV_MATRIX_B_OFFSET


#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_B_OFFSET_b_offset() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_B_OFFSET.ISP_CE1_RGB2YUV_MATRIX_B_OFFSET_ts.b_offset
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_B_OFFSET_b_offset(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_B_OFFSET.ISP_CE1_RGB2YUV_MATRIX_B_OFFSET_ts.b_offset = x)
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_B_OFFSET(b_offset) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_B_OFFSET.word = (uint16_t)b_offset<<0)
#define Get_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_B_OFFSET() p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_B_OFFSET.word
#define Set_ISP_CE1_RGB2YUV_MATRIX_ISP_CE1_RGB2YUV_MATRIX_B_OFFSET_word(x) (p_ISP_CE1_RGB2YUV_MATRIX_IP->ISP_CE1_RGB2YUV_MATRIX_B_OFFSET.word = x)

//ISP_CE1_NORCOS_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_enable :1;
        /* Disable norcos luma module*/
        uint8_t norcos_chroma_enable :1;
        /* Disable norcos luma module*/
        uint8_t norcos_yuv422_enable :1;
        uint8_t reserved0 :1;
        uint8_t norcos_luma_soft_reset :1;
        uint8_t norcos_chroma_soft_reset :1;
    }ISP_CE1_NORCOS_ENABLE_ts;

}ISP_CE1_NORCOS_ENABLE_tu;



//ISP_CE1_NORCOS_VERSION
/*Description: Version register.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t status_version :4;
        /* status_version of the IP*/
        uint8_t status_state :4;
        /* status_state of the IP*/
        uint8_t patch_version;
        /* Patch Version of the IP*/
        uint8_t minor_version;
        /* Minor Version of the IP*/
        uint8_t major_version;
        /* Major Version of the IP*/
    }ISP_CE1_NORCOS_VERSION_ts;

}ISP_CE1_NORCOS_VERSION_tu;



//ISP_CE1_NORCOS_OUTPUT_CONTROL
/*Description: Norcos output control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_output_mode :3;
        /* Bypass norcos filter*/
    }ISP_CE1_NORCOS_OUTPUT_CONTROL_ts;

}ISP_CE1_NORCOS_OUTPUT_CONTROL_tu;



//ISP_CE1_NORCOS_LUMA_CTRL
/*Description: Norcos luma control
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint8_t norcos_luma_bypass_filters :1;
        /* bypass all filters*/
        uint8_t norcos_luma_bypass_med :1;
        /* bypass median filter*/
        uint8_t norcos_luma_bypass_average :1;
        /* bypass average filter*/
        uint8_t norcos_luma_bypass_adaptive :1;
        /* bypass adaptative filter*/
        uint8_t norcos_luma_norcos_mode :1;
        /* set light(1) or strong(0) mode*/
        uint8_t norcos_luma_pseudo_noise :1;
        /* enable speudo genrator base of LSFR28*/
        uint8_t reserved0 :2;
        uint8_t norcos_luma_bypass_peaking :1;
        /* Disable peaking filters*/
        uint8_t norcos_luma_bypass_unsharp :1;
        /* Disable unsharp filters*/
        uint8_t reserved1 :2;
        uint8_t norcos_luma_fullpeak :1;
        /* Enable the peaking on all the data otherwise it performs only on adaptive filter*/
        uint8_t norcos_luma_lapcorrector :1;
        /* Correct sharpening versus local environement*/
    }ISP_CE1_NORCOS_LUMA_CTRL_ts;

}ISP_CE1_NORCOS_LUMA_CTRL_tu;



//ISP_CE1_NORCOS_LUMA_FLAT_PARAM
/*Description: Pourcentage of Luma pixels in the kernel which have to be under the flat detectionGrad param
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_flat_param :6;
        /* 
        This setting gives the minimum number of pixels in the kernel whose value meets the Flat detection grade criteria. Given that we work on a 5*5 pixels kernel, the maximum value is 25 (the central pixel is not concerned).The minimum value is zero.*/
    }ISP_CE1_NORCOS_LUMA_FLAT_PARAM_ts;

}ISP_CE1_NORCOS_LUMA_FLAT_PARAM_tu;



//ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE
/*Description: Flat Detection Grade LumaChannel
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_flat_detect_grade;
        /* . This setting is the threshold for the difference between the central pixel and each of the pixels in the surrounding kernel.*/
    }ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE_ts;

}ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE_tu;



//ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE
/*Description: Impulse noise
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_impulse_noise;
    }ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE_ts;

}ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE_tu;



//ISP_CE1_NORCOS_LUMA_SHARP_GRADE
/*Description: Sharp Grade
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_sharp_grade;
    }ISP_CE1_NORCOS_LUMA_SHARP_GRADE_ts;

}ISP_CE1_NORCOS_LUMA_SHARP_GRADE_tu;



//ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE
/*Description: unSharp Grade
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_unsharp_grade :4;
    }ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE_ts;

}ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE_tu;



//ISP_CE1_NORCOS_LUMA_NOISE_LEVEL
/*Description: random noise level
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_noiselevel;
    }ISP_CE1_NORCOS_LUMA_NOISE_LEVEL_ts;

}ISP_CE1_NORCOS_LUMA_NOISE_LEVEL_tu;



//ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH
/*Description: Luma Impulse noise threshold
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_noiselevelth;
    }ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH_ts;

}ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH_tu;



//ISP_CE1_NORCOS_LUMA_TX
/*Description: Enable Peaking 5x5 (tx=0%) versus 3x3 (tx= 100% => 128) or mixed them
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_tx :7;
    }ISP_CE1_NORCOS_LUMA_TX_ts;

}ISP_CE1_NORCOS_LUMA_TX_tu;



//ISP_CE1_NORCOS_LUMA_IPK_LOW
/*Description: Peaking Low Threshold
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_ipk_low;
    }ISP_CE1_NORCOS_LUMA_IPK_LOW_ts;

}ISP_CE1_NORCOS_LUMA_IPK_LOW_tu;



//ISP_CE1_NORCOS_LUMA_IPK_HIGH
/*Description: Peaking High Threshold
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_ipk_high;
    }ISP_CE1_NORCOS_LUMA_IPK_HIGH_ts;

}ISP_CE1_NORCOS_LUMA_IPK_HIGH_tu;



//ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN
/*Description: control de gain applied over the max Value => Limit the overshoot
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_luma_oshoot_gain :5;
    }ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN_ts;

}ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN_tu;



//ISP_CE1_NORCOS_CHROMA_CTRL
/*Description: Norcos Chroma control
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_chroma_bypass_filters :1;
        /* bypass all filters*/
        uint8_t norcos_chroma_bypass_med :1;
        /* bypass median filter*/
        uint8_t norcos_chroma_bypass_average :1;
        /* bypass average filter*/
        uint8_t norcos_chroma_bypass_adaptive :1;
        /* bypass adaptative filter*/
        uint8_t norcos_chroma_norcos_mode :1;
        /* set light(1) or strong(0) mode*/
        uint8_t norcos_chroma_swap_cb_cr :1;
        /* swap cb and cr in cb cr merge module*/
    }ISP_CE1_NORCOS_CHROMA_CTRL_ts;

}ISP_CE1_NORCOS_CHROMA_CTRL_tu;



//ISP_CE1_NORCOS_CHROMA_FLAT_PARAM
/*Description: Pourcentage of chroma pixels in the kernel which have to be under the flat detectionGrad param
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_chroma_flat_param :6;
        /* 
        This setting gives the minimum number of pixels in the kernel whose value meets the Flat detection grade criteria. Given that we work on a 7*5 pixels kernel, the maximum value is 35 (the central pixel is not concerned).The minimum value is zero.*/
    }ISP_CE1_NORCOS_CHROMA_FLAT_PARAM_ts;

}ISP_CE1_NORCOS_CHROMA_FLAT_PARAM_tu;



//ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE
/*Description: Flat Detection Grade ChromaChannel
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_chroma_flat_detect_grade;
        /* . This setting is the threshold for the difference between the central pixel and each of the pixels in the surrounding kernel.*/
    }ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE_ts;

}ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE_tu;



//ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE
/*Description: Impulse noise
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_chroma_impulse_noise;
    }ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE_ts;

}ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE_tu;



//ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH
/*Description: Chroma Impulse noise threshold
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t norcos_chroma_noiselevelth;
    }ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH_ts;

}ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH_tu;

typedef struct
{
    ISP_CE1_NORCOS_ENABLE_tu ISP_CE1_NORCOS_ENABLE;
    ISP_CE1_NORCOS_VERSION_tu ISP_CE1_NORCOS_VERSION;
    ISP_CE1_NORCOS_OUTPUT_CONTROL_tu ISP_CE1_NORCOS_OUTPUT_CONTROL;
    ISP_CE1_NORCOS_LUMA_CTRL_tu ISP_CE1_NORCOS_LUMA_CTRL;
    ISP_CE1_NORCOS_LUMA_FLAT_PARAM_tu ISP_CE1_NORCOS_LUMA_FLAT_PARAM;
    ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE_tu ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE;
    ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE_tu ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE;
    ISP_CE1_NORCOS_LUMA_SHARP_GRADE_tu ISP_CE1_NORCOS_LUMA_SHARP_GRADE;
    ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE_tu ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE;
    ISP_CE1_NORCOS_LUMA_NOISE_LEVEL_tu ISP_CE1_NORCOS_LUMA_NOISE_LEVEL;
    ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH_tu ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH;
    ISP_CE1_NORCOS_LUMA_TX_tu ISP_CE1_NORCOS_LUMA_TX;
    ISP_CE1_NORCOS_LUMA_IPK_LOW_tu ISP_CE1_NORCOS_LUMA_IPK_LOW;
    ISP_CE1_NORCOS_LUMA_IPK_HIGH_tu ISP_CE1_NORCOS_LUMA_IPK_HIGH;
    ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN_tu ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN;
    ISP_CE1_NORCOS_CHROMA_CTRL_tu ISP_CE1_NORCOS_CHROMA_CTRL;
    ISP_CE1_NORCOS_CHROMA_FLAT_PARAM_tu ISP_CE1_NORCOS_CHROMA_FLAT_PARAM;
    ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE_tu ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE;
    ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE_tu ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE;
    ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH_tu ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH;
}ISP_CE1_NORCOS_IP_ts;




//ISP_CE1_NORCOS_ENABLE


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_luma_enable() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_luma_enable
#define Is_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_luma_enable_DISABLE() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_luma_enable == norcos_luma_enable_DISABLE)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_luma_enable__DISABLE() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_luma_enable = norcos_luma_enable_DISABLE)
#define norcos_luma_enable_DISABLE 0x0    //Disable norcos luma module
#define Is_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_luma_enable_ENABLE() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_luma_enable == norcos_luma_enable_ENABLE)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_luma_enable__ENABLE() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_luma_enable = norcos_luma_enable_ENABLE)
#define norcos_luma_enable_ENABLE 0x1    //Enable norcos luma module


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_chroma_enable() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_chroma_enable
#define Is_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_chroma_enable_DISABLE() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_chroma_enable == norcos_chroma_enable_DISABLE)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_chroma_enable__DISABLE() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_chroma_enable = norcos_chroma_enable_DISABLE)
#define norcos_chroma_enable_DISABLE 0x0    //Disable norcos luma module
#define Is_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_chroma_enable_ENABLE() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_chroma_enable == norcos_chroma_enable_ENABLE)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_chroma_enable__ENABLE() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_chroma_enable = norcos_chroma_enable_ENABLE)
#define norcos_chroma_enable_ENABLE 0x1    //Enable norcos luma module


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_yuv422_enable() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_yuv422_enable
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_yuv422_enable(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_yuv422_enable = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_luma_soft_reset() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_luma_soft_reset
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_luma_soft_reset(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_luma_soft_reset = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_chroma_soft_reset() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_chroma_soft_reset
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_norcos_chroma_soft_reset(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.ISP_CE1_NORCOS_ENABLE_ts.norcos_chroma_soft_reset = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE(norcos_luma_enable,norcos_chroma_enable,norcos_yuv422_enable,norcos_luma_soft_reset,norcos_chroma_soft_reset) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.word = (uint32_t)norcos_luma_enable<<0 | (uint32_t)norcos_chroma_enable<<1 | (uint32_t)norcos_yuv422_enable<<2 | (uint32_t)norcos_luma_soft_reset<<4 | (uint32_t)norcos_chroma_soft_reset<<5)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_ENABLE_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_ENABLE.word = x)


//ISP_CE1_NORCOS_VERSION


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_VERSION_status_version() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_VERSION.ISP_CE1_NORCOS_VERSION_ts.status_version


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_VERSION_status_state() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_VERSION.ISP_CE1_NORCOS_VERSION_ts.status_state


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_VERSION_patch_version() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_VERSION.ISP_CE1_NORCOS_VERSION_ts.patch_version


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_VERSION_minor_version() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_VERSION.ISP_CE1_NORCOS_VERSION_ts.minor_version


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_VERSION_major_version() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_VERSION.ISP_CE1_NORCOS_VERSION_ts.major_version
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_VERSION() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_VERSION.word


//ISP_CE1_NORCOS_OUTPUT_CONTROL


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_OUTPUT_CONTROL_norcos_output_mode() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_OUTPUT_CONTROL.ISP_CE1_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode
#define Is_ISP_CE1_NORCOS_ISP_CE1_NORCOS_OUTPUT_CONTROL_norcos_output_mode_Bypass() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_OUTPUT_CONTROL.ISP_CE1_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode == norcos_output_mode_Bypass)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_OUTPUT_CONTROL_norcos_output_mode__Bypass() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_OUTPUT_CONTROL.ISP_CE1_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode = norcos_output_mode_Bypass)
#define norcos_output_mode_Bypass 0x0    //Bypass norcos filter
#define Is_ISP_CE1_NORCOS_ISP_CE1_NORCOS_OUTPUT_CONTROL_norcos_output_mode_B_0x1() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_OUTPUT_CONTROL.ISP_CE1_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode == norcos_output_mode_B_0x1)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_OUTPUT_CONTROL_norcos_output_mode__B_0x1() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_OUTPUT_CONTROL.ISP_CE1_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode = norcos_output_mode_B_0x1)
#define norcos_output_mode_B_0x1 0x1    //YUV422
#define Is_ISP_CE1_NORCOS_ISP_CE1_NORCOS_OUTPUT_CONTROL_norcos_output_mode_B_0x2() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_OUTPUT_CONTROL.ISP_CE1_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode == norcos_output_mode_B_0x2)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_OUTPUT_CONTROL_norcos_output_mode__B_0x2() (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_OUTPUT_CONTROL.ISP_CE1_NORCOS_OUTPUT_CONTROL_ts.norcos_output_mode = norcos_output_mode_B_0x2)
#define norcos_output_mode_B_0x2 0x2    //YUV420
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_OUTPUT_CONTROL(norcos_output_mode) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_OUTPUT_CONTROL.word = (uint32_t)norcos_output_mode<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_OUTPUT_CONTROL() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_OUTPUT_CONTROL.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_OUTPUT_CONTROL_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_OUTPUT_CONTROL.word = x)


//ISP_CE1_NORCOS_LUMA_CTRL


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_filters() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_filters
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_filters(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_filters = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_med() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_med
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_med(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_med = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_average() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_average
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_average(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_average = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_adaptive() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_adaptive
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_adaptive(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_adaptive = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_norcos_mode() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_norcos_mode
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_norcos_mode(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_norcos_mode = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_pseudo_noise() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_pseudo_noise
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_pseudo_noise(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_pseudo_noise = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_peaking() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_peaking
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_peaking(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_peaking = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_unsharp() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_unsharp
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_bypass_unsharp(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_bypass_unsharp = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_fullpeak() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_fullpeak
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_fullpeak(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_fullpeak = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_lapcorrector() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_lapcorrector
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_norcos_luma_lapcorrector(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.ISP_CE1_NORCOS_LUMA_CTRL_ts.norcos_luma_lapcorrector = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL(norcos_luma_bypass_filters,norcos_luma_bypass_med,norcos_luma_bypass_average,norcos_luma_bypass_adaptive,norcos_luma_norcos_mode,norcos_luma_pseudo_noise,norcos_luma_bypass_peaking,norcos_luma_bypass_unsharp,norcos_luma_fullpeak,norcos_luma_lapcorrector) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.word = (uint32_t)norcos_luma_bypass_filters<<0 | (uint32_t)norcos_luma_bypass_med<<1 | (uint32_t)norcos_luma_bypass_average<<2 | (uint32_t)norcos_luma_bypass_adaptive<<3 | (uint32_t)norcos_luma_norcos_mode<<4 | (uint32_t)norcos_luma_pseudo_noise<<5 | (uint32_t)norcos_luma_bypass_peaking<<8 | (uint32_t)norcos_luma_bypass_unsharp<<9 | (uint32_t)norcos_luma_fullpeak<<12 | (uint32_t)norcos_luma_lapcorrector<<13)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_CTRL_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_CTRL.word = x)


//ISP_CE1_NORCOS_LUMA_FLAT_PARAM


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_FLAT_PARAM_norcos_luma_flat_param() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_FLAT_PARAM.ISP_CE1_NORCOS_LUMA_FLAT_PARAM_ts.norcos_luma_flat_param
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_FLAT_PARAM_norcos_luma_flat_param(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_FLAT_PARAM.ISP_CE1_NORCOS_LUMA_FLAT_PARAM_ts.norcos_luma_flat_param = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_FLAT_PARAM(norcos_luma_flat_param) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_FLAT_PARAM.word = (uint32_t)norcos_luma_flat_param<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_FLAT_PARAM() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_FLAT_PARAM.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_FLAT_PARAM_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_FLAT_PARAM.word = x)


//ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE_norcos_luma_flat_detect_grade() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE.ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE_ts.norcos_luma_flat_detect_grade
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE_norcos_luma_flat_detect_grade(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE.ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE_ts.norcos_luma_flat_detect_grade = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE(norcos_luma_flat_detect_grade) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE.word = (uint32_t)norcos_luma_flat_detect_grade<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_FLAT_DETECT_GRADE.word = x)


//ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE_norcos_luma_impulse_noise() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE.ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE_ts.norcos_luma_impulse_noise
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE_norcos_luma_impulse_noise(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE.ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE_ts.norcos_luma_impulse_noise = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE(norcos_luma_impulse_noise) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE.word = (uint32_t)norcos_luma_impulse_noise<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IMPULSE_NOISE.word = x)


//ISP_CE1_NORCOS_LUMA_SHARP_GRADE


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_SHARP_GRADE_norcos_luma_sharp_grade() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_SHARP_GRADE.ISP_CE1_NORCOS_LUMA_SHARP_GRADE_ts.norcos_luma_sharp_grade
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_SHARP_GRADE_norcos_luma_sharp_grade(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_SHARP_GRADE.ISP_CE1_NORCOS_LUMA_SHARP_GRADE_ts.norcos_luma_sharp_grade = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_SHARP_GRADE(norcos_luma_sharp_grade) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_SHARP_GRADE.word = (uint32_t)norcos_luma_sharp_grade<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_SHARP_GRADE() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_SHARP_GRADE.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_SHARP_GRADE_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_SHARP_GRADE.word = x)


//ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE_norcos_luma_unsharp_grade() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE.ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE_ts.norcos_luma_unsharp_grade
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE_norcos_luma_unsharp_grade(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE.ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE_ts.norcos_luma_unsharp_grade = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE(norcos_luma_unsharp_grade) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE.word = (uint32_t)norcos_luma_unsharp_grade<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_UNSHARP_GRADE.word = x)


//ISP_CE1_NORCOS_LUMA_NOISE_LEVEL


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_NOISE_LEVEL_norcos_luma_noiselevel() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_NOISE_LEVEL.ISP_CE1_NORCOS_LUMA_NOISE_LEVEL_ts.norcos_luma_noiselevel
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_NOISE_LEVEL_norcos_luma_noiselevel(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_NOISE_LEVEL.ISP_CE1_NORCOS_LUMA_NOISE_LEVEL_ts.norcos_luma_noiselevel = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_NOISE_LEVEL(norcos_luma_noiselevel) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_NOISE_LEVEL.word = (uint32_t)norcos_luma_noiselevel<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_NOISE_LEVEL() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_NOISE_LEVEL.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_NOISE_LEVEL_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_NOISE_LEVEL.word = x)


//ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH_norcos_luma_noiselevelth() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH.ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH_ts.norcos_luma_noiselevelth
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH_norcos_luma_noiselevelth(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH.ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH_ts.norcos_luma_noiselevelth = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH(norcos_luma_noiselevelth) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH.word = (uint32_t)norcos_luma_noiselevelth<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_NOISE_LEVELTH.word = x)


//ISP_CE1_NORCOS_LUMA_TX


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_TX_norcos_luma_tx() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_TX.ISP_CE1_NORCOS_LUMA_TX_ts.norcos_luma_tx
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_TX_norcos_luma_tx(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_TX.ISP_CE1_NORCOS_LUMA_TX_ts.norcos_luma_tx = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_TX(norcos_luma_tx) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_TX.word = (uint32_t)norcos_luma_tx<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_TX() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_TX.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_TX_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_TX.word = x)


//ISP_CE1_NORCOS_LUMA_IPK_LOW


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IPK_LOW_norcos_luma_ipk_low() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IPK_LOW.ISP_CE1_NORCOS_LUMA_IPK_LOW_ts.norcos_luma_ipk_low
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IPK_LOW_norcos_luma_ipk_low(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IPK_LOW.ISP_CE1_NORCOS_LUMA_IPK_LOW_ts.norcos_luma_ipk_low = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IPK_LOW(norcos_luma_ipk_low) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IPK_LOW.word = (uint32_t)norcos_luma_ipk_low<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IPK_LOW() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IPK_LOW.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IPK_LOW_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IPK_LOW.word = x)


//ISP_CE1_NORCOS_LUMA_IPK_HIGH


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IPK_HIGH_norcos_luma_ipk_high() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IPK_HIGH.ISP_CE1_NORCOS_LUMA_IPK_HIGH_ts.norcos_luma_ipk_high
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IPK_HIGH_norcos_luma_ipk_high(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IPK_HIGH.ISP_CE1_NORCOS_LUMA_IPK_HIGH_ts.norcos_luma_ipk_high = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IPK_HIGH(norcos_luma_ipk_high) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IPK_HIGH.word = (uint32_t)norcos_luma_ipk_high<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IPK_HIGH() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IPK_HIGH.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_IPK_HIGH_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_IPK_HIGH.word = x)


//ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN_norcos_luma_oshoot_gain() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN.ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN_ts.norcos_luma_oshoot_gain
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN_norcos_luma_oshoot_gain(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN.ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN_ts.norcos_luma_oshoot_gain = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN(norcos_luma_oshoot_gain) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN.word = (uint32_t)norcos_luma_oshoot_gain<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_LUMA_OSHOOT_GAIN.word = x)


//ISP_CE1_NORCOS_CHROMA_CTRL


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_filters() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_filters
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_filters(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_filters = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_med() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_med
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_med(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_med = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_average() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_average
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_average(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_average = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_adaptive() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_adaptive
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_bypass_adaptive(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_bypass_adaptive = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_norcos_mode() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_norcos_mode
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_norcos_mode(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_norcos_mode = x)


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_swap_cb_cr() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_swap_cb_cr
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_norcos_chroma_swap_cb_cr(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.ISP_CE1_NORCOS_CHROMA_CTRL_ts.norcos_chroma_swap_cb_cr = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL(norcos_chroma_bypass_filters,norcos_chroma_bypass_med,norcos_chroma_bypass_average,norcos_chroma_bypass_adaptive,norcos_chroma_norcos_mode,norcos_chroma_swap_cb_cr) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.word = (uint32_t)norcos_chroma_bypass_filters<<0 | (uint32_t)norcos_chroma_bypass_med<<1 | (uint32_t)norcos_chroma_bypass_average<<2 | (uint32_t)norcos_chroma_bypass_adaptive<<3 | (uint32_t)norcos_chroma_norcos_mode<<4 | (uint32_t)norcos_chroma_swap_cb_cr<<5)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_CTRL_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_CTRL.word = x)


//ISP_CE1_NORCOS_CHROMA_FLAT_PARAM


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_FLAT_PARAM_norcos_chroma_flat_param() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_FLAT_PARAM.ISP_CE1_NORCOS_CHROMA_FLAT_PARAM_ts.norcos_chroma_flat_param
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_FLAT_PARAM_norcos_chroma_flat_param(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_FLAT_PARAM.ISP_CE1_NORCOS_CHROMA_FLAT_PARAM_ts.norcos_chroma_flat_param = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_FLAT_PARAM(norcos_chroma_flat_param) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_FLAT_PARAM.word = (uint32_t)norcos_chroma_flat_param<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_FLAT_PARAM() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_FLAT_PARAM.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_FLAT_PARAM_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_FLAT_PARAM.word = x)


//ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE_norcos_chroma_flat_detect_grade() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE.ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE_ts.norcos_chroma_flat_detect_grade
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE_norcos_chroma_flat_detect_grade(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE.ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE_ts.norcos_chroma_flat_detect_grade = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE(norcos_chroma_flat_detect_grade) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE.word = (uint32_t)norcos_chroma_flat_detect_grade<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_FLAT_DETECT_GRADE.word = x)


//ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE_norcos_chroma_impulse_noise() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE.ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE_ts.norcos_chroma_impulse_noise
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE_norcos_chroma_impulse_noise(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE.ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE_ts.norcos_chroma_impulse_noise = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE(norcos_chroma_impulse_noise) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE.word = (uint32_t)norcos_chroma_impulse_noise<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_IMPULSE_NOISE.word = x)


//ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH


#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH_norcos_chroma_noiselevelth() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH.ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH_ts.norcos_chroma_noiselevelth
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH_norcos_chroma_noiselevelth(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH.ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH_ts.norcos_chroma_noiselevelth = x)
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH(norcos_chroma_noiselevelth) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH.word = (uint8_t)norcos_chroma_noiselevelth<<0)
#define Get_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH() p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH.word
#define Set_ISP_CE1_NORCOS_ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH_word(x) (p_ISP_CE1_NORCOS_IP->ISP_CE1_NORCOS_CHROMA_NOISE_LEVELTH.word = x)

//ISP_CE1_YUV2RGB_MATRIX_ENABLE
/*Description: Matrix Control Register
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t enable :1;
        /* Disable Matrix module*/
        uint8_t reserved0 :3;
        uint8_t soft_reset :1;
        /* Soft reset deasserted*/
    }ISP_CE1_YUV2RGB_MATRIX_ENABLE_ts;

}ISP_CE1_YUV2RGB_MATRIX_ENABLE_tu;



//ISP_CE1_YUV2RGB_MATRIX_RCOF00
/*Description: On-diagonal Matrix coefficient (0,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof00;
        /* Matrix Coefficient (0,0).*/
    }ISP_CE1_YUV2RGB_MATRIX_RCOF00_ts;

}ISP_CE1_YUV2RGB_MATRIX_RCOF00_tu;



//ISP_CE1_YUV2RGB_MATRIX_RCOF01
/*Description: Off-diagonal Matrix coefficient (0,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof01;
        /* Matrix Coefficient (0,1).*/
    }ISP_CE1_YUV2RGB_MATRIX_RCOF01_ts;

}ISP_CE1_YUV2RGB_MATRIX_RCOF01_tu;



//ISP_CE1_YUV2RGB_MATRIX_RCOF02
/*Description: Off-diagonal Matrix coefficient (0,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof02;
        /* Matrix Coefficient (0,2).*/
    }ISP_CE1_YUV2RGB_MATRIX_RCOF02_ts;

}ISP_CE1_YUV2RGB_MATRIX_RCOF02_tu;



//ISP_CE1_YUV2RGB_MATRIX_RCOF10
/*Description: Off-diagonal Matrix coefficient (1,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof10;
        /* Matrix Coefficient (1,0).*/
    }ISP_CE1_YUV2RGB_MATRIX_RCOF10_ts;

}ISP_CE1_YUV2RGB_MATRIX_RCOF10_tu;



//ISP_CE1_YUV2RGB_MATRIX_RCOF11
/*Description: On-diagonal Matrix coefficient (1,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof11;
        /* Matrix Coefficient (1,1).*/
    }ISP_CE1_YUV2RGB_MATRIX_RCOF11_ts;

}ISP_CE1_YUV2RGB_MATRIX_RCOF11_tu;



//ISP_CE1_YUV2RGB_MATRIX_RCOF12
/*Description: Off-diagonal Matrix coefficient (1,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof12;
        /* Matrix Coefficient (1,2).*/
    }ISP_CE1_YUV2RGB_MATRIX_RCOF12_ts;

}ISP_CE1_YUV2RGB_MATRIX_RCOF12_tu;



//ISP_CE1_YUV2RGB_MATRIX_RCOF20
/*Description: Off-diagonal Matrix coefficient (2,0)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof20;
        /* Matrix Coefficient (2,0).*/
    }ISP_CE1_YUV2RGB_MATRIX_RCOF20_ts;

}ISP_CE1_YUV2RGB_MATRIX_RCOF20_tu;



//ISP_CE1_YUV2RGB_MATRIX_RCOF21
/*Description: Off-diagonal Matrix coefficient (2,1)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof21;
        /* Matrix Coefficient (2,1).*/
    }ISP_CE1_YUV2RGB_MATRIX_RCOF21_ts;

}ISP_CE1_YUV2RGB_MATRIX_RCOF21_tu;



//ISP_CE1_YUV2RGB_MATRIX_RCOF22
/*Description: On-diagonal Matrix coefficient (2,2)

RGBop and RGBip are the output and input components of RGB data respectively.

Fix point coded 6.10
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t rcof22;
        /* Matrix Coefficient (2,2).*/
    }ISP_CE1_YUV2RGB_MATRIX_RCOF22_ts;

}ISP_CE1_YUV2RGB_MATRIX_RCOF22_tu;



//ISP_CE1_YUV2RGB_MATRIX_R_OFFSET
/*Description: Offset for R data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t r_offset :13;
        /* offset for R data*/
    }ISP_CE1_YUV2RGB_MATRIX_R_OFFSET_ts;

}ISP_CE1_YUV2RGB_MATRIX_R_OFFSET_tu;



//ISP_CE1_YUV2RGB_MATRIX_G_OFFSET
/*Description: Offset for G data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t g_offset :13;
        /* offset for G data*/
    }ISP_CE1_YUV2RGB_MATRIX_G_OFFSET_ts;

}ISP_CE1_YUV2RGB_MATRIX_G_OFFSET_tu;



//ISP_CE1_YUV2RGB_MATRIX_B_OFFSET
/*Description: Offset for B data

RGBop and RGBip are the output and input components of RGB data respectively.

12th bit is signed bit































Synthesis Results
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t b_offset :13;
        /* offset for B data*/
    }ISP_CE1_YUV2RGB_MATRIX_B_OFFSET_ts;

}ISP_CE1_YUV2RGB_MATRIX_B_OFFSET_tu;

typedef struct
{
    ISP_CE1_YUV2RGB_MATRIX_ENABLE_tu ISP_CE1_YUV2RGB_MATRIX_ENABLE;
    ISP_CE1_YUV2RGB_MATRIX_RCOF00_tu ISP_CE1_YUV2RGB_MATRIX_RCOF00;
    ISP_CE1_YUV2RGB_MATRIX_RCOF01_tu ISP_CE1_YUV2RGB_MATRIX_RCOF01;
    ISP_CE1_YUV2RGB_MATRIX_RCOF02_tu ISP_CE1_YUV2RGB_MATRIX_RCOF02;
    ISP_CE1_YUV2RGB_MATRIX_RCOF10_tu ISP_CE1_YUV2RGB_MATRIX_RCOF10;
    ISP_CE1_YUV2RGB_MATRIX_RCOF11_tu ISP_CE1_YUV2RGB_MATRIX_RCOF11;
    ISP_CE1_YUV2RGB_MATRIX_RCOF12_tu ISP_CE1_YUV2RGB_MATRIX_RCOF12;
    ISP_CE1_YUV2RGB_MATRIX_RCOF20_tu ISP_CE1_YUV2RGB_MATRIX_RCOF20;
    ISP_CE1_YUV2RGB_MATRIX_RCOF21_tu ISP_CE1_YUV2RGB_MATRIX_RCOF21;
    ISP_CE1_YUV2RGB_MATRIX_RCOF22_tu ISP_CE1_YUV2RGB_MATRIX_RCOF22;
    ISP_CE1_YUV2RGB_MATRIX_R_OFFSET_tu ISP_CE1_YUV2RGB_MATRIX_R_OFFSET;
    ISP_CE1_YUV2RGB_MATRIX_G_OFFSET_tu ISP_CE1_YUV2RGB_MATRIX_G_OFFSET;
    ISP_CE1_YUV2RGB_MATRIX_B_OFFSET_tu ISP_CE1_YUV2RGB_MATRIX_B_OFFSET;
}ISP_CE1_YUV2RGB_MATRIX_IP_ts;




//ISP_CE1_YUV2RGB_MATRIX_ENABLE


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE_enable() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.ISP_CE1_YUV2RGB_MATRIX_ENABLE_ts.enable
#define Is_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE_enable_DISABLE() (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.ISP_CE1_YUV2RGB_MATRIX_ENABLE_ts.enable == enable_DISABLE)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE_enable__DISABLE() (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.ISP_CE1_YUV2RGB_MATRIX_ENABLE_ts.enable = enable_DISABLE)
#define enable_DISABLE 0x0    //Disable Matrix module
#define Is_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE_enable_ENABLE() (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.ISP_CE1_YUV2RGB_MATRIX_ENABLE_ts.enable == enable_ENABLE)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE_enable__ENABLE() (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.ISP_CE1_YUV2RGB_MATRIX_ENABLE_ts.enable = enable_ENABLE)
#define enable_ENABLE 0x1    //Enable Matrix module


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE_soft_reset() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.ISP_CE1_YUV2RGB_MATRIX_ENABLE_ts.soft_reset
#define Is_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE_soft_reset_DISABLE() (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.ISP_CE1_YUV2RGB_MATRIX_ENABLE_ts.soft_reset == soft_reset_DISABLE)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE_soft_reset__DISABLE() (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.ISP_CE1_YUV2RGB_MATRIX_ENABLE_ts.soft_reset = soft_reset_DISABLE)
#define soft_reset_DISABLE 0x0    //Soft reset deasserted
#define Is_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE_soft_reset_ENABLE() (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.ISP_CE1_YUV2RGB_MATRIX_ENABLE_ts.soft_reset == soft_reset_ENABLE)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE_soft_reset__ENABLE() (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.ISP_CE1_YUV2RGB_MATRIX_ENABLE_ts.soft_reset = soft_reset_ENABLE)
#define soft_reset_ENABLE 0x1    //Soft reset asserted
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE(enable,soft_reset) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.word = (uint32_t)enable<<0 | (uint32_t)soft_reset<<4)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_ENABLE_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_ENABLE.word = x)


//ISP_CE1_YUV2RGB_MATRIX_RCOF00


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF00_rcof00() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF00.ISP_CE1_YUV2RGB_MATRIX_RCOF00_ts.rcof00
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF00_rcof00(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF00.ISP_CE1_YUV2RGB_MATRIX_RCOF00_ts.rcof00 = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF00(rcof00) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF00.word = (uint32_t)rcof00<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF00() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF00.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF00_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF00.word = x)


//ISP_CE1_YUV2RGB_MATRIX_RCOF01


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF01_rcof01() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF01.ISP_CE1_YUV2RGB_MATRIX_RCOF01_ts.rcof01
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF01_rcof01(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF01.ISP_CE1_YUV2RGB_MATRIX_RCOF01_ts.rcof01 = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF01(rcof01) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF01.word = (uint32_t)rcof01<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF01() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF01.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF01_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF01.word = x)


//ISP_CE1_YUV2RGB_MATRIX_RCOF02


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF02_rcof02() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF02.ISP_CE1_YUV2RGB_MATRIX_RCOF02_ts.rcof02
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF02_rcof02(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF02.ISP_CE1_YUV2RGB_MATRIX_RCOF02_ts.rcof02 = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF02(rcof02) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF02.word = (uint32_t)rcof02<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF02() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF02.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF02_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF02.word = x)


//ISP_CE1_YUV2RGB_MATRIX_RCOF10


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF10_rcof10() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF10.ISP_CE1_YUV2RGB_MATRIX_RCOF10_ts.rcof10
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF10_rcof10(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF10.ISP_CE1_YUV2RGB_MATRIX_RCOF10_ts.rcof10 = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF10(rcof10) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF10.word = (uint32_t)rcof10<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF10() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF10.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF10_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF10.word = x)


//ISP_CE1_YUV2RGB_MATRIX_RCOF11


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF11_rcof11() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF11.ISP_CE1_YUV2RGB_MATRIX_RCOF11_ts.rcof11
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF11_rcof11(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF11.ISP_CE1_YUV2RGB_MATRIX_RCOF11_ts.rcof11 = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF11(rcof11) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF11.word = (uint32_t)rcof11<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF11() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF11.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF11_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF11.word = x)


//ISP_CE1_YUV2RGB_MATRIX_RCOF12


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF12_rcof12() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF12.ISP_CE1_YUV2RGB_MATRIX_RCOF12_ts.rcof12
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF12_rcof12(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF12.ISP_CE1_YUV2RGB_MATRIX_RCOF12_ts.rcof12 = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF12(rcof12) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF12.word = (uint32_t)rcof12<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF12() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF12.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF12_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF12.word = x)


//ISP_CE1_YUV2RGB_MATRIX_RCOF20


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF20_rcof20() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF20.ISP_CE1_YUV2RGB_MATRIX_RCOF20_ts.rcof20
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF20_rcof20(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF20.ISP_CE1_YUV2RGB_MATRIX_RCOF20_ts.rcof20 = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF20(rcof20) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF20.word = (uint32_t)rcof20<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF20() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF20.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF20_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF20.word = x)


//ISP_CE1_YUV2RGB_MATRIX_RCOF21


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF21_rcof21() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF21.ISP_CE1_YUV2RGB_MATRIX_RCOF21_ts.rcof21
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF21_rcof21(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF21.ISP_CE1_YUV2RGB_MATRIX_RCOF21_ts.rcof21 = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF21(rcof21) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF21.word = (uint32_t)rcof21<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF21() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF21.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF21_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF21.word = x)


//ISP_CE1_YUV2RGB_MATRIX_RCOF22


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF22_rcof22() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF22.ISP_CE1_YUV2RGB_MATRIX_RCOF22_ts.rcof22
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF22_rcof22(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF22.ISP_CE1_YUV2RGB_MATRIX_RCOF22_ts.rcof22 = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF22(rcof22) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF22.word = (uint32_t)rcof22<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF22() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF22.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_RCOF22_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_RCOF22.word = x)


//ISP_CE1_YUV2RGB_MATRIX_R_OFFSET


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_R_OFFSET_r_offset() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_R_OFFSET.ISP_CE1_YUV2RGB_MATRIX_R_OFFSET_ts.r_offset
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_R_OFFSET_r_offset(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_R_OFFSET.ISP_CE1_YUV2RGB_MATRIX_R_OFFSET_ts.r_offset = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_R_OFFSET(r_offset) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_R_OFFSET.word = (uint32_t)r_offset<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_R_OFFSET() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_R_OFFSET.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_R_OFFSET_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_R_OFFSET.word = x)


//ISP_CE1_YUV2RGB_MATRIX_G_OFFSET


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_G_OFFSET_g_offset() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_G_OFFSET.ISP_CE1_YUV2RGB_MATRIX_G_OFFSET_ts.g_offset
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_G_OFFSET_g_offset(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_G_OFFSET.ISP_CE1_YUV2RGB_MATRIX_G_OFFSET_ts.g_offset = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_G_OFFSET(g_offset) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_G_OFFSET.word = (uint32_t)g_offset<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_G_OFFSET() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_G_OFFSET.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_G_OFFSET_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_G_OFFSET.word = x)


//ISP_CE1_YUV2RGB_MATRIX_B_OFFSET


#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_B_OFFSET_b_offset() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_B_OFFSET.ISP_CE1_YUV2RGB_MATRIX_B_OFFSET_ts.b_offset
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_B_OFFSET_b_offset(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_B_OFFSET.ISP_CE1_YUV2RGB_MATRIX_B_OFFSET_ts.b_offset = x)
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_B_OFFSET(b_offset) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_B_OFFSET.word = (uint16_t)b_offset<<0)
#define Get_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_B_OFFSET() p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_B_OFFSET.word
#define Set_ISP_CE1_YUV2RGB_MATRIX_ISP_CE1_YUV2RGB_MATRIX_B_OFFSET_word(x) (p_ISP_CE1_YUV2RGB_MATRIX_IP->ISP_CE1_YUV2RGB_MATRIX_B_OFFSET.word = x)

//ISP_CE1_MUX_0_UNPEAKING_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE1_MUX_0_UNPEAKING_ENABLE_ts;

}ISP_CE1_MUX_0_UNPEAKING_ENABLE_tu;



//ISP_CE1_MUX_0_UNPEAKING_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE1_MUX_0_UNPEAKING_SELECT_ts;

}ISP_CE1_MUX_0_UNPEAKING_SELECT_tu;

typedef struct
{
    ISP_CE1_MUX_0_UNPEAKING_ENABLE_tu ISP_CE1_MUX_0_UNPEAKING_ENABLE;
    ISP_CE1_MUX_0_UNPEAKING_SELECT_tu ISP_CE1_MUX_0_UNPEAKING_SELECT;
}ISP_CE1_MUX_0_UNPEAKING_IP_ts;




//ISP_CE1_MUX_0_UNPEAKING_ENABLE


#define Get_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE_mux2to1_enable() p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.ISP_CE1_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.ISP_CE1_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.ISP_CE1_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.ISP_CE1_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.ISP_CE1_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE_mux2to1_soft_reset() p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.ISP_CE1_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.ISP_CE1_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.ISP_CE1_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.ISP_CE1_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.ISP_CE1_MUX_0_UNPEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE() p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.word
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_ENABLE_word(x) (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_ENABLE.word = x)


//ISP_CE1_MUX_0_UNPEAKING_SELECT


#define Get_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT_mux2to1_select() p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.ISP_CE1_MUX_0_UNPEAKING_SELECT_ts.mux2to1_select
#define Is_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT_mux2to1_select_IDP0() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.ISP_CE1_MUX_0_UNPEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT_mux2to1_select__IDP0() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.ISP_CE1_MUX_0_UNPEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT_mux2to1_select_IDP1() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.ISP_CE1_MUX_0_UNPEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT_mux2to1_select__IDP1() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.ISP_CE1_MUX_0_UNPEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT_mux2to1_shadow_en() p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.ISP_CE1_MUX_0_UNPEAKING_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.ISP_CE1_MUX_0_UNPEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.ISP_CE1_MUX_0_UNPEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.ISP_CE1_MUX_0_UNPEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.ISP_CE1_MUX_0_UNPEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT() p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.word
#define Set_ISP_CE1_MUX_0_UNPEAKING_ISP_CE1_MUX_0_UNPEAKING_SELECT_word(x) (p_ISP_CE1_MUX_0_UNPEAKING_IP->ISP_CE1_MUX_0_UNPEAKING_SELECT.word = x)

//ISP_CE1_MUX_1_UNPEAKING_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE1_MUX_1_UNPEAKING_ENABLE_ts;

}ISP_CE1_MUX_1_UNPEAKING_ENABLE_tu;



//ISP_CE1_MUX_1_UNPEAKING_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE1_MUX_1_UNPEAKING_SELECT_ts;

}ISP_CE1_MUX_1_UNPEAKING_SELECT_tu;

typedef struct
{
    ISP_CE1_MUX_1_UNPEAKING_ENABLE_tu ISP_CE1_MUX_1_UNPEAKING_ENABLE;
    ISP_CE1_MUX_1_UNPEAKING_SELECT_tu ISP_CE1_MUX_1_UNPEAKING_SELECT;
}ISP_CE1_MUX_1_UNPEAKING_IP_ts;




//ISP_CE1_MUX_1_UNPEAKING_ENABLE


#define Get_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE_mux2to1_enable() p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.ISP_CE1_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.ISP_CE1_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.ISP_CE1_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.ISP_CE1_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.ISP_CE1_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE_mux2to1_soft_reset() p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.ISP_CE1_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.ISP_CE1_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.ISP_CE1_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.ISP_CE1_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.ISP_CE1_MUX_1_UNPEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE() p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.word
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_ENABLE_word(x) (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_ENABLE.word = x)


//ISP_CE1_MUX_1_UNPEAKING_SELECT


#define Get_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT_mux2to1_select() p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.ISP_CE1_MUX_1_UNPEAKING_SELECT_ts.mux2to1_select
#define Is_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT_mux2to1_select_IDP0() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.ISP_CE1_MUX_1_UNPEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT_mux2to1_select__IDP0() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.ISP_CE1_MUX_1_UNPEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT_mux2to1_select_IDP1() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.ISP_CE1_MUX_1_UNPEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT_mux2to1_select__IDP1() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.ISP_CE1_MUX_1_UNPEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT_mux2to1_shadow_en() p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.ISP_CE1_MUX_1_UNPEAKING_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.ISP_CE1_MUX_1_UNPEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.ISP_CE1_MUX_1_UNPEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.ISP_CE1_MUX_1_UNPEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.ISP_CE1_MUX_1_UNPEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT() p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.word
#define Set_ISP_CE1_MUX_1_UNPEAKING_ISP_CE1_MUX_1_UNPEAKING_SELECT_word(x) (p_ISP_CE1_MUX_1_UNPEAKING_IP->ISP_CE1_MUX_1_UNPEAKING_SELECT.word = x)

//ISP_CE1_MUX_0_PEAKING_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE1_MUX_0_PEAKING_ENABLE_ts;

}ISP_CE1_MUX_0_PEAKING_ENABLE_tu;



//ISP_CE1_MUX_0_PEAKING_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE1_MUX_0_PEAKING_SELECT_ts;

}ISP_CE1_MUX_0_PEAKING_SELECT_tu;

typedef struct
{
    ISP_CE1_MUX_0_PEAKING_ENABLE_tu ISP_CE1_MUX_0_PEAKING_ENABLE;
    ISP_CE1_MUX_0_PEAKING_SELECT_tu ISP_CE1_MUX_0_PEAKING_SELECT;
}ISP_CE1_MUX_0_PEAKING_IP_ts;




//ISP_CE1_MUX_0_PEAKING_ENABLE


#define Get_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE_mux2to1_enable() p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.ISP_CE1_MUX_0_PEAKING_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.ISP_CE1_MUX_0_PEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.ISP_CE1_MUX_0_PEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.ISP_CE1_MUX_0_PEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.ISP_CE1_MUX_0_PEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE_mux2to1_soft_reset() p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.ISP_CE1_MUX_0_PEAKING_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.ISP_CE1_MUX_0_PEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.ISP_CE1_MUX_0_PEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.ISP_CE1_MUX_0_PEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.ISP_CE1_MUX_0_PEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE() p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.word
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_ENABLE_word(x) (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_ENABLE.word = x)


//ISP_CE1_MUX_0_PEAKING_SELECT


#define Get_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT_mux2to1_select() p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.ISP_CE1_MUX_0_PEAKING_SELECT_ts.mux2to1_select
#define Is_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT_mux2to1_select_IDP0() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.ISP_CE1_MUX_0_PEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT_mux2to1_select__IDP0() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.ISP_CE1_MUX_0_PEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT_mux2to1_select_IDP1() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.ISP_CE1_MUX_0_PEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT_mux2to1_select__IDP1() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.ISP_CE1_MUX_0_PEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT_mux2to1_shadow_en() p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.ISP_CE1_MUX_0_PEAKING_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.ISP_CE1_MUX_0_PEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.ISP_CE1_MUX_0_PEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.ISP_CE1_MUX_0_PEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.ISP_CE1_MUX_0_PEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT() p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.word
#define Set_ISP_CE1_MUX_0_PEAKING_ISP_CE1_MUX_0_PEAKING_SELECT_word(x) (p_ISP_CE1_MUX_0_PEAKING_IP->ISP_CE1_MUX_0_PEAKING_SELECT.word = x)

//ISP_CE1_MUX_1_PEAKING_ENABLE
/*Description: Enable configuration register.
*/
typedef union
{
    uint32_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_enable :1;
        /* Disable Mux2to1 module*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_soft_reset :1;
        /* (DISABLE SOFT RESET)*/
    }ISP_CE1_MUX_1_PEAKING_ENABLE_ts;

}ISP_CE1_MUX_1_PEAKING_ENABLE_tu;



//ISP_CE1_MUX_1_PEAKING_SELECT
/*Description: Control Mux2to1 module
*/
typedef union
{
    uint8_t word;
    uint8_t data;
    struct
    {
        uint8_t mux2to1_select :1;
        /* connect IDP input 0 to output*/
        uint8_t reserved0 :3;
        uint8_t mux2to1_shadow_en :1;
        /* (DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame*/
    }ISP_CE1_MUX_1_PEAKING_SELECT_ts;

}ISP_CE1_MUX_1_PEAKING_SELECT_tu;

typedef struct
{
    ISP_CE1_MUX_1_PEAKING_ENABLE_tu ISP_CE1_MUX_1_PEAKING_ENABLE;
    ISP_CE1_MUX_1_PEAKING_SELECT_tu ISP_CE1_MUX_1_PEAKING_SELECT;
}ISP_CE1_MUX_1_PEAKING_IP_ts;




//ISP_CE1_MUX_1_PEAKING_ENABLE


#define Get_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE_mux2to1_enable() p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.ISP_CE1_MUX_1_PEAKING_ENABLE_ts.mux2to1_enable
#define Is_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE_mux2to1_enable_DISABLE() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.ISP_CE1_MUX_1_PEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_DISABLE)
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE_mux2to1_enable__DISABLE() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.ISP_CE1_MUX_1_PEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_DISABLE)
#define mux2to1_enable_DISABLE 0x0    //Disable Mux2to1 module
#define Is_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE_mux2to1_enable_ENABLE() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.ISP_CE1_MUX_1_PEAKING_ENABLE_ts.mux2to1_enable == mux2to1_enable_ENABLE)
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE_mux2to1_enable__ENABLE() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.ISP_CE1_MUX_1_PEAKING_ENABLE_ts.mux2to1_enable = mux2to1_enable_ENABLE)
#define mux2to1_enable_ENABLE 0x1    //Enable Mux2to1module


#define Get_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE_mux2to1_soft_reset() p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.ISP_CE1_MUX_1_PEAKING_ENABLE_ts.mux2to1_soft_reset
#define Is_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE_mux2to1_soft_reset_B_0x0() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.ISP_CE1_MUX_1_PEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x0)
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE_mux2to1_soft_reset__B_0x0() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.ISP_CE1_MUX_1_PEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x0)
#define mux2to1_soft_reset_B_0x0 0x0    //(DISABLE SOFT RESET)
#define Is_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE_mux2to1_soft_reset_B_0x1() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.ISP_CE1_MUX_1_PEAKING_ENABLE_ts.mux2to1_soft_reset == mux2to1_soft_reset_B_0x1)
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE_mux2to1_soft_reset__B_0x1() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.ISP_CE1_MUX_1_PEAKING_ENABLE_ts.mux2to1_soft_reset = mux2to1_soft_reset_B_0x1)
#define mux2to1_soft_reset_B_0x1 0x1    //(ENABLE SOFT RESET)
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE(mux2to1_enable,mux2to1_soft_reset) (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.word = (uint32_t)mux2to1_enable<<0 | (uint32_t)mux2to1_soft_reset<<4)
#define Get_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE() p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.word
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_ENABLE_word(x) (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_ENABLE.word = x)


//ISP_CE1_MUX_1_PEAKING_SELECT


#define Get_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT_mux2to1_select() p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.ISP_CE1_MUX_1_PEAKING_SELECT_ts.mux2to1_select
#define Is_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT_mux2to1_select_IDP0() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.ISP_CE1_MUX_1_PEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP0)
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT_mux2to1_select__IDP0() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.ISP_CE1_MUX_1_PEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP0)
#define mux2to1_select_IDP0 0x0    //connect IDP input 0 to output
#define Is_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT_mux2to1_select_IDP1() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.ISP_CE1_MUX_1_PEAKING_SELECT_ts.mux2to1_select == mux2to1_select_IDP1)
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT_mux2to1_select__IDP1() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.ISP_CE1_MUX_1_PEAKING_SELECT_ts.mux2to1_select = mux2to1_select_IDP1)
#define mux2to1_select_IDP1 0x1    //connect IDP input 1 to output


#define Get_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT_mux2to1_shadow_en() p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.ISP_CE1_MUX_1_PEAKING_SELECT_ts.mux2to1_shadow_en
#define Is_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT_mux2to1_shadow_en_B_0x0() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.ISP_CE1_MUX_1_PEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x0)
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT_mux2to1_shadow_en__B_0x0() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.ISP_CE1_MUX_1_PEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x0)
#define mux2to1_shadow_en_B_0x0 0x0    //(DISABLE SHADOW REGISTER) Disable shadow register on Start of Frame
#define Is_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT_mux2to1_shadow_en_B_0x1() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.ISP_CE1_MUX_1_PEAKING_SELECT_ts.mux2to1_shadow_en == mux2to1_shadow_en_B_0x1)
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT_mux2to1_shadow_en__B_0x1() (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.ISP_CE1_MUX_1_PEAKING_SELECT_ts.mux2to1_shadow_en = mux2to1_shadow_en_B_0x1)
#define mux2to1_shadow_en_B_0x1 0x1    //(ENABLE SHADOW REGISTER) Enable shadow register on Start of Frame
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT(mux2to1_select,mux2to1_shadow_en) (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.word = (uint8_t)mux2to1_select<<0 | (uint8_t)mux2to1_shadow_en<<4)
#define Get_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT() p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.word
#define Set_ISP_CE1_MUX_1_PEAKING_ISP_CE1_MUX_1_PEAKING_SELECT_word(x) (p_ISP_CE1_MUX_1_PEAKING_IP->ISP_CE1_MUX_1_PEAKING_SELECT.word = x)

//GRIDIRON_MEM_PAGE
/*Description: Control of Memory Page. Not used in Pictor => Read-only
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t PAGE_INDEX;
    }GRIDIRON_MEM_PAGE_ts;

}GRIDIRON_MEM_PAGE_tu;



//GRIDIRON_MEM_ELT_CAST0
/*Description: Reference Data for corresponding Cast. The reference channel data of every line is paired to form 20 bit words of "GIR & RED" and "BLU & GIB". These channel pair lines alternate (just as the top down raster bayer data from the sensor). The length of GIR-RED/ BLU-GIB sequence is dependent on the sensor max h size and the gridpitch.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t RED_OR_GIB :10;
        /* 
        Red or GreenInBlue reference data.*/
        uint16_t GIR_OR_BLUE :10;
        /* 
        GreenInRed or Blue reference data.*/
    }GRIDIRON_MEM_ELT_CAST0_ts;

}GRIDIRON_MEM_ELT_CAST0_tu;



//GRIDIRON_MEM_ELT_CAST1
/*Description: Reference Data for corresponding Cast. The reference channel data of every line is paired to form 20 bit words of "GIR & RED" and "BLU & GIB". These channel pair lines alternate (just as the top down raster bayer data from the sensor). The length of GIR-RED/ BLU-GIB sequence is dependent on the sensor max h size and the gridpitch.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t RED_OR_GIB :10;
        /* 
        Red or GreenInBlue reference data.*/
        uint16_t GIR_OR_BLUE :10;
        /* 
        GreenInRed or Blue reference data.*/
    }GRIDIRON_MEM_ELT_CAST1_ts;

}GRIDIRON_MEM_ELT_CAST1_tu;



//GRIDIRON_MEM_ELT_CAST2
/*Description: Reference Data for corresponding Cast. The reference channel data of every line is paired to form 20 bit words of "GIR & RED" and "BLU & GIB". These channel pair lines alternate (just as the top down raster bayer data from the sensor). The length of GIR-RED/ BLU-GIB sequence is dependent on the sensor max h size and the gridpitch.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t RED_OR_GIB :10;
        /* 
        Red or GreenInBlue reference data.*/
        uint16_t GIR_OR_BLUE :10;
        /* 
        GreenInRed or Blue reference data.*/
    }GRIDIRON_MEM_ELT_CAST2_ts;

}GRIDIRON_MEM_ELT_CAST2_tu;



//GRIDIRON_MEM_ELT_CAST3
/*Description: Reference Data for corresponding Cast. The reference channel data of every line is paired to form 20 bit words of "GIR & RED" and "BLU & GIB". These channel pair lines alternate (just as the top down raster bayer data from the sensor). The length of GIR-RED/ BLU-GIB sequence is dependent on the sensor max h size and the gridpitch.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t RED_OR_GIB :10;
        /* 
        Red or GreenInBlue reference data.*/
        uint16_t GIR_OR_BLUE :10;
        /* 
        GreenInRed or Blue reference data.*/
    }GRIDIRON_MEM_ELT_CAST3_ts;

}GRIDIRON_MEM_ELT_CAST3_tu;

typedef struct
{
    GRIDIRON_MEM_PAGE_tu GRIDIRON_MEM_PAGE;
    GRIDIRON_MEM_ELT_CAST0_tu GRIDIRON_MEM_ELT_CAST0[6656];
    uint32_t pad_GRIDIRON_MEM_ELT_CAST1[1536];
    GRIDIRON_MEM_ELT_CAST1_tu GRIDIRON_MEM_ELT_CAST1[6656];
    uint32_t pad_GRIDIRON_MEM_ELT_CAST2[1536];
    GRIDIRON_MEM_ELT_CAST2_tu GRIDIRON_MEM_ELT_CAST2[6656];
    uint32_t pad_GRIDIRON_MEM_ELT_CAST3[1536];
    GRIDIRON_MEM_ELT_CAST3_tu GRIDIRON_MEM_ELT_CAST3[6656];
}GRIDIRON_MEM_IP_ts;




//GRIDIRON_MEM_PAGE


#define Get_GRIDIRON_MEM_GRIDIRON_MEM_PAGE_PAGE_INDEX() p_GRIDIRON_MEM_IP->GRIDIRON_MEM_PAGE.GRIDIRON_MEM_PAGE_ts.PAGE_INDEX
#define Get_GRIDIRON_MEM_GRIDIRON_MEM_PAGE() p_GRIDIRON_MEM_IP->GRIDIRON_MEM_PAGE.word


//GRIDIRON_MEM_ELT_CAST0 : Ignoring header desciptors






//GRIDIRON_MEM_ELT_CAST1 : Ignoring header desciptors






//GRIDIRON_MEM_ELT_CAST2 : Ignoring header desciptors






//GRIDIRON_MEM_ELT_CAST3 : Ignoring header desciptors





//GLACE_MEM_PAGE
/*Description: Control of Memory Page. Not used in Pictor => Read-only
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t PAGE_INDEX;
    }GLACE_MEM_PAGE_ts;

}GLACE_MEM_PAGE_tu;



//GLACE_MEM_PIX_MEAN
/*Description: Stores the red, green, blue mean pixels values for each block in the grid.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint8_t BLUE_MEAN;
        /* Blue pixels mean value*/
        uint8_t GREEN_MEAN;
        /* Greenpixels mean value*/
        uint8_t RED_MEAN;
        /* Red pixels mean value*/
    }GLACE_MEM_PIX_MEAN_ts;

}GLACE_MEM_PIX_MEAN_tu;



//GLACE_MEM_SAT_NUM
/*Description: Stores the number of saturated pixels for each block
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t GLACE_SAT_NUM :12;
        /* number of saturated pixels in the block*/
    }GLACE_MEM_SAT_NUM_ts;

}GLACE_MEM_SAT_NUM_tu;

typedef struct
{
    GLACE_MEM_PAGE_tu GLACE_MEM_PAGE;
    GLACE_MEM_PIX_MEAN_tu GLACE_MEM_PIX_MEAN[3888];
    GLACE_MEM_SAT_NUM_tu GLACE_MEM_SAT_NUM[3888];
}GLACE_MEM_IP_ts;




//GLACE_MEM_PAGE


#define Get_GLACE_MEM_GLACE_MEM_PAGE_PAGE_INDEX() p_GLACE_MEM_IP->GLACE_MEM_PAGE.GLACE_MEM_PAGE_ts.PAGE_INDEX
#define Get_GLACE_MEM_GLACE_MEM_PAGE() p_GLACE_MEM_IP->GLACE_MEM_PAGE.word


//GLACE_MEM_PIX_MEAN : Ignoring header desciptors








//GLACE_MEM_SAT_NUM : Ignoring header desciptors



//HIST_MEM_PAGE
/*Description: Control of Memory Page. Not used in Pictor => Read-only
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t PAGE_INDEX;
    }HIST_MEM_PAGE_ts;

}HIST_MEM_PAGE_tu;



//HIST_MEM_GREEN_BIN
/*Description: Green Pixel count for corresponding bin.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t GREEN_COUNT :23;
        /* 
        Number of green pixel counted in the corresponding bin*/
    }HIST_MEM_GREEN_BIN_ts;

}HIST_MEM_GREEN_BIN_tu;



//HIST_MEM_RED_BIN
/*Description: Red Pixel count for corresponding bin.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t RED_COUNT :22;
        /* 
        Number of red pixel counted in the corresponding bin*/
    }HIST_MEM_RED_BIN_ts;

}HIST_MEM_RED_BIN_tu;



//HIST_MEM_BLUE_BIN
/*Description: Blue Pixel count for corresponding bin.
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t BLUE_COUNT :22;
        /* 
        Number of Blue pixels counted in the corresponding bin*/
    }HIST_MEM_BLUE_BIN_ts;

}HIST_MEM_BLUE_BIN_tu;

typedef struct
{
    HIST_MEM_PAGE_tu HIST_MEM_PAGE;
    HIST_MEM_GREEN_BIN_tu HIST_MEM_GREEN_BIN[256];
    HIST_MEM_RED_BIN_tu HIST_MEM_RED_BIN[256];
    HIST_MEM_BLUE_BIN_tu HIST_MEM_BLUE_BIN[256];
}HIST_MEM_IP_ts;




//HIST_MEM_PAGE


#define Get_HIST_MEM_HIST_MEM_PAGE_PAGE_INDEX() p_HIST_MEM_IP->HIST_MEM_PAGE.HIST_MEM_PAGE_ts.PAGE_INDEX
#define Get_HIST_MEM_HIST_MEM_PAGE() p_HIST_MEM_IP->HIST_MEM_PAGE.word


//HIST_MEM_GREEN_BIN : Ignoring header desciptors




//HIST_MEM_RED_BIN : Ignoring header desciptors




//HIST_MEM_BLUE_BIN : Ignoring header desciptors



//LINEAR_MEM_PAGE
/*Description: Control of Memory Page. Not used in Pictor => Read-only
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t PAGE_INDEX;
    }LINEAR_MEM_PAGE_ts;

}LINEAR_MEM_PAGE_tu;



//LINEAR_MEM_LUT_GINR_ELT
/*Description: Reference Data for GreenInRed Channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t GINR_REF_VALUE :12;
        /* 
        Pixel value for GreenInRed LUT entry*/
    }LINEAR_MEM_LUT_GINR_ELT_ts;

}LINEAR_MEM_LUT_GINR_ELT_tu;



//LINEAR_MEM_LUT_RED_ELT
/*Description: Reference Data for Red Channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t RED_REF_VALUE :12;
        /* 
        Pixel value for Red LUT entry*/
    }LINEAR_MEM_LUT_RED_ELT_ts;

}LINEAR_MEM_LUT_RED_ELT_tu;



//LINEAR_MEM_LUT_BLUE_ELT
/*Description: Reference Data for Blue Channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t BLUE_REF_VALUE :12;
        /* 
        Pixel value for Blue LUT entry*/
    }LINEAR_MEM_LUT_BLUE_ELT_ts;

}LINEAR_MEM_LUT_BLUE_ELT_tu;



//LINEAR_MEM_LUT_GINB_ELT
/*Description: Reference Data for Green In Blue Channel.
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t GINB_REF_VALUE :12;
        /* 
        Pixel value for Green In Blue LUT entry*/
    }LINEAR_MEM_LUT_GINB_ELT_ts;

}LINEAR_MEM_LUT_GINB_ELT_tu;

typedef struct
{
    LINEAR_MEM_PAGE_tu LINEAR_MEM_PAGE;
    LINEAR_MEM_LUT_GINR_ELT_tu LINEAR_MEM_LUT_GINR_ELT[256];
    LINEAR_MEM_LUT_RED_ELT_tu LINEAR_MEM_LUT_RED_ELT[256];
    LINEAR_MEM_LUT_BLUE_ELT_tu LINEAR_MEM_LUT_BLUE_ELT[256];
    LINEAR_MEM_LUT_GINB_ELT_tu LINEAR_MEM_LUT_GINB_ELT[256];
}LINEAR_MEM_IP_ts;




//LINEAR_MEM_PAGE


#define Get_LINEAR_MEM_LINEAR_MEM_PAGE_PAGE_INDEX() p_LINEAR_MEM_IP->LINEAR_MEM_PAGE.LINEAR_MEM_PAGE_ts.PAGE_INDEX
#define Get_LINEAR_MEM_LINEAR_MEM_PAGE() p_LINEAR_MEM_IP->LINEAR_MEM_PAGE.word


//LINEAR_MEM_LUT_GINR_ELT : Ignoring header desciptors




//LINEAR_MEM_LUT_RED_ELT : Ignoring header desciptors




//LINEAR_MEM_LUT_BLUE_ELT : Ignoring header desciptors




//LINEAR_MEM_LUT_GINB_ELT : Ignoring header desciptors



//CE0_SHARP_MEM_PAGE
/*Description: Control of Memory Page. Not used in Pictor => Read-only
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t PAGE_INDEX;
    }CE0_SHARP_MEM_PAGE_ts;

}CE0_SHARP_MEM_PAGE_tu;



//CE0_SHARP_MEM_LUT_GREEN_ELT
/*Description: Reference Data for Green Channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t GREEN_REF_VALUE :10;
        /* 
        Pixel value for corresponding LUT entry*/
    }CE0_SHARP_MEM_LUT_GREEN_ELT_ts;

}CE0_SHARP_MEM_LUT_GREEN_ELT_tu;



//CE0_SHARP_MEM_LUT_RED_ELT
/*Description: Reference Data for Red Channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t RED_REF_VALUE :10;
        /* 
        Pixel value for Red LUT entry*/
    }CE0_SHARP_MEM_LUT_RED_ELT_ts;

}CE0_SHARP_MEM_LUT_RED_ELT_tu;



//CE0_SHARP_MEM_LUT_BLUE_ELT
/*Description: Reference Data for Blue Channel.
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t BLUE_REF_VALUE :10;
        /* 
        Pixel value for Blue LUT entry*/
    }CE0_SHARP_MEM_LUT_BLUE_ELT_ts;

}CE0_SHARP_MEM_LUT_BLUE_ELT_tu;

typedef struct
{
    CE0_SHARP_MEM_PAGE_tu CE0_SHARP_MEM_PAGE;
    CE0_SHARP_MEM_LUT_GREEN_ELT_tu CE0_SHARP_MEM_LUT_GREEN_ELT[128];
    CE0_SHARP_MEM_LUT_RED_ELT_tu CE0_SHARP_MEM_LUT_RED_ELT[128];
    CE0_SHARP_MEM_LUT_BLUE_ELT_tu CE0_SHARP_MEM_LUT_BLUE_ELT[128];
}CE0_SHARP_MEM_IP_ts;




//CE0_SHARP_MEM_PAGE


#define Get_CE0_SHARP_MEM_CE0_SHARP_MEM_PAGE_PAGE_INDEX() p_CE0_SHARP_MEM_IP->CE0_SHARP_MEM_PAGE.CE0_SHARP_MEM_PAGE_ts.PAGE_INDEX
#define Get_CE0_SHARP_MEM_CE0_SHARP_MEM_PAGE() p_CE0_SHARP_MEM_IP->CE0_SHARP_MEM_PAGE.word


//CE0_SHARP_MEM_LUT_GREEN_ELT : Ignoring header desciptors




//CE0_SHARP_MEM_LUT_RED_ELT : Ignoring header desciptors




//CE0_SHARP_MEM_LUT_BLUE_ELT : Ignoring header desciptors



//CE0_UNSHARP_MEM_PAGE
/*Description: Control of Memory Page. Not used in Pictor => Read-only
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t PAGE_INDEX;
    }CE0_UNSHARP_MEM_PAGE_ts;

}CE0_UNSHARP_MEM_PAGE_tu;



//CE0_UNSHARP_MEM_LUT_GREEN_ELT
/*Description: Reference Data for Green Channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t GREEN_REF_VALUE :10;
        /* 
        Pixel value for Green LUT entry*/
    }CE0_UNSHARP_MEM_LUT_GREEN_ELT_ts;

}CE0_UNSHARP_MEM_LUT_GREEN_ELT_tu;



//CE0_UNSHARP_MEM_LUT_RED_ELT
/*Description: Reference Data for Red Channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t RED_REF_VALUE :10;
        /* 
        Pixel value for Red LUT entry*/
    }CE0_UNSHARP_MEM_LUT_RED_ELT_ts;

}CE0_UNSHARP_MEM_LUT_RED_ELT_tu;



//CE0_UNSHARP_MEM_LUT_BLUE_ELT
/*Description: Reference Data for Blue Channel.
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t BLUE_REF_VALUE :10;
        /* 
        Pixel value for Blue LUT entry*/
    }CE0_UNSHARP_MEM_LUT_BLUE_ELT_ts;

}CE0_UNSHARP_MEM_LUT_BLUE_ELT_tu;

typedef struct
{
    CE0_UNSHARP_MEM_PAGE_tu CE0_UNSHARP_MEM_PAGE;
    CE0_UNSHARP_MEM_LUT_GREEN_ELT_tu CE0_UNSHARP_MEM_LUT_GREEN_ELT[128];
    CE0_UNSHARP_MEM_LUT_RED_ELT_tu CE0_UNSHARP_MEM_LUT_RED_ELT[128];
    CE0_UNSHARP_MEM_LUT_BLUE_ELT_tu CE0_UNSHARP_MEM_LUT_BLUE_ELT[128];
}CE0_UNSHARP_MEM_IP_ts;




//CE0_UNSHARP_MEM_PAGE


#define Get_CE0_UNSHARP_MEM_CE0_UNSHARP_MEM_PAGE_PAGE_INDEX() p_CE0_UNSHARP_MEM_IP->CE0_UNSHARP_MEM_PAGE.CE0_UNSHARP_MEM_PAGE_ts.PAGE_INDEX
#define Get_CE0_UNSHARP_MEM_CE0_UNSHARP_MEM_PAGE() p_CE0_UNSHARP_MEM_IP->CE0_UNSHARP_MEM_PAGE.word


//CE0_UNSHARP_MEM_LUT_GREEN_ELT : Ignoring header desciptors




//CE0_UNSHARP_MEM_LUT_RED_ELT : Ignoring header desciptors




//CE0_UNSHARP_MEM_LUT_BLUE_ELT : Ignoring header desciptors



//CE1_SHARP_MEM_PAGE
/*Description: Control of Memory Page. Not used in Pictor => Read-only
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t PAGE_INDEX;
    }CE1_SHARP_MEM_PAGE_ts;

}CE1_SHARP_MEM_PAGE_tu;



//CE1_SHARP_MEM_LUT_GREEN_ELT
/*Description: Reference Data for Green Channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t GREEN_REF_VALUE :10;
        /* 
        Pixel value for Green LUT entry*/
    }CE1_SHARP_MEM_LUT_GREEN_ELT_ts;

}CE1_SHARP_MEM_LUT_GREEN_ELT_tu;



//CE1_SHARP_MEM_LUT_RED_ELT
/*Description: Reference Data for Red Channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t RED_REF_VALUE :10;
        /* 
        Pixel value for Red LUT entry*/
    }CE1_SHARP_MEM_LUT_RED_ELT_ts;

}CE1_SHARP_MEM_LUT_RED_ELT_tu;



//CE1_SHARP_MEM_LUT_BLUE_ELT
/*Description: Reference Data for Blue Channel.
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t BLUE_REF_VALUE :10;
        /* 
        Pixel value for Blue LUT entry*/
    }CE1_SHARP_MEM_LUT_BLUE_ELT_ts;

}CE1_SHARP_MEM_LUT_BLUE_ELT_tu;

typedef struct
{
    CE1_SHARP_MEM_PAGE_tu CE1_SHARP_MEM_PAGE;
    CE1_SHARP_MEM_LUT_GREEN_ELT_tu CE1_SHARP_MEM_LUT_GREEN_ELT[128];
    CE1_SHARP_MEM_LUT_RED_ELT_tu CE1_SHARP_MEM_LUT_RED_ELT[128];
    CE1_SHARP_MEM_LUT_BLUE_ELT_tu CE1_SHARP_MEM_LUT_BLUE_ELT[128];
}CE1_SHARP_MEM_IP_ts;




//CE1_SHARP_MEM_PAGE


#define Get_CE1_SHARP_MEM_CE1_SHARP_MEM_PAGE_PAGE_INDEX() p_CE1_SHARP_MEM_IP->CE1_SHARP_MEM_PAGE.CE1_SHARP_MEM_PAGE_ts.PAGE_INDEX
#define Get_CE1_SHARP_MEM_CE1_SHARP_MEM_PAGE() p_CE1_SHARP_MEM_IP->CE1_SHARP_MEM_PAGE.word


//CE1_SHARP_MEM_LUT_GREEN_ELT : Ignoring header desciptors




//CE1_SHARP_MEM_LUT_RED_ELT : Ignoring header desciptors




//CE1_SHARP_MEM_LUT_BLUE_ELT : Ignoring header desciptors



//CE1_UNSHARP_MEM_PAGE
/*Description: Control of Memory Page. Not used in Pictor => Read-only
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t PAGE_INDEX;
    }CE1_UNSHARP_MEM_PAGE_ts;

}CE1_UNSHARP_MEM_PAGE_tu;



//CE1_UNSHARP_MEM_LUT_GREEN_ELT
/*Description: Reference Data for Green Channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t GREEN_REF_VALUE :10;
        /* 
        Pixel value for Green LUT entry*/
    }CE1_UNSHARP_MEM_LUT_GREEN_ELT_ts;

}CE1_UNSHARP_MEM_LUT_GREEN_ELT_tu;



//CE1_UNSHARP_MEM_LUT_RED_ELT
/*Description: Reference Data for Red Channel.
*/
typedef union
{
    uint32_t word;
    uint16_t data;
    struct
    {
        uint16_t RED_REF_VALUE :10;
        /* 
        Pixel value for Red LUT entry*/
    }CE1_UNSHARP_MEM_LUT_RED_ELT_ts;

}CE1_UNSHARP_MEM_LUT_RED_ELT_tu;



//CE1_UNSHARP_MEM_LUT_BLUE_ELT
/*Description: Reference Data for Blue Channel.
*/
typedef union
{
    uint16_t word;
    uint16_t data;
    struct
    {
        uint16_t BLUE_REF_VALUE :10;
        /* 
        Pixel value for Blue LUT entry*/
    }CE1_UNSHARP_MEM_LUT_BLUE_ELT_ts;

}CE1_UNSHARP_MEM_LUT_BLUE_ELT_tu;

typedef struct
{
    CE1_UNSHARP_MEM_PAGE_tu CE1_UNSHARP_MEM_PAGE;
    CE1_UNSHARP_MEM_LUT_GREEN_ELT_tu CE1_UNSHARP_MEM_LUT_GREEN_ELT[128];
    CE1_UNSHARP_MEM_LUT_RED_ELT_tu CE1_UNSHARP_MEM_LUT_RED_ELT[128];
    CE1_UNSHARP_MEM_LUT_BLUE_ELT_tu CE1_UNSHARP_MEM_LUT_BLUE_ELT[128];
}CE1_UNSHARP_MEM_IP_ts;




//CE1_UNSHARP_MEM_PAGE


#define Get_CE1_UNSHARP_MEM_CE1_UNSHARP_MEM_PAGE_PAGE_INDEX() p_CE1_UNSHARP_MEM_IP->CE1_UNSHARP_MEM_PAGE.CE1_UNSHARP_MEM_PAGE_ts.PAGE_INDEX
#define Get_CE1_UNSHARP_MEM_CE1_UNSHARP_MEM_PAGE() p_CE1_UNSHARP_MEM_IP->CE1_UNSHARP_MEM_PAGE.word


//CE1_UNSHARP_MEM_LUT_GREEN_ELT : Ignoring header desciptors




//CE1_UNSHARP_MEM_LUT_RED_ELT : Ignoring header desciptors




//CE1_UNSHARP_MEM_LUT_BLUE_ELT : Ignoring header desciptors



//DUSTER_MEM_PAGE
/*Description: Control of Memory Page. Not used in Pictor => Read-only
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t PAGE_INDEX;
    }DUSTER_MEM_PAGE_ts;

}DUSTER_MEM_PAGE_tu;



//DUSTER_MEM_POSITION_DEFECT
/*Description: Coordinates of the defective pixels in the frame received by the ISP. Defects must be sorted in the same order than incoming pixels (from top left to bottom right).
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint16_t reserved0 :12;
        uint16_t Y :12;
        /* 
        Row index where the defect is located*/
    }DUSTER_MEM_POSITION_DEFECT_ts;

}DUSTER_MEM_POSITION_DEFECT_tu;

typedef struct
{
    DUSTER_MEM_PAGE_tu DUSTER_MEM_PAGE;
    DUSTER_MEM_POSITION_DEFECT_tu DUSTER_MEM_POSITION_DEFECT[512];
}DUSTER_MEM_IP_ts;




//DUSTER_MEM_PAGE


#define Get_DUSTER_MEM_DUSTER_MEM_PAGE_PAGE_INDEX() p_DUSTER_MEM_IP->DUSTER_MEM_PAGE.DUSTER_MEM_PAGE_ts.PAGE_INDEX
#define Get_DUSTER_MEM_DUSTER_MEM_PAGE() p_DUSTER_MEM_IP->DUSTER_MEM_PAGE.word


//DUSTER_MEM_POSITION_DEFECT : Ignoring header desciptors



//XP70_PROGL2_MEM_CELL
/*Description: xP70 Program memory space
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t L2_PROG_CELL;
    }XP70_PROGL2_MEM_CELL_ts;

}XP70_PROGL2_MEM_CELL_tu;

typedef struct
{
    XP70_PROGL2_MEM_CELL_tu XP70_PROGL2_MEM_CELL[16384];
}XP70_L2_MEM_IP_ts;




//XP70_PROGL2_MEM_CELL : Ignoring header desciptors



//XP70_TCDM_MEM_CELL
/*Description: xP70 Tightly Coupled Data Memory space
*/
typedef union
{
    uint32_t word;
    uint32_t data;
    struct
    {
        uint32_t TCDM_CELL;
    }XP70_TCDM_MEM_CELL_ts;

}XP70_TCDM_MEM_CELL_tu;

typedef struct
{
    XP70_TCDM_MEM_CELL_tu XP70_TCDM_MEM_CELL[2048];
}XP70_TCDM_MEM_IP_ts;




//XP70_TCDM_MEM_CELL : Ignoring header desciptors



extern volatile MASTER_CCI_IP_ts *p_MASTER_CCI_IP;
extern volatile USER_IF_IP_ts *p_USER_IF_IP;
extern volatile GPIO_IP_ts *p_GPIO_IP;
extern volatile PERIPH_CTRL_IP_ts *p_PERIPH_CTRL_IP;
extern volatile ITM_IP_ts *p_ITM_IP;
extern volatile ISP_SMIARX_IP_ts *p_ISP_SMIARX_IP;
extern volatile ISP_SD_IDP_GATE_IP_ts *p_ISP_SD_IDP_GATE_IP;
extern volatile ISP_BAYER_STORE_SD_CLK_IP_ts *p_ISP_BAYER_STORE_SD_CLK_IP;
extern volatile ISP_LBE_IP_ts *p_ISP_LBE_IP;
extern volatile ISP_BAYER_STORE_PIX_CLK_IP_ts *p_ISP_BAYER_STORE_PIX_CLK_IP;
extern volatile ISP_RE_BAYER_LOAD_IP_ts *p_ISP_RE_BAYER_LOAD_IP;
extern volatile ISP_RSO_IP_ts *p_ISP_RSO_IP;
extern volatile ISP_FLEXTF_LINEAR_IP_ts *p_ISP_FLEXTF_LINEAR_IP;
extern volatile ISP_GRIDIRON_IP_ts *p_ISP_GRIDIRON_IP;
extern volatile ISP_CHG_IP_ts *p_ISP_CHG_IP;
extern volatile ISP_SNAIL_SCORPIO_IP_ts *p_ISP_SNAIL_SCORPIO_IP;
extern volatile ISP_SCORPIO_IP_ts *p_ISP_SCORPIO_IP;
extern volatile ISP_SNAIL_DUSTER_IP_ts *p_ISP_SNAIL_DUSTER_IP;
extern volatile ISP_BAYER_STORE_POST_GAIN_IP_ts *p_ISP_BAYER_STORE_POST_GAIN_IP;
extern volatile ISP_ITPOINT_RE_IN_IP_ts *p_ISP_ITPOINT_RE_IN_IP;
extern volatile ISP_ITPOINT_POST_GAIN_IP_ts *p_ISP_ITPOINT_POST_GAIN_IP;
extern volatile ISP_ITPOINT_RE_OUT_STORE_IP_ts *p_ISP_ITPOINT_RE_OUT_STORE_IP;
extern volatile ISP_DUSTER_IP_ts *p_ISP_DUSTER_IP;
extern volatile ISP_SNAIL_BINNING_IP_ts *p_ISP_SNAIL_BINNING_IP;
extern volatile ISP_BINNING_REPAIR_IP_ts *p_ISP_BINNING_REPAIR_IP;
extern volatile ISP_CROP_BAYER_IP_ts *p_ISP_CROP_BAYER_IP;
extern volatile ISP_BAYER_STORE_RE_OUT_IP_ts *p_ISP_BAYER_STORE_RE_OUT_IP;
extern volatile ISP_SNAIL_BABYLON_IP_ts *p_ISP_SNAIL_BABYLON_IP;
extern volatile ISP_MOZART_IP_ts *p_ISP_MOZART_IP;
extern volatile ISP_CE0_NORCOS_IP_ts *p_ISP_CE0_NORCOS_IP;
extern volatile ISP_CE1_NORCOS_IP_ts *p_ISP_CE1_NORCOS_IP;
extern volatile ISP_BABYLON_IP_ts *p_ISP_BABYLON_IP;
extern volatile ISP_DMCE_BAYER_LOAD_IP_ts *p_ISP_DMCE_BAYER_LOAD_IP;
extern volatile ISP_DMCE_RGB_LOAD_IP_ts *p_ISP_DMCE_RGB_LOAD_IP;
extern volatile ISP_DMCE_RGB_STORE_IP_ts *p_ISP_DMCE_RGB_STORE_IP;
extern volatile ISP_CHANNELMERGE_IP_ts *p_ISP_CHANNELMERGE_IP;
extern volatile ISP_DMCE_MUX_DEMOSAIC_IP_ts *p_ISP_DMCE_MUX_DEMOSAIC_IP;
extern volatile ISP_LINE_BURSTY_ELIM_IP_ts *p_ISP_LINE_BURSTY_ELIM_IP;
extern volatile ISP_CE0_IDP_GATE_IP_ts *p_ISP_CE0_IDP_GATE_IP;
extern volatile ISP_CE0_CROP_IP_ts *p_ISP_CE0_CROP_IP;
extern volatile ISP_CE0_RADIAL_ADSOC_PK_IP_ts *p_ISP_CE0_RADIAL_ADSOC_PK_IP;
extern volatile ISP_CE0_RADIAL_ADSOC_RP_IP_ts *p_ISP_CE0_RADIAL_ADSOC_RP_IP;
extern volatile ISP_CE0_MUX_GPS_IP_ts *p_ISP_CE0_MUX_GPS_IP;
extern volatile ISP_CE0_MUX_SHARP_IP_ts *p_ISP_CE0_MUX_SHARP_IP;
extern volatile ISP_CE0_MUX_UNSHARP_IP_ts *p_ISP_CE0_MUX_UNSHARP_IP;
extern volatile ISP_CE0_FLEXTF_SHARP_IP_ts *p_ISP_CE0_FLEXTF_SHARP_IP;
extern volatile ISP_CE0_FLEXTF_UNSHARP_IP_ts *p_ISP_CE0_FLEXTF_UNSHARP_IP;
extern volatile ISP_CE0_MUX_MATRIX_ADSOC_IP_ts *p_ISP_CE0_MUX_MATRIX_ADSOC_IP;
extern volatile ISP_CE0_SNAIL0_ADSOC_IP_ts *p_ISP_CE0_SNAIL0_ADSOC_IP;
extern volatile ISP_CE0_SNAIL1_ADSOC_IP_ts *p_ISP_CE0_SNAIL1_ADSOC_IP;
extern volatile ISP_CE0_MATRIX_IP_ts *p_ISP_CE0_MATRIX_IP;
extern volatile ISP_CE0_PIXDELAY_0_IP_ts *p_ISP_CE0_PIXDELAY_0_IP;
extern volatile ISP_CE0_PIXDELAY_1_IP_ts *p_ISP_CE0_PIXDELAY_1_IP;
extern volatile ISP_CE0_SPECIALFX_IP_ts *p_ISP_CE0_SPECIALFX_IP;
extern volatile ISP_CE0_DITHER_IP_ts *p_ISP_CE0_DITHER_IP;
extern volatile ISP_CE0_GPSSCALER_IP_ts *p_ISP_CE0_GPSSCALER_IP;
extern volatile ISP_CE0_CODER_IP_ts *p_ISP_CE0_CODER_IP;
extern volatile ISP_OPF0_IP_ts *p_ISP_OPF0_IP;
extern volatile ISP_CE1_IDP_GATE_IP_ts *p_ISP_CE1_IDP_GATE_IP;
extern volatile ISP_CE1_CROP_IP_ts *p_ISP_CE1_CROP_IP;
extern volatile ISP_CE1_RADIAL_ADSOC_PK_IP_ts *p_ISP_CE1_RADIAL_ADSOC_PK_IP;
extern volatile ISP_CE1_RADIAL_ADSOC_RP_IP_ts *p_ISP_CE1_RADIAL_ADSOC_RP_IP;
extern volatile ISP_CE1_MUX_GPS_IP_ts *p_ISP_CE1_MUX_GPS_IP;
extern volatile ISP_CE1_MUX_SHARP_IP_ts *p_ISP_CE1_MUX_SHARP_IP;
extern volatile ISP_CE1_MUX_UNSHARP_IP_ts *p_ISP_CE1_MUX_UNSHARP_IP;
extern volatile ISP_CE1_FLEXTF_SHARP_IP_ts *p_ISP_CE1_FLEXTF_SHARP_IP;
extern volatile ISP_CE1_FLEXTF_UNSHARP_IP_ts *p_ISP_CE1_FLEXTF_UNSHARP_IP;
extern volatile ISP_CE1_MUX_MATRIX_ADSOC_IP_ts *p_ISP_CE1_MUX_MATRIX_ADSOC_IP;
extern volatile ISP_CE1_SNAIL0_ADSOC_IP_ts *p_ISP_CE1_SNAIL0_ADSOC_IP;
extern volatile ISP_CE1_SNAIL1_ADSOC_IP_ts *p_ISP_CE1_SNAIL1_ADSOC_IP;
extern volatile ISP_CE1_MATRIX_IP_ts *p_ISP_CE1_MATRIX_IP;
extern volatile ISP_CE1_PIXDELAY_0_IP_ts *p_ISP_CE1_PIXDELAY_0_IP;
extern volatile ISP_CE1_PIXDELAY_1_IP_ts *p_ISP_CE1_PIXDELAY_1_IP;
extern volatile ISP_CE1_SPECIALFX_IP_ts *p_ISP_CE1_SPECIALFX_IP;
extern volatile ISP_CE1_DITHER_IP_ts *p_ISP_CE1_DITHER_IP;
extern volatile ISP_CE1_GPSSCALER_IP_ts *p_ISP_CE1_GPSSCALER_IP;
extern volatile ISP_CE1_CODER_IP_ts *p_ISP_CE1_CODER_IP;
extern volatile ISP_OPF1_IP_ts *p_ISP_OPF1_IP;
extern volatile ISP_STATS_ACCWZ_IP_ts *p_ISP_STATS_ACCWZ_IP;
extern volatile ISP_STATS_ACC_8x6_IP_ts *p_ISP_STATS_ACC_8x6_IP;
extern volatile ISP_STATS_MUX_MWWB_IP_ts *p_ISP_STATS_MUX_MWWB_IP;
extern volatile ISP_STATS_MPSS_IP_ts *p_ISP_STATS_MPSS_IP;
extern volatile ISP_STATS_SNAIL_MWWB_IP_ts *p_ISP_STATS_SNAIL_MWWB_IP;
extern volatile ISP_STATS_MWWB_IP_ts *p_ISP_STATS_MWWB_IP;
extern volatile ISP_STATS_MUX_HIST_IP_ts *p_ISP_STATS_MUX_HIST_IP;
extern volatile ISP_STATS_HIST_IP_ts *p_ISP_STATS_HIST_IP;
extern volatile ISP_STATS_MUX_GLACE_IP_ts *p_ISP_STATS_MUX_GLACE_IP;
extern volatile ISP_STATS_GLACE_IP_ts *p_ISP_STATS_GLACE_IP;
extern volatile ISP_STATS_MPSS_GLACE_IP_ts *p_ISP_STATS_MPSS_GLACE_IP;
extern volatile ISP_STATS_AF_IP_ts *p_ISP_STATS_AF_IP;
extern volatile ISP_STATS_SKINTONE_IP_ts *p_ISP_STATS_SKINTONE_IP;
extern volatile ISP_ITPOINT_DMCE_IN_IP_ts *p_ISP_ITPOINT_DMCE_IN_IP;
extern volatile ISP_ITPOINT_DMCE_OUT_IP_ts *p_ISP_ITPOINT_DMCE_OUT_IP;
extern volatile ISP_ITPOINT_RGB_STORE_IP_ts *p_ISP_ITPOINT_RGB_STORE_IP;
extern volatile ISP_SMIARX3D_IP_ts *p_ISP_SMIARX3D_IP;
extern volatile ISP_CE0_RGB2YUV_MATRIX_IP_ts *p_ISP_CE0_RGB2YUV_MATRIX_IP;
extern volatile ISP_CE0_YUV2RGB_MATRIX_IP_ts *p_ISP_CE0_YUV2RGB_MATRIX_IP;
extern volatile ISP_CE0_MUX_0_UNPEAKING_IP_ts *p_ISP_CE0_MUX_0_UNPEAKING_IP;
extern volatile ISP_CE0_MUX_1_UNPEAKING_IP_ts *p_ISP_CE0_MUX_1_UNPEAKING_IP;
extern volatile ISP_CE0_MUX_0_PEAKING_IP_ts *p_ISP_CE0_MUX_0_PEAKING_IP;
extern volatile ISP_CE0_MUX_1_PEAKING_IP_ts *p_ISP_CE0_MUX_1_PEAKING_IP;
extern volatile ISP_CE1_RGB2YUV_MATRIX_IP_ts *p_ISP_CE1_RGB2YUV_MATRIX_IP;
extern volatile ISP_CE1_YUV2RGB_MATRIX_IP_ts *p_ISP_CE1_YUV2RGB_MATRIX_IP;
extern volatile ISP_CE1_MUX_0_UNPEAKING_IP_ts *p_ISP_CE1_MUX_0_UNPEAKING_IP;
extern volatile ISP_CE1_MUX_1_UNPEAKING_IP_ts *p_ISP_CE1_MUX_1_UNPEAKING_IP;
extern volatile ISP_CE1_MUX_0_PEAKING_IP_ts *p_ISP_CE1_MUX_0_PEAKING_IP;
extern volatile ISP_CE1_MUX_1_PEAKING_IP_ts *p_ISP_CE1_MUX_1_PEAKING_IP;
extern volatile GRIDIRON_MEM_IP_ts *p_GRIDIRON_MEM_IP;
extern volatile GLACE_MEM_IP_ts *p_GLACE_MEM_IP;
extern volatile HIST_MEM_IP_ts *p_HIST_MEM_IP;
extern volatile LINEAR_MEM_IP_ts *p_LINEAR_MEM_IP;
extern volatile CE0_SHARP_MEM_IP_ts *p_CE0_SHARP_MEM_IP;
extern volatile CE0_UNSHARP_MEM_IP_ts *p_CE0_UNSHARP_MEM_IP;
extern volatile CE1_SHARP_MEM_IP_ts *p_CE1_SHARP_MEM_IP;
extern volatile CE1_UNSHARP_MEM_IP_ts *p_CE1_UNSHARP_MEM_IP;
extern volatile DUSTER_MEM_IP_ts *p_DUSTER_MEM_IP;
extern volatile XP70_L2_MEM_IP_ts *p_XP70_L2_MEM_IP;
extern volatile XP70_TCDM_MEM_IP_ts *p_XP70_TCDM_MEM_IP;

#endif 

