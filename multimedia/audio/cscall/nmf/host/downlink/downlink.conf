primitive cscall.nmf.host.downlink extends fsm.component.armnmf_component

// input port
provides armnmf_emptythisbuffer                           as  emptythisbuffer
requires armnmf_fillthisbuffer                            as  inputport

// output port
provides armnmf_fillthisbuffer                            as  fillthisbuffer
requires armnmf_emptythisbuffer                           as  outputport
requires hst.common.pcmsettings                           as  outputsettings  optional

// 6 decoders (ARM, EFR, FR, HR, AMR_WB, PCM)
requires hst.decoders.decoder                             as decoder[6]

// AMR decoder algorithm
requires amr.nmfil.host.decoder.configure                 as  configure_amr

// EFR decoder algorithm
requires amr.nmfil.host.decoder.configure                 as  configure_efr

// AMRWB decoder algorithm
requires amrwb.nmfil.host.decoder.configure               as  configure_amrwb

// GSMFR decoder algorithm
requires gsmfr.nmfil.host.decoder.configure               as  configure_gsmfr

// GSMHR decoder algorithm
requires gsmhr.nmfil.host.decoder.configure               as  configure_gsmhr

// PCM decoder algorithm (Not a real decoder...but mapped as if it was a real decoder)
requires cscall.nmf.host.pcm_codec.pcm_dec.configure      as  configure_pcm

// Decoder configuration
provides cscall.nmf.host.protocolhandler.configure_codec  as  configDecoder

// To inform protocolhandler that new codec req has been applied
requires cscall.nmf.host.protocolhandler.newCodecApplied  as  codecApplied

// src lib
requires hst.pcmprocessings.effect                        as samplerateconv
requires samplerateconv.nmfil.host.effect.configure       as configure_src


// global configuration of downlink component
provides cscall.nmf.host.downlink.configure               as  configure

//downlink itf if a dl frame is missing
provides cscall.nmf.host.downlink.sendFakeFrame           as sendFakeFrame

