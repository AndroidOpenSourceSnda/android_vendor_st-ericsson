**********************************************************
* Nomadik Multiprocessing Framework (version 0.9.3)      *
**********************************************************
	"Compilé, c'est gagné" (M. Guene)
	"La doc, c'est le code" (J.-P. Fassino)

The release comprises one .tgz file holding the following features:
	- Component manager binary & api
 	- Synchronous & Hybrid execution engine binaries
 	- Nomadik Multiprocessing Environment API 
 	- Component tool chain binary
 	- Example source codes (Hello World's, Training, Mandelbrot, mp3, User Fifo)
 		Hello world and mp3 Eclipse project file delivered
 	- Documentations (User guide, programming model, CM API, MPC API)
 		User guide not fully in line with delivery
 
Sources are delivered in another .tgz.

Supported target:
	- STn8815 SAA & SVA Cut A0/B0/C0
	- STn8820 SAA & SVA Cut A0
	
Supported environments:
	- nmf_Bare: 	based on Nomadik HCL/services libraries (only on STn8815 board)
	- nmf_Think:	based on Think component-based OS
	- nmf_OS21: 	based on ARM OS21

Changes:
--------
[CM]
	 
[MPC Executive Engine]
	- Don't allow MMDSP to restart scheduling when detecting user/kernel stack overflow
	  as well as unaligned access. 
	  	Such restriction is required since MMDSP IP only detect default but don't prevent it. 
	  	Thus, memory could have been corrupted and reliability can't be guaranteed. 
	  	
	- Panic in static deployment through .arch file will make printf and exit instead of
	  informing Host.
	
[OS integration]
	[Think]
		- Block main boot thread which launch tests with semaphore which will be waked up at 
		  end of tests (join).
	
	
[Tools] 
	
[Programming model]


Bug fixes:
---------
	- [ Defect #36855 ] [TOOLS] A java exception is generated by the tools upon providing an illegal 
	  syntax for the stack size option.
	  
	- [ Defect #36854 ] [TOOLS] no range is checked for the stack size option value.
	
	- [ Defect #36853 ] [TOOLS] Unknown needlibc values are accepted by nmfconfc.
	
	- [ Defect #36852 ] [TOOLS] Unknown memory options are accepted by nmfconfc.
	
	- [ Defect #36815 ] [Tools]The stack size is always 128 words in case of arch file
	
	- [ Defect #36804 ] [EE] communication stress became dramatically slow under think
		Due to the fact that main thread didn't call yield() call.
		
	- [ Defect #36688 ] [CM] Upon USER_STACK_OVERFLOW, the MPC is blocked in hybrid mode but not in 
	  synchronous
		Due to MMDSP hardware bug, it's not possible to restart in a safe way DSP after such Panic:
			USER_STACK_OVERFLOW, SYSTEM_STACK_OVERFLOW, UNALIGNED_LONG_ACCESS.
			
	- [ Defect #36686 ] [CM] Panic behavior changed in hybrid mode
		Except panic that will block MMDSP, after other Panic detection, the MPC will no more be 
		blocked.
		
	- [ Defect #36623 ] [Tools] nothing is returned when nmfconfc is used without argument (nmfconfc)
	
	- [ Defect #36604 ] [Tools] tools behaviour with wrong path name (nmfitfc)
	
	- [ Defect #36588 ] [Tools] wrong tool option returns no error (nmfitfc)
	
	- [ Defect #36587 ] [Tools] no returned error if interface name not provided in asynchronous 
	  mode (nmfitfc)
	  
	- [ Defect #36585 ] [Tools] java exception if interface name is undefined (nmfitfc)
	
	- [ Defect #36584 ] [Tools] java exception if prefix name is undefined (IDL)
	
	- [ Defect #36390 ] [EE] in .arch tests Panic should do a printf and then exit with an error
	

Known Issues:
-------------


Notes:
------
	- Inter-MPC distribution not supported due to hardware limitation on STn8815A0
	- No cross calling between ESRAM and SDRAM Code
		A component code must fit in one memory segment only. Split your component into two
		sub components to achieve that.
		
	- MP3 example supported only on nmf_bare environment.
		This example reuse CSD algorithm and must not been distribute outside ST Microelectronics.
		Today, this example only runs on bare machine (due to APD HCL/Services packages issues).
	- Some link issue with GNU toolchain could occur in examples until HCL/Services compiled with 
		correct flags. 

	- Due to unavailability of HCL for STn8820, nmf_Bare runs only on STn8815.
	

Pre-requires:
-------------
	- At least Nomadik Toolset 1.0.0 Beta 
		(SP1 require to run on STn8820).
	- Java Runtime Environment  (http://java.sun.com/)
		At least JRE 1.5 (on Linux please use at least JRE 1.6 due to JVM bug regarding execution access rights)        


Test environment on NDK15:
--------------------------
	- Environments:
		MPC: SAA & SVA
		Execution Engine: Synchronous, Hybrid
		Semaphores: local, hardware
		Environment: bare, think, os21, tlm
		Nomadik Toolset 1.0.0 Beta
		ARM: RVCT 3.0 SP1 Build 688, RVCT 2.2 Build 593, st-armgcc (gcc version 4.1.1)

	- Tests:
		* 'ADL' class
			check 'Architecture Description Language' features from programming model
			test limit of some ADL features (name length, collection size,...)
			check error codes returned by ADL tool

		* 'Attribute' class
			operations on attributes inside component (mpc side)
			check attribute api on host side
			api error management

		* 'Binding' class
			synchronous/asynchronous intra-MPC communication
			ARM -> MPC
			MPC -> ARM
			inter MPCs (asynchronous)
			MPC -> MPC (on 8815B0)
			interruption
			error management

		* 'Collection' class :
			Behavior with binds between primitives component using collections interfaces
			Primitive collections interface introspection

		* 'Composite' class:
			Behavior with binds between composites component using collections interfaces
			Behavior with binds defined in composites components (conf. files) using collections interfaces
			Composite collections interfaces introspection

		* 'Dynamic loading' class: 
			segment loading (RO, RW, ZI)
				Mono-instance
				Multi-instances on same DSP
				Multi-instances on both DSP
			error management

		* 'Fifo' class
			creation/destruction of network with fifo use
			fifo connectivity (host side and mpc side)
			check flush/status/notify features
			api error management

		* 'IDL' class
			check 'Interface Description Language' features from programming model
			check error codes returned by ADL tool

		* 'Interface' class
			interfaces introspection for primitives and composites components (except collections interfaces)

		* 'Lifecycle' class
			check the behavior using the lifecycle API

		* 'Memory' class
			allocate/free api management for SDRAM and MPC memories
			check address/status features
			api error management

		* 'Misc' class
			'singleton' features (network construction/destruction)
			communication stressing (mandelbrot applications)
			multiple instantiation to fill memory
			component priority inside network

		* 'Network' class
			components (primitives or composites) introspection (without interfaces)

		* 'Panic' class
			Behavior upon each Panic (reason) detection and after the detection.

		* 'Properties' class
			Get property information in component network (primitive/composite)
			api error management

		* 'Stack' class
			check the MPC stack evolution combined with the TCM_X MPC dynamic allocation

