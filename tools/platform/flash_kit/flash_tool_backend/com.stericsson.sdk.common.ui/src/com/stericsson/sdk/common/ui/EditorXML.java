package com.stericsson.sdk.common.ui;

import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

/**
 * Class reflects contents of XML file. This class (and the XML file) describes components that
 * should be created in mesp editor ({@link MespEditor}) or in profile editor ({@link ProfileEditor}
 * ). This class is similar to what would be generated by JAXB for these XML files. After migration
 * to Java6 it should be easy to use it with this class (then no additional xml parser is needed).
 * 
 * <p>
 * This class corresponds to the &ltprofile> element of the XML file.
 * 
 * <p>
 * Terminology used:<BR>
 * Each line in prfl or mesp file is called an "entry". The way the entry is displayed in the GUI
 * editor depends on which record (see {@link EditorXML.Section.Record}) matches it.<br>
 * Given example mesp entry:
 * 
 * <pre>
 * SecurityProperty Name="Control_Keys" ID="0x10" Write="true" Read="false"
 * </pre>
 * 
 * "Name", "ID", "Write" and "Read" are called "Attributes".<br>
 * Section does not have any direct correspondence with mesp or prfl file contents, it is only a
 * visual division between different record types (defines where the records are pictured on the
 * screen in the GUI editor).
 * 
 * @author xadazim
 */
public class EditorXML {

    /**
     * @see EditorXML#getLayout()
     */
    protected String layout;

    /**
     * @see EditorXML#getSections()
     */
    protected List<EditorXML.Section> sections;

    /**
     * Defines how sections should be laid out. At the moment the only valid value is "grid".
     * 
     * @return layout of the page
     */
    public String getLayout() {
        return layout;
    }

    /**
     * Gets all the defined sections for the page. Sections visually divide different record types
     * (entries) into different categories (logically connected records are grouped and displayed
     * together).
     * 
     * @return sections of the page
     */
    public List<EditorXML.Section> getSections() {
        if (sections == null) {
            sections = new ArrayList<EditorXML.Section>();
        }
        return this.sections;
    }

    /**
     * This class describes section of an editor page. It corresponds to the &ltsection> element of
     * the XML file. Sections visually divide different record types (entries) into different
     * categories (logically connected records can be grouped and displayed together).
     * 
     * @author xadazim
     */
    public static class Section {

        /**
         * @see Section#getRecords()
         */
        protected List<EditorXML.Section.Record> records;

        /**
         * @see Section#getName()
         */
        protected String name;

        /**
         * @see Section#isExtendable()
         */
        protected Boolean extendable;

        /**
         * @see Section#getColumns()
         */
        protected Integer columns;

        /** @see Section#getColumnSpan() */
        protected Integer columnSpan;

        /** @see Section#getLayout() */
        protected String layout;

        /**
         * Returns description of all the records that are contained in the section.
         * 
         * @return list of records descriptions
         */
        public List<EditorXML.Section.Record> getRecords() {
            if (records == null) {
                records = new ArrayList<EditorXML.Section.Record>();
            }
            return this.records;
        }

        /**
         * Gets the name of the section. This name is displayed on the header section.
         * 
         * @return name of the section
         */
        public String getName() {
            return name;
        }

        /**
         * Gets the value of the extendible property. When extendible is set to true, the section
         * contains "Add" button in the header.
         * 
         * @return true if it is possible to add new records to the section, false otherwise
         */
        public Boolean isExtendable() {
            return extendable;
        }

        /**
         * Gets the count of columns of the section. This value impacts the layout of records inside
         * the section, defines in how many columns are these records aligned. Especially useful for
         * sections containing only one kind of record.
         * 
         * @return number of columns of the grid in which records are placed
         */
        public Integer getColumns() {
            return columns;
        }

        /**
         * Gets the count of columns to which the section will be extended.
         * 
         * @return number of columns to be used for this section
         */
        public Integer getColumnSpan() {
            return columnSpan;
        }

        /**
         * Gets the layout type to be used inside the section. This value impacts the layout of
         * records inside the section. Layout types can be e.g. grid, fill
         * 
         * @return layout type
         */
        public String getLayout() {
            return layout;
        }

        /**
         * This class describes one kind of a record. In the gui editor, records are placed inside a
         * section. This class corresponds to the &ltrecord> element of the XML file.
         * 
         * @author xadazim
         * 
         */
        public static class Record {

            /**
             * @see Record#getAttributes()
             */
            protected List<EditorXML.Section.Record.Attribute> attributes;

            /**
             * @see Record#getMatch()
             */
            protected String match;

            /**
             * @see Record#getLabel()
             */
            protected String label;

            /**
             * @see Record#getName()
             */
            protected String name;

            /**
             * @see Record#getMinCount()
             */
            protected Integer minCount;

            /**
             * @see Record#getMaxCount()
             */
            protected Integer maxCount;

            /**
             * @see Record#showGroup
             */
            protected Boolean showGroup;

            /**
             * @see Record#getColumns()
             */
            protected Integer columns;

            /**
             * Gets the possible attributes of the record.
             * 
             * @return attributes of the record
             */
            public List<EditorXML.Section.Record.Attribute> getAttributes() {
                if (attributes == null) {
                    attributes = new ArrayList<EditorXML.Section.Record.Attribute>();
                }
                return this.attributes;
            }

            /**
             * Gets the value of the match property. This property determines which entries in the
             * mesp or prfl file are described by this record. This is a regular expression.
             * <p>
             * Example:<br>
             * If the match property is set to "Profile .*", then the record would apply on the
             * following mesp entry:
             * 
             * <pre>
             * Profile Name="STE_DB8500"
             * </pre>
             * 
             * @return regular expression describing which mesp or prfl entries matches this record
             * 
             */
            public String getMatch() {
                return match;
            }

            /**
             * Gets the value of the label property. This label is used in "Add property dialog"
             * (see {@link com.stericsson.sdk.common.ui.editors.profile.AddPropertyDialog}) to name
             * available record types.
             * 
             * @return label (user friendly name) of the record
             * 
             */
            public String getLabel() {
                return label;
            }

            /**
             * Gets the value of the name property. This name is used to state the name of each
             * record
             * 
             * @return label (user friendly name) of the record
             * 
             */
            public String getName() {
                return name;
            }

            /**
             * Gets the value of the multiplicity property. This property determines the minimal
             * count of entries matching this record type. If the mesp or prfl file contains less
             * matching entries, the file is invalid.
             * 
             * @return minimal count of entries matching this record that should exist in the mesp
             *         or prfl file
             * 
             */
            public Integer getMinCount() {
                return minCount;
            }

            /**
             * Gets the value of the multiplicity property. This property determines the maximal
             * count of entries matching this record type. If the mesp or prfl file contains more
             * matching entries, the file is invalid. If returned value is -1, then the maximal
             * count of entries matching this record is unlimited.
             * 
             * @return maximal count of entries matching this record that should exist in the mesp
             *         or prfl file, or -1 if unlimited
             * 
             */
            public Integer getMaxCount() {
                return maxCount;
            }

            /**
             * Gets the value of the showGroup property. This property determines if visual
             * representation of the attributes of this record (text fields, combo boxes and etc.)
             * should be placed inside a Group object (see {@link org.eclipse.swt.widgets.Group})
             * 
             * @return true if attributes should be placed inside a Group, false otherwise
             * 
             */
            public Boolean getShowGroup() {
                return showGroup;
            }

            /**
             * Gets the number of columns in layout
             * 
             * @return number of columns in layout
             */
            public Integer getColumns() {
                return columns;
            }

            /**
             * This class describes an attribute of a record. It corresponds to the &ltattribute>
             * element of the XML file.
             * 
             * @author xadazim
             * 
             */
            public static class Attribute {

                /**
                 * @see Attribute#getVisual()
                 */
                protected EditorXML.Section.Record.Attribute.Visual visual;

                /**
                 * @see Attribute#getName()
                 */
                protected String name;

                /**
                 * Gets the value of the visual property. This property defines the way this
                 * attribute is visualized in the GUI (by a text field, combo, check and etc).
                 * 
                 * @return object describing visual representation of this attribute
                 * 
                 */
                public EditorXML.Section.Record.Attribute.Visual getVisual() {
                    return visual;
                }

                /**
                 * Gets the value of the name property. This property determines which attribute of
                 * the record is described by this object.
                 * 
                 * @return name of the attribute
                 * 
                 */
                public String getName() {
                    return name;
                }

                /**
                 * This class defines the way an attribute is visualized in the GUI. The visual
                 * element can be a text field, combo, check box, text field customized for path
                 * entering and etc. See {@link VisualType} for the complete list of options.
                 * 
                 * @author xadazim
                 * 
                 */
                public static class Visual {

                    /**
                     * @see Visual#getOptions()
                     */
                    protected List<EditorXML.Section.Record.Attribute.Visual.Option> options;

                    /**
                     * @see Visual#getLabel()
                     */
                    protected String label;

                    /**
                     * @see Visual#getType()
                     */
                    protected VisualType type;

                    /**
                     * @see Visual#getRegexpValidator()
                     */
                    protected String regexpValidator;

                    /**
                     * @see Visual#getSelected()
                     */
                    protected String selected;

                    /**
                     * Gets the value of the options property. These options are interpreted
                     * differently, depending on the VisualType.
                     * <p>
                     * For the combo box: options describe entries in combo.
                     * 
                     * @return options list
                     * @see Visual#getType()
                     */
                    public List<EditorXML.Section.Record.Attribute.Visual.Option> getOptions() {
                        if (options == null) {
                            options = new ArrayList<EditorXML.Section.Record.Attribute.Visual.Option>();
                        }
                        return this.options;
                    }

                    /**
                     * Gets the label of the visual component. This label is placed on the left side
                     * of the visual component containing a value of the attribute in the GUI
                     * editor.
                     * 
                     * @return label of the attribute
                     * 
                     */
                    public String getLabel() {
                        return label;
                    }

                    /**
                     * Gets the value of the type property. This property determines the type of the
                     * GUI widget that holds a value of this attribute.
                     * 
                     * @return type of the widget
                     * 
                     */
                    public VisualType getType() {
                        return type;
                    }

                    /**
                     * Gets the value of the regular expression that can be used to validate the
                     * contents of the string entered by user (valid for text widgets only).
                     * 
                     * @return regular expression describing valid input to the widget
                     * 
                     */
                    public String getRegexpValidator() {
                        return regexpValidator;
                    }

                    /**
                     * Gets the index of selected item in combo box
                     * 
                     * @return index of selected item
                     */
                    public String getSelected() {
                        return selected;
                    }

                    /**
                     * This class defines options for widgets. Interpretation of the contents
                     * depends on the parent visual type ({@link VisualType}):
                     * 
                     * <ul>
                     * <li>COMBO<br>
                     * label - the text visible in the combo, <br>
                     * value - contains the text that should be placed in the mesp or prfl file when
                     * this option is chosen
                     * </ul>
                     * 
                     * @author xadazim
                     * 
                     */
                    public static class Option {
                        /**
                         * @see Option#getLabel()
                         */
                        protected String label;

                        /**
                         * @see Option#getValue()
                         */
                        protected String value;

                        /**
                         * Gets label of the option. This is what is shown in the GUI.
                         * 
                         * @return label of the option
                         */
                        public String getLabel() {
                            return label;
                        }

                        /**
                         * Gets value of the option. This is a value that is written to mesp or prfl
                         * file if this option is chosen.
                         * 
                         * @return value of the option
                         */
                        public String getValue() {
                            return value;
                        }
                    }
                }
            }
        }

        /**
         * Returns record structure that is applicable to given record. Returns a Record object if
         * recordText matches Record.match string. If more then one Record matches the recordText,
         * the first one in the list (also first one in the XML file) is returned. If there are no
         * records matching given recordText, null is returned.
         * 
         * @param recordText
         *            text representation of the record (one line of a mesp or prfl file)
         * @return record structure or null if not found
         */
        public Record findMatchingRecord(String recordText) {
            for (Record record : records) {
                if (recordText.toUpperCase(Locale.getDefault()).matches(
                    record.getMatch().toUpperCase(Locale.getDefault()))) {
                    return record;
                }
            }
            return null;
        }
    }

}
