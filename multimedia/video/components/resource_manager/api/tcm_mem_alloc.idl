/*
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 * This code is ST-Ericsson proprietary and confidential.
 * Any use of the code for whatever purpose is subject to
 * specific written permission of ST-Ericsson SA.
 */

#include <t1xhv_common.idt>
#include <t1xhv_resource_manager.idt>

interface resource_manager.api.tcm_mem_alloc { 

/**
 * Name:         t_addr MemMgr_Malloc(t_uint32 size)       
 * Author:       Maurizio Colombo
 * Description:  malloc function, behaving like the stdlib one
 *               size is expressed in amount of MMDSP 16-bits words
 *               allocated memory is aligned to MM_ALGN 16-bits words
 *               returns 0 if no more memory available
 **/
void *   MemMgr_Malloc(t_uint32 size);

/**
 * Name:         void MemMgr_Free(t_addr addr)       
 * Author:       Maurizio Colombo
 * Description:  free() function, behaving like the stdlib one
 *               the chunk is freed only if the provided address is exactly the same
 *               as the one that was given by malloc()
 *               If the address is not found in the list, nothing happens
 **/
void     MemMgr_Free(void * addr);

/**
 * Name:         t_sint16 MemMgr_GetStatus(t_uint32 * free_mem, t_uint32 * used_mem)     
 * Author:       Maurizio Colombo
 * Description:  gives the amount of free vs allocated memory
 *               if code is compiled with _DEBUG_MEMMGR flag, this function will also
 *               do a sanity check on the heap and on the internal lists
 **/
t_sint16 MemMgr_GetStatus(t_uint32 * free_mem, t_uint32 * used_mem);


/**
 * Name:         void MemMgr_DebugScratch(void)     
 * Author:       Maurizio Colombo
 * Description:  This is an helper function, only used for debug. 
 *               When called, it smashes the whole heap with 0xdead 
 *               Purpose is to verify the "scratch" property of the used memory.
 *               Idea is to call it after having freed everything and before doing
 *               a new alloc. This will simulate the fact that another component has
 *               taken the memory and used it.     
 **/ 
void MemMgr_DebugScratch(void);

} // interface resource_manager.api.tcm_mem_alloc
