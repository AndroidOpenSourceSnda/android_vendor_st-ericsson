package com.stericsson.sdk.common.ui.controls.newdesign;

import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;

/**
 * <p>
 * Generic component which represents text field object generated by {@link UITextFieldsFactory}.
 * It's expected that every text fields consists of at least 2 UI controls, text field descriptor (
 * {@link Label}) and actual text field ({@link Text}). Very common could be to use place-holder but
 * its usage could be skipped in {@link UITextFieldsFactory} methods. That's why you can expect null
 * place-holder.
 * </p>
 * 
 * <p>
 * Very similar situation is valid for parentComposite. If it's null text field was created directly
 * in parent given to factory method. Not null parent composite means that all text field controls
 * were placed into newly created composite in parent given to factory method. Finally
 * textFieldButton could be also either null or some real UI control depending if there was created
 * button for fetching text field content, like for example browse file button.
 * </p>
 * 
 * @author xmicroh
 * 
 */
public class UITextField extends UIControl {

    private final Text uiTextField;

    private Button uiTextFieldButton;

    /** label or name of this UI control. */
    protected Label uiLabel;

    /**
     * @param pLabel
     *            Label which describes logical name of the text field.
     * @param pTextField
     *            Actual text field UI control.
     * @param pPlaceholder
     *            Place-holder if was used, null otherwise.
     * 
     */
    UITextField(Label pLabel, Text pTextField, Control pPlaceholder) {
        this.uiLabel = pLabel;
        this.uiTextField = pTextField;
        this.uiPlaceholder = pPlaceholder;
    }

    /**
     * @return Actual text field object, for more info see {@link UITextField}.
     */
    @Override
    public Text getUIControl() {
        return uiTextField;
    }

    /**
     * @return Button or null, for more info see {@link UITextField}.
     */
    public Button getTextFieldButton() {
        return uiTextFieldButton;
    }

    void setTextFieldButton(Button pTextFieldButton) {
        this.uiTextFieldButton = pTextFieldButton;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setControlLabel(Label pLabel) {
        uiLabel = pLabel;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Label getControlLabel() {
        return uiLabel;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void setLayoutData(Object pLayoutData) {
        uiTextField.setLayoutData(pLayoutData);
    }

}
