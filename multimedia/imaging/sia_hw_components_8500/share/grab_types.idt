/*****************************************************************************/
/**
*  © ST-Ericsson, 2009 - All rights reserved
*  Reproduction and Communication of this document is strictly prohibited
*  unless specifically authorized in writing by ST-Ericsson
*
* \file
* \brief   Interface Description Type file: common declaration types that can be shared between nmf component and host
* \author  ST-Ericsson
*/
/*****************************************************************************/

#ifndef _grab_types_idt
#define _grab_types_idt

/* 3 clients for grabctl, 1 for direct ARM binding for debug/selftest */
#define GRB_NUM_CLIENTS 4

#define XP70_ANY_ITM3_ACK		0xFFFFFFFFUL

//ITM3 interrupts event
#define XP70_FLASH_LIT_FRAME            	0x1UL
#define XP70_ADAPTIVE_ZOOM_OVERSCAN_EVENT  	0x2UL


enum e_grabInfo
{
    GRBINF_GRAB_LAUNCHED 			= 0x1,
    GRBINF_GRAB_COMPLETED 			= 0x2,
    GRBINF_GRAB_ABORTED   			= 0x3,
    GRBINF_GRAB_TO_REPROG_BY_MMDSP	= 0x4,
    GRBINF_GRAB_STOPPED				= 0x5,
    GRBERR_FRAME_INVALID			= 0x6,
    
    GRBINF_DEBUG_MODE_ON			= 0x777,
    GRBINF_DEBUG_MODE_OFF			= 0x0FF
};

enum e_grabError
{
    GRBERR_NONE = 0,
    GRBERR_FIFO_OVERFLOW =    0x1,
    GRBERR_RAW_BUF_OVERFLOW = 0x2,
    GRBERR_FMT_UNSUPPORTED =  0x4,
    GRBERR_PIPE_UNSUPPORTED = 0x8,
    GRBERR_GRB_IN_PROGRESS =  0x10,
	GRBERR_UNKNOWN          = 0x20, /* unhandled hardware error (see buffer_id field for IPP_SD_ERROR value) */
	GRBERR_STAGINGFULL      = 0x40, /* error in grabctl, when stagingOut is already full on IT */
    GRBERR_FIFO_STA_NOT_EMPTY =    0x77,

	IPP_SD_ERROR_HR			= 0x80,		/* to inform host an error occurred from IPP HW Block); see data field for e_IPP_SD_Error value)*/
	IPP_SD_ERROR_LR			= 0x100,	/* to inform host an error occurred from IPP HW Block); see data field for e_IPP_SD_Error value)*/
	IPP_SD_ERROR_BMS		= 0x200,	/* to inform host an error occurred from IPP HW Block); see data field for e_IPP_SD_Error value)*/
	IPP_SD_ERROR_CCP		= 0x400,	/* to inform host an error occurred from IPP HW Block); see data field for e_IPP_SD_Error value)*/
	IPP_CSI2_DPHY_ERROR		= 0x800,	/* to inform host an error occurred from IPP HW Block); see data field for e_IPP_CSI2_DPHY_Error value)*/
	IPP_CSI2_PACKET_ERROR	= 0x1000,	/* to inform host an error occurred from IPP HW Block); see data field for e_IPP_CSI2_PACKET_Error value)*/

	STBUS_PLUG_ERROR		= 0x2000	// to inform host an error occured from stbus Block);
};

enum e_IPP_SD_Error
{
	IPP_SD_ERROR_CCP_SHIFT_SYNC			= 0x0001, /*  */
	IPP_SD_ERROR_CCP_FALSE_SYNC			= 0x0002, /*  */
	IPP_SD_ERROR_CCP_CRC_ERROR			= 0x0004, /*  */
	IPP_SD_ERROR_PIPE0_CH0_OVERFLOW	    = 0x0008, /*  */
	IPP_SD_ERROR_PIPE0_CH1_OVERFLOW	    = 0x0010, /*  */
	IPP_SD_ERROR_PIPE0_CH2_OVERFLOW	    = 0x0020, /*  */
	IPP_SD_ERROR_PIPE1_OVERFLOW	    	= 0x0040, /*  */
	IPP_SD_ERROR_PIPE2_OVERFLOW	    	= 0x0080, /*  */
	IPP_SD_ERROR_OPIPE0_MULT_ERR	   	= 0x0100, /*  */
	IPP_SD_ERROR_OPIPE1_MULT_ERR	   	= 0x0200, /*  */
	IPP_SD_CSI2_PACKET_ERROR			= 0x0400, /*  */
	IPP_SD_CSI2_DPHY_ERROR				= 0x0800 /*  */
};

enum e_IPP_CSI2_DPHY_Error
{
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_EOT_SYNC_HS_DL1	= 0x0001, /*  */
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_EOT_SYNC_HS_DL2	= 0x0002, /*  */
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_EOT_SYNC_HS_DL3	= 0x0004, /*  */
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_HS_DL1			= 0x0008, /*  */
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_HS_DL2			= 0x0010, /*  */
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_HS_DL3			= 0x0020, /*  */
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_SYNC_HS_DL1	= 0x0040, /*  */
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_SYNC_HS_DL2	= 0x0080, /*  */
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_SOT_SYNC_HS_DL3	= 0x0100, /*  */
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_CONTROL_DL1		= 0x0200, /*  */
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_CONTROL_DL2		= 0x0400, /*  */
	IPP_CSI2_DPHY_ERROR_CSI0_ERR_CONTROL_DL3		= 0x0800, /*  */
	IPP_CSI2_DPHY_ERROR_CSI1_ERR_EOT_SYNC_HS_DL1	= 0x1000, /*  */
	IPP_CSI2_DPHY_ERROR_CSI1_ERR_SOT_HS_DL1			= 0x2000, /*  */
	IPP_CSI2_DPHY_ERROR_CSI1_ERR_SOT_SYNC_HS_DL1	= 0x4000, /*  */
	IPP_CSI2_DPHY_ERROR_CSI1_ERR_CONTROL_DL1		= -32768L /* 0x8000 */
};

enum e_IPP_CSI2_PACKET_Error
{

	IPP_CSI2_PACKET_ERROR_CSI2_PACKET_PAYLOAD_CRC_ERROR		= 0x0001, /*  */
	IPP_CSI2_PACKET_ERROR_CSI2_PACKET_HEADER_ECC_ERROR		= 0x0002  /*  */
};

enum e_grabDebug
{
	GRBDBG_REGVALUE							= 0x1,	/* data1 contains adress of register, data2 contains value */
													 /* debug message contains a register value read through set_debug.readRegister() */
	GRBDBG_EXECUTE_METHOD					= 0x2,	/* To trace execute method */
	GRBDBG_ABORT_METHOD						= 0x3,	/* To trace abort method */
	GRBDBG_SUBSCRIBE_METHOD					= 0x4,	/* To trace subscribe method */
	GRBDBG_UNSUBSCRIBE_METHOD				= 0x5,	/* To trace unsubscribe method */
	GRBDBG_GRAB_HANDLE_DMA_EOT_IT_CALLED	= 0x6,	/* To trace grab_dma_eot_it handler */
	GRBDBG_GRAB_HANDLE_IPP_ERROR_IT_CALLED	= 0x7,	/* To trace grab_handle_ipp_err_it handler */
	GRBDBG_GRAB_BMS_FRAME_IT_CALLED			= 0x8,	/* To trace Isp_ITM3_handler handler */
	GRBDBG_STBUS_PLUG_ERROR_IT_CALLED		= 0x9	/* To trace stbus_plug_error_handler handler */
};

/* \note: index of pipe ID must be same as bit in IPP_SD_PIPES_OUT_EN */
enum e_grabPipeID {
    GRBPID_PIPE_LR 		= 0, 	/**< pipe 1 in HW docs, Low Resolution (max width 1024 pixels). sensor input */
    GRBPID_PIPE_HR, 			/**< pipe 0 in HW docs, High Resolution (max width 4080 pixels). sensor input */
    GRBPID_PIPE_RAW_OUT, 		/**< pipe 2a in HW docs (BMS), used for getting data for preprocessing. sensor input */
    GRBPID_PIPE_RAW_IN, 		/**< pipe 2b in HW docs (BML), used for reinjecting preprocessed data. */
    GRBPID_PIPE_CAM 			/**< pipe 3 in HW docs, camera input */
};

enum e_grabFormat {
    GRBFMT_YUV422_RASTER_INTERLEAVED,           /**< pipe0 pipe1 useful for ? */
    GRBFMT_YUV420_RASTER_PLANAR_I420,           /**< pipe0 useful for ?*/
    GRBFMT_YUV420_RASTER_PLANAR_YV12,           /**< pipe0 useful for ?*/
    GRBFMT_YUV422_MB_SEMIPLANAR,                /**< pipe0 useful for JPEG Encoding?*/
    GRBFMT_YUV420_MB_SEMIPLANAR_FILTERED,       /**< pipe0 useful for video encoding?*/
    GRBFMT_YUV420_MB_SEMIPLANAR_DECIMATED,      /**< pipe0 useful for video encoding?*/
    GRBFMT_YUV420_RASTER_SEMIPLANAR_NV21,
    GRBFMT_YUV420_RASTER_SEMIPLANAR_NV12,
    GRBFMT_YUV420_MB_SWAP_SEMIPLANAR_DECIMATED, /**< pipe0 useful for video encoding - H264(swapped format)*/
    GRBFMT_RGB30,                               /**< pipe0 useful for preprocessing image before reinjection into pipe through PIPE_RAW_IN*/
    GRBFMT_RAW8,                                /**< BMS2 : BMS on pipe2 output in raw8 bayer data */
    GRBFMT_FAST_RAW8,                           /**< BMS0 : fast BMS on pipe2 output in raw8 bayer data */
    GRBFMT_BML2_RAW8,                           /**< BML  : BML on pipe2 input in raw8 bayer data */
    GRBFMT_RAW12,                               /**< BMS2 : BMS on pipe2 output in raw12 bayer data */
    GRBFMT_FAST_RAW12,                          /**< BMS0 : fast BMS on pipe2 output in raw12 bayer data */
    GRBFMT_BML2_RAW12,                          /**< BML  : BML on pipe2 input in raw12 bayer data */
    /* GRBFMT_RAW10 converted to RAW12, */
    GRBFMT_A4R4G4B4,                            /**< 4ARGB16 - pipe1 useful for display */
    GRBFMT_A1R5G5B5,                            /**< 1ARGB16 - pipe1 useful for display */
    GRBFMT_R5G6B5,                              /**< RGB16   - pipe1 useful for display */
    GRBFMT_R8G8B8,                              /**< RGB24   - pipe1 useful for display */
    GRBFMT_A8R8G8B8                             /**< ARGB32  - pipe1 useful for display */
};

/* enum for rotation */
enum e_hwrotation{
    HW_ROTATION_NONE = 0,
    HW_ROTATION_CW = 1,
    HW_ROTATION_CCW = 3
};

/** enum used to describe order of pixels for first line that goes into BML (See IPP Spec, register IPP_SD_LOAD_BML_PIXEL_ORDER */
enum e_BMLPixelOrder {
     BML_GREENRED = 0,
     BML_REDGREEN = 1,
     BML_BLUEGREEN = 2,
     BML_GREENBLUE = 3
};

/** enums used to describe a frame to be used/generated by BML. see IPP Spec register IPP_SD_LOAD_LINETYPE0-7 */
enum e_BMLLineType {
     BML_LINETYPE_STARTOFFRAME = 1,
     BML_LINETYPE_ENDOFFRAME = 2,
     BML_LINETYPE_BLANK = 3,
     BML_LINETYPE_BLACK = 4,
     BML_LINETYPE_DARK = 8,
     BML_LINETYPE_ACTIVE = 13,
     BML_LINETYPE_ACTIVELAST = 14
};

/****************
 * example of BML line_type frame description:
 * nb_linetypes = 4;
 * line_type[0] = BML_LINETYPE_STARTOFFRAME;
 * line_type_nb[0] = 3;
 * line_type[1] = BML_LINETYPE_ACTIVE;
 * line_type_nb[1] = y_frame_size-1;
 * line_type[2] = BML_LINETYPE_ACTIVELAST;
 * line_type_nb[2] = 1;
 * //blanking to push out remaining active lines out of pipe
 * line_type[3] = BML_LINETYPE_BLANK;
 * line_type_nb[3] = 15;
 ****************/
struct s_grabBMLParams
{
       enum e_BMLPixelOrder pixel_order; /**< order of pixel color of first visible pixel */
       char nb_linetypes;                /**< number of different lines types that the BML will generate. 8 maximum. line_type[0-8] describe each line type. See IPP Spec register IPP_SD_LOAD_LINETYPE0 (and others)*/
       enum e_BMLLineType line_type[8];  /**< description of each line type */
       t_uint16 line_type_nb[8]; 		 /**< number of each line_type */
       t_uint32 interline_size; 		 /**< Number of pixels to insert as interline blanking (required at least for upscaling) */
       t_uint16 nb_embedded_lines; 	 	 /**< number of lines to skip at beginning of buffer (sensor-dependent). Offset will be nb_embedded_lines*x_frame_size */
};

struct s_grabParams
{
    enum e_grabFormat output_format; 	/**< the format the pipe is producing */
    t_uint16 x_window_size;          	/**< horizontal size of the picture coming from the pipe */
    t_uint16 y_window_size;          	/**< vertical size of the picture coming from the pipe */
    t_uint16 x_window_offset;        	/**< horizontal offset for the picture inside a larger buffer, for insertion */
    t_uint16 y_window_offset;        	/**< vertical offset for the picture inside a larger buffer, for insertion */
    t_uint16 x_frame_size;           	/**< horizontal size of the larger buffer, for insertion, otherwise must be equal to x_window_size */
    t_uint16 y_frame_size;           	/**< vertical size of the larger buffer, for insertion, otherwise must be equal to y_window_size */
    t_uint32 dest_buf_addr;          	/**< address of the buffer to put image in (original address of larger buffer, in case of insertion). Address of source data, in case of BML */
    t_uint16 buf_id;                 	/**< for DataDependacy accounting */
    t_uint16 rotation_cfg;         		/**< To validate hw rotation on HR pipe for specific format. Contains if rotation is left or right*/
    t_uint8 disable_grab_cache;         /**< whether to use Grab Cache method, necessary for eliminating penalties when storing in Macroblock format, and necessary if Stabilization is performed. Incompatible with insertion!
    										DEPRECATED: grab_cache is implicit for Macroblock formats, disabled for others. Still used for debug, though */
    t_uint32 cache_buf_addr;         	/**< address of width*2*16 bytes-sized internal buffer used for Grab Cache, must be in ESram! */
    t_uint8 enable_stab;             	/**< whether to enable accumulation curve generation, used by STAB component */
    t_uint16 x_stab_size_lr;            /**< size of HR for stab-lr use-case */
    t_uint16 y_stab_size_lr;            /**< size of HR for stab-lr use-case */
    t_uint32 proj_h_buf_addr;        	/**< address of buffers used to store 2 horizontal projection curves ('horizontal' is for the curve, not the projection) used for stabilization algorithm. Buffer must be in ESRAM (modified once per pixel) Size=2x2x(width*Word32) bytes (extra x2 multiplier due to implementation problem on 8820 hw)*/
    t_uint32 proj_v_buf_addr;		 	/**< address of buffer used to store 2 vertical projection curves ('vertical' is for the curve, not the projection) used for stabilization algorithm. Buffer can be placed in DDR (modified once per line). Size=2x(width*Word32) bytes */
    t_uint8 lr_alpha;                	/**< alpha value to set for ARGB* formats in LR pipe */
    t_uint8 keepRatio;                  /**< only keep 1/keepRatio frames (keepRatio=1 => all frames are kept) */
    struct s_grabBMLParams bml_params; 	/**< params specific to a BML grab (where execute() pipeID parameter is GRBPID_PIPE_RAW_IN) */
};

#endif /* _grab_types_idt */
