Sign Tool CLI U5500 U8500 M7400(1)
==================================

NAME
----
Sign Tool U5500 - required to sign the software used by ST Ericsson(tm) U5500/U8500/M7400 HW.

SYNOPSIS
--------
*sign-tool-u5500* [options] -p <sign_package> -s <sw_type> <input_file> <output_file>

DESCRIPTION
-----------
In order to download software to a mobile equipment the software must be
signed. Sign Tool CLI (sign-tool-u5500) is used to sign the software
using certificates obtained from so called sign packages.

ENVIRONMENT VARIABLES
---------------------
It is necessary to set *SIGNSERVER* and *SIGNPACKAGEROOT* (in Linux system) environment
variables if a sign server is going to be used to do the signing.

To use local signing you need to set enviroment variables.
If you want to use mirrored structure of keys and packages it is necessary to set *LOCAL_SIGNPACKAGEROOT* and *LOCAL_KEYROOT*
environment variables if local signing (user have access to keys) is used.
If you want to use common folder structure of keys and packages where keys and packages are stored in common folder it is necessary to set *LOCAL_SIGNKEYSANDPACKAGESROOT*
environment variable if local signing (user have access to keys) is used.

For more informations see file:signing.html[ Step by step information about setting up sign server ]

OPTIONS
-------
*-h, --help*::
    Shows the help information.

*-l, --list*::
    List sign packages on sign server.

*-p, --sign-package* '<sign_package>'::
    Set sign package to use. Use one of names from the list of sign packages on sign server.

*-v, --verbose*::
    To enable visual output to stdout.

*-f, --force*::
    Force overwrite if output already
    exists.
	
*--local*::
    Disables the use of sign server and uses local sign packages and
    keys. This requires LOCAL_KEYROOT and LOCAL_SIGNPACKAGEROOT system
    variables to be set.
	
*-s, --sw-type* '<sw_type>'::
    Set software type that is going to be signed. Possible values are:
    *auth_cert* | *issw* | *trusted* | *prcmu* | *mem_init* | *xloader* | *osloader* | *ape_normal* | *ldr* | *modem* |
	  *fota* | *dnt* | *auth_challenge* | *ipl* | *gdfs* |*flash_archive* | *itp* | *tvp_license* | *crkc* | *elf* | *frac* | *usta* | *imad*

*-ucf, --use-common-folder*::
    Disables use of mirror structure for keys and packages and uses
	common folder where keys and packages are stored.
	To use common folder in combination with local signing you must set 
	environment variable LOCAL_SIGNKEYSANDPACKAGESROOT.
	
*-ss, --sign-servers* '<sign-servers_list>'::
	Overwrites the value for the enviroment variable SIGNSERVER
	
*-spr, --sign-package-root* '<path_to_sign-package-root>'::
	Overwrites the value for the enviroment variable SIGNPACKAGEROOT	
	
*-lspr, --local-sign-package-root* '<path_to_local-sign-package-root>'::
	Overwrites the value for the enviroment variable LOCAL_SIGNPACKAGEROOT

*-lkr, --local-key-root* '<path_to_local-key-root>'::
	Overwrites the value for the enviroment variable LOCAL_KEYROOT
	
*-lekr, --local-encription-key-root* '<path_to_local-encription-key-root>'::
	Overwrites the value for the enviroment variable LOCAL_ENCRYPTIONKEYROOT	
		
ADVANCED OPTIONS
----------------
*-b, --hash-block-size* '<hash_block_size>'::
    Set flash archive hash block size.

*-k, --enable-pka*::
    Enable PKA (public key acceleration).

*-m, --enable-dma*::
    Enable DMA (direct memory access) acceleration.

*-la, --load-address* '<load_address>'::
    Set load address of ISSW in secure RAM or load address for generic signed software.

*-sa, --start-address* '<start_address>'::
    Set start address of ISSW in secure RAM or startup address for generic signed software.
	
*-r, --root-key-hash-type* '<root_key_hash_type>'::
	  Set root key hash type, possible options are: *SHA-1* | *SHA-256* | *SHA-384* | *SHA-512*.
	  
*-ph, --payload-hash-type* '<payload_hash_type>'::
	  Set payload hash type, possible options are: *SHA-1* | *SHA-256* | *SHA-384* | *SHA-512*.

*-sh, --signature-hash-type* '<signature_hash_type>'::
    Set signature hash type, possible options are: *SHA-1* | *SHA-256* | *SHA-384* | *SHA-512*.

	
*--buffer-size* '<buffer_size>'::
    Sets the buffer size to use when creating flash archives (in bytes). Valid suffixes are k and M, 
	  e.g. 128k or 1M. Default value is 256k.

*--xml, --load-xml* '<path_to_xml_file>'::
    Specifies name and location for output XML containing TOC-LoadAdress.

*--key-hash* '<path_to_key_hash_file>'::
    Specifies output path to key hash file.

*-sv, --sw-version* '<software version>'::
    Update signed header with specified software version.

*--major-build-version* '<major build version>'::
    Set major build version of signed ISSW binary. Value in the range 0 to 255 (hexadecimal values must start with prefix 0x).

*--minor-build-version* '<minor build version>'::
    Set minor build version of signed ISSW binary. Value in the range 0 to 255 (hexadecimal values must start with prefix 0x).

*--flags* '<flags>'::
    Set flags of signed ISSW binary. Value in the range 0x0 to 0xFFFFFFFF (hexadecimal values must start with prefix 0x).

EXAMPLES
--------

Command line signing
~~~~~~~~~~~~~~~~~~~~
Sign a U5500 flash archive:
*sign-tool-u5500* -s flash_archive -p U5500_SIGN_PACKAGE \~/flash_archive.zip ~/signed_flash_archive.zip

Sign a U5500 flash and customize loader:
*sign-tool-u5500* -s ldr -p U5500_SIGN_PACKAGE \~/loader.bin ~/signed_loader.bin

EXIT STATUS
-----------
sign-tool-u5500 returns a zero exit status if it succeeds during signing.
A non zero is returned in case of failure.

*0*::
    Success

*1*::
    Error in arguments

