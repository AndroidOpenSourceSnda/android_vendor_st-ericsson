/*
 * LPP_MessageBody.h
 *
 * Copyright (C) ST-Ericsson SA 2010. All rights reserved.
 * Author: sunilsatish.rao@stericsson.com for ST-Ericsson.
 * License terms: Redistribution and modifications are permitted subject to BSD license.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of ST-Ericsson nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL ST-ERICSSON BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * Generated by asn1c-0.9.21 (http://lionet.info/asn1c)
 * From ASN.1 module "LPP_PDU-Definitions"
 * 	found in "LPP_RRLP_Rel_10.asn"
 * 	`asn1c -gen-PER`
 */

#ifndef	_LPP_MessageBody_H_
#define	_LPP_MessageBody_H_


#include <asn_application.h>

/* Including external dependencies */
#include "LPP_RequestCapabilities.h"
#include "LPP_ProvideCapabilities.h"
#include "LPP_RequestAssistanceData.h"
#include "LPP_ProvideAssistanceData.h"
#include "LPP_RequestLocationInformation.h"
#include "LPP_ProvideLocationInformation.h"
#include "LPP_Abort.h"
#include "LPP_Error.h"
#include <NULL.h>
#include <constr_CHOICE.h>
#include <constr_SEQUENCE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum LPP_MessageBody_PR {
	LPP_MessageBody_PR_NOTHING,	/* No components present */
	LPP_MessageBody_PR_c1,
	LPP_MessageBody_PR_messageClassExtension
} LPP_MessageBody_PR;
typedef enum LPP_MessageBody__c1_PR {
	LPP_MessageBody__c1_PR_NOTHING,	/* No components present */
	LPP_MessageBody__c1_PR_requestCapabilities,
	LPP_MessageBody__c1_PR_provideCapabilities,
	LPP_MessageBody__c1_PR_requestAssistanceData,
	LPP_MessageBody__c1_PR_provideAssistanceData,
	LPP_MessageBody__c1_PR_requestLocationInformation,
	LPP_MessageBody__c1_PR_provideLocationInformation,
	LPP_MessageBody__c1_PR_abort,
	LPP_MessageBody__c1_PR_error,
	LPP_MessageBody__c1_PR_spare7,
	LPP_MessageBody__c1_PR_spare6,
	LPP_MessageBody__c1_PR_spare5,
	LPP_MessageBody__c1_PR_spare4,
	LPP_MessageBody__c1_PR_spare3,
	LPP_MessageBody__c1_PR_spare2,
	LPP_MessageBody__c1_PR_spare1,
	LPP_MessageBody__c1_PR_spare0
} LPP_MessageBody__c1_PR;

/* LPP_MessageBody */
typedef struct LPP_MessageBody {
	LPP_MessageBody_PR present;
	union LPP_MessageBody_u {
		struct LPP_MessageBody__c1 {
			LPP_MessageBody__c1_PR present;
			union LPP_MessageBody__c1_u {
				LPP_RequestCapabilities_t	 requestCapabilities;
				LPP_ProvideCapabilities_t	 provideCapabilities;
				LPP_RequestAssistanceData_t	 requestAssistanceData;
				LPP_ProvideAssistanceData_t	 provideAssistanceData;
				LPP_RequestLocationInformation_t	 requestLocationInformation;
				LPP_ProvideLocationInformation_t	 provideLocationInformation;
				LPP_Abort_t	 abort;
				LPP_Error_t	 error;
				NULL_t	 spare7;
				NULL_t	 spare6;
				NULL_t	 spare5;
				NULL_t	 spare4;
				NULL_t	 spare3;
				NULL_t	 spare2;
				NULL_t	 spare1;
				NULL_t	 spare0;
			} choice;
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} c1;
		struct LPP_MessageBody__messageClassExtension {
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} messageClassExtension;
	} choice;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} LPP_MessageBody_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_LPP_MessageBody;

#ifdef __cplusplus
}
#endif

#endif	/* _LPP_MessageBody_H_ */
