alias S_AS_QUICK_AS_POSSIBLE OMX_TRUE

OMX_SetConfig my_sink_VPB1_1 IFM_IndexParamFakesinkPathname contentURI=FAKE_SINK_PATH_BACKUP_IMAGE

if S_IS_LIMIT == OMX_TRUE
	OMX_SetConfig my_sink_VPB1_1 IFM_IndexConfigIqtCaptureMode nSaveMode=2 bSaveFrameCount=10 nSaveFirstFrame=1 bSaveFrameByFrame=1 nFrameSkippingNumber=0 nInstanceNumber=FAKESINK_STILL_INSTANCE_1 nAcknowledge=OMX_TRUE
else
	OMX_SetConfig my_sink_VPB1_1 IFM_IndexConfigIqtCaptureMode nSaveMode=2 bSaveFrameCount=10 nSaveFirstFrame=1 bSaveFrameByFrame=1 nFrameSkippingNumber=0 nInstanceNumber=FAKESINK_STILL_INSTANCE_1 nAcknowledge=OMX_FALSE
endif

OMX_SetConfig my_sink_VPB1_1 OMX_IndexConfigCaptureMode bContinuous=0 bFrameLimited=0 nFrameLimit=0
OMX_SetConfig my_sink_VPB1_1 OMX_IndexConfigCapturing bEnabled=RAW_ENABLE

do $(IMG_SCRIPT)/unitary/features/cam_autopauseaftercapture.ite OMX_FALSE
#do $(IMG_SCRIPT)/unitary/features/cam_capturemode.ite S_AS_QUICK_AS_POSSIBLE S_IS_LIMIT S_NB_FRAME_LIMIT
OMX_SetConfig camera OMX_IndexConfigCaptureMode nPortIndex=CAM_PORT_VPB1 bContinuous=S_AS_QUICK_AS_POSSIBLE bFrameLimited=S_IS_LIMIT  nFrameLimit=S_NB_FRAME_LIMIT

mmte_sleep IMG_WAIT
do $(IMG_SCRIPT)/unitary/features/cam_configcapturing.ite CAM_PORT_VPB1 OMX_TRUE

#do $(IMG_SCRIPT)/unitary/features/cam_burstpicture.ite S_AS_QUICK_AS_POSSIBLE S_IS_LIMIT S_NB_FRAME_LIMIT

#OMX_SetConfig camera IFM_IndexExtConfigCapturing bEnabled=OMX_TRUE nPortIndex=CAM_PORT_VPB1

#mmte_sleep 20000
#mmte_sleep IMG_WAIT_LONG

#OMX_GetConfig configGet camera IFM_IndexConfigCommonOpMode_Check 

alias COUNTER 1

if RAW_ENABLE == OMX_TRUE
	if S_IS_LIMIT == OMX_TRUE
		loop S_NB_FRAME_LIMIT
			EventExpected /tmp/Raw_Saved_Ins$(FAKESINK_STILL_INSTANCE_1)_N$(COUNTER) 20
			arithmeticalias COUNTER+ 1
		endloop
	endif
endif
echo File_saved


